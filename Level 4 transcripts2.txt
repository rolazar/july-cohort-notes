///// FILE: "Level 4/transcripts 2/May 1, 2025 21-39.txt"

Transcript from May 1, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 This is week eight, do announcements, review.
 If there's still time, we can go into the second hour a little bit.
 The topic there is AI, the new AI topics. Then in the third hour, time for many evaluations, or work on the assignment, and I'll take a poll towards the end of the third hour. Now it's time to mark your attendance.
 You have, if you're here right now, just head on over to your code X account and mark
 yourself as present.
 And now time for announcements.
[00:01:21]
 Let me load that for you. Okay, so again, in the class schedule, they could look at it. last day of class Saturday May 24 final evaluations is Monday 12 to Saturday May 17 so that's basically
 So these are the weeks laid out right here
 Evaluations week 10
 evaluations week 10.
 That's the 12 to the 17th. And then
 presentations from 19 to the 24th.
 Presentations, that's when you practice presenting your
[00:02:44]
 your capstone project, first you'll practice with each other, and then
 you'll present them to the cohorts and the codec staff. That's your practice
 or being hired. So you should know everything about your website, not just the front end, but also the
 back end.
 You should also know everything about the code.
 You should know the technologies that you're using, such as React, Redux, CSS, AWS Lambda, DynamoDB, Amazon S3, Amazon Cloudfront, Google Cloud,
 App Engine. So you're using a lot of technologies. Webpack, Babel, you use just, you use detest.
[00:03:46]
 So, you know a lot.
 And you need to show people, you know a lot.
 But to show them, you should also present it properly.
 So you're gonna be ready.
 You're gonna be ready after that
 after presentations week.
 So get ready.
[00:04:13]
 We're going to, and also I have here
 Capstone Finelli.
 So that's when week nine, that's next week.
 That's when we start polishing our capstone. I'll wish it and make it presentable
 through the
 the codex school.
 The survey is still available. It's right here from Lillian.
[00:04:58]
 This one, you know, just make sure you get a chance to fill it in. Because they just want to make sure.
 It's usually usually the level is supposed to take up to eight weeks to finish.
 But it's been extended to give you time to catch up and finish your work.
 So they want to do a survey and make sure everything is okay.
 Or that if something is not okay. I've been using the second hour to give you chance to work and catch up.
 Usually I would be teaching from the first hour to the second hour and then the third hour,
 sometimes lab or working on assignments or
[00:06:05]
 sometimes some more teaching. So I've had to slow it out down for you guys so
 that you guys can catch up because I know some of you have work, some of you
 have been absent, life gets in the way, health and medical gets in the way so I had to give you time to catch up.
 So let me, let me, let me just remind you to fill it in this survey And you can be honest.
 I won't know what your answers are.
 Only the upper stack will.
 Okay.
[00:07:07]
 Many evaluations, again, the time limit is 60 minutes per submission.
 You should arrange your notes.
 So that you can go through that many evaluation quicker.
 You'll know exactly what to talk about. Use that add submission button and be placed on the waiting list and also qualify for the on time points.
 So we're still doing the corrections for many evaluations week seven.
 Until Saturday. So you have a few more days for corrections here. Other than that, the
 rest are closed. Many evaluations for week eight, they close next week assignments.
[00:08:07]
 So the Redux one was due today before class.
 I mean, I mean, not due today.
 It was closed today.
 It was closed today before class.
 That engine one was due today before class. That engine one was due today before class.
 Take a look at it.
 Let's make sure you saw the,
[00:08:38]
 the submission requirements here.
 The submission requirements, it's longer now, so in the
 online text, GitHub repository, GitHub LiveLink, AWS Lambda LiveLink, basically
 the deployed site, or the deployed backend. And then there's a Cloud front live site link.
 And there's also the Google Cloud App Engine live site link.
 And then some credentials like emails and passwords
 for logging in.
[00:09:25]
 like emails and passwords for logging in.
 Okay, so make sure you include those in the online text.
 Or if you missed it, you can just add it to the comments.
 Of your submission. Make sure if any of the assignments closed on you, but you need more points on them.
 Contact the student success team.
 Let them know which assignments you need reopened and why you've fallen behind.
 Practice problems posted here on the side, in the sidebar.
[00:10:07]
 You'll need to know some of them.
 You'll know which ones you need.
 They're all useful, but some are more important than others.
 But you'll know by the end of today which one's you should really focus on
 Help seeker so there's no new questions, but make sure if you have any questions posted in July cohort instead of being stuck for a day
 posted in July cohort and you'll get unstuck faster
 Notebook LM in July cohort and you'll get unstuck faster.
[00:10:48]
 Notebook LM.
 So there's the transcripts have been added.
 German's link wasn't working. Herman's link.
 Oh, let me see here.
 Oh, is this calendar?
 Just send a message then.
 So if this one's not working,
[00:11:31]
 invalid, okay, I'm just going to put his gonna put his
 gonna put his name here.
 This contact and directly. Think that will work.
 Yeah, you can just send them a message.
 Okay, all right, so what else? I should have removed this by now.
 But yeah, make sure you go through these days in order and get all the notes and concepts
 that you need from them. Don't skip the review sessions,
[00:12:46]
 because sometimes I tell you new things
 in the review session that you should be taking notes on.
 But, okay, so now we're gonna review.
 You should have most of the notes,
 but if I say anything new and the review,
 make sure to mark those things down.
 Take notes.
[00:13:14]
 Also, I have your microphone ready
 for any questions you might have
 or for the many evaluations.
 Okay, so now it's time for the review.
 Okay, so install external. So because external are not bundled, they must be installed separately to the app works.
 So in this slide, we demonstrated that, let me just load the project here. Okay hold on, just loading it up. [BLANK_AUDIO]
 [BLANK_AUDIO]
[00:15:00]
 [BLANK_AUDIO] There's the two.
 There.
 And solid sternals. So in the back end.
 In the Google Cloud backend. We had the disk folder and we compiled our bundle
 there in the disk folder.
 And the day before we established that the bundle needs, as I know, the transform Transformers externally. So in this slide,
 we demonstrated that if you don't include the node modules,
[00:16:17]
 if you don't include the node modules,
 either here, actually,
 either inside of here or out here, if you don't include it, the app will not run,
 because it needs Xen for platform per system.
 So to test it out, we temporarily set a port in the environment variables.
 It's not here anymore, but we did have a port just to test it out because our app needs a port.
 And then we found out after deleting those modules our app didn't run.
[00:17:23]
 So we installed it. When we installed it, it added an entry here,
 because this this package JSON file was basically didn't have any dependencies. Well, now it has one, in over-transformer because it needs to be installed separately.
 So now the package JSON inside of the disk folder should contain the dependencies
 that could not be bundled.
 When the disk folder is deployed to App Engine, it will install these dependencies.
 And run it from the App Engine side.
 It'll run the start script automatically, and it'll automatically run NPM install,
[00:18:20]
 which will install this.
 And we needed to test it out. We use npm, not PnPM.
 Because npm, it uses, it uses, it uses package JSON lock.
 And that's the one that App Engine is looking for.
 Sometimes if you use K&M, it might interfere with your other node modules, if you put it in here.
 But now that, you know, we tested it out and we saw that it doesn't run.
 If node modules is not installed, I mean, if it doesn't run, if node modules is not present, we can delete this now because App Engine doesn't download this anyways, right?
[00:19:30]
 It doesn't download it right here in the Google Cloud Ignore. It ignores node modules.
 So we can save the space and delete this node modules folder now.
 I'm going gonna delete it from
 final explorer, it's just easier there.
 Okay. We also saw that this, even if node modules is not in the disk folder, when we are running,
 when we're trying to run this locally, this bundle, it'll, it'll look up the chain so it'll it'll first look for node modules in the
 disk folder if it doesn't see it there it'll look in node modules over here
[00:20:32]
 outside of it in the root folder. So just to demonstrate I'll try to run that bundle file from the route.
 And remember, I've deleted the node modules inside of the disk folder.
 Now there's only the node modules in the root folder.
 So node is the command to run a JavaScript file. The
 JavaScript file I'm going to run is in the disk folder. That's the bundle.
 It's gonna first look in the disk folder for as you know which
 transformers. It's not gonna find it. Then it's gonna look in the root folder.
[00:21:21]
 And it's going to find it there and then run it.
 This works, yeah. Listening on local host 8000.
 You can even double check if there works.
 [INAUDIBLE] I'm just open it and I'm open.
 I'm open for host $8,000.
 Yeah, it's working. Let's see if that AI route is working also.
 Yeah, that's working too.
[00:22:11]
 This is the AI route.
 AI is working even though I deleted it in node muck in the disk folder.
 I mean, I deleted node modules in the disk folder.
 As long as it can find it, it'll work.
 And as long as app engine can install it, it'll work.
 And app engine can install it because it's in the package JSON file here.
 App engine will install that.
[00:22:56]
 We also deployed the AI to App Engine.
 So basically, we deployed the Disfolder, but we had to remove the port, the temporary port, otherwise it might interfere because App Engine uses its own port and if we try to say use port 8000 instead,
 it might not be the right port and it won't get a connection. We're supposed to be using map engines for it.
 Map engine provides the port environment variable.
 It's own port environment variable.
 You don't need to specify it.
 And make sure a copy of the AI models folder
[00:23:44]
 is in the disk folder.
 So here in the disk folder there's AI models.
 I could have just copied it from here and then put it in there.
 That way when it's in here, you don't have to, it doesn't have to be redownloaded again.
 All you have to do is just copy it, which is faster than downloading it.
 And App Engine will know we should get a response from the deployed
 back end.
[00:24:33]
 So it's deployed, and let me see here. the link in the npm script.
 Yeah, it's this one right here.
 I created a link called open live, which means it'll open the browser tab to the live site right there.
 This was back when we just established Google Cloud App
 Engine without the AI.
 But now that there's AI, I can run this code here.
 Well, I can stop this AI local.
[00:25:29]
 I can stop the local one.
 And P.M. Run open live.
 This will open the live one.
 It's right here.
 So it's live and then the AI should be able to take a question here.
 Oops.
 Okay, let's see if this works.
[00:26:11]
 All right, so the question was what is California?
 And then I gave it a context from Wikipedia's,
 which I showed to you guys yesterday.
 Actually, I got just one paragraph. When I got a bigger paragraph, like three of them,
 it couldn't answer it.
 And the reason was because of
 the next slide here.
[00:26:54]
 Very parameters, special characters.
 The browser may insert special characters
 into query parameters.
 So in this case, we saw that when we try to send query
 parameters to the backend AI server, spaces were automatically replaced by I'll show that again here.
 I'm going to do a simpler question.
 Actually, yeah.
[00:27:34]
 I'm going to send the question to the live AI here.
 Question is, what's my name and then the context is my name is
 Oh, sorry. Okay, so there's no I'm using spaces here, but then when I send it, the spaces get
 replaced by percent 20. Sometimes it'll get replaced by a plus.
 So let's special characters when you're using it, you know, great parameters. Aye interference.
 Aye interference.
 So we saw that the special characters can interfere with Aye answers.
[00:28:38]
 The Aye may not be able to answer or it might respond with percent 20 or a plus in the answer. And you don't want that.
 And the way I did that was, I'll guess I'll put the show again.
 What is California?
 What is California? And then the context
 will be
 there goes the wiki page. I'll give it a little bit more than one paragraph.
 I was able to answer the question when I gave it one paragraph like this, but I'm going
[00:29:33]
 to give it a whole section here.
 Give it the whole section.
 And then let's see.
 What is California says 20.
 Probably sees a whole bunch of percent 20 and things okay must be 20.
 California must be 20.
 Okay, so the AI got, you know, the data went to the AI wrong. I mean, the AI was just seeing a whole bunch of percent 20s in there.
[00:30:19]
 So the way to get around that is use the HTTP method called host.
 The send data as is without replacement characters.
 And then that's when we went into taking notes and
 express.md for details.
 And you can create a link like this with
 In the square brackets that's the text that will be displayed
 And then parentheses that's the path to the file.
[00:30:58]
 So if I didn't have this, actually if I click here, it loads to express envy, preview.
 So we started talking about the HTTP method called post.
 So post is a H-C-T-P method, a way to communicate with servers like to get methods.
 So post is one of the methods that a client can talk to a server.
 And the way we tested it was with these steps right here.
 So I'm just going to go through this in the screen share here.
 Okay, right here. Add to the AI backend index TS.
[00:32:16]
 So let me just get that followed.
 So we can see it index.ts.
 We're going to add app.post.
 There's a path.
 And then there's a route and a route handler. Okay.
 Okay.
 Okay.
[00:32:55]
 Okay.
 So here's the index file.
 This is what we added right here is a method not just like a function that's connected to an object.
 Yeah, that's a method, but it's also a HCT method like a channel that clients and servers
 use communicate.
 It's like a channel.
 So, think of this like channel one, communicate on
[00:33:27]
 channel one. This one is communicate on channel two. Think of it like that. So not
 all of these are an object method, but it's also an HTTP method. A channel which the client and service communicate on. So add the round handler post demo.
 So post demo, we added that round handler right here post demo because it's it's a demonstration of post method and all I did was
 pretty much copy the other route API route.
 Then we tried to use a browser URL bar to send the request to post demo path and there was an error there. start and start to
 So if I try to communicate with that post demo path from the browser, it won't work because the browser using the get method to
 to listen to this, to listen to this route.
[00:35:32]
 We are using the post method.
 I can put a note here since this is new code.
 Use the HCTP method post to listen on this route.
 So post is like a channel.
 You can put that here post is like a channel
 that the client and server communicate Then we started using Postman as a review.
 We usually use the get method.
[00:37:00]
 We've been using the get method when using Postman. Then we change that yesterday.
 Now we know two methods,
 HTTP methods that is.
 So there's different methods here.
 Brouser is communicated with the get method,
 or think of it like the get channel.
 What I mean by that is this right here.
[00:37:34]
 Whenever you send, whenever you visit a URL,
 it's using the get method or the get channel.
 So that's what this means here. You will send your request using
 the get channel, which will not work. See, I don't have a listener on the get method, or the get
 channel, or the hour read, you want to conceptualize it. So we get an error there.
 conceptualizes so you get an error there. But if I use a post method, I should get a response back there We're going back to the get method. We have the API route and you put query parameters on it, you can see it here in URL.
 And then you can send it, 'cause the API route is listening on the get channel, and get method.
[00:38:57]
 Here, just API route, listening on the get method.
 under get method. And this is a response. It basically sees our query parameters here.
 Same as read right here, but it turns it into an object for us. Or no, this is not an object. This is all the one string j's on string
 Okay
 And Then we started sending post request to postman
 man. And there's that drop down where we can choose HCT method that we want to use. So we picked the post method. And we got a successful response. I showed you that already. Post data. So using the, they're here in the URL.
 And you saw that I had query parameters appear in this URL.
[00:40:35]
 They're exposed.
 They're exposed.
 Like I can click on the back button.
 Like if someone got off the computer, I can click on the back button. If someone got off the computer, I can click on the back button.
 If there was someone's password up here in the URL box, I can see their password and their email.
 So it's not secure. It can pass that data up here. With the post method, you can send data,
 but not with these, um,
[00:41:13]
 with this color.
 You don't need to send data to query parameters.
 You can, but you don't want to, then,
 this needs a purpose of using the post method.
 So we're not sending data through the query parameters,
 so that's secure now.
 It's not going to be exposed in the browser. to send data. We need to choose the body tab right here. Okay, so we're switching from
[00:42:00]
 the parameters because this was for query parameters.
 Right here, it adds query parameters.
 You see that?
 That's grams.
 But if you want to add data, hidden data,
 pick the body tab.
 And then you can choose a data from there
[00:42:22]
 and notice that you don't see that here.
 It's not exposed.
 And you have to choose this one here.
 Xwww, form URL encoded. Okay.
 Okay.
 And so you did that.
 Request body.
[00:42:59]
 So, express must be configured to receive data through the post method.
 The hidden post data is received by the back end server and request on body,
 not in the query, but in the body.
 So let me show you what I mean here, or clarify that.
 Here's request query. That's when you send query parameters.
 You see them here here.
 You're this content.
[00:43:37]
 But if you send
 with a post method and you send data it's gonna be
 the body property.
 And we use the debugger to observe that request body is not in the post demo handler.
 So it was not there before.
 It was only when we added this code right here
 that we had access to that data.
[00:44:22]
 So let's look at that, let's look for that data. So let's look at that and switch for that code. That is in the index file.
 Here it is form URL encoded.
 And we're able to send, we can send this to the,
 actually what's gonna happen?
 I'm using the post method here
 and trying to connect to the API route,
 what's gonna happen?
[00:45:14]
 There's going to be an error
 because this API route is only listening
 with the get method or the get channel.
 Channel number one.
 It's only this one that's listening on channel number two
 or the post method.
 So there should be an error because there's nothing
[00:45:38]
 listening on the post channel.
 So I'm going to try to send the request to the API route through the post method.
 There should be an error. There it is. There's nothing's listening there.
 I changed it back.
 Now actually, um,
 it switched to the correct API here
 AI
[00:46:11]
 it's a I route
 Big send
 or was it something else
 the notes.
 Now post them all.
 You can set the data to the post demo route which is this thing with the post method. Here's the data right here
 in form URL and code. It returns to us. It shows us that the query parameters,
[00:46:56]
 the ones that were up here, like if you put them up here, it's empty.
 But the data was stored in this modding property.
 And we see that the question and the context is there.
 This data is accessible to the mod property in that material.
 You can even put a debugger there just to watch it happen. [inaudible]
 And we have starts.
 [inaudible]
[00:48:00]
 And we request
 [inaudible] and request. If you go here, you can now look at this request object.
 There's a request object. It has a body property.
 The body property is an object. You see here the curly braces. That object has two properties.
 When it's context, when it's question,
 context is a string.
 That string, the value of that string is my name is L'Ozzard.
[00:48:38]
 Question is a property, and it's also a string.
 The value is what's my name. If we scroll down some more,
 we see that query periods in the object because we didn't send query parameters. We sent
 post parameter for URL encoded parameters.
 or URL encoded parameters.
 Or URL. So I'll just press play here.
 Basically, this data is going to get the request body
[00:49:16]
 and put it in this property right there.
 And then it's going to show it to us right here.
 So the body. And then it's a to show us right here. The body and the question in the context.
 And then we sent the response that includes the data from the request body.
 So you just saw that, we use the debugger, we access the request body and sent that data back just to make sure that we were able to send it and also receive that data.
 And just check what's the next slide here.
 And that's the last slide of this review session. So now we're going to go into the break.
[00:50:24]
 So we're basically, we were able to get the post method
 mark.
 And we're able to receive data and access the data
 to it.
 Now we're going to after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And now we're going to continue with new topics on artificial intelligence.
 So you see it so far that it's not quite complete yet.
[01:01:32]
 So we're going to keep on working with our, you know, we were just working with artificial intelligence in the back end.
 We're going to finish that up.
 And then we're going to head on over to the front end. First, we're going to convert the AI route. We're going to convert it to the post
 method, because right now it's listening on the, on the get method. So use the post
 method to securely send unaltered data through the AI route.
 Because right now it's listening on the get method. And remember if you do that,
 and you send query parameters, it adds percent 20 or plus sign.
[01:02:28]
 So we're gonna use a post method and we're gonna send URL
 encoded parameters so that they come in on altered
 and also secure because you don't see them in the URL bar.
 So this one's going to go into the AI notes.
 So we're switching back to the AI route. So we're going to use the post method. And we're going to edit the index TS file.
 Use the post method.
 We're going to use a data from request body instead of request query. Instead of query parameters, we're going to get the URL encoded parameters.
[01:03:55]
 Okay, so we're going to start from index TS.
 Next TS. There's index TS, what do we need to do?
 Change the AI route to use the post method.
 So the AI route is using the get method right now.
 How do we change it to the post method?
 Just like that.
 And you get to the post method.
[01:04:48]
 Use the
 H-T-P method
 post
 to receive
 data securely and unaltered unchanged, basically,
 without special characters, like percent 20.
 So that's changed now.
[01:05:40]
 In the route handler, in the AI route handler,
 use data from request body.
 So we have some routes, and one of those routes is for AI.
 And we are getting the question and context from the query parameters, that's not going to work anymore, because they're going to be in the body now, not in the query object.
 Then use Postman to view the response. So oh yeah, let me run this server.
 I stopped it.
 I will
[01:06:49]
 start it in the debugger mode
 so that we can watch it come in
 and here it starts right there
 This is gonna be
 And game start
 Run start to run start to.
 Instead of calling it build, I change it to start to because they're related.
[01:07:31]
 I always run them in pairs anyways.
 And I change the build command to, you know, actually building for production.
 I mean, I change the build script.
 Okay, so it's running now. I can use Postman to send a request to the AI route.
 Notice I'm not providing any query parameters here.
 So it's not going to receive them through the query object.
 It's going to receive them through the body object.
[01:08:16]
 And what values I'm like going to provide?
 I'm going to provide a question and a context.
 I'll send it, then the bugger should stop, and it context. I'll send it, then the debugger should stop, and it does. So that
 request came in, and the request has this request object is right here. You see
 there's currently braces. The data type is called incoming message.
 type is called incoming message. There's the body property, which is an object. It has
 this object has two properties, the context and the question. And we are going to destruction. So this body object has two properties and we will
[01:09:06]
 destruction them into these variables. Remember, the job of script is going
 always from the right to the left and always from the inside to the outside.
 So right to that, starts here.
 One body object gets the structure into two variables right there.
 And extract the question and the context from there.
 And we can see it now.
 Right here the question is now what's my name and the context.
[01:09:44]
 These are the variables. These are these
 variables right here. See, they got extracted. The value's got extracted into those variables.
 Now we're going to let we've already tested this function. So we should get an answer.
 Okay, I'm going to stop these. I mean, can remove these, let it do its thing.
 Okay, we got an answer, there's the answer right there, roll this out.
 And Postman right here is still waiting, you see these, this line is still waiting
 for the response.
[01:10:22]
 So I'm going to let it send the response now, which is supposed to be the answer.
 And it's just a string right here. It says roll a zar.
 I change this. Instead of roll a zar, I'll change it to
 Roll is our I'll change it to
 Jake or John whatever
 Let's try it on click send
 I'll stop this people over now
[01:11:02]
 And we see the response that we got with Jake.
 I'll change it to John.
 And then we should expect this to change the John down there.
 There it is.
 We got the answer.
 That's the response.
 So we viewed the response from Postman. So this is the next slide. Front, front, front end AI interface.
[01:11:48]
 So we got the the back end working fine now.
 We were able to send post request using postman.
 Now we can start working on the front end to have some kind of interface.
 So we're going to create a front end user interface that accepts a question and the context.
 So we're going to start working in the front end now.
 That's copy this into our notes and I'll just put a thing here, a question and context.
 There's also a code sample there.
[01:12:56]
 So I'm going to put it after this.
 We're going to create a React component called AI.
 It's going to render a form that accepts a question in the context.
 And we're going to use the name attribute.
 To easily access values.
 Through form elements.
 And I'll show you what that means.
[01:13:34]
 So I'll hit a load up the front end now. [ Pause ]
 >> First step.
 Create a React component called AI.
 I'm just going to put it here in the views folder.
 There's a lot of components here.
 You could start organizing them by page.
 I'm just going to leave it like this for now.
[01:14:26]
 It's all in the group folder.
 AI.GSX.
 Remember how to make a React component.
 Export function.
 This is a React function component. We use a function to create it.
 And it should return some kind of JSX. So I'll just put empty empty element right now, empty tags. Remember to import react. And I want to render this
 in the home page. So I guess I'll use this. I haven't updated this to use.
[01:15:26]
 Oh yeah, this updated.
 This is updated to use Redux,
 I haven't updated this one again, but let's see.
 Let's change this component.
 Now, I'll make it easy and just make it obvious.
 I'm gonna put it here.
 Load that AI.
[01:15:48]
 I will actually, I'm gonna disable this.
 [
 So this home page should render the AI component.
 And you just start this and here, start. and it just holds all my extras. And it holds your actual towels.
 Okay, so it's started, I'm gonna just,
 it's rendering on the local host 8000.
 Or 80, 80, I mean, I can open up a browser, but I'm gonna just use the S-code D-loader.
[01:17:11]
 So there's nothing in the AI route. I mean, the AI component, so let me just fix that.
 It changes to each one for now.
 Our official intelligence
 and so close to going here
 and put it underneath the code
 I'm just going to go down there. Let it render a form and that accepts a question and a context.
 Okay, so it's going to render off the one there.
[01:18:07]
 And then, so since I'm going to, since I want to render these side by side, react will
 allow that, so I need to surround them with only one element.
 So I'm going to just put them in a bit.
 Okay, there's the dip, there's the fork. I want to do taking a question.
 So I'm just going to make this quick and easy though, the quick and easy way.
 And then the context, I'll use a text box for that. A text area.
 Just take a look at the spacing.
[01:19:15]
 The next each other. I'm just going to put VR here.
 Sc a bootstrap grid system or something like that to organize these.
 So it looks like this now. There's a question in the context. Oh, I should also put a submit button. [BLANK_AUDIO]
 If you look at it, okay, there's a submit button right there.
 Take the question and the context and this is the myth button.
 Use the name attribute to use the access values to inform elements. So I'm just going to
 add the name attribute to here. So this input, this for the question, so I'm going to put
[01:20:48]
 question here. And this input right here for the text area, this is for the
 context, so I'll put context here. So that's what it means by use the name
 attribute for easy access to the form elements. And you'll see what this means.
 For the code sample, you have the input element and it has the name attribute of question and the text area
 So that's the, so handle the form submission and get the result.
 Okay so let's copy is first. A lot of this should be reviewed except for the,
 maybe the form elements part might be new to you.
[01:22:32]
 If you haven't discovered it yet.
 We're going to set up the debugger and explore something
 in the form handler. So I didn't make a form handler yet, so let's do that now.
 So how do you handle a form submission? Basically go to the form element and on submit you give it a call
 back I haven't made it yet but I'm going to make it as gonna be called
 handle submit so basically it's gonna call a function when it's when this form
 is submitted.
[01:23:27]
 I could even put this function outside of the react.
 Wait, no, I won't actually, I won't be able to, but I'll put it outside for now.
 I'll put it outside for now so we can see what happens.
 Okay, so it's going to follow the handle submit
 handler.
 As usual it takes in the event.
 If I try to make this the event object,
[01:24:02]
 I'm just going to show the red line here. So that's why I'm just going to put
 any. If you want to know the exact data type for this, it's going to be this is how you find out.
 You just take that out and just put a temporary arrow function.
 Let me see if I did it.
 Let me try it again.
 Okay there. I just put parentheses. So it should be,
 see this is a, you see parameter, I mean parentheses here.
[01:24:57]
 The parentheses is, you know, it represents a function taking in a variable, the event variable.
 It represents a function taking in a variable, the event variable, and the data type is form event, HTML form event.
 So this is how that would look.
 So form event, right here.
 And then, okay, okay it again it has angle brackets and it says
 HTML form element so angle brackets put it in your HTML form element right there
 so that's the exact type.
[01:25:45]
 Now we don't have any error here.
 And we'll submit.
 There is no error.
 Okay, so we can basically just reverse engineer the type.
 If you don't know how to reverse engineer it, but any,
 but if you know how,
 put the exact type there.
[01:26:12]
 You're going to add a debugger here, but as usual, you want to do prevent default.
 And did you notice that too, the properties popped up here, prevent default.
 So in this case, we get, you know, the IntelliSense.
 And we remove the TypeScript error. If you know the exact data type that grows there.
 Then I forget to paste this into the notes. system so it melts. We're going to use a debugger to explore event target.lements.
 We're going to extract the question and the context values from the event target elements.
 We're going to send that question and context. So, Molly, who will call, get answer.
[01:27:48]
 We don't have that one yet.
 At least not in the front end.
 Okay, so this is, we're going to observe the, we're going to set up a debugger.
 Right here and watch the, we're going to look at the event object.
 And the question I'm going to put here was my name and the context.
 the context. Submit it. It gets stopped by the debugger.
 Now I can explore that event variable.
[01:28:35]
 Event object.
 So here's the event object.
 It has some properties. One of those properties is target.
 And we don't directly see a property called elements. I mean, we can see, we can see the element sets inside of this form. When it's a little bit harder,
 like the input element for the question is in
 position two.
 The input element for the context is in
[01:29:20]
 position six, but there's a easier way. And it's not here. It doesn't show up here.
 Maybe it's in the prototype.
 Nope, it's not even there. So
 it could be like a secret variable, then you can see it if you pick the debug console.
 Event dot target. variable then you can see it if you take the debug console event.target.elements right
 there. What is this object? It's this one here. So now it's organized. My input for the question is in position zero. My input for the
 context is in position one. Now it's in now it just has the inputs. But what's even better is I have a context
[01:30:29]
 property that directly takes me to the context input and I have a question property
 that directly takes me to the question input. You see that?
 That's because of this name.
 If I don't put a name, then it won't have any property that
 connects it.
 So I'll show you what happens if I take out this name here.
 Let's try that again. Okay, can you use this? Do you have no console again?
[01:31:31]
 Okay, Chris is asking why the text area and why input field.
 So question, one reason is so that I can, you know, show you that there's a difference between the elements instead of everything being input. We're trying something else different.
 So text area is bigger. You can actually resize it and it puts
 it meant for like bigger input.
 So you can put more things in it.
 The question, since I've just been asking one small question,
 it's a smaller input.
[01:32:18]
 That's another reason.
 But you could just put--
 if you want to have space for like big questions, you can use a text area for this to
 I just wanted to use different elements doesn't have to be those use whatever works
 So this one is super resizable, but it's stuck right now.
 So the event variable has a target, has some elements.
 If I look at it, I can see the input elements in order, but I lost the question in the context.
[01:33:07]
 So I'm going to put those back.
 I don't see the question in the context. I don't have direct access.
 I want to have direct access by the name.
 So I put the name back.
 I'm going to use to admit this.
 I guess it doesn't save things when you put something at a text area.
 I don't see the automatic pop up here.
[01:33:50]
 Okay, so we've bent the target. Done elements.
 Now I have access to the question and the context.
 The context is the input element.
 I don't want the input element. I want the value.
 put element. I don't want the input element. I want the value. So this context has a value. It doesn't show you. So let me just go like this. The event.target.element. target. Element
. context.
 If I put.
[01:34:35]
 value.
 You can see the value is my name is
 role is that's what we really want.
 We want the value that's in it.
 We don't want the actual element. We want the value.
 So one way we can simplify this is we'll just say, I'm going to, you know, there's a event. It has a target. It has some elements.
 I'm gonna make a shortcut and I'll just say that's the form.
[01:35:12]
 Let's just say that's the form. And, and it has this TypeScript area. I'm just gonna put in here.
 For now, get rid of this.
 Oh, it's not. It's not going away.
 What way to make it go away is this way?
 Would that be ugly?
 So I'm just going to see if I put that in.
 It's not going away.
[01:35:46]
 So the best choice here is just to annoy you.
 I mean, it will still compile.
 But it annoys me, and I don't want to make my code agree
 with those parentheses.
 Just going to put any there.
 But now I know that the form-- I have a form, but I'm just going to put any there. But now I know that the form, I have a form.
 But I'm just going to connect it to the elements object here.
[01:36:09]
 And I'll show you the effect of that.
 And we put a leaf over down here instead.
 Okay, so it's stopped on the debugger. This form, what does this form look like?
 If I type here form, it looks like this,
 and it has a context property, and it has a question property.
 This form is an object that has a context property and a question property.
 So I can actually go like this form.context.
[01:37:10]
 If I do that, this one gives me the element.
 I don't want the element, I want the value.
 So form.context.value.
 There it is.
 There's the actual context that I want.
 So now that I've reversed engineer this, I can go like this.
 Context.
[01:37:34]
 What is the context? It is form.context.value.
 Just like what I showed you here.
 Form.context.value. That's what I want to get.
 That's what it's important to me.
 We're going to do the one for the question.
 Form.context.no.
 The question is form.question.value. If I just put question, that's going to give me the element.
[01:38:10]
 But if I put value, it's going to give me the string that I want. Form. question. value.
 Say there. I've extracted those values that I want.
 Let's try that again.
 Actually, I'm getting tired of typing in those things.
 So I'm just going to put here a default value.
 value. The all value is what's the name. The all value for this will be my name is the Lizzar. Everything works well. It should already be in there.
 It's already in there, even if I refresh this, it's already in there.
[01:39:09]
 I'll have to do a submit for the form.
 And I can see here that the question is going to be extracted already.
 What's my name and the context?
 My name is rule of the time.
 My name is Roll We didn't create it yet, but you get an idea. So get to answer.
 We're getting an idea of what we want this to look like.
 It's going to give us an answer if we give it a question
[01:39:58]
 and a context.
 Save the response and a lump of variable. So, this is going to give me a response, right?
 I'll save that in a lump of variable.
 I'll answer.
 There's a typo.
 I mean, there's a TypeScript barrier because I haven't made this yet.
 And with that, we're going to get to the next slide.
[01:40:36]
 We already know that it's going to take some time for just to get the answer.
 So I'm just going to jump the gun here and put the weight.
 just to get the answer. So I'm just going to jump the gun here and put the weight.
 And this is an async function to enable this weight.
 So it's going to take time for get answer to contact the back end, back end calculates the
 response, and then it comes back here.
 But the NAI module TDD. So we're going to create a file called get answer.ts.ts and we're going to design our module here.
[01:41:25]
 Remember, we're using that get answer function, but we haven't made it yet.
 But at least we know that it should take in a question and a context.
 You can start from there.
 So let's face this, let's let it know.
 Create a file called getanswertest.ts. Then we'll write test or get answer to accept
 a question in the AI.
 Code get answer according to the test best of cases.
[01:42:36]
 And then use the axial post method to send
 data to the back end server.
 Okay, so hopefully we can get this done before the third hour.
 Which is the sample.
 And the sample here.
 This is the input sample.
 This is an example. Let me put, let me add some code samples to the previous one first.
[01:43:15]
 Code sample for this is, right here. This is how we extracted the values.
 Using the form elements.
 This one is going to have a close apple with axOs.
 You can see if you can get there.
 Alright, so we're going to create a file called, we're going to create the test file.
 Get answer.test.ts.
 Logi.
[01:44:11]
 I don't have anything called get answer yet.
 We don't have the module yet, but we're going to write the test first.
 In the modules folder.
 Get answer.
 Not test.
 T.S.
 Okay so by usual we described what we're going to test.
[01:44:43]
 And we are going to test getancer function.
 I'm just going to use an arrow function and start the first test here. So what should it do?
 Get answer. It should it well it returns a response when given a question and context.
 Okay, so to create the range phase,
 I'm going to start the question here.
 What's my name? And I'm going to add the context here. The context is, my name is going to add the California one, you're going to have a long
 range function, I mean a range section if you do the California and put all those paragraphs in.
[01:46:05]
 But you could do that.
 The act phase is we're going to get an answer.
 While we're going to use the get answer function, and we're going to give it the question
 and answer a context, we're going to give it the question and answer a context.
 We're going to get the answer from it.
 So we capture that on the left side of the equal sign.
 And we need to declare it.
[01:46:35]
 It's going to take time.
 So we need to await this.
 And since we need to await it, we need to put async in front of the function.
 And the assert phase. I know the, this word also is used for data types.
 Well, interesting it, what it means is that, you know that you're asserting the results.
 Where you expect answer to be defined.
 We're not checking for the answer yet.
[01:47:20]
 Okay, I'm gonna copy this.
 Now, the next test I'm gonna do, I'm gonna to copy this. Now next test I'm going to do.
 I'm going to write this.
 I want to get the check if it receives the correct answer.
 It returns the correct answer when given a question one here.
 It returns a response when the answer is unknown.
 So what kind of response do I want it to be? Like, so what's my name?
[01:48:36]
 I'll put here D is an instructor at the x academy.
 So what do I want the answer, what would I expect it to be?
 I wanted to return the response.
 I'm just going to put, sorry.
 Sorry, I don't know.
 I'm going to go with that.
 So it's not exactly the same as not exactly the same as my back end server.
[01:49:22]
 I'm going to different.
 server. I'm going to be different. Okay, so I wrote the tests that accepts a question in a context that the module return and answer from the back end AI server.
 Okay, so we're going to code the get answer according to the test specifications. I should put this like put these all the way around.
 Okay, so now I can start coding it.
 I've designed it now.
 I can create the function, getanswer.ts.
 So I'm going to export a function called getanswer, which takes in a question and the context.
[01:50:31]
 I know the data types for these, the question is the string and the context is the
 string so I can put those in.
 I'll put the return value to it's going to be a string.
 Actually it's going to need to eventually change this though.
 I'll change it now because I know I need to wait.
 wait. So to get an answer from the back end AI server, I should use the axios post method to send data to the back end server. So I'm going to create a data object.
 Will this data include?
[01:51:36]
 Actually, let me just rename this to avoid confusion. I'll call this user question.
 I'll call this user context.
 So the data that I'll be returning is question, which is the user question.
 And the context.
 So I'm creating properties in this object, right?
 And I'm setting their values.
 That's the value.
[01:52:08]
 That's the data that I want to send to the backend server.
 And it says here,
 use the axios post method.
 Use axios post methods to send data to the back end server.
 So how do you do that?
 Axios, I need to import that first,
 where it's imported, the Post method.
[01:52:40]
 Just like how it sounds, it's post and it's a method.
 But it's also using the HTTP post method.
 I need to give it the URL to communicate with.
 And also the data.
 So what is the URL that I want to send it? Send the response to?
 The URL is
 now it's gonna be the local
[01:53:14]
 and put local host
 a thousand on the AI
 route I wrapped.
 And now I know, okay, I need to wait.
 Whenever I have axial here, I need to wait and get the response.
 Since I have weight here, I need to put a sink here.
 Eventually, this response is going to come in.
[01:53:58]
 I can take a look at it when it comes in.
 And I still need to return the string.
 So I'm just going to leave that as like that.
 I am going to--
 now I'm going to--
 Now I'm going to, what you should know that is this response object is going to have a data property.
 I guess I'll show you first.
[01:54:34]
 I'm going to have a data property.
 So I'm going to run the test.
 Actually, before I run the test, I'm going to change the NPM script for the test.
 So, I'm just going to get answer test. And Pm test should stop on the debugger.
 Actually, it's not because I'm not.
 We will console. And P can test.
 Sorry, and then after I finish this topic, I'll go into the break.
[01:55:34]
 So go into the heat builder and the second one. [no audio] Oh, I need to import this first because we can't even get access to the function.
 Let me import this now.
 And now it says it can't, okay, this is okay because I haven't returned the value yet. So let's try to run again.
 And focus and swap here. Oh, a pass.
 Let's keep on here again.
 And then it starts. Let's see if it gets in there properly.
 Yeah, that's right.
[01:57:12]
 First of asking, should we return you a promise to pad?
 That's correct.
 So I'll fix that.
 So let's run the test again.
 Let's see if it's getting in here properly.
 I'm going to just pick one test to run the top one by putting only on it.
 And again test.
[01:57:47]
 I see that the circle is not solidifying.
 If my time even is up, you might have to type in the booger.
 Okay, there it's not.
 So we've got a question in the context. The answer is going to come in here.
 And we see that it got into the--
 got into the back end.
 Let's see, the question in context come in.
[01:58:22]
 No, they did not.
 They did not. Okay so what happened here so let me
 second finish it today. We're gonna get the answer.
 So we use axial system data to the back end server, but it did not go through the question and the answer did not go through.
 The question and the question in the context they show undefined.
 I ran this line and they show undefined. We're running out of time.
 And continue this tomorrow.
[01:59:16]
 It's going to cause this to crash because it was not.
 Yeah, it crashed.
 It crashed because we didn't make it robust enough to handle an empty question and context. So we got up to this point.
 We use axios post methods to send data to the back end.
 So we saw that I'm going to add here.
 Back end server. observe that the back end
 observe that some
[02:00:18]
 see the data
 the data. The sample code here is axios. axios.post. It takes in the so it's just on the front.
 Okay, that way it's more complete.
 Okay, now we can go to and break.
 And we'll fix all that. We'll fix these things tomorrow. [BLANK_AUDIO]
 Actually, there's no passing or I mean on Saturday.
 [BLANK_AUDIO]
[02:01:37]
 Fix everything on Saturday.
 [BLANK_AUDIO]
 Or you can try fixing it on your own.
 [BLANK_AUDIO] And then you'll see if your answers or your fixes are the same as mine.
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, slide.
 This is, we're back from the break. And now is the third hour where we have a chance to work on our assignments.
 And it's the time for a new assignment.
[02:12:37]
 Here it is.
 Capstone finale.
 Add artificial intelligence and finishing touches to the capstone project.
 I'll post the details for this
 tonight, so you have as much time as possible to focus on the details.
 But I'll tell you about them here.
 But I'll tell you about them here. Properly designed and programmed the front end to provide an overall good user experience.
[02:13:14]
 So, what does that mean? It should be like an actual website.
 Like, you know, if you have a portfolio website, it's in function like a portfolio website.
 I know, you know, like a shop kind of website, then it should function like a shop and it shouldn't.
 And if you're going to add things to it, don't make it look like a sample page integrated somehow.
 Don't have a, basically don't have a sample page.
 Like if you're going to have just like a sample page,
 oh, I just want to show you that I know how to let you sign in and sign out.
[02:13:58]
 No, don't have a sample page.
 Actually, integrated somehow into your website.
 Like it's the actual
 website that you go shopping on or if you have a portfolio website, if they sign in,
 if they sign in, they can view their promo code or something. If it's a shop, maybe they can save the items in there, like save something, like how
 many items there are in their cart.
 Try to integrate it somehow because you'll be presenting this to your classmates and it's
[02:14:52]
 better if you can show them something that's integrated instead of showing them sample code.
 When you go to your job interviews and recruiters, yeah, they'll look at their sample code, but you'll have an
 edge if you actually integrate the things into your website and make it work like
 it's actual production website that people are supposed to shop on or people are supposed
 to use or your website offers services. You know, integrated.
 Make it a good user experience instead of, you know, just samples.
 Create a branch for updating the front end and back end to use the post method.
[02:15:39]
 So we're learning about the post method.
 Not, well, we learned how to use it and how to send data with postman, but we're adding
 the finishing touches for the front end and back end.
 Right now the data didn't get through.
 So we're going to fix that on Saturday.
 But you're going to have a branch for adding the post method. And you should also convert all your,
 all the other routes to the post method inside of the get method.
[02:16:18]
 Only if you should be sending secure data.
 So for example, in the backend,
 you have some routes.
 A lot of them are for data.
 Like the API route,
 you might have a trivia route or photos a day route.
 We have the API route, those are all sending data.
[02:16:41]
 I would make all of those the post method.
 I would use the post method for those,
 because the users should see those kind of data
 in the URL, in the browser URL.
 But you can have a get method for your route, your route path.
 So that you know that your browser,
 I mean your backend is running.
[02:17:07]
 So when you load the root path on your browser,
 for the backend, you should just see something that tells you
 that the backend is working.
 But all the other paths, especially if data is going through
 and you wanted to securely go through, use the post
 method. It's not going to be that hard. You just basically change get where you have
 app.get, change it to app.post, and instead of getting your data from request.query, you're going to get your data from request.body.
[02:17:48]
 Next one, create a branch for adding artificial intelligence to the backend server.
 So far that we've been working with artificial intelligence in the sandbox.
 Add that artificial intelligence to your
 capsule project.
 What I would do here,
 since it can give answers to questions,
 what you could do is provide a fixed context.
[02:18:21]
 Like, for example,
 you have a shop website and you have items in there.
 So what I would do is I would provide a fixed content context that describes my website.
 So in that context, I will already have like descriptions of my items. The prices may be how the website was
 made. What's the inspiration? Who's the author? Who's the maker of the website? What's that
 author's favorite hobby? So basically, I won't let the user provide the context. I will provide the context about my website.
 And then the user can ask, OK, what is this item?
[02:19:11]
 Tell me about this item.
 How much does this item cost?
 What is the website makers favorite hobby?
 It'll basically answer questions about your website and about you.
 You provide the context.
 That's just an idea.
 That's a way to actually use the artificial intelligence, but you could set up to receive a context from the user.
[02:19:40]
 If you figure out how to integrate it that way.
 Or you might look into the other task in the hugging face, and you want to try those other tasks.
 Right now we're just using the question answering task.
 But if you figure out how to use the other ones,
 you feel free to use those too.
 But integrate the Transformers.js artificial intelligence
 into your backend server.
[02:20:15]
 Create a branch for adding an interface
 to use the backend AI.
 So today we were working on the interface.
 Tomorrow, I'll show you some techniques to make it look nicer.
 Create a branch for adding a sign of feature to your front end.
 Okay, so you learned all the credit.
 The CRUD create, read, update, delete.
[02:20:47]
 You learned those.
 The sign-up feature, I previously posted a practice.
 We looked sign-up practice, how to do that.
 So if you follow this, if you follow that practice, you can complete this part right here.
 Create a branch for adding a sign-up feature.
 Where they have a button that says sign-up and they can add their email and password and
 the account will be created.
[02:21:24]
 Next one, create a branch for adding an editable account feature to the front
 end. So after they signed up and they log in to your website, give a ability to edit their
 account. Like they can add their name or their phone number or address or whatever you want to ask for.
 I will be posting a practice for adding how to add this feature on Saturday.
 I can even, you know, fast track you through it and, you know, walk through some of these practices. If they're giving you a hard time,
 if you're getting stumped by them.
 So yeah, let them, after they've signed in,
[02:22:17]
 they can click on a account or edit account button
 or profile button or whatever you want to call it
 and they can change the
 name, their phone number, things like that.
 A editable account.
 Great of branch for adding a persistent login feature.
 So this one's not that hard.
[02:22:38]
 It's basically adding some local storage lines. You should already have a login feature on your website.
 You just add a few more lines to make it a persistent login.
 Then create a branch for adding a login expiration.
 So I provided practices for these.
 You know, practices for these. So you should be able to do these, and I can walk through some of them,
 if they're getting stumped on it.
 But it's just a few lines of code using local storage.
[02:23:20]
 And in this case, this one's using the date class
 to find out when they logged in.
 And when a day has elapsed,
 they'll get automatically logged out.
 And meet all the requirements
 of the previous level four capstone assignments. So basically your capstone is just been building it up and building it up to this point.
 So this one should just be automatic.
[02:23:53]
 Meet all the requirements of the previous level four capstone requirements,
 assignments.
 That should be automatic because we've been building our capstone.
 From those assignments.
 Merge a branch
 to main whenever the branch is done. So we have some branches here.
 Go in one branch at a time.
[02:24:21]
 And then merge it to main.
 And then push both to GitHub.
 Make sure that whatever you push to GitHub, it's a working product.
 It doesn't crash or anything like that.
 It's always working.
 Whatever's in GitHub is always working.
 Whatever's in your main branch is always working.
[02:24:42]
 Always working.
 Nothing is buggy.
 And the main branch, nothing is buggy and GitHub.
 Only do your new coding in the branches so that you can mess up the branches all you want,
 but never mess up the main, never mess up whatever is, you know, pushed or never mess up what is deployed.
 Okay, so
 I'm gonna just open up the brick arrows for 20 minutes and then we're gonna use the last few minutes of class for polls.
[02:25:24]
 Maybe few minutes of plastic for poles. Maybe, uh, let's see, maybe 25 minutes.
 Okay, so as usual collaboration room, silence and one room for silence and one for
 many evaluations or corrections.
 And now just assign people to the room so that you see the room just in case it gets
 buggy.
 So the breakout rooms are open. Anyone need to do evaluations for a week 8 or corrections
 to do evaluations for week 8 or corrections for week 7. Same one one volunteer.
[02:26:41]
 Okay so you're just going to do the one for this week.
 So I'll meet you in there in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] I'm going to continue with the U.K.'s mini evaluation after this.
 So I'm just going to conclude the class really quick.
 Breakout rooms are back.
 And in conclusion, we learned about the post method.
 We actually started using the post method for the AI feature that we have.
 That we got started in the sandbox.
[02:51:43]
 Then we started working on the front end AI interface.
 Now we're going to take some polls.
 Okay, so let me see if I can get something some polls started here.
 Let's see.
 Okay, so what do you think of the remaining three weeks schedule? So we have three weeks coming up week nine.
 That's next week, which will be focused on capstone finale, such as basically we'll
 catch up or polish capstone projects.
[02:52:35]
 And then in week 10, we're going to focus on final evaluations.
 We'll conduct evaluations and also do the
 corrections for them. Week 11, we're going to focus on presentations where
 we practice presenting, then present to other students. So these can be, you know,
 somewhat overlapping.
 If you need more time for evaluations,
 you might be overlapping into week 11.
[02:53:21]
 But week 11 is the final thing.
 I mean, we're going to stop on the 24th.
 That's it. Nothing passed that.
 So, let me see how many responses do we have.
 Okay.
 All right. So, we got all the responses now.
 So, thanks for answering. So, here's the response. We got one answer for two shorts.
[02:54:07]
 And three said that it's just right.
 It's just the right amount of time to catch up and finish level four.
 You short, not enough time to catch up.
 So that's what those mean.
 Now I'm going to take another poll here.
 The last one, this is the last poll.
 This is what do you think of shortening it to two weeks?
[02:54:38]
 Because upper management is thinking maybe you guys want to just get it over with.
 And I don't think that's a good idea, but they want to know what you guys want to just get it over with. And I don't think that's a good idea,
 but they want to know what you guys think.
 So if we're going to shorten it to two weeks,
 and the class just ends on the 17th instead,
 it's going to look something like this.
 Week 9, final evaluations.
[02:55:04]
 Then week 10, practice presenting, then present to other students.
 So is that if you think it's not enough time, then you would pick something too short,
 not enough time to catch up and finish level 4. If you think, if you just want to get things over with, you'll say, maybe you might
 say it's just right. So, yeah, I think all the responses are in. Here they are, everybody
 said, that's not enough time, it's too short.
 So I'm going to give this response to the upper management so that they know that it's
 not a good idea to make it to rush things, basically.
[02:56:00]
 So we're going to go ahead and conclude the class.
 We're going to finish the class is dismissed now
 But oh, I don't know if you're gonna be able to take attendance if you didn't get a chance to take attendance
 just send me a message or
 put it in the chat or something and
 I can mark it in the attendance logs. Other than that,
 classes dismissed. That's today's lesson on AI. We're going to finish everything up on Saturday.
[02:56:37]
 Hopefully. But we'll still talk about some things Next week, even though it's called Capstone Finale, anything that I teach you there, it's
 pretty much be like optional.
 But it will, if you like some of the things that I teach next week, you can add that
 to your Capstone.
 Especially if it's going gonna be a quick fix.
 Okay.
 All right, so gonna, so that's the end. Yes, you can enjoy your day off.
[02:57:19]
 I'm gonna continue the breakout rooms with UQ.
 Okay, UQ, I'll see you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, let's just continue in here.

///// FILE: "Level 4/transcripts 2/May 10, 2025 12-39.txt"

Transcript from May 10, 2025

[00:00:00]
 Good morning class. Welcome to Codex Academy level four. It's week nine day five.
 And the theme of this week is Capstone finale.
 The days of gender in the first hour take attendance to announcements.
 Review. to announcements review practice.
 So the review is not gonna be from yesterday,
 but the review from the previous day before yesterday.
 I mean, from Wednesday, second hour,
[00:00:42]
 if we need more time to finish that, the practice, we're going to do the Redux
 sign up practice.
 So, we'll see if we need more time for that in the second hour.
 Third hour, there will be time for many evaluations and working on your assignments.
 Make sure you take attendance.
 And on over to your code X account, if you haven't already done so,
 and mark yourself as present, if you're here right now.
[00:01:20]
 And now time for announcements.
 I'll share my screen.
 Okay, so there was a student collaboration day on Thursday. How did it go? Any thoughts?
 Did you make progress?
 Did you learn anything from each other?
 Soon in collaboration day?
 Do you have any lingering questions? I see one thumbs up.
[00:02:13]
 So codex survey is still available.
 Who else has it filling that in.
 So next survey is still here. Hopefully y'all finished it.
 I'll stop announcing it next week.
 Okay, so again, many evaluations is 60 minutes per submission. So just get your notes ready.
 So we can just go line by line and talk about it and let your notes guide you. So week eight, many evaluations is closed, but open for corrections until the end of today and after class, if you need some time right after class.
 So if you need to put in corrections for week eight,
[00:03:23]
 today's the best day to do that and evolve in tears.
 And then many evaluations for this week,
 it closes on Tuesday,
 but on time credit will be given until Tuesday also
 because there was less time this week
 to do many evaluations week 9.
 Okay, so assignments are still in the process of being graded.
[00:04:02]
 I'm supposed to get them all in today and I was looking at
 at some of the assignments and some of them are not complete so if I have to
 get them all graded today some of them will be low scores.
 within will be low scores. But at least you have a chance for corrections.
 And your corrections will be all the way up until--
 well, I still need--
 I will need time to grade them too.
[00:04:41]
 So the corrections will go up until the last week of class,
 but I need time to grade them so they can't be the last day of class.
 They can't be turned in by the last day of class because it takes time to get the grades in.
 So, corrections.
 I mean preferably you can hopefully can get in men
 by week 10 but corrections will be
 also accepted on week 11.
[00:05:23]
 So we have some closed assignments.
 Oh yeah, this one is closed now.
 App engine.
 Capsule and finale.
 It's the due date.
 The all time due date has been rescheduled to the 15th.
 If you take a look at it.
[00:05:59]
 Do on May 15th.
 This is Capstone finale. Do on May 15th.
 Late credit until May 22th
 And contact the students success team if you need to get more points on anything that
 is closed.
 Practice problems are in the side here.
 Help seeker, July cohort.
[00:06:41]
 And make sure you don't get stuck for 15 minutes or more.
 If you're stuck for 15 minutes or more, not making any progress, that's not a good use of your time.
 Post it in July cohort and maybe transcripts to notebook L.M.
 Maybe it can help you answer your questions.
 The transcripts are available up to 9 day 4 now. 9 day 4.
 We have transcripts available.
 So this day was the student success.
[00:07:34]
 I mean student collaboration day.
 The recording was started in the middle.
 In the middle of the.
 The student collaboration day.
 And let's see here. I'll call you guys, are you all caught up with your recordings?
 You have a few more to go. I see some typing here.
 And then, yeah, now it's time to focus.
[00:08:35]
 I'm going to review the walkthrough from before.
 If I say anything new, make sure you take notes on it.
 I did include something the last time about mapping object.
 I didn't put that in the notes, because it's extra.
 You don't need to know it.
 I could put it in the notes, so I guess I'll do that,
 but you don't need to know it.
[00:09:17]
 So time for the review.
 But it's about expiring persistence practice. So in this practice, we are able to get the, you know, before that, we were able to
 keep the account logged in, even though the page was refreshed or reloaded, with
 expiring persistence practice, we got it to log out automatically after a set amount of time.
 So that's for security so that people don't stay logged in and then if they forget to log out, nobody else can access their account.
 So here's the steps where they practice.
 I'm going to load these up in the screen share. [no audio] Okay, so I have it all moving up here.
[00:11:15]
 Practice. So on the front end, we're going to use authenticate, get a current time stamp with date
 now.
 So on the front end, that's right here.
 When they authenticate.
 So that would be from the sign in model.
 Actually, let me get the server started.
 I'm sorry, right there, back end.
[00:12:03]
 And get started. And then start to [BLANK_AUDIO]
 [BLANK_AUDIO]
 So this one, this is the page.
 [BLANK_AUDIO] So when they click on the sign and that's when they have an opportunity to authenticate.
 So that would be in the sign and move.
 It's not theup from there.
 Here's the sign in the handle sign in the tent.
[00:13:11]
 We get in the couch.
 So when we get in the couch,
 we save it in the products state variables right there and this is where we get a time stamp
 Next step for the user's email password and time stamp in the nonject
 So here's the object
 So here's the object. This is the data type.
 The custom data type that I made.
[00:13:49]
 I'm not so worried.
 You can see the data type is supposed to be an object where you're currently
 braces.
 The email password and timestamp.
 In this, it's going to be a one is going to be a string. This one is going to be a string. This one is going to be a string. This one is going to be a string.
 And this one is the time stamp from here.
 This is the number.
[00:14:08]
 This is how many milliseconds have passed.
 Let's see what the date becomes from.
 So what is the date that comes from?
 This is the number.
 This is how many milliseconds have passed.
 Let's see what date that comes from. So Java's here. It starts from January 1, 1970.
 So the number, the number, or the milliseconds that's saved right here is a number of milliseconds that have the laps ever since January 1, 1970.
[00:15:14]
 Next, use persistent login practice instructions to store login info with local storage.
 with local storage. So it was already coded here. Just store their login info, convert this credential object to the string, and then save it. And then use local storage, set item
 set item to save that login string into the credentials key. So these are key and value pair and this is the key and value pair.
 So think of local storage like an object.
 This is the key and the value that will be stored in it.
 Like this is an object and this is a key and this is the value that be stored in it. Like this is an object, and this is a key,
 and this is the value that's stored in it.
[00:16:16]
 And so that saves the login.
 When the sign in area melts, we get the current type stamp with date now.
 I know which is the sine in area.
 The component did melt right there.
 Here's the component did melt. mouse right there.
 Here's the component that melts.
 So, since we are
[00:16:59]
 using a function to run the persistent login things.
 Even though we are in the component did not reuse a function to bring it out to
 refactor everything for async functionality. That's where we can use. That's where we can This is scooping it all over there.
 And that is right over here.
 So in this step, we are getting the persistent login. This one is, these persistent log in practice instructions to get vlogging in post-in
 local storage.
 So this is the function I guess log n info from the local storage.
[00:18:05]
 Here's local storage. We're going to get the value stored in this key.
 Now basically be our log in string.
 So if there is a log in string,
 we're going to convert that string.
 So this is the string. We're going to convert it into an object right here.
 We expect that object would look like credentials.
 We can email password and time stamp.
[00:18:37]
 Then we're taking those that newly created object and destructuring out the properties.
 So we have access to them individually without having to use documentation.
 This is the time sample of when the sign in area melts.
 So when this will melt, we get a timestamp. It's not a timestamp of when they
 locked in, but when it now is. Okay, so after we have the login information right there,
 we've recovered logging information.
 If the login was saved, convert it to a login object with JSON.
[00:19:30]
 Or if the file is already talked about that.
 So, drag the current timestamp and the timestamp from the login object.
 So, this login had a timestamp and we also have a current timestamp from when the page loaded.
 If you look at the difference, when do they log in right here and when the page load.
 So that's our last time. Check it to difference is greater than 86,000,400,000.
 So if the difference is greater than 86,400,000,
 that means that's gonna be a Boolean
[00:20:28]
 and we call that variable is expired.
 If the difference is more than one day,
 so we're an empty string for the login.
 So if it's expired, we're gonna store an empty string for the login. If it's expired, we're going to store an empty string for the login right there.
 This is the key. The value will be an empty string.
 Basically the empty string in the case and the expired expired login and will require users to authenticate.
 But it's just not expired and we're going to go ahead and authenticate for the account right here.
[00:21:18]
 Which was from the first-person login. So we're going to authenticate the account. We'll get the account information.
 If the account information comes in, that means it authenticated. That means the email that and the password nets.
 So if it comes in, we save it in the read-up state variable.
 We'll go to account.
 But if they don't authenticate,
 then you'll clear the login.
 Just in case it wasn't already there.
[00:22:12]
 And that's it for the practice here.
 One thing I was also doing was converting the used to be like this
 used to be if statements, right, so if the button, this was my placeholder because I wanted to render the
 sign in model. But since I can't save that in Redux without any errors, I
 save the placeholder instead. And then when it recovers that placeholder or string it comes in as a string
 then it gets converted to a component here
 that component gets rendered there
[00:23:19]
 but I change this code
 to this code right here which accomplishes the same thing.
 One line and a few lines of code replaces these.
 Actually it's sort of actually it looks like one line of code but it's
 actually includes this line of code right here. What's in that? So what is going on here?
 I'll put it, put it up right here.
 Use the mapping to choose the component.
[00:24:22]
 So this is a mapping.
 This means here's a mapping right here.
 That means if, think of these are strings.
 Because they are actually strings.
 So I'm just going to add something here just to show you that these are actually strings like if I if I use the placeholder that was like this instead
 sign
 Okay, see, I saved it, it remains a string. Why is it?
[00:25:08]
 Because these minus signs, job is good.
 We'll interpret them as minus signs if you don't put rotations around them.
 But if you want to use those dashes, then you can put quotations around it and actually all of these are strings
 but pretty you just remove the the quotations here because they're not
 necessary when I say that pretty or move the quotation so think of these the strings so the string
 sign in modal corresponds to the sign in modal component and the string sign out I'm using the, right here, this is bracket notation.
 I'll make it clear if we use bracket notation.
[00:26:18]
 I'll put here just the specified object bracket notation. If you're not in the array, it's an object.
 Use bracket notation and give it a string.
 And it tells you, or use bracket notation, give it a property represented by a string. So this button is going to come in and
 it'll either be this string here or it's going to be this string here. It's going to
 check which string is it. Then it's going to return the value. So if this button right here was the sign in modal string,
 it's going to look at this object before the sign in modal string.
 So here's the object.
[00:27:22]
 It's going to look for the sign in modal string.
 Then it's going to give back the value stored there.
 So it gives back the value stored there, which we put into.
 It's very simple.
 So this ends up being the actual component.
 Which gets me under the hooker there.
 That's a much more mapping object.
[00:27:56]
 That's optional.
 There's a need to be in your notes if I would, if I would going to put it in the notes.
 Let's see what I can do here. [BLANK_AUDIO] [no audio]
 [no audio]
 I'm going to take this, that was the same example.
 To show us that there were strings.
 So I'm just going to put this to show us that they were strings. So I'm just going to put that in those strings.
[00:29:09]
 This is prettier that takes away the rotations,
 because they're not necessary. and
 it's bracket
 it's notation
 and
 object bracket
 and you use can use access properties. I guess I'll put a sample of that back implementation here. So we're going from the string, starting off as a string, access the button map, give give it that string it gives us the value which goes into here
[00:30:49]
 object bracket the facing can be used to access
 properties and store their values
 Use the mapping object
 that's this one, it's a mapping object
 to associate strings that's this one, this is the mapping object. So you associate these things with values.
 So, we're all in the next section. So, we're all in the next section.
 So, we're all in the next section.
[00:31:55]
 So, we're all in the next section.
 So, we're all in the next section.
 So, we're all in the next section.
 So, we're all in the next section. you'll get their values.
 So just like if I went like um
 so for example, this would be almost the same. This would be basically the same as this
 but to map dot sign in the middle of it. So I'm going to get the value that's
[00:32:27]
 stored in here stored there. But this way it comes in as a variable and I can
 whatever that value of that variable is I can get the value from there.
 I can get the value from there.
 It's dynamic, right? The value of this change is depending on if the user is logged in or logged out.
 So that's when you need to use bracket notation.
 It's when this one, if you do dot notation, that means it's not dynamic.
 It's static.
[00:33:03]
 It doesn't change.
 Basically in this example, I only need the sine and molar, but I need both.
 So I need to use a very low and change it as necessary.
 This one changes depending on whether the user is signed in or signed out.
 This one changes depending on whether the user is signed in or signed out. So just, we don't have to know this, but it's useful,
 to understand objects and bracket notation.
 To make the code a little bit cleaner.
[00:33:44]
 Let's just do some little tip of the trick there. [BLANK_AUDIO]
 Replacing
 hip statements
 [BLANK_AUDIO]
 Also the,
 I'll put the statements there.
 [BLANK_AUDIO]
[00:34:38]
 Put the comma that's because they're getting in place.
 [BLANK_AUDIO] place.
 Just like that.
 So we see that they get replaced. I've seen them in the piece of the flap,
 because the title is replacing the things.
 If the statements are right there.
 So that's it if this works.
[00:35:27]
 It's assigning by refresh.
 It's no sign that says I have the options to sign out.
 One of the expires this once it changes. So it should lock me out basically.
 So I'll change the expiration.
 Instead of 1 day, I change the expiration to 10 seconds.
 So it says sign up. That means I'm signed in because I have the options to sign up. So it's a post-expirative, 10 seconds, and it's expired.
 Now I need to sign back in.
[00:36:35]
 Well, just remove this and put it back to the back to one day.
 And we're also at that's the ex-pippant expiring persistence practice.
 Now we're going to do this with read-ups sign-up practice. This will read us sign up practice since we sign up is part of the capstone.
 Let's use read- front operations, great,
 read, update, delete.
 If your website doesn't use them in a practical way.
 So when you sign up or want to use their signs up,
[00:37:41]
 that's going to use the create part.
 or when a user signs up that's going to use the create part.
 Let's do this. Copy this.
 Use the notes. and then the walk through is practice. We'll create a sign-up component to sign up. We'll put in a model, and that the model can take a sign up for.
 And ask for a female.
 And password is going to look almost just like the sign-in page.
 Or sign-up model.
[00:39:01]
 When it's submitted, check out the email the email is in the database.
 If it is send an error message and then the account has previously been created. You can see the email is not in the list. Create a new account.
 So account.
 Think of that as an object. When they sign up, on magnetic vlogging the user by setting the proper reader state,
 let the sign up components, select the reader state, so that's the selector.
 When they're logged in, I'm designed to component.
 When they use the logs out, set up the proper unit of state and show.
[00:40:15]
 The sign of the component.
 Okay. Okay. Okay. Okay.
 Okay.
 Okay.
 Okay.
 Okay.
 Here's that.
[00:40:38]
 Great.
 A sign-up component will sign up button and a mobile.
 So since that's very similar to the sign-in button,
 here's a sign-in button, it has a model and it takes in an email and password. The
 sign-up form should also take in an email and password. So what I'm going to do is copy the sign in and sign in and just change it forward the same up.
 And six times. The problem with copy and paste is you might forget to change the values and let call
 this plug.
[00:41:52]
 Not using the new state anymore.
 Just using the Redux now.
 I'll need that.
 So this is going to be called sign-up level.
 I'm going to just comment these out for now.
 Actually, no, I'm just going to move them.
 Just make sure we get out the phone.
[00:42:32]
 We're not popping this in the microwave.
 We should have the phone right here.
 So it's going to require sign up content. I need to create that.
 This is one that provides an email and password inputs.
 So I need to change this.
 Actually it's going to look exactly the same. I could probably use it.
 Just basically repurpose for the sign-up.
[00:43:14]
 You can receive this.
 Here.
 Here.
 Here. You know the task that it's going to take enough exactly the same.
 So I could actually use that.
 I'll reuse it.
 It needs an error message.
[00:43:44]
 So I think I'll the pink back.
 I see it's not the correct error message.
 It's going to be this.
 Sign it.
 I have a message.
 I need one for the side.
 Up there.
[00:44:16]
 I need to change this.
 Sign up more.
 And I need to create it.
 Actually, that means just
 even like that for now. [BLANK_AUDIO]
 It's not rendered yet.
 So let's see, let's try it to render it.
[00:44:54]
 [BLANK_AUDIO]
 It seems it's a little bit too tight to go. I can change the width here, side up.
 That's enough.
 I need to use.
 Put the mold on this. on the other side.
 So let's remember it first. So, I can just hold my head here to this one is marked up to the template head here.
 So I can at least render it.
[00:46:15]
 When the redox state shows the user is logged in, I have the sign-up component, or here,
 actually this one.
 When the user logs out, when the redox state shows the user-up component, or here, actually this one. When the user logs out, when the Redux state shows the user's logged out,
 show the sign-up component.
 This button mapping takes care of that for me.
 So I can actually combine these. I don't know if that's confusing to you guys, but basically I'm going to rename this
 to buttons and they come as a pair basically. You either have the option to sign in or sign up,
[00:47:07]
 so they come in pairs.
 I can do it that way or I can just go individually.
 And basically the cone will,
 it'll be somewhat redundant, but I'm gonna do it because they come in pairs so I'm gonna do it like this.
 Basically I'm off to
 and render this one and the sign in and sign up.
 And I break this into some of the things that. So let me just disable it.
[00:48:07]
 And then just disable it. Put a place plates here.
 When I click on the cyan button it says "sine in" so I need to fix that. [inaudible]
 Okay, let's see.
 Consistent now. If I'm side up, everything should save. [ Pause ]
 >> Oh, I'm alive.
 Oh, I'm alive.
 Since I copied and pasted, they have this ID right here. That's what loads the model.
[00:50:14]
 I need to change these IDs.
 That's the map.
 that. So that's what that's a problem to copy and facing because this is some values.
 The model was expecting an ID which wants to load.
 And I have multiple models with the side in with this ID right there so it just
 picks one. I need to make this unique
 now it says sign up and it says sign up right there. There's a placeholder for
[00:51:02]
 the air message.
 Air memory messages.
 For now it's a placeholder.
 [no audio] [no audio]
 you can put a gap here
 [no audio] Basically, you have to put, this is, see this is the button map, right, and you are
 putting the code right of this.
[00:52:10]
 Bring off your depth.
 Pretty mind your guys.
 Import it styles.
 Or component styles.
 Sign. [BLANK_AUDIO] [BLANK_AUDIO]
 [BLANK_AUDIO] I'm just going to identify this as an ID.
 I do both.
[00:53:14]
 I put here the scientific model.
 I put in and off with the styles and the margin.
 I put in and on the right. and
 it
 and [ So you added the margin there. I should also add a margin right there.
 So, let's get this one here.
 I can look for large index.
[00:54:48]
 The two full sides.
 And they can't collect right now.
 It has a large.
 Okay, so now there's a review of component files. We're going to take a break now and continue with this review for this walkthrough after the break. the brakes being on the right now.
 Okay, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] All right, so we're back from the break. And again to the second hour of class.
 And we're going to continue with the practice.
 So we did, we created a modal sign a form that asked for an email in the password.
[01:06:08]
 Now we need to work on this.
 When the sign of form is submitted, check if the email is in the database.
 So that's just like one statement right there, but a lot of things need to be done.
 And just that one statement, which we will see here.
 We need to handle the form.
 As we have a sign of form, we need to handle it when it gets
 when this user clicks on sign up. Okay, so it's this one right here, handle submit.
[01:07:14]
 And we'll code it from scratch.
 Function handle submit.
 And we need to get the information out of the form.
 Name, email, and name password. Okay, we can get those out.
 We're gonna get an event here, put any.
 Otherwise, we're gonna get, well, we could,
 let me just put the long one here.
[01:08:01]
 I'm gonna put the long type.
 I'm going to put the long type. Here is that handle on some bit.
 So to get the type, just start putting a arrow function here.
 What is it not? Form event, ACML Form element.
 So it's a function.
 Here's the parentheses.
 It's a function that takes in an event.
[01:08:42]
 And the type of that is form event with angle brackets, a
 symbol form element. So this event should be form event. And then in the angle brackets HTML form element right there.
 Now I can put this one back and it looks a bit.
 There's no type error.
 Okay, so I need to get the information out. So there let me just start from here the event has a target and
 Then also that target has elements
 See that if I don't put any here, then I can't I'm gonna get this TypeScript here, but I know that I have elements
[01:10:09]
 Because I put name here. I put name
 this form right here. Therefore, I should have access those names here, the elements here.
 So instead of putting this, I'm just going to put any to just get rid of that time to get paired. What I should be able to do is email is form.email.value. And then the password.
 Form.password.au. I can test it out, see if it works.
 I get those properly.
 Email that it go through.
 Come on, there it is. And then here's a password right there.
[01:11:33]
 Okay, so I need to check if these are in the database.
 Actually, I should make a route, a separate route, or sign up.
 So what I would do is make a separate route for that.
 But basically, the way I wanted to look like, almost like the sign-, we'll go here.
 Almost like this.
 We see that it's actually it takes in the event. And it does all the extracting for me.
 So I can do something like that.
[01:12:22]
 But instead of calling it handle sign in the tent,
 I'll call it handle sign up attempt.
 and the angle sign of the attempt.
 Export function, angle sign up attempt this one I'm back in the letter take in the event object
 actually since I'm not requiring any TV here and
 think I want the same time
 I'll let it take in the event object
[01:13:21]
 but usually you should the head object.
 But usually you should use some TDD to make sure it's working properly.
 Since harder to create that event object.
 But if you're using TDD it's easier to just take in a, oh, I guess I'll just take the TVD.
 It's the right way, but do it a little bit quickly.
 It's going to take in an email in the password.
 And what it will return is either I wanted to return in the count.
[01:14:18]
 If it was able to create it or nothing. If it did not create it.
 So, let's see if your handle is signed.
 Sign up to the template. So, I'm looking at this as a template.
 Signing the template.
 It's going to return in the count or undefined. So this one is basically this is sine in.
 This one's the sine up is going to sort of mirror that.
 The return value will be a promise either in the little step.
[01:15:09]
 Send in the account or the vote.
 This account is the data type we already have.
 and now just like this right now Next, we can get these types of errors out of the way.
 So, I just set up a variable and I'm returning it.
 Time to get from those that it's supposed to be in an account.
 And I got rid of the type of errors.
 So, let me just do some TDD here or a sign up attempt.
[01:16:27]
 [inaudible] describe
 handle sign of the terms.
 We need to put quotations there.
 Otherwise, the test will work properly.
 So what should said is, do it returns and account
 if the email is not database.
 database. Basically they're going to sign up and the email is not in the database. That means they can sign up. It's available. The email is available. Which means not in the database.
[01:17:41]
 So I'm just making up an email. And then the password, it doesn't really matter.
 That's the orange phase.
 A surf phase.
 A third phase is I'm going to use a function called I'll call it great to count. And now pass it the email and password.
 Oh, I need to call this one here, handle signup attempt.
 It's that's what I'm testing.
 It's going to take a while so I need to wait that and if I'm going to wait that, I need
[01:19:08]
 to put a sink here and then I need to capture the value.
 And then, we're going to notice this is the search right here.
 I expect the result to have a property. Email.
 So accounts have an email and they have a password so that's what I expected them to have
 at least. Actually, you can do that, and we'll sign up with "10" and then the next test.
 It returns nothing.
 If the email is not available,
[01:20:33]
 which means already in the database.
 This one doesn't matter here. results should be undefined.
 So now I'll code it.
 So the site the
 function signature here. Thanks in an email and a password. Because that's what it says here.
 Takes in an email and a password.
 And they'll return in account.
[01:21:38]
 So here I'm checking for an account.
 So here it returns an account. Here it returns nothing. So it should
 be returning undefined if there is an email that's already taken. So here I'm specifying
 that in the function signature that that can also return undefined.
 Now I need to write the code.
 So basically it's going to use axios
 and it's gonna use the post method
[01:22:21]
 to contact the backend server.
 I need to give it a URL.
 I have a base URL.
 And it's going to
 go to the VELEMDA back end server.
 I've set this up
 separately, so I have something that chooses the base URL
[01:23:09]
 Depending on whether I am
 Depending on whether this front end is deployed or not deployed so right now it's local so this base URL will change
 Depending on if it's local or not
 But eventually it will want to connect to the lambda server or the back end lambda server so that's the
 base URL that's
 Then I want again, get to. Remember, you should be, you should devise a way in your capstone to choose a URL that
 it should connect to.
[01:23:57]
 So this front end should connect to the local backend.
 If this front end is local, but if this front end is deployed, it's
 you connect to the lambda back end.
 So this is what this does.
 Just basically use a conditions and do that.
 That's that's easy things.
 Some of you have figured that out already.
[01:24:23]
 So I'm not going to show you how to do that, but look here
 I'm just using object notation. I'm not using a function here.
 And in the data.
 It's gonna be an English list, it's gonna be a thing.
 So the data will contain the email and password. Okay, fits on one line.
 Maxio is going to contact that URL and send the data.
 I'm going to get the response.
[01:25:39]
 I need to await this. this then the account [BLANK_AUDIO]
 >> It's on its back data.
 It's gonna come back and it's gonna have a data field, so
 [BLANK_AUDIO]
 It can make this a constant.
 [BLANK_AUDIO]
 I'm not gonna change it.
[01:26:23]
 'Cause they'll either have something or nothing.
 I think that's impressive.
 It depends, it just basically depends on what the server gives me.
 So, now going back, I need to count this function here handle, sign up the tent, give it the email and the password.
 It's going to give me the account. I need to await that.
 And then I need to do something when I receive that account.
 It will either be something or nothing.
[01:27:38]
 But I'll leave it at that because I don't have my back end server set up here.
 These are the tests.
 Let's keep the keyboard this.
 That's my bit of metric if it appears there.
 So it needs to contact the neck and server.
 Oh, I don't have a path for the URL.
 URL is going to be from the name of the server.
[01:28:19]
 For the server that's supposed to be on the name of the path.
 I'm going to make one.
 Sign up.
 What this kind of path is going to do the, this path or this route is going to do the,
 the checking for you.
 Let's see what this looks like right now. Sign up.
 I'm going to put a,
[01:29:08]
 I'm going to sign up. [BLANK_AUDIO] and you can expect that the front of the tent.
 Either it's written in the account or undefined. [wind audio] Try to let it in.
 Try to extract the email in the password.
 It's handled the sign-up for 10th.
 You are out of it, so you are out of the fee.
 Right now it's going to be local host.
 8000.
[01:31:22]
 Sign-up. I didn't create that one yet.
 I didn't create that one yet. So it's not going to work, it's going to basically have it there.
 Because I don't have anything listening on the sign-up route.
 I don't have a sign-up route.
 I'm just going to have a sine of brow. I'm going to make it. This is the back end.
 Here's the index.
 I'm going to make a new route for the sign-up
[01:32:11]
 and I'll create the sign-up handler
 It's called the same name as the route. It's going to take you in the name request object.
 And it's going to take in a response object and it's going to get the data from request.
 Not body.
 When you get things from the PUMS method, it sends the data to request our body.
 And I want to send that data. This data is going to be basically a account.
 And I want to send that data to assign a function
[01:33:56]
 or a single icon here I can let this do the, I can let this do the, I can let this do the, I can let this do all the logic ground that it So I don't have anything for that.
 So I'm going to take in that data.
 With the expect from that.
 So I put away here because it's going to take a while because it needs to contact the database. I need to put a six here.
 And then I'm going to capture the value.
 What will send me?
 It'll either send me a account for it.
[01:35:38]
 So create a account here.
 I can create that now and use some TV for that.
 three account access
 T.S. So this is these are concepts in these are concepts about the credit assignment
 and GDD and express routes.
 So what does it do? It returns and account.
 Almost going to look like the, copy that.
[01:37:15]
 They're going to be pretty much synchronized.
 Except this one it's going to take in data. I'm not going to take in email and password it's going to take in data.
 And the data is going to be this. [BLANK_AUDIO]
 >> That's the data.
 that's the data.
 Then it should return nothing if the email is not available.
 You're testing the function called create account. Have it made it yet. it takes on it to take in the data object
[01:38:28]
 it's like what we have here in the sign-up route this is taking the data object
 response that's saying account so it's going to send the account whatever it gets that's what it's going to send the account whenever it gets as
 what it's going to send.
 This data object created right here. [no audio] Okay, so I have an idea of what this function is in here. I can create the function now, create count.
 Okay, so I see this, it's async.
 I export these things function. The name is create account. Next door placing Thompson.
 The name is Create Account.
[01:39:47]
 It's supposed to take in an account. I can specify that here and there.
 It says it's missing some properties.
 So let me just preview this thing.
 I think the account will also require [inaudible]
 The account will also require, the account also requires name and form.
 I could just make a separate data type first line-up.
 I'll just stick with this report. that is pretty good. The return value, what's the return value is supposed to be, is since it's
[01:40:50]
 async, it's going to return the promise, but that promise will return a
 result value. So basically in the end, what do I want this to return? I want it to return an account.
 Right here, this is what we expect, some kind of account.
 Or we expect it to return nothing.
 So, let's get rid of that air, just going to put that in front of the front. [BLANK_AUDIO] I'm excited.
 I can, I can at least import this in my tests. I put in here since it seems like things.
 I put any because otherwise this is expecting an account for properties.
[01:42:42]
 It's missing a name and bone number. But the data is not
 going to include that. It's going to override it right here. So I need to code this now. It needs contact dynamo unique check if it's there check if that count is there if it is
 then it's gonna return nothing so let's see
 gonna compare to what I have here, read it.
 Right now it's not, it is taking information.
 I mean, it has a key and quiet what you guys should have made a function that provides us for you.
 So I'm going to do that. and we also have that already so we can just quickly create that, get, down the low, Nice pipe.
[01:44:34]
 Information I need to import these. Then I'll export that nice client. This is going to look a lot bigger now.
 I need to put the core.
 That's it.
 And I can figure it otherwise if my path be able to get those very close here.
 This one is a pretty nice bite for me.
 I'm either blue or blue. I mean, um, the other one.
 Now I don't need bees.
[01:46:10]
 I don't need this anymore.
 I'm just editing the read account.
 I can get the nice mine.
 Actually, I won't do this either. Without the nice pipe.
 There it's been pouring. So it looks just like before. Doesn't look like a
 function or anything. I've already created a nice pipe. It's exported from the
 function directly. I mean it's exported from this file directly. There's a nice
[01:46:54]
 pipe and then I'm just using it right here. It's imported right right there. And I use it like that.
 So this create account is going to basically read.
 It's going to do the read and find out if the email is already there.
 So I can do that.
 I'm going to copy this in a little bit.
 I'll fix it. Anything that means fixing.
 This one is, this one is, this one is put test, but I didn't make any test that checked with this.
[01:47:59]
 I have an account right there, so I'm going to use that instead.
 I'm not checking for a pass with this side.
 That's one of the movements there. [no audio]
 Let me check the log it's for the log.
 I need to extract. I need to get the target email.
 I need to extract it from the sign of data. So this sign of data has, actually, it has an email. So, we will check that sign up for the data in the, we may making this for the next one since.
 Okay, so it looks like sign up for your mail. The sign up for your mail, it's gonna check for that.
[01:49:30]
 That's the only thing I need here for now.
 I need to check if it's there.
 Gonna do a read command.
 It's gonna just check if it's there.
 If there's an account that I want to--
 this one will return an account if it exists, right?
 So if there is an account, then I want to-- So what's going on here is I'm going to capture if this email exists. If it does, then I'll have an account.
[01:50:56]
 If I have an account, that means the email exists already.
 Here, let me just do this.
 Does the Galaxy exist?
 I can't believe that the user account is not. [BLANK_AUDIO] So if it exists, actually that might make more sense about this quick view in terms of the client.
 I usually just put one return statement at the bottom, but to make it more understandable
 to me, to what it should be in the rightum, which means if the account exists, return on the line,
 that's what this test says.
[01:52:34]
 It returns nothing if the email is not available before it is already in the database.
 So that's what this means return from the line.
 So that's what this means for some point of the time.
 So if there's not exists, that's when I can create it. [BLANK_AUDIO]
 So I'm gonna look at the,
 [BLANK_AUDIO]
 the three eights, then we'll hear. [no audio]
[01:53:30]
 Copy that.
 I'll change it.
 [no audio]
 [no audio]
 [no audio] If you could use axi for this one over here, but it makes more sense like this.
 This is what we've had.
 If I put this one and replace it and put it up here. If we'd also get the same result,
[01:54:25]
 we'll have the same effect.
 But if you don't understand what that means,
 I'm just going to do like this.
 And actually, so a return statement causes a function to stop. So if it does reach this point
 right here and it returns then nothing from the need that we run.
 This down here will run if it passes this line.
 It may or may not pass this line because in this You know, exit out of the function, it beats at that point.
[01:55:27]
 And then, so I'm basically going count at this point, if it exists, we turn nothing, but if the Then I want a great new account so that email would be signed up.
 After email, in the past, it would be the sign up for the password. and send request to the nice client and have a status.
 It should be okay though.
 So I'm using it to get to be that line without a narrow every single spine.
 The count will just basically look like the sine.
 The sine up is coming in with an email in the past here. Remember when this response comes in, it's just going to show
 if it was able to create the account, it's just going to study status 200. It's not
[01:57:35]
 going to give me an account. So I'm happy that you're creating an account. And since the
 sign-up looks just like the account, I mean, yeah, the sign-up
 basically looks like the account. That's what I can return.
 I can run this, just try running this test here. [BLANK_AUDIO]
 And PM test.
 [BLANK_AUDIO] [no audio]
 I'm starting to be longer to see what I'm doing.
[01:59:01]
 What I'll do is I'll continue this after the break.
 And to the sunrise, we're still stuck on the step here.
 And the sign of form is submitted. Check it. Email this in the database.
 We're going to take a break.
 We'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and we're heading into the third hour of class. We have a chance to work on your assignment.
 This is a assignment here.
 So I can continue working on the walkthrough or I can answer any questions that you might
[02:10:07]
 have if you're working on your assignment and you got stuck somewhere.
 I can answer those questions.
 So does anyone have any questions?
 If nobody has questions, I'll continue with the walkthrough.
 See some typing. Okay.
 All right.
 So I'll just continue with the walkthrough.
[02:11:07]
 No questions.
 But if you don't want to watch the walkthrough, I can all open up the breakout rooms.
 So one for collaboration, one for silence.
 And then I'll just put everyone in a room just to see it.
 And let's see here. 30 minutes.
 37 minutes.
 Okay, I'm going to do the walkthrough.
[02:12:24]
 Continue the walkthrough, I mean. Recarons are open just in case
 we want to do something else.
 Okay, so here's the, we were running the tests.
 One thing I realized is this was wrong. That's probably one of the reasons
 Okay, so I'm double checking here
 Okay, so I'm double checking here.
 My Dynamo DB, I have some accounts. There they are.
[02:13:16]
 And here are my tests.
 The returns, here, returns an account
 if the email is available.
 So this one's gonna be available. This is not in the list.
 And it returns nothing if the email is not available.
 So this one's in the list already.
 So this one should not be able to create an account.
[02:13:38]
 So it should return nothing.
 Then you just run these tests.
 Actually, this is the wrong. This should be looking at the back end test right here.
 I just, yeah, I need to fix these tests. Okay, so then you cancel this.
 It's watching right now.
 I'll watch so we can see it happened.
 Okay, so I'm just going to run these tests.
[02:14:22]
 And the test.
 See if it works.
 And they both passed.
 Okay, so that looks good.
 One thing that should be done though is
 there should be cleanup phase right here,
 cleanup, why it's because this account is going to get created.
[02:14:56]
 Next time I run this test, this test will fail.
 Right, you saw that the CTAS pass right here.
 If I run it again, it fails. So it didn't run again because it's on watch.
 Because this account is already created.
 Right here, it's already in here.
 I'll refresh this. It's already in here. So it's basically not available.
 So I need to have a cleanup function
[02:15:28]
 or a cleanup section here.
 This is where the leads, the email account.
 So,
 I need the account. so it becomes available again.
 Insert, come here to delete the account so if you don't think I'm going to leave it.
 So until I insert that code, I need to manually delete this,
 if I want the test to pass.
[02:16:18]
 I'll stop this. It's watching right now. So I'm just going to manually delete it.
 I know the tests are passing. Okay, so this path should work now.
 The front end, because I have the back end going, now I can run the front end test, see if
 they work.
 Here's the front end. I'm going to put the same information here, a cleanup phase. So it comes available again.
 This is the front end now.
 And you just up this terminal right here put it back in.
[02:17:45]
 That was for the test. The back end seems to be working properly now.
 There's something here so let's see what I've got.
 I forgot to import this.
 So that fixes that.
 And this one I forgot to import this. That fixes that.
 Back end should be working out.
 Around the test, everything passed. So let's run the test for the front end. Here's the front end. Open the neutral over that.
[02:18:27]
 Make sure you can make it.
 I can trace on.
 Open up the test for me. and then we'll test handle sign up on the channel.
 If I look at the accounts here,
 I'm going to find their back to
 not available emails like here.
 So I can run just testing the front end, see if it works.
[02:19:15]
 And then we'll test. [BLANK_AUDIO]
 [BLANK_AUDIO]
 This task can't run.
 [BLANK_AUDIO]
 Because I need to set up a chain as dumb's the test environment. [BLANK_AUDIO]
 [BLANK_AUDIO]
 >> I'm teaching guys how to make a complete file and see the name.
[02:21:21]
 [BLANK_AUDIO] >> Probably a little free.
 Where I have the windows for just. [BLANK_AUDIO]
 I can just use the
 ok ok
 so you have to set up the config
 file
 ok
[02:22:34]
 so you basically
 just So we basically just do the just default settings.
 If you want to be able to test the front end properly, because I have the front end checking for windows.opening.
 You need to make a change in the just configuration. [BLANK_AUDIO] We don't look at that.
 I need to configure it to the S-style. here at JS top.
 Actually the 19th year. Considering the JS top, just environment. [BLANK_AUDIO]
 Okay, we can just actually just put this and it should, and you don't have to create a,
[02:25:08]
 you don't have to create
 you can take file [BLANK_AUDIO]
 [BLANK_AUDIO]
 [BLANK_AUDIO] just environment, JST. Go into install that.
 In the end install, just
 the entire room is
 JST.
[02:26:19]
 Same JST. [BLANK_AUDIO] Let's try it.
 Okay, so that one was good.
 We'll wait to, so you don't have to put this. You don't have to remember this right there.
 I'm going to create it.
 If I take this out, it's going to break.
 It's not going to be able to run the test. And it's that same earth.
 And it created a just config file. [inaudible]
[02:27:47]
 [inaudible]
 [inaudible] [BLANK_AUDIO]
 [BLANK_AUDIO] I can just have two in the night here.
 What?
 What is theta type for theta?
 Just in big object.
 It's not going to work with TypeScript.
[02:28:58]
 That's what I'm just going to have to know it test environment
 your test environment
 j
 test top [BLANK_AUDIO]
 Put a note here, must install. [ Inaudible ]
 Okay, so that's your work.
 I'm now complaining about JSTOM.
[02:29:59]
 Okay, so we don't see it complaining about data storm anymore.
 That's good.
 That's a just config file. There's a package that we installed.
 Running this one here.
 Let's see if it created anything. So I want to run the test again. Okay, one failed still.
 That's the one which turns nothing if the, okay, got a, they got an empty string.
 Okay, so that's, I have to override something here.
[02:31:40]
 So, we'll get some empty string because that's what this one is returning.
 It should be returning undefined.
 So what I want to do is if there's no count, then return undefined.
 It's going to be-- basically, it's going to come in as an empty string.
 I mean, you could do this for count equals empty string.
 Return undefined.
 Whether it doesn't like that, it seems because we expect an account.
[02:32:35]
 There's no type of script errors that I do.
 This basically means if there's no account,
 like it's an empty string then just return on the find instead let me reset
 this here
 Okay, the test pass. That's good.
 And it's just delete this thing again until I put in the cleanup code, I have to kind of delete
 this. practice. When the sign of form is submitted check it
[02:33:55]
 female is in the database. If it is in an error message then in the counter as previously been created.
 Okay, so back to the front end here. find we're getting the result we want from it for now.
 Here's a sign up in the little, I think what I it and make a different one.
 I make it sign up content. I mean sign up content.
 We don't have basically the same things as the different things.
 We'll have the same inputs, but at least I can customize it if I need to. [BLANK_AUDIO]
 [BLANK_AUDIO]
[02:35:33]
 I want to use a site of contact instead to make it consistent.
 [BLANK_AUDIO]
 There, everything there says sign up.
 [BLANK_AUDIO] Sign up there, sign up here, sign up
 here, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up,
 sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up I'm gonna expect to get an account for undefined.
 So if it's undefined, actually let's start from this.
[02:36:13]
 If there's an account, then I'm gonna do something.
 Else otherwise there is no account
 that I wanna do during that phase.
 Let's see. When the sign-up form is submitted, check if the email is in the database.
 If it is, send an error message that an account as previously been created so I need to have an error message
 so that means I need to set it up basically the way it would look is like this so
 so it will be basically here if the account already exists [BLANK_AUDIO] [no audio]
[02:37:49]
 I'm just going to put here
 here, here, here.
 Actually, it's going to be simple because I need to use the
 the set
 set and sign up mobile every message. Sign up mobile every message. I didn't create this
 variable yet. I'm going to create it but this is what it's going to look like.
 I need to send the miss except the account is already been created.
[02:39:16]
 And we're counting that email already exists. That's going to give me an action
 for work order and if this batch needs to send out that work order. So now I have an idea of what this, the state variable should be.
 So I'm going to change this now.
 Error message is selected. Select signup mobile error message is selected select sign up mobile error message. Okay, so that's correct sign up model. This is the sign up mobile and it's going to be an error message.
 So I need to make the selector. I need to make the state variables. So I'm going to head on over to the next here.
 over to me next year.
 One, two, three, one, three, five.
[02:40:37]
 So it's time to stay variables.
 Sign up. [no audio] [no audio]
 [no audio]
 [no audio]
 [no audio] that's like initial state for that. The selector now.
 Whenever there's a pattern like this, like they have patterns, like they're almost the same.
 There's a few differences. You can rewrite code to automatically create this pattern. Automatically do this.
[02:41:28]
 Select the sign of the sign of the model.
 Everyone message.
 Just going to rename this.
 That's the correct variable.
 And that's a selector.
 A good check if it's working.
 Let's see if that's selected for me.
[02:41:55]
 If we go here.
 Our message is nothing right now.
 And then we just change the default value
 just run it again
 since the same test and there it is
 then you can do that
 so the select is working fine
[02:42:31]
 now the center The sign of the moment is very missing.
 We have to change a few things.
 The set is going to be working fine now. So in the contact, I think that's fine.
 That's fine. before I try it, I'm going to be over here because there's nothing in this part.
 So I'll try to sign up with an email that already exists.
 Okay, so there's a checking email and then it's going to handle the sign-up attempts.
 Let's see what results we get back.
[02:43:58]
 So the account is undefined because that email already exists.
 So I'm going to set up the error message here.
 And let's go to set an account with that email already exists. So that's where you find one.
 That takes care of this.
 So if that email exists in an error message,
 that an account has previously been created.
 If the email is not in the list,
[02:44:38]
 create a new account in the database,
 on a successful sign-up automatically logging the user like setting the proper
 re-lex theme. So this one will be automatic. Our back end is already
 used this for us. We tested user. If they sign up successfully.
 So this is the part right here. So how do we log them up? Log them in. Basically just set the
 read up state
 set
[02:45:32]
 Google account I think
 As my account is global
 And you look at my screen frame.
 You can hold the count right there.
 Set the blue.
 Count.
 See the count? That's going to get an action.
[02:46:07]
 Then we're going to need to discuss that action. [no audio] We're going to try a new email and that doesn't exist in this list.
 I already did the test board so we shouldn't work.
 That's really black. I'm going to check the email in the password, and then handle the sign-up attempt.
 If everything works fine, I should get in account.
 So if there's an account, lock them in by setting the proper read-up state here.
 Basically save the blue-hole count, and we, I mean save this account in the global account.
 Okay so it's signed in but then there's that issue with having to click the buttons and it's stuck in this modal mode. So I should, I'm gonna basically just copy the copy and paste the
[02:47:52]
 code from the floor, but I should probably, I should probably, I should probably put it out or re-factor it to a difference.
 Re-factor it to a different function.
 So I don't have to copy it.
 Here, put this one.
 This one takes care of it
 close button [inaudible]
 [inaudible]
[02:48:54]
 [inaudible] and it's actually this one is actually fun.
 I think it's fun.
 Okay, so the breakout ones are back.
 I'm going to just conclude the past here.
 So we got up to, uh, this is not the practice.
 But so the breakout rooms are back and inclusion.
 We're almost done with the readout signup practice.
[02:50:07]
 I can continue that on Monday.
 And make sure you mark your attendance. You have four minutes of Mark your attendance.
 Other than that, class is dismissed. That's the days that's just weeks theme on capstone finale. I'll stick around just in case anyone has any questions.
 If you need to help with anything.
 Otherwise have a good weekend, but, you know, it's crunch time, so
 trying not to have a two good weekend.
 If you're if you're burnt out, then you're arrested a little bit, but you should be able to
[02:51:03]
 get back to work.
 Especially if you have a lot of catching up to do, no time to rest.
 So yes, once again, 15 minutes, just in case you need to. [BLANK_AUDIO] [ Pause ]
 >> Alexander, you have any help anything?
 If you're coding, I can watch a code
 or are you stuck on anything?
 Have any questions about the corrections?
[02:53:02]
 Are there Are you there?
 Yeah, you can see your typing.
 If you're saying something, I can't hear it. [ [ [wind blowing] [BLANK_AUDIO]
 Is there yet? [wind blowing] Okay, I'll give you a few minutes to check it out. Okay, I heard something.
 Can you hear me now?
 Yeah.
 Okay, I don't know what it was.
[02:55:45]
 I just connected the USB mic and plug it back in,
 maybe the cable is loose.
 Yeah, I'm trying to finish off the backend account.
 So I'm not, the create ones and the read one,
 read stuff works now.
 So I'm on the update one, but before I can actually finish
 the function, I have to finish writing the tests.
[02:56:06]
 - Yeah.
 So it's a lot of tight-roofed curves that create
 one thing in wasting time to figure out how to fix them.
 Okay.
 Yeah, well, the tight-roof error is like if it's wasting
 what's time to put any, if you can't figure it out
 like within a few minutes, just put any.
[02:56:29]
 But what you should do, I think, is your capstone is not
 rendering properly because it's still trying to use an API
 that's local host instead of your instead of,
 which one is it, instead of the one that's deployed in lambda.
 Right.
 Like, but do you have one that's deployed in lambda?
 I think you do.
[02:56:59]
 And on your my capstone, I can't get past these stupid tests to get there.
 And I still have to do things in order.
 And then by the time I get to the part where
 I've already done the lecture on that,
 I can't remember how to do it anymore
 'cause I've already done it in the sandbox
 and then I have to go back and relearn everything.
[02:57:21]
 That's what's taking me so much done it.
 - I see, okay, well I can walk you through some things. So
 right now, I'm better at the tests. So now, like the tests are, I won't say they're easy,
 but they're not as hard as they were. Yeah, that's good. If it's working in the sandbox,
 then all you have to do is just, to do is just change some things to make
 it work for the capstone.
 So, I gave you screenshare.
[02:57:54]
 And so for lambda, you're back at--
 >> But I'm not in my grand, so wait a minute.
 I don't know what branch I have anymore.
 And now I've got--
 It says, I can't read it right now.
 It's blurry.
 Capstone back.
[02:58:12]
 It's smaller.
 That the bottom left fixes the fixes.
 Yeah, I'm in this case branch.
 OK.
 This is the branch where I'm fixing the back end
 capstone assignment. OK. OK. But I haven't committed this work yet.
 Okay. Well, what else do you need to fix?
[02:58:32]
 On here, I need to fix to update and delete.
 Okay. So update user account.
 So if it successfully updates, you wanted to give you a message.
 Yeah, I was about to write the message when.
 Okay. I have to change this message.
 Email address, may have to change the test.
 Email, no record was found for this.
[02:59:20]
 Email address.
 An account must be created before it can be updated.
 And I'm seeing all kinds of cool ways where it could in the future,
 not in my portfolio, but like, you know, if there no account was found,
 my modal could pop up and say, "Hey, you know, if there no account was found that my
 model could pop up and say, hey, do you want to create an account and then go
 into the client thing, but that's way too complicated for this. Yeah, I just work on
[02:59:53]
 the minimum requirements, but that's something I could work on in the future.
 There's some ways.
 Way far.
 I'm not so.
 No, I mean, it's something I designed for the office of motor vehicles where they have a thing like that.
 I didn't write the code, I designed it. There's different.
 Yeah.
[03:00:19]
 So, there's more.
 There's more.
 There's more.
 There's more.
 Yeah, I'm trying to think of what the other tests were, because I just copied the, I copied
 some other test files to make this one.
 So, up to a C-count successfully throws an error, the email address doesn't exist, because
[03:00:34]
 there's no account.
 Throws an error, it will get email.
 That doesn't, it's not a valid test because that's a great thing.
 I don't know what's it says.
 You need it or change it?
 Well, if you're not sure, then you can just delete it and then just make up something when you think of something.
 No, I don't want to delete the test. I just want to skip it until I, but I only, I can't think of any more tasks for update because the only thing that's required to update is the email address. You could, you could just, oh, I don't want them to be able to change the email address. Yeah.
[03:01:17]
 Because the email address is I'm a key. There's an error. It user tries to update email address.
 Email. I don't know if that was time.
 Thank you.
 OK.
 I don't know if that's possible.
 Should not be updated.
 Because if you provide an email, I got one.
[03:01:40]
 They really can't change it.
 Yeah, that's what I'm saying.
 So they shouldn't be able to change it.
 I mean, like, if you put a different email, it's not going to be found.
 Oh, that's true. It's not going to work that way. You're right. You're right. You're right.
 That would work if you tried to use the primary key.
 But I had to delete the user ID, the created in the active column.
[03:02:11]
 The old from the user account because it was causing too much complication.
 So.
 I simplified it down to just these five fields now.
 Okay.
 Well, you could.
 I would either comment out that test or delete it since. down to just these five fields now. - Okay, well, you could call that.
 I would either comment out that test or delete it
[03:02:27]
 since you're not gonna use it anyways.
 And you could use it a couple of years.
 - There's no test for that, they're all gone.
 Like I've taken everything related to that away.
 - No, I mean, like the one that you're editing just now.
 Like it's--
 - Oh, no, I wanna use,
[03:02:43]
 but I wanna use this data for a valid test. That's the thing. Okay. Well, let's look at the other test and see if they they make sense.
 Well, missing a username doesn't make sense because
 You can use not
 Okay. In fact, you never update your username theoretically, but
 I should never update your username theoretically, but
 There's an error. Okay, well what's the other test that you have?
 Oh, try the chains are username, okay
[03:03:19]
 I don't want to change it There's an error for an invalid email format. That's a legit test
 And I already know how to write that test because I'll have that test in the create one with the red jacks.
 - Okay.
 - So it's F5, one, two, three, four.
 That's five tests.
 So I just need one more test to put here that I can't think of.
 - Email is empty.
[03:03:47]
 - Yeah, I Have that test.
 Our password is wrong.
 Our password is wrong.
 Oh, yeah.
 It's password incorrect.
 That's better because I already know how to write email as empty.
 I should learn how to validate password. So still continue writing the test with the proper assert.
[03:04:14]
 And proper arrange.
 Your pass account records sound with a stimulus. the password provided is not valid for this account.
 Make sure the password is wrong.
 Go back up there and put a different password.
 Is that the wrong password?
 I have no idea.
 Wrong password.
[03:04:51]
 Yeah.
 And the email should be valid though.
 Oh, wait, no, that's the.
 Is the other one.
 Update is a mean.
 I think you picked the wrong password for that.
 Okay. All of this test data is not valid for this test. I'm going to have to go through and check all the test data anyway.
[03:05:17]
 Okay. This is go back to the wrong password one.
 Okay. Wait. we're moving.
 I'm like, okay, there it is.
 Okay.
 - This test is valid, but the name,
 okay, so here's my problem is,
 if I wanna update only certain fields in the account,
[03:05:42]
 do I have to send all of the properties?
 That's your choice. You're deciding what to have. I only want to update the phone number,
 for example, then I could just send that. You see, no, eight yells at me. Yeah, and then just put any.
 Oh, for you here, any. That's what you were saying or that makes more sense.
 Or you can put question marks to mark optional fields.
 I works. I've been doing that in some other places.
 I would rather do the question mark.
[03:06:23]
 Easy easy. So I can put out question.
 Yeah, put it in the, no, you need to put it in the, the, the, the time.
 The data time.
 Oh, in the user account.
 Yeah, user account data time.
 What happened in a name named as weird.
 I must have deleted it by accident.
[03:06:56]
 Okay, fixed that. And so doesn't like, can I just send it?
 Oh, you use your account?
 No, it should be fine.
 Something happened. Maybe it's not importing the correct user account.
 It didn't save. There's no question marks there.
 I know, but it's imported up here. It's been importing the correct one.
 If you changed it, it looks, the, uh, the question marks are gone. Click on user account. The question marks are
[03:07:50]
 gone.
 Okay, that should be fine now.
 Okay, so the other ones.
 You know, maybe update the front end when my accident.
 I did.
 Somehow I had to front in one open.
 What was good because they need to match, but that's fine.
[03:08:20]
 Okay.
 Somehow I did the front end one by mistake.
 Coz it's.
 - Thanks.
 - So it's working.
 So the types work there.
 - That's.
[03:08:29]
 - Okay. So this one is the test.
 Let's look right.
 Finish writing the test.
 - Okay.
 Stick on.
 If the user tries update username.
 So I don't need to update this.
[03:08:44]
 Got. I have to use the name so I don't need to update this.
 I have to use the names and I have to change.
 Okay, but at this point then I could solve this entire problem if I just didn't display the username field in the component for update. But this is the backend. So I can still test it on the backend.
 And then to solve the, you need some redundancy.
 What if someone does make a field for a username in the front end?
 Well, you need your backend to double check that.
 >> I'm just copying the same message for the invalid email from here.
[03:09:51]
 Where does it go? Okay, that's done.
 Um,
 Sure. [no audio]
 Okay.
 Thank you.
 This is an external resistors.
 No record is found.
[03:10:19]
 This email address.
 You know that.
 I could read that. I could try to update something that doesn't exist.
 And I just need to go ahead and produce one. That's probably not a valid one.
 Where's the line?
 one. There's black.
 Nope.
[03:10:45]
 Here's
 two
 different.
 Why it keeps two minutes when I placed the next case. Boom.
 Okay, but I want to send the new password.
 And the name is your name.
 I'm just going to be harder because I just sign it up so that they can't change their passwords for now because right now you're validating their password.
[03:11:41]
 Right.
 That was what I was worried about.
 I was about to say that then I was like, okay, so does email.
 So we've written that password as the question.
 But it's required that they put in the correct password because you don't want to just be
 changing when someone's account if they just provide their email.
 Like, if I have your email and I your email and I don't know your password,
[03:12:05]
 that can go and change their account information.
 - I'm gonna take the--
 - Because I'm testing a username in the other test.
 Basically, you want to validate the password
 to see if they have authorization to change the account.
 Okay, so it looks like all the data should be good.
 Hey, there's some errors here.
[03:12:37]
 Fallen can't be zeros. Why?
 Check if there's a right number of zeros.
 Then eight nine ten. Oh, it's a right number of zeros.
 Then eight, nine, 10.
 Oh, it's an actual number.
 Just put some like a number.
 Zero zeros.
[03:12:51]
 Because it was not a zeros.
 Not by itself.
 We can start it with one.
 Five, four, eight, nine, two, three.
 OK.
 That looks good. >> Oops.
 >> I think the phone number will come in.
[03:13:12]
 I think the phone will come in as a bring inside a good number.
 >> It's a number in my function.
 >> Okay.
 >> It's a number in the database.
 So they were able to go where it works.
 It's when the data gets transferred from the front end to the back end.
 It gets it comes in.
[03:13:36]
 I mean, you are they invited as a number, but it gets converted to a string.
 Everything gets converted to a string when it goes through.
 Okay, but I haven't finished over here in the function yet. Okay, yeah, let's fix the function.
 You need to use the update. it. This part's to read that we wrote the other day where we're reading the account
 first. If it exists. And then I am not evaluating the password here.
 >> Yeah, you don't need to.
 >> You don't need to.
[03:14:36]
 >> Yeah.
 >> Okay.
 >> We're not authenticating.
 >> Yeah.
 >> There it goes. >> Okay. >> Are we telling you? >> Oh, no, I guess. Okay.
 We're telling you.
 Oh, no, that's not right. Just send the request in.
[03:14:53]
 It didn't work.
 Just put the request object.
 It gives so errors. So this is a type error. So there's something missing. Yeah. When I put get command it puts the error away.
 Oh, no, send. It's not that you're not supposed to use a send method there.
 Oh, I mean, suppose he's the get method. That's why. Okay. Let me fix this one then.
 Because do I have the send method in this one too?
 Where is it?
[03:15:32]
 I do.
 I don't know why.
 I don't know where that came from.
 I think I had to get method in some things since X error was happening where I forgot
 to change the send and whoever was helping me which could have been an AI at that point decided that that was the right syntax.
 And so I very, very strongly no longer trust to AI to even write code of its own anymore, because it doesn't do things that make sense. It does things that don't make sense.
 But I don't really need to return anything to the user.
[03:16:14]
 I can just console all of this.
 Or I can reach out.
 You need to.
 No, you need to follow the tests.
 Yeah, but the tests. Yeah, but this is the same test. The test part is just a paper.
 Yeah, but I mean, that.
 No, wait, open the test.
[03:16:37]
 The test.
 Okay, so, and so you're looking for if it exists, right?
 Or if it doesn't exist, which one do you want to check for first?
 I'm checking that it successfully updated first.
 Okay, that's just okay. We'll take the happy path.
 The happy path means everything is going well.
 I was going to do the happy path first and then I go to the other.
[03:17:02]
 Okay. Yeah.
 It's right.
 Because usually the happy path is the easiest one. Most of the time. go to the other. Okay, yeah, that's why the easiest one most of the time it is the easiest
 or someone that you expect so
 wanted to expect. Yeah, maybe not the easiest. So you're not going to use
 yeah, comment that out even the get method right there because
 >> Yeah, comment that out, even the get method right there, because maybe you're not checking for it yet.
[03:17:27]
 You're just going to go straight and update it.
 So you need to use a create a correct request object there.
 >> Any way.
 >> You need to correct the correct request. >> Yeah, it needs to be the correct request.
 Yeah, it needs to be the correct one.
 So yeah, you need to key first and then you need the properties after.
 So do you know?
[03:17:55]
 No, you don't have a target email anywhere.
 Where's your email going to come?
 Where's the email going to come from?
 At this point, no, because this is the back end and we don't know what's on. email anywhere. Where's your email going to come? Where's the email going to come from?
 At this point, no, where, because this is the back end, and we don't know what's on the end yet. So the happy path says that if someone uses a function, they're going to be sending
 the parameters in. Where do you, where do the parameters come in?
 Where do the parameters come in?
[03:18:27]
 On the component, on the front end. No, I mean like in this function,
 where do the parameters, where are the parameters?
 Online 32, right?
 9 13.
 That's the parameters that's gonna come in.
 So I'll be user account.email.
 Yeah, that's where the email will come from. >> Me too, with these.
[03:18:50]
 >> Okay, that looks good.
 Do we have that key?
 And then we're going to perform the update.
 >> No, you need to provide the update information in the request.
 So this would probably be another item.
 You should double check.
 The update demo to see how to properly form the request.
[03:19:23]
 That's how my other screen.
 Don't just guess there because yeah, that was the attribute of baseline.
 Okay.
 So I don't want to take the password.
 I'll update the name and phone name before the comma.
 Yep, I was missing a bracket. There we go. Okay. So name, but the value is going to be the squiggling thing.
 We're not easy recount dot name.
[03:20:25]
 I'm getting it.
 It's just taking me longer than I want.
 Okay.
 That works.
 And then return.
 Well, do the request first. I mean send it, Do the request first.
 I mean send it send the request,
[03:20:47]
 but you're not going to use the send method.
 You're going to use a different method.
 When he's the put method, if I remember correctly.
 Maybe they can. I'm going to use the update method. So if everything works right, then what should be what you do be returning according to the tests.
 Okay, so there's a time error because you didn't put string in the return in the function
 signature.
 And the find the other one of the options that in your tests.
[03:22:02]
 It was for the other. It was that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one was the one that was the one was the one that was the one was the one was the one was the one was the one was the one was the one was the one was the one was the one was the one was the one was the problem. Yeah, that's fine. Yeah. So this one there all streams are in the
 cup coming through.
 It passed.
 Okay.
 There's a there's a typo there on line seven.
 On this.
 Why is there a typo on that?
[03:22:53]
 Oh, I'll let the dot.
 I can't see.
 Okay.
 All right.
 So the next test is.
 If the email address did not exist, which I have here.
 No, that's not the balance for empty email.
[03:23:23]
 Yeah, that's how I treated not exist.
 No, what you what you mean is that the email account
 that's not that.
 Hang on. I thought I had one of those in here somewhere.
 I might not have tested it. I thought I was testing it.
 For an already existing email,
 I said, oh yeah, does not exist as a totally different test.
[03:24:03]
 Okay, so, but with similar, similar, uh,
 structure. [BLANK_AUDIO] [ Pause ] So how do you check if an email exists in the database?
 I'm wondering now right now.
 So I would have to use the get command here to read the thing.
 So then I wouldn't need the second.
 Yep.
 Yeah, it has to go. No, I still need the license client.
[03:25:41]
 I mean the new client definitely needed.
 So then.
 Yes.
 Yeah, move that down.
 Yeah.
 It's down.
 Or even after the.
[03:26:03]
 I wasn't going to put it after the get input.
 >> Yeah, after the request.
 After you send it, after you get a result, basically.
 >> Yeah.
 >> You have to get a result first.
 Send the request.
 You have a line for it already.
[03:26:21]
 It's commented out.
 >> Yes.
 >> It's a line 27 it already. It's commented out. We have a blank 27, 28.
 So your Boolean has to do something with a result.
 Read result.
 Julian has to do something with a result, read result. You imported something on 9.10 on accident.
 No, that was, I don't know where that came from.
[03:27:01]
 That's mess.
 The, uh, it's going to be read result that item. Is that's where your items come through.
 You always get a result from.
 From the get that.
 Oh, it was right. Okay.
 That's how I did it in the read one.
 Okay, let's try it now. I think it'll work.
[03:27:47]
 Yep.
 Maybe, maybe put that comment on line 25.
 Put it closer to where it belongs.
 I'm going to put it belongs. I'm gonna put it on 9/16 because then I'll just put all that stuff on
 in and I'll put a new comment down here that shows update account information.
 I like to comment my code because otherwise it makes no sense.
 I like to comment Michael because otherwise it makes no sense. Thank.
[03:28:27]
 Why is this having a thing you're hearing here?
 I think it's wrong.
 What you can do is just turn it into a separate function.
 But yeah.
 That way the name of the function is the comment.
 If you have a function called update account information,
 that's your--
[03:28:49]
 >> This one's contact.
 >> That's your account.
 >> For example, on line 30, you have a comment that says
 data account information.
 But if you had a function called update account information,
 and it did all that stuff then your function would be
 also in the comment.
[03:29:09]
 Oh, just making another function for that?
 Yeah, but you don't have to do it.
 I was just providing an idea, but you can do it like this.
 This is fine.
 With a comment.
 If I feel like I have to put a comment like that, I usually just turn it into a function.
 But it's OK.
[03:29:35]
 You can do it like this.
 If for now is good, in the future, I can do that extra word.
 So response is not doing anything now though.
 Yeah, because usually when response comes in, it, it, everything is fine.
 So you don't really have to get, get a response. I just, I just quit the way.
 Yeah.
 Because that's how you want to actually want to check the response and make sure you get a status of 200.
[03:30:10]
 Well, I might need you for the next test, but for now, for this test, it works.
 The way it is.
 Okay.
 That's a wrong test. We should be looking at.
 I mean, this one.
 So the password is incorrect. >> That's the wrong test. We should be looking at. >> I mean, this one. >> Yes.
 >> So the password is incorrect.
[03:30:31]
 Row and error.
 So I guess that would have to happen before the update as well.
 >> Yes.
 You can put a comment there.
 So, technically, I could take this client up here out of the loop. No, you need the client. Oh, yeah.
 No, I need to call a new client every time.
 No, no, no, no, that's no, don't call it.
[03:31:16]
 Just every they'll all use that one.
 That's what I'm saying.
 If they're all using it, it could go outside the loop.
 Yeah. Technically, there's no loop. There's just a comment. It's a section.
 We'll take it out of that system.
 And we'll request read is its own section too.
 Okay.
[03:31:37]
 And it's whatever they're doing with the results. So.
 Yeah. Okay.
 Oh, but if I call read result again.
 You don't have to call it again. You'll get all the information there.
 You can get the password from there.
 Yeah, that can all go up here.
 That's good. Why did this? [ Pause ] So this is going to be more problematic because I did. I took it away. So it was like, yeah.
[03:33:26]
 Okay. No, how do you check as the password is correct?
 Yeah. That's it.
 Okay. Now you can run the test.
 You're going to run all the tests. You didn't put only.
 No, it's right now.
 I let it run all of those tests on purpose.
 It passed the first three tests.
[03:34:20]
 Okay.
 So the next one is oops.
 Is it typo? [BLANK_AUDIO] [ Pause ] [no audio]
 [no audio]
 [no audio]
 [no audio]
 [no audio]
[03:36:01]
 [no audio]
 [no audio] [no audio] I think you want instead of checking read result.
 I think you wanted to check.
 >> I want to check users.
 >> Yeah. That's true.
 >> Yeah. [BLANK_AUDIO] [ Silence ]
 >> There was four developers.
[03:37:14]
 I was so nitpicky on the error messages, being explicit,
 so that the user would know what to do.
 >> Mm-hm.
 Well, this part is right for the developers.
 >> This part's for the developers, but no, every time I work on a project and the developers
 just write like, "This was that," and I'm like, "No, no, no, you have to tell them
 in plain English what the problem is and how to fix it."
[03:37:38]
 You can't just tell them what the problem is.
 They're not going to know how the users don't know how to fix stuff.
 The worst of it was getting the errors back from the mainframe written from 1970 to 2013. '39. '19? '39. I think there's something wrong there.
 It's not. >> Yeah.
 >> Okay.
 Let's run the test.
 >> I think it's still failed.
[03:38:24]
 >> It passed. I think it's still failed.
 Wait, something else happened.
 The first test, the first test now failed.
 Probably because it's test data.
 Okay, yeah.
 This specific test data. Okay, yeah, this specific test data, that email address may not be in the database.
 Let me see. Yep, that email address does not exist in the database. Let me grab a different
[03:38:56]
 address.
 Yeah. [BLANK_AUDIO] [ Pause ]
 >> Still failed.
 [ Pause ]
 >> Wait, what happened over here?
 >> Something don't worry about that.
 That one's done.
[03:39:46]
 It's because the other one is failing.
 >> No, but this is not a valid email address.
 >> Oh, that's not okay.
 >> This is the one that's failing.
 The updates to valid information.
 >> Yeah, there's no app symbol there.
 >> I see that, but that email doesn't exist.
[03:40:07]
 Okay.
 The email exists.
 Something happened in AWS just taken you out.
 All right, I will just use.
 Really.
 What is this one?
 Because I know this one.
[03:40:23]
 Up. [ Pause ]
 >> Pathowards should be matching to.
 >> It's the correct pencil. Oh, okay, it's tripping the username password on that test, even though I'm not updating these or naming.
 - 'Cause you put,
 that's the name that's not easy.
 - Yeah, 'cause you put, or put a debugger there on line 36.
 Put a debugger there.
[03:41:27]
 Yeah.
 Like right on line 36 or right before it.
 And then after it also.
 You can catch it.
 Oh, I started console logging and stuff because it was easier.
 Oh, OK, yeah, you can do that too.
 I'll just run a debugger for now because that way, I didn't have to go through the debugger and I could see it immediately and attached to result what the error was.
[03:41:57]
 Okay, we went and it says wait, I have to open a debugger.
 Yeah, and start the test in that terminal instead.
 Wait, I just opened this and will never history or call.
 You should just be able to put a red dot instead of the bugger, the word the word debugger. >> Well, I have now opened it from the workspace.
 I haven't tried to do that since.
 So we stopped there.
 >> Okay.
[03:42:33]
 >> So we know.
 >> Okay.
 >> So let's put only one.
 Okay. That's going to be the first test.
 Okay. So we know that there shouldn't be a username.
 I mean, yeah, there shouldn't be a username in there.
 You can verify that.
[03:42:47]
 Check in the side handle.
 In the next section, it's not in the local section.
 It's user account at the bottom.
 There's no user name there.
 Okay.
 So in that case, user name is undefined.
 And is username entered defined?
[03:43:31]
 No, it's right because we have it. We didn't run that line yet.
 We're trying to remember which step step into.
 Yeah.
 It's still undefined. Well, it hasn't finished yet.
 It didn't run the line yet.
 Okay. It's still undefined. Or hasn't finished yet. Did they run the line yet?
 Okay. No, true.
[03:43:49]
 Well, where is it?
 The line is wrong.
 So, yeah.
 Basically, you have to fix the line, Jack.
 Something is...
 I'm going to take the bore out for now.
 Okay.
[03:44:04]
 I don't want to have multiple variables there. Something is I'm gonna take the ore out for
 Okay, I don't want multiple variables there
 causing problems so the logic is wrong so
 But undefined instead instead of empty string ah
 That makes sense. But it's also possible that they could put an empty string, but, you know, that's for a different
 test. Okay. That looks good.
 And press play now.
[03:45:10]
 - I did. - Let's look at the results.
 - He still failed.
 - Okay, let's why I did it failed.
 - This time he says the password.
 - The password is wrong. - No, no, that's the wrong it fail. It's time it says the password.
 No, no, that's the wrong test.
 That's the update.
[03:45:29]
 I exceeded the time out.
 So I just press this replay and then it's
 just press play through it.
 It's not there.
 No, it's just exceeded the time out. Just this, you could take out the debuggers.
 And play to, or play, yeah, play through it. >> Yes. >> Okay. >> Okay. >> Okay. >> Okay.
 >> Okay.
[03:46:06]
 >> Okay.
 >> Okay.
 >> Okay.
 >> Okay.
 >> Okay.
 >> Okay.
 >> Okay.
[03:46:13]
 >> Okay.
 >> So, this is not working.
 So why is it telling me the password is there?
 >> There is a user tries update username.
 So that's another test.
 >> That's the test we were just working on them.
 >> Okay.
[03:46:22]
 >> Oh, okay.
 >> Oh, yeah.
 Okay. >> I'm not going to put in the right password. >> Yeah working on them. >> Okay. >> Oh, yeah. Okay.
 >> I'm not a student in the right path.
 >> Yeah, the password.
 >> Okay. Let me just use the known one.
 If I want to log back in to AWS, I have to go
[03:46:36]
 mess with the authenticator app and get the code and
 expand on this.
 Okay.
 >> Okay.
 >> Oh.
 >> All right.
 >> So, I'm going to do that.
[03:47:01]
 >> Okay. back on the debugger.
 Okay, one more test to go.
 Yeah, we haven't written this test yet, so.
 Okay.
 Whoops, what the nook, I'm just trying to make it smaller.
 Stop scrolling. And tip the bug is out before I forget.
 And you should just be able to put a dot instead of typing those in.
[03:47:36]
 Yeah, I'm going to try that next because I haven't.
 I'm going to go on the cell.
 Yeah, I already did that at the top so that there's not even try to get, there's not even trying to, because if this is the wrong format, you don't even want to talk to the nice client
 yet.
 I would even put it in this one.
 I would do it after the email exists because the email exists.
 I think we're still going to talk to the nice client. So, should I just going to say the password doesn't match? Probably what we see is a disarray.
[03:48:41]
 we see. I said this, where in it.
 It says no record was found.
 Yeah, that too. [no audio]
 All of them passed. Thank you.
 For some reason, I find this one harder to be than the create one.
 The create and the read were much easier. - Yeah, 'cause update, you're gonna check for,
 if it exists and if it does exist,
[03:49:29]
 you some other stuff.
 - Well, I mean, I checked if it exists in the create one too.
 - Okay.
 - It was good.
 - Yeah.
 'Cause I don't wanna create something that already exists.
 And DynamoDB doesn't validate
[03:49:43]
 with your primary key already has the same value.
 It lets you duplicate it. It's not handled this way. Okay. So just get me to set it.
 You can come with that. Good committed, but it's not done yet.
 Oh, it's not that. No, I still have to do a piece of that.
 I just have to fix it. Yeah.
 I can make it for everything that I fixed that I haven't yet committed because it's
 everything. And I had to make, yeah, I had to make the process. I had to make. Yeah, I have a way to.
[03:50:26]
 In the process, I had to fix some of the front end items related to this as well. So they've got so six.
 Um,
 but,
 they have to use her account.
 No, this is read. This is create. This is updates all in my branch. I can't I can't have another 35 branches just to fix this. That's
 Already have over 40 branches and the thing
 Fixed back in front and
[03:51:01]
 dynamo
 Actually, it's
 crude. So this is all fixed.
 No, it's not all fixed. I'm just going to recommit with another one. Okay, I'll just say
 crude. I can do it that way." It's a thing.
 "Kruh."
 "Kruh."
[03:51:28]
 "Kruh."
 "Kruh."
 "Kruh."
 "Yeah."
 "That's silly."
 "Yeah, create is done, read is done, I had to fix the routes.
 I don't know if the routes work, but I did fix the routes."
[03:51:40]
 "The routes at least have no TypeScript errors.
 Whether they work or not is questionable.
 Where do you want me to command? I already command it. Go away.
 I'm afraid to merge it to the main, yeah, because it's not done. Yeah, don't merge anything to the main, let's, until you test it here in this branch.
 Yeah.
 And if everything's working fine, then you can merge it.
 Okay, so I saw the fixed update route.
[03:52:24]
 And I fixed the update route. I had to put in as unknown as
 user account in here because TypeScript was having the HSE fit. No, you don't need to,
 you can erase those. It yells at me though.
 - Yeah, it screams at me.
 It doesn't let me fix it.
 - No.
 - Const user account.
[03:52:54]
 Why does it say that?
 Okay, just put user account.
 Put user account at the end as,
 just put it.
 - I tried to.
 Yeah, that doesn't work either.
 A yells for that too.
[03:53:08]
 Unless it's not.
 It's not.
 I'm not.
 But it didn't.
 I tried.
 Oh, yeah.
 All right.
[03:53:13]
 Let me see.
 What is it?
 It is. I'm there.
 Yeah.
 Pars cues is the same error, but with more text.
 And that's where it told me to convert it to as unknown first.
 OK. All right. And that's where it told me to convert it to as unknown first. Okay.
[03:53:28]
 All right.
 Then I guess you can just go ahead and do that then.
 I don't have no idea.
 I don't know enough timescript.
 What you could do is what you could do is just put many user account is any.
 Maybe and then. and then online 11.
 Any.
[03:53:51]
 And then online 11, but as user account.
 That might fix it, but see.
 That is not no to try at the sign.
 No, but as.
 Oops, easier account.
 - Yeah.
 - Yay, don't.
[03:54:17]
 - That's clear.
 - That means more sense.
 That's much cleaner.
 Only fits the other one.
 Not this, close that.
 I'm gonna add to close things 'cause don't want to start taking the coin. Yeah, you only use a colon when you're declaring something.
 When you're done declaring, and that's when you just ask. as.
[03:54:55]
 I'll see the number line number 11. You should take it from user account instead of query.
 All right, oh, sorry, not taking the target email anymore.
 - Okay, yeah, so I don't take the target email, I don't need this whole line here.
 Oh, yes, I do, apparently.
 - Read account, what does that require?
 - I think, read account means that I'm trying
 to read a specific account, So I need the email address.
[03:55:26]
 Right. I don't know. You have to look at it.
 This is the route for the read.
 Easy account. Yeah, let me open the function and what does the function need?
 It can just mouse over it and you can see it too.
 It needs an email. Only.
 It does need a target email.
 So the way I had it was right.
[03:55:54]
 So instead of getting it from query, you can get it from user account or you can just delete the delete line 9 or commented out.
 Oh, it's coming.
 There are old comments.
 Is that right?
 Yeah, it looks like it's right. >> Yeah. >> You're providing an email and the function is >> This is an email.
 >> This is a target email to do all of the stuff over here.
 >> Okay.
[03:56:41]
 >> Yeah, this is where I got very specific and I checked that when things were blank, I checked
 for blank null and undefined, because not knowing which way it was going to be.
 That was a pain.
 So theoretically this route ought to work now.
 And then I just have to read this route.
 Does that read route?
 Does it check for password?
[03:57:13]
 Patching?
 No, I don't think so.
 No, that's that becomes a security risk.
 That means that they just,
 if anyone provides an email,
 they'll have access.
 It does.
[03:57:26]
 But then I have to monkey around with all of this over here,
 and I couldn't figure out how to do that when I was writing.
 - You can just check if the password's match.
 Is there gonna get the account information?
 - Oh, wait, no.
 You have to provide the,
 instead of just taking in the target email,
[03:57:49]
 you can just take in the whole user account.
 - I don't want to take in the whole user account
 for the authentication though,
 'cause that means that somebody's gonna have to
 type all of their stuff in.
 - You don't have to use it all.
 This seems what you need.
[03:58:05]
 - I've just taken the whole user account here.
 Yeah, and then just take what you need.
 It doesn't like me.
 You can get, oh, because I have it here.
 Wait, now I have to re-write stuff down here.
 Okay, so if I'm doing anything. >> If you're not finding.
 >> Yeah. If I change this, then I'll just change everything.
[03:58:54]
 >> Yeah, that's fine. You just extracted extract target email from user account.
 No, that, okay, that works too. Yeah, there we go. The user account down there, user account.password,
 like online 21, I think what you want to check there is read result instead of user account.
 Yeah, I do. So I think that's what I was changing.
 I had to change the read result
 'cause I had the read result used to be called user account,
 but now that I've put user account as parameter,
[03:59:35]
 I can't use it down here for the variable.
 - Everything long-term needs to be changed to read result.
 - Yeah, now everything needs to be read result.
 Now everything needs to be re-released out.
 Not that.
 Okay.
 So you can fix a route and pass in the
[04:00:04]
 object instead of just the email.
 You don't have the object yet, but you're gonna get it.
 You have to extract it from the request. [no audio]
 Oh, it's that guy again. Well,
 we see no high-to-fix it, anyway.
 No, well, just put as user account.
 - No, remember it wouldn't work.
[04:00:49]
 If freaked out and then I had to do unknown.
 - I just showed you a strategy.
 - Wait, where?
 - Number.
 - Oh, to use the any?
 - No, that's not what I showed you. Just put as user account there. the search. And then we put any online eight.
 Oh yeah, that's what we did. Okay, yep. So now the year function called readuser account is getting a lot of information including
[04:01:54]
 the password.
 So you can verify the password now.
 Over here in the green user account. So you could update the test
 to see if the password is not right. Actually, the test will change because the test
 is over. Yeah, just change that to user account.
 Just select all of them with Control B.
 >> I've never received the Control D framework.
[04:02:35]
 >> I have.
 >> Press Control, not on.
 >> It pays to the.
 >> Wait, is it...
 Did it change for you?
 Like, you have a different button?
 For me, it's control D.
[04:02:51]
 In fact, do you have to highlight the thing first?
 No, you have to highlight the thing first.
 No, you have to highlight the...
 Then press control D.
 I did.
 Oh, your control D is different.
 Yeah.
[04:03:07]
 Are you on a map?
 No.
 Just check in because it could be that, too.
 No.
 So your control D doesn't work.
 I don't know.
 I don't know.
[04:03:21]
 No idea where that gets configured.
 I've never seen that.
 Did you install some extensions that changes some of those things.
 These are all the extensions I have.
 No pad plus.
 I said, "Rittier." I could be no pad.
 It's possible that the no pad was.
[04:03:41]
 Do you use that plus?
 I'm not sure if I've been here.
 I don't use that.
 So maybe you can install it.
 Oh, look, control D is duplicate selection in here.
 Yeah.
 Yeah.
[04:03:54]
 So that one's missing.
 I'm not working.
 I'm figuring for duplicate selection that then something else that is not
 this has reconfigured.
 No, this has reconfigured it.
 No, this one reconfigured it.
 No, it did not.
[04:04:09]
 Interaction is control D.
 So I suspect that pretty.
 I have pretty.
 I have pretty.
 I do not be configured the same way.
 Oh, so I just I didn't even change any button map button that I'm not be configured the same way.
 Oh, I just, I didn't even change any button map, button mapping is here.
[04:04:31]
 But I changed that in prettier, and I don't remember what I changed,
 because it was like six months ago.
 You changed some button mapping's in prettier?
 I have no idea what I've done in prettier anymore.
 There were a lot of settings in there.
 - Okay, you can click on settings.
 - Okay, the gear icon.
[04:04:56]
 Let's see, is there anything in here?
 I have me doubt that that was the thing,
 but I don't know, Do you use NotePad++?
 >> I can say I did.
 >> Yeah.
 >> But here, it's code.
 >> I don't remember.
[04:05:16]
 >> I missed it.
 >> Yeah, so I think you can un-solve it.
 If you need it, you can just re-solve it, but I don't think you need that. >> I'll just see that. >> I'll just see if you need it, you can just reinstall it. But I don't think you need that. I'll see.
 I'll see.
 I'll see.
 I'll see.
 I'm just able to.
[04:05:30]
 It's very easy to install.
 I know, but I would rather disable it.
 Because I like no pad plus plus and sometimes I don't like their text editor.
 OK.
 Well, OK, so maybe you can do control D now.
 Yeah, it does work now.
 Okay, first.
[04:05:51]
 So it was.
 Wait, now we won't fill the user account, though.
 Because you don't need to create that object yet.
 So put it back to target email so you can select them all.
 Select them all and then just rename it to user accounts. Press Ctrl+D to select all the target emails. There's two, there's more.
 Okay.
 - No, dude, it's a like them off.
[04:06:32]
 Why not?
 Okay.
 Press control D, keep pressing it.
 - Oh, it was, it was, okay.
 - Okay, now they're all selected.
 >> Okay, I didn't know you had to keep pressing it.
 I thought it was automatically going to-
[04:06:50]
 >> I know.
 It lets you pick one at a time.
 Now you fix the account object.
 It's not going to be a string anymore.
 It's going to be a user account.
 >> Yeah, I've had this guy too.
 We're going to be an object.
[04:07:13]
 We need to make an object not a string.
 User account is an object that has an email, a password.
 No, but I don't want to enter all that. Oh my god. Okay, copy it from the
 other ones.
 I can't find it. Oh, wait, I opened the function not to test. That's right. You placed the whole line.
 I was, yeah, but I need to save this login because it's the one that works on this time. The test will also check for the email.
 I mean the password.
[04:08:22]
 Do you have a correct password for that?
 I have no idea what this one's password is.
 I'll have to go fix it later.
 When I log back into DynamoDB.
 You can just pick an email that works.
 This one is called create account.
 Is it going to create?
[04:08:51]
 You don't need to include all the other information like username.
 This is the read test.
 This is just the read test.
 Yeah.
 So you don't need to include the username and stuff like that. No, I know.
 But I was working from top down in the monofix to the other.
 What the hell?
[04:09:15]
 That. >> You can copy that one all the way.
 >> I'm just going to paste this all all the way to.
 Wait, no, I can't.
 - And I have to go to once that I have because these data account,
 these accounts were specifically paid.
 - Yeah, that's fine.
 - You can just paste it underneath it.
[04:09:58]
 Paste it underneath and replace the email.
 - 'Cause this test was a pain in the butt with the data
 because I had to go make a
 specific not make but choose
 specific data for each test.
 But I don't know what this one's past
 for this.
[04:10:23]
 That one doesn't exist.
 Well, it doesn't mean the password.
 Because that's just if the yes, it does.
 Yeah, because user account requires it.
 It doesn't matter what you put it.
 It doesn't matter what I put there.
 It's testing when the email is not there.
[04:10:39]
 So I don't know how it's going to do anything with the password at all.
 It doesn't need. password at all doesn't need
 yeah, it doesn't need to
 yeah
 this one is defined if you want but
 That works because I don't like typing in valid passwords for the room further.
 Why can't users highlight the whole contents between quotes you so we computer. This one I have to go check it's password later because I don't know.
[04:11:48]
 >> Which has to be the name is not in the table.
 The name?
 >> Yes.
 >> When the name is blank.
 >> Oh, I see.
 Okay.
 >> Yeah.
[04:12:12]
 It wouldn't be undefined. It would be an actual password. Whatever it is in foreign checks when the username is not in this table.
 And no idea what this one is.
 No idea what this one's best for this.
 - Is it requiring, are you requiring for there to be a name?
 - No, well, I was initially, yes, but now I'm not anymore.
 When I wrote the test, I was.
 So now it's fine.
[04:12:43]
 I can still check if there's no name it would just give
 information it'll just say no name was found it's not saying it's required the
 message doesn't do that yeah yeah it's still a valid test
 [no audio] [no audio]
 [no audio] You don't have to put the whole path there.
 You can just put the root name, which is read user account.
 It will find that file for you. >> Just like that.
[04:13:47]
 >> No. Without any doubt.
 >> Without the task. Without TS.
 >> Really?
 >> We move to ask.
 >> Yeah.
 >> That is so much.
 >> Just a root name. Cool.
[04:14:06]
 Siri, open Google Authenticate.
 Oh, come on.
 I do not have to put this ID every day and time.
 It's the multi-button.
 Come on.
 I'm going to pass for it.
 Isn't that correct?
[04:14:31]
 Is that correct?
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
[04:14:39]
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it. I'm going to pass for it. I'm going to pass for it. I'm going to pass for it. - Absolutely. - Okay. [ [] [
 [
[04:15:10]
]
 [
 [
]
 [
 [
]
[04:15:22]
 [ [ empty password. That's good. This one is not supposed to have a new new new
 just using 24. This is not having a name. And it does have a password. It does have a
 password. If the same password, I think I got it and sounding to sound easy.
 The same password repeatedly for these purposes.
 Cause I had it was too much to try to remember eight,
 85 different passwords.
 And this one and different. Okay, that's work. [ Pause ]
[04:16:32]
 >> Wow.
 >> It's going to be a little slow.
 >> The dot works.
 It's stopped on the debugger.
 >> I didn't do any deep over there.
 >> At least it stops.
 You know it works.
[04:16:44]
 I have to put it in the dot.
 - Yeah, I'm actually done it by accident.
 There we go, all of that still works.
 - Hey.
 - I just have to finish the delete one for the thread.
 - And the update route.
 Maybe you can commit that since that's a milestone.
[04:17:13]
 You fix the read user account.
 Whenever you have a milestone, you should commit those.
 But you have to add it for.
 That's what got to add it for us too. That's about to add it again. Yeah.
 Are you cooking? No, there's the pop pop it toy that I'm just
 fidgeting with. Oh, because it sounded like someone was having vegetables.
 >> Oh, yeah. That's right.
[04:17:51]
 >> You can admit.
 >> I would like to approve process.
 >> You updated the re-user account to take in an object.
 Yeah. I'll take care of the delete because that one should be pretty easy. Well, this is a good, this was good. No, it really helped me.
 I have a delete.
 I'll take care of the delete because that one should be pretty easy.
 And I have to go and redo this route with the same logic,
[04:18:54]
 the update route to match the new logic that we did on the other routes.
 OK, so the thing I want you to do is--
 There is no delete route. Yeah, there is no delete route apparently. I have to make one. Okay, so the thing I want you to do is
 Yeah, there is no delete route apparently. I have to make one
 Okay, because there shouldn't be a conflict so right now you're
 Your front end The issue is with the front end. It's not rendering because it's it's always looking at the
 The local host when it's always looking at the local host when it should
[04:19:25]
 be looking at DynamoDB. Are you able to deploy to DynamoDB yet?
 On the front end? I mean, I mean, the back end is the back end.
 Deployed to AWS. Back end. You mean Lamb lambda? Yeah, the back end is already on lambda.
 OK.
 So the front end should be looking at either--
 --be looking at lambda.
 Apparently looking at the front end is still on the browser router.
[04:20:04]
 No, I mean, like when it's like when it's getting a quote, it should either
 look at local host or lambda. And it needs to choose between those
 as a whole bunch of stuff that's going to local hosts on the back end.
 The front end doesn't go to lambda. I haven't got that far because
 I didn't see a point in changing it when the back end,
 don't fw wasn't ready. But the back end is deployed to Lambda, right?
 I think so.
[04:20:46]
 You can try. Yes, because there's a there's a
 file.
 Okay, and do you have a, uh,
 a deployed at lambda script?
 Yeah.
 And the package that I
 json.
[04:21:02]
 Yeah. And the package that I've JSON.
 Yeah, deploy. It's going to build production and the.
 Okay.
 Yeah, so you're.
 You're.
 Lamb to URL in one of the assignments.
 Please use your send me a message that I didn't put the
[04:21:22]
 lambda URL and then I forgot to update it and then I've
 deded it with the Lambda URL last week. Yeah, so I think right now there's an error in your
 capstone because you're what I'm looking at it at the live github site. It can't get
 the code of the day because I haven't been to it.
 So God's working on this code and now it's a simple fix because all you have to do is tell it to
 contact Lambda instead of local hosts. But not from there yet to do it from your front end code.
 but not from there. You have to do it from your front end code. So, I haven't gotten that part yet. I haven't done it.
[04:22:11]
 I think it, let's, I think you should try it because right now it's like, right now it's like,
 and you've deployed something that is not production quality yet.
 So you want to, whatever is deployed,
 you want to make it as much production quality as possible.
 - So you're back to the front of the comments.
 - Yeah.
 But I want to new branch for this, right?
[04:22:35]
 - This is,
 no, you're not doing this,
 - You can do it in the main branch
 or you can do it from back there.
 It doesn't. - No, I want to do it in this branch because it's connected to this work.
 So, yeah.
 Okay, that's fine.
[04:22:51]
 So front and, are you in the front end folder yet?
 Okay.
 The part, go to the part where it gets a quota today.
 That's okay. Let's see here. Okay. So where's the axial's part? Right there. So it's contacting only the local host. So you need to let it choose between local host and Lambda.
 OK.
 You know, where did that go?
 Something like this.
[04:23:47]
 Yeah. No, no, no, it's similar, but you're not going to check process that ENV. You need to check host name.
 Something like that. So I'm going to check whether it's using the local host URL or the Lambda URL from AWS.
 The front end gets deployed on GitHub or on local.
 I mean, right?
 When you're running your front end, it's either on GitHub or on local.
 And in this case, it'll also be in Cloud Front.
 Not bad.
[04:24:30]
 You can also get something that checks.
 You have something that checks if you're running on
 any one of those.
 No, I've never done that.
 Oh, I didn't do it if it was.
 You just basically need to check.
 Like basically if you are, if this front end is deployed in GitHub.
[04:24:57]
 Yeah, that was part of the process.
 And when you just graded it, you said that I have to fix it.
 Yeah. So. Do you remember how to check if it's in GitHub,
 if the front end is deployed in GitHub?
 Was it not my root path? Might get root passing?
 Yeah, similar to that.
 We're setting to the order.
[04:25:24]
 That's in index t-s-x.
 >> No, I have a function that does it.
 I think it's a utility function.
 >> Yeah, you have a function.
 >> Get root path.
 >> Actually, root path is different.
 You can make one before get
[04:25:54]
 server maybe.
 But let's just do it manually.
 Let's do it manually for now.
 So you can get the dome.
 You can get in the get quote or in the component.
 No, you can get do it from get quote.
 This is just do it from get quote.
[04:26:10]
 And then you're gonna refactor it if you need to.
 So before you even do that axios,
 start before that.
 You need to find out what's your location.
 No, what's that for?
 No, I don't know what happened.
 Something weird happens.
[04:26:30]
 Okay, it's possible that my keyboard needs new batteries.
 We'll see.
 Okay.
 Okay.
 So,
 there's weird things happen when the batteries start to go.
 Oh, my God.
[04:26:40]
 So, the main first, get your domain.
 find your domain first, get your domain.
 That one will tell you if you're in GitHub. So if it's in GitHub, make a condition. Or maybe you can make a condition like is deployed
 or, yeah, is deployed. Yeah, it's the point works. I like that. I was going to put, I was going
 to check which environment I was going to make an environment, but environment is the main is the same thing.
 So it's deployed.
 That has to do something with the domain.
[04:27:35]
 Don't, don't, don't, don't, let's see.
 Come.
 There's
 here. [Music] You also need to make a case for a
 upfront.
 These are not to put
 eventually.
[04:27:55]
 No, but that's not.
 I'm going to make one in
 comment.
 Oh, or it's kind of fun.
 Yeah. Okay. But I don't know what the context
 of a CloudFront is. I don't know what the domain would be. Okay, then you can just
 put a to do there. [ Pause ]
[04:28:37]
 >> Okay.
 >> Okay.
 >> Okay.
 >> Yeah.
 >> That's weird. What I would do is I would put a semicolon at the end of 47 and then put the comments after
 that.
 So I colon.
[04:28:57]
 But it wasn't weird to me because I might forget to put it in the right place now, but that's okay.
 Okay, oh, I see. And I can't remember. You just put it or.
 Okay.
 All right, so if it's deployed.
 Then you need to contact.
 A different. contact a different URL.
 That would be the URL of Lambda.
[04:29:40]
 Wherever that is. I would say my comments.
 Why is it outside the parentheses? This thing hates me. [] [] [
 [
]
 [ [
]
 [ which you need to put the path. That's the fake API response path.
[04:30:34]
 No, that's not the path.
 That's not the path.
 No, that's not, but you need to provide the route.
 Like how you have it on line 54.
 Oh, oh, so yeah, I have to put the FAFCute thing.
 Would it be the FAFCute thing?
 Yeah, because it's just basically your back end server talking to Lambda.
[04:31:05]
 Okay.
 And then for this one, I will put it outside.
 But I'll just put else.
 That was. Yeah.
 No, some things are not going to respond to variable is stuck inside the if statement.
 Oh, boy.
 We have to take it up.
[04:31:41]
 If there is stuck inside a code blocks, right?
 Because of scoping holes. So the response, no, no, well, you could, yeah, well,
 what I would do is put that, put that back, put those back,
 put those back, and then on 949, make a new,
 make a response variable.
 Just put let though.
 Let me see now it's in the scope and then you just change it.
[04:32:14]
 No, this put a semicolon there.
 It's a
 TypeScript is going to have a cow.
 Then just put any if you're not sure what the response type is.
 Wouldn't it be response?
 Not sure.
 It depends on what Xioh's gives you.
[04:32:35]
 What does Xioh's give you?
 What does Xioh's give you?
 Put a mouse over the get and it tells you what it gives you.
 This one actually was.
 You see it at the end. There are mostly any.
 No, actually, it was for the process at the end.
 Amazing.
[04:32:58]
 That's the return.
 It's after the colon. So that's the return type.
 No, not promised.
 It said, "Promise in front of it." I saw it. Yeah, but you're not going to get the promise. You're going to get the, you're going to get the resolve value. This is better. Okay.
 And then remove const from line 57 because you want to use the response variable that's already there.
 Right. You can also remove the code block.
 Because that's just a one liner.
[04:33:36]
 Online 57 around line 57.
 You can remove that.
 You can remove that.
 Combine that with else.
 There.
 Only the same.
 I can go. Cool. All right. I'm not going to do that. I'm not going to do that. I'm not going to do that.
[04:34:05]
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
[04:34:12]
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
[04:34:19]
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that. I'm not going to do that. I'm not going to do that. I'm not going to do that. I'm not going now before it disappears.
 I haven't actually really lost anything except for the time that I checked out something and I didn't know how to uncheck it out.
[04:34:39]
 Then they were only fake costs. They were just invisible. What you did here was switch between local and the point back end. [no audio]
 Yeah.
 [no audio]
 I think see if it works.
 This, yeah, and this is try running it locally.
 If everything seems deployable,
 run the front end and the back end.
[04:35:30]
 But you also have to deploy the back end to,
 if everything's working.
 - I don't know that everything is working, we'll find out.
 - Well, if it looks fine, then it runs and it renders,
 that might be good enough.
 - I think there are other things in Maine,
 that may not be working fine, but we will see.
[04:35:57]
 - So let's see.
 Yeah.
 So this is the backend, you can run that.
 You could have to enter two commands for that.
 And if you haven't run the build.
 - Yep, oh, that's making you, I mean, you do.
 I still want not to have seven terminal windows, okay.
[04:36:22]
 But it's, it's just a.
 No, it's not, it's not run build anymore.
 It's something else.
 No, you're in the wrong folder.
 Oh, yeah, I'm in the wrong folder.
 I forgot. >> Yeah, well, Alicia back end is running.
 The back end is running.
[04:36:54]
 Let's see if the front end can talk to it.
 Which folder's there?
 >> I was in typing because I I had activated this comment.
 I was happy.
 No comments.
 Are you pressing comma?
 So the where my hand was and where the keyboard was.
[04:37:24]
 We're not in alignment. So I kept hitting the comma when I was trying to hit him.
 It was like off by having to.
 I don't look at the keyboard when I talk but I look at the screen because my hands by now should know where these are so much memory.
 Right. But now she knows where these are so much memory, right?
 I think Webpack is still building.
 Okay, so we have a quote that came in and it's that means it's it's properly getting from the local host.
 I'm just looking to force of habits, make sure that nothing is broken.
[04:38:15]
 But it seems deployable.
 Most deployable.
 Is that pass by sign in supposed to work?
 Is the sign in supposed to work? Is the sign in supposed to work here? We're not yet.
 I don't remember if I updated that or not.
 Nope, that's not connected to Dynamo yet.
 No, no, the sign in modal is not connected to the Dynamo DPA yet.
[04:38:42]
 Okay.
 So at least it's deployable. It's more deployable now than before. So I think you should merge merge it to main and then deploy and main.
 Should I not finish the delete first or should I merge what I have.
 You can, you can merge what you have.
 Because at least it's more deployable than it is more deployable
 now than it is currently.
 It was because currently it's looking for local server. >> It seems to be merged.
[04:39:35]
 >> Yeah.
 >> We have to merge the front end.
 No, I haven't merged the front end yet.
 Or does it merge everything?
 >> It merged everything. Okay.
 Oh, but you didn't push the back ends. I didn't push the back ends, but I guess you didn't
 make any changes to that fake cues anyways. No, I did all the work that we did that I
[04:40:00]
 do down the brow to everything was all in the back end and that's never been pushed.
 that I do don't have a route and everything was all in the back end and that's never been pushed.
 Oh okay submitted.
 Yeah, you never pushed it to lambda.
 Okay, so you can push it to our deploy to lambda.
 Oh wait, not yet.
 What am I doing?
[04:40:19]
 In the end.
 When you have to build it first.
 Oh yeah, it's going to build for you.
 We're running a build yet. No, it builds going to build for you. >> We don't even build it.
 No, it builds in it builds production in the command because we fixed that in class.
 >> Oh, well, good.
 >> Yeah, I took all of that stuff that was done in the sandbox and moved it to here because I did the lambda thing entirely.
[04:40:40]
 I just didn't do the S3 in the cloud in the capstone yet.
 Okay. So it used to have deployed. I just didn't do the S3 in the cloud in the capstone yet.
 Okay, so it
 gives you have deployed more more what more more more more more more more more more okay, I'm just gonna kiss
 okay, I'm just gonna argue okay
 So let's you can push to GitHub that will deploy it
 the front end I mean.
[04:41:13]
 What you could do is edit the script. The deploy script will just be get push.
 That way it's honest.
 Yeah, it would be the.
 It already is. It's been okay free. Yeah, it would be the. It already is.
 It's been an effort for my already.
 Yeah, we do that a long time ago.
 I just forgot.
[04:41:33]
 This has been so long since.
 Stop.
 I'm here.
 I'm going to play.
 Yes.
 Okay. So if everything's working fine, you should have >> It's in settings and pages. >> I'm just checking to see the comments.
 I know where it is.
[04:42:12]
 I just before I go to the deployment,
 I always check the comments folders to see if it's done.
 >> Okay. So look at the [inaudible]
 >> Oh, there's no quote.
 >> Let's see. >> Oh, it's still loading. It didn't build the front. I did not build the front and potentially.
 Yes.
 >> So maybe include the build in the
[04:42:30]
 DePaul script.
 So at least.
 >> I would say that's not
 connecting.
 >> I think it didn't build.
 You didn't build the front.
 >> I didn't build the front and potentially.
[04:42:44]
 >> Yes. >> So not build the front end potentially.
 Yes.
 So maybe include the build in the deploy script.
 So at least I was thinking about that when I was typing it,
 I was like, maybe I should add that.
 Yeah.
 I don't have it.
[04:43:00]
 Yes, I do.
 Yes, I did.
 So before that, but NPM run build,
 and push, right?
 typo.
 A dias, a typo there. >> Aye, Bo. >> Aye, Bo. >> Aye, Bo. >> Aye, Bo.
 >> Aye, Bo.
[04:43:27]
 >> Aye, Bo.
 >> Oops.
 >> Aye, Lassadee.
 >> That's better.
 >> Oh, it's not good.
 Oh, the problem here is you need to commit it.
 You need to commit the build.
[04:43:42]
 >> You're not commit the build.
 Can I commit the front end already?
 No, the build creates new files.
 Right? It creates new files in the display. We have to make the build first before I get to land it.
 Yeah, no, not getting deployed to land. It's only going to get from the front end.
 Yeah, but get needs the new disc holder.
 Oh, that means you need to commit it.
[04:44:12]
 After I run the bill, so get to me.
 Dash and which is eating and
 I just want to say it.
 Yeah.
 What? Yeah. Yeah. Yeah.
 You build. Okay. Put a, put a slash, put a slash in front of the quotations because
 you can't have two quotations there. Yeah, put a slash.
[04:44:41]
 Oh, yeah. Other slash.
 The other slash in front of it. It's the The other slash. The other slash. In front of it.
 It's the upside down slash.
 That's a back slash.
 The other's a forward slash.
 No, in front of it.
 In front of it.
[04:44:58]
 Oh, in front of it.
 Not after it.
 No, no, no, both quotes.
 So that one's fine.
 The other one now. Oh, in front, both quotes. So that one's fine. The other one now.
 Oh, in front of both quotes. Yeah, because those are.
 Okay, this way we want to do a good ad before that. No, you need to do a good no, what a bit. Okay. So first I have to build then add then commit and then
[04:45:24]
 boys. Okay. Yeah, that makes sense. That's the order of operating
 Do I have to quote this period?
 Read it aloud. That's a license. Well
 This is really cool.
 I like typing one command and doing all of it at once.
 It's so much faster.
 Mm-hmm.
[04:45:54]
 Of course, it's going to take longer to see the results, but.
 Okay, now it seems to have done everything.
 Did it push?
 Did it push? Did it add? Did it commit?
 I want to verify that.
 It stopped. It didn't show any errors. It gave me some warnings.
 Well, those warnings are from Webpack build.
[04:46:22]
 It didn't give any errors. There were no error messages.
 But I think it might have stopped on the commit or something. There's a
 commit. Let's see there. It doesn't say anything about pushing or did it. I think it did. Yeah, let's check. Let's check GitHub and see if the
 live site says it was updated.
 Go back, go back to pages, get hub pages.
 And then you should be able to see when it was last updated.
 Okay. Okay. So that one.
[04:47:10]
 I went through. Okay. Let's look at GitHub pages.
 I can go in here and check the.
 No.
 It was the view.
 Yeah. The fake choose. the the the
 the
 the
[04:47:33]
 the
 the
 the
 the
 the
 the the >> Yes. >> You might have to press control.
 Shift control R to do a hard refresh.
[04:47:55]
 >> Nope.
 >> Excuse me, error message is in the console.
 >> What is this?
 Okay.
 >> Clores.
 No access control origin header is pressing on the request.
 >> I have to do that.
[04:48:14]
 >> No, Viana, check it.
 Type, put that URL in there up there.
 Okay, so that one says hello from lambda.
 Tape API response.
 But that one's just okay, so that one doesn't.
 Why is it only say.
 Maybe it's the wrong lambda URL because maybe that's my back end lambda.
[04:48:40]
 Let me check.
 But I thought I was pretty careful to look for the front end URL not give you back in.
 I'm in a capstone as opposed to sandbox. Sorry, say onwards.
 I'm looking for land on.
 There's another it's also checking for
 function URL test, right?
 Yeah, yeah, from lambda. That's the right lambda URL.
[04:49:20]
 But put the put the path in the route there too.
 So try that again, but put the route of
 favorite cues, the favorite cues route.
 Uh, there it is.
 Why does it say hello from Lambda also?
 Maybe it's because.
 No idea.
[04:49:44]
 If you do that for your local backend, is that what it says also?
 >> Let me grab that limb done.
 >> No, I mean, your local backend.
 So is your local backend running?
 >> Oh, here.
 >> From VS code. >> With that.
 >> Yeah.
[04:50:06]
 >> Is it ready right now?
 >> It was running earlier.
 You saw it.
 >> Okay.
 I mean, like is it running right now?
 Is it ready to receive requests?
 >> That one looks like a different number page.
[04:50:21]
 >> That is.
 >> Why are the two lambda pages? Once for the sandbox. Wait, let me check. Okay.
 Wait, so which one are you looking? We need the one for the capstone. This is the one for the light. This is for the sandbox. I have the wrong description and I have to fix that but I don't remember where to fix that film.
 From the sandbox. If you want to fix, if you want to change that, that would be
 you would change it from the zone. I don't know what you're doing.
 Yeah, they don't worry about that.
 Yeah. So let's look at the backend again.
[04:51:07]
 So local backend.
 Local backend, the backend that's running locally.
 Local host.
 >> Okay. Put the fake queues API in there.
 I mean, the route.
 Let's see what kind of response it gives you.
 It's working in the past.
[04:51:30]
 OK, so let's see what's working the other day.
 It was literally working the other day.
 So let's check out that route.
 That's why it's broken.
 Yeah, that's why it's in the front end. So Yeah, that's right. - That's the front end.
 So the back end is crashing,
 so we need to find out why it's crashing.
[04:51:50]
 That's why you can't get through to it.
 So we load these back end.
 - Front end.
 - Now it's.
 - Okay, so we're gonna, what you want to do is make a new branch, maybe, or go back to the branch
 if you're going to make changes.
 Unless you-- [ Writing on Board ]
[04:52:36]
 >> I would be naming the band points.
 That back fixes, I think.
 >> Mm-hm.
 >> Okay. And this route, that's right here.
 Okay.
 Just about it's been working too.
 Let's make sure it's in the index.
[04:53:16]
 Index.ts.
 So it's been in the index.
 Okay.
 API response. Okay. API response. Okay.
 So let's put a debugger there and plan down what's going on.
 This is your fairing with it.
 Is running locally.
[04:53:38]
 Let's see.
 see. Now that's fine, I think. You can remove those code blocks and those are just one liners. You can remove the code blocks from the if statements and clean it up a a little bit.
 Oops, something doesn't look right.
 It's fine.
 Now the L statement, put it back down.
 Oh, the L system.
 Line 40.
[04:54:21]
 What if the L system here, I guess I highlighted it a quick too fast.
 Okay.
 Okay.
 Okay.
 It fits.
 Alright.
 Shall we want to debug before we run the, let's run the, let's rerun that. Let's see.
[04:54:41]
 Run the back end. I think the back end wasn't running. Make sure you don't have it running
 in any other terminal. We also have conflicting ports.
 Any terminals is it running? This is a front end terminal.
 That's Webpack. This is Webpack terminal.
 Okay. How about that debugger one? That's a front
 end debugger there. Okay. You don't need a debugger for the front
 end. I think that was for the back end. I mean, we were debugging in
[04:55:20]
 the front end before. Okay. It can probably close that then. I did. I killed it. All right. Okay,
 let's start the back end server. And let's see if we can
 the local host one to the local host. Okay, so that's working. Okay, so let's, we didn't even change anything here.
 Try, try deploying. That one doesn't look right, though.
 Right there.
 So which one?
 No one.
[04:56:31]
 Go back up.
 Yeah, that one doesn't look right there.
 Did you press enter on that URL?
 Because the URL then press enter. Okay, so that's, yeah, that one doesn't look right.
 That one doesn't look right.
 That one doesn't look right.
 That one doesn't look right.
[04:56:52]
 The point is directly to that.
 Didn't get deployed properly.
 I can turn this debugger off now.
 Yeah.
 So.
 Let's just double check the deploy to lambda.
 Oh, where did that head?
[04:57:14]
 It would be at.
 Maybe you can try and deploy to lambda again and look at the messages.
 I mean, like from your VS code,
 try deploying to lambda again.
 I'm trying to find my lambda window that I had open.
 I think I closed it.
 That's okay.
[04:57:35]
 You don't need to look at it right now.
 Let's just try to deploy to lambda.
 You can do it from the server.
 Stop the server.
 Yeah, you can stop that.
 Okay, so it's going to build.
 Look at the messages.
[04:58:02]
 Make sure all the messages look right.
 It's not done yet. Yeah.
 It's still building.
 Says last modified five days ago in AWS so it didn't take the deployment. Does that what it said?
 Where does it say that?
 Where is this?
 Right here.
[04:58:38]
 Okay, so it's deploying to the wrong.
 It's deploying to the wrong URL.
 Ah, bubbly. I probably pasted the wrong URL.
 Yep, it's deploying to the sandbox.
 That's what that's why it's showing the capstone in the sandbox.
 Okay. Okay. That should fix it now] That's why I always validate everything on the whatever third party vendor side there is.
 Like whether it's Git or AWS, I always check there's the,
[04:59:38]
 the C if things got received.
 >> Yeah, basically, yeah, just check all of the possible sources of air.
 You can press space bar and then it skips through all the data down there, I think, or Q or space bar.
 When it allows you, you have to use space bar. It goes to the next page. I see, okay. >> Oh, reload the Lambo. >> Oh, it's good.
 Yeah, you can use a browser.
 You can use a browser.
 >> Why don't you do that?
[05:00:09]
 >> As a deploy.
 Okay.
 Am I refresh over here?
 I forgot to clear the console first.
 There it comes.
 I will refresh this.
 Well there's an error in the recorded day function then. That one's checking the local host. For some reason it's checking the local
[05:00:36]
 host. It does say that it corrected the connection error now here though.
 Here it's floating.
 now here though. Here is is loading.
 Well, let's see. There's a look right when you load up the, uh,
 the lambda URL in one of the browser tabs.
 Open up a browser tab, a new browser tab.
 I just put the left. Okay. And then I just put the melody URL.
[05:01:07]
 Okay. And then I just go to the path.
 If a fuse path, we should get an object.
 Okay. That looks good.
 So I know that's working.
 Now the front end should be contacting that URL.
 Just double check. The front end has the camera in the front end component.
 Okay.
[05:01:26]
 Yeah. Can I I read properties?
 >> Let's look at it.
 Let's look at the code for the front end.
 >> We can change the records.
 >> Maybe we've got to await something.
 >> Possibly. maybe we forgot to await something. Possibly, but it was working before I added the new stuff just now.
 Something in the news is looking at the.
[05:01:55]
 Oh,
 there's a waste here.
 Why do you get your.
 You didn't capture the response there on 52.
 >> Oh, I did not get you to response.
 This is true. [ Pause ]
 >> Okay. I think that'll do it.
[05:02:43]
 But you have to read the poll.
 At least it will be working for me now.
 Actually, you can't deploy because it needs to be merged to main.
 Oh, shoot.
 Hang on.
 Okay.
 Well, it deployed the branch stuff. Yeah.
[05:03:07]
 [
 [
]
 [ six phone queues. This is a good.
 And we're in a room.
 Mm.
 Thanks. [ [] [ [
[05:03:50]
]
 [ [ []
 [ []
 [ [
 [ [ [ [ [ [ [ [ [
 [ [ [ [ [ [ [ [ [
 [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
[05:04:02]
 [
 [ [ [ [ [ [ [ [ [
 [ [
 [ [
 [
 [
 [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ Now you can apply it. [ [ [] [
[05:04:26]
 [
 Clear console, reloved eight.
 And then it probably didn't finish uploading it yet.
 [ [ Yes, it's correct.
 Yeah.
 [ [ [
 [
[05:04:44]
 [ [ >> When I check as soon as I get how pages it tells me when it's deployed.
 >> It's committed to new balloons.
 >> And it's said now. >> Okay, so let me load that.
 Let's see what's the problem.
 >> And I'll read properties of undefined reading data.
 It's the same error I had before.
 Unclot in public type.
[05:05:24]
 >> Press control shift
 R. Do a hard refresh. There we go. That's what it was. Yeah. There's still some funky stuff going on
 down here. Yeah. That's for this backend response assignment that I don't need in my final in my finale anyway.
 Unless it's required to be there, but it's not necessary to have that page that component is.
 Yeah, so you want to remove those because it's causing connection errors so you have to remove that.
 All right, so at least you have that working. And then I can finish the delete one.
 I need to go eat lunch because diabetic people need to eat.
[05:06:12]
 And thank you guys for staying. Yes. You're welcome. I'll see you. I will see you Monday. Bye.

///// FILE: "Level 4/transcripts 2/May 12, 2025 20-25.txt"

Transcript from May 12, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 Today is week 10 day one. And this week we focus on evaluations.
 So in the first hour we'll take attendance, do announcements, review, and squeeze in some practice, the things
 that I need to finish teaching you, the walkthroughs, second hour, do many evaluations
 and third hour, more many evaluations, but the assignment will be posted.
 I shouldn't say the breakout rooms will be pretty similar for both here,
 except the practice, one of the practices will be posted in the second hour instead of assignment.
[00:01:12]
 Okay, so now it's time to take attendance. If you haven't marked your attendance yet, head on over to your codex account and mark yourself as present.
 And now time for announcements. I'm going to load that up for you.
 Almost there.
 Okay, so announcements.
 All right, there's going to be another student collaboration day on Monday, the 19th. On this day, I'm not going to be available during class
 time. I need to take my, I need to drive my parents and law to the state
 capital so they can become U.S. citizens.
[00:02:28]
 And that's very difficult to reschedule.
 So I have to go with that schedule.
 The plan for remaining days,
 so we finished this week. Perhaps so in finale.
 We're gonna do final evaluations this week.
 Hopefully you can get it all done.
 If not, then you'll have to leak into the presentations week.
[00:03:03]
 Staff was,
 the codec staff is requesting for presentations to be done on a Tuesday.
 So, I'll keep them updated on your status.
 I'll keep them updated on your status and they'll confirm with me if Tuesday is a good day.
 Again, this is the very last day of class, Saturday 24th. All grades should be turned in. So that means I need to be able to
 grade things even before the 24th. I haven't graded everything yet because I saw that
 some of your assignments were behind and if I graded it, the points would be too low. And it would make the constructive
[00:04:08]
 comments, you know, less constructive. It'll be like, where is it's, you have to admit
 their requirements. It's like, you haven't started this, you haven't started that.
 And, yeah, so I saw that a lot of requirements were not met.
 So I'm just delaying the grading for that.
 I'm going to, I should be done by Tuesday,
 whether or not you have a lot of things done.
 You'll either get some useful comments or you won't.
[00:04:46]
 Like you won't get useful comments if you didn't even start on a section.
 Like for example, where is it here?
 Have some finale.
 So if you haven't deployed your site to S3 or Amazon Cloudfront yet, then it can't really give you constructive criticism about that.
 Or maybe this one.
 If you didn't,
 could figure front end to connect to local
[00:05:32]
 and deployed servers,
 and if you haven't started that yet,
 then I can't give you constructive criticism.
 All I can say is, you haven't done this yet.
 Or maybe this one will create a branch for
 creating a user friendly experience in the front end to use the back end AI
 server. If you haven't started this, all I can say to you, all the comments I
[00:05:58]
 can give you is you haven't started this. That's not very useful comments.
 It's better if you start it, and then I can tell you,
 and I can direct you.
 I can guide you and say, OK, this will be better,
 or this is not quite meeting the requirement.
 Do this instead.
 That would be more useful if something is started.
[00:06:23]
 If it's not started, then I'll just say, "Oh, you haven't started this."
 And then when you make corrections, your corrections might fall short because you didn't have enough comments to guide you.
 So if you're going to, you know, if I grade your assignment and you have some things missing in your requirements, when you submit corrections, read the descriptions very carefully.
 And even ask questions.
 Just to clarify because there's only two submissions for assignment and you want to make the second one count.
 If you're missing something, just one little thing.
 You get a zero on it.
[00:07:18]
 So make sure you read the descriptions and ask questions if you're not sure about something.
 So many evaluations are open for week 8. Right.
 Week 8 corrections until okay so Week 8 corrections are open until
 that was changed from Saturday now it's to Tuesday if you need to make corrections for week 8.
 You can do that week 9. It closes Wednesday for on time.
 Because there was a much time last week to do
 evaluation. So it will close Wednesday and you can still get on time points.
[00:08:31]
 But on time until, actually, it will be on time until Tuesday. So tomorrow,
 if you can do your week nine, if you can do your week 9 if you could do your week 9 by tomorrow
 Then you can still get on time credit
 You see if that's specified here
 I think we can take this close. That one's all done.
 But corrections could still be done on Tuesday. Up to Tuesday.
 U.P. is volunteering to start the week nine evaluations today.
[00:09:38]
 Today is week 10.
 There'll be, there's a new evaluation.
 There will be, there's a new evaluation posted here for week 10. This one will finish it up.
 It'll finish all the evaluations when you finish this and you pass this and then you,
 you've done all your, hopefully you completed all the other evaluations.
 This is the many evaluation for week 10.
 Explain and demonstrate transformers.js for the backend
[00:10:21]
 and how your capstone uses it.
 Explain and demonstrate an AI interface.
 Oops, there's a typo here.
 That your capstone front end uses to get an AI response or to get AI responses from the capsule back end.
 Explain and demonstrate persistent and expiring logins in your capsule.
 I've already done walkthroughs for this.
 Explain and demonstrate how accounts are created and edited in your capstone.
[00:11:13]
 So these were parts of capstone finale, all of these. And capsule and phenality.
 Well, it's due on Thursday, but it's been introduced for a while now.
 Ever since we ate. So if we have some of these and so you can get it out of the way, get some points.
 So, so let me know if going to be doing on Thursday in the 15. Hopefully you can do some of your evaluations, maybe you've
 already already have the the CRUD stuff done. The last thing we learned was artificial intelligence, the crud stuff, like,
 where's it?
 So this is AI, this is the last thing we did,
[00:12:54]
 or the last thing we learned, but the persistent
 and expiring accounts that's related to crud.
 I did the walkthroughs for that,
 but CRUD was a much older topic.
 You should be more familiar with this.
 And accounts.
 These will test your front end and back end skills
[00:13:21]
 along with the AI because they include both front end design,
 back end functionality.
 So if any of those assignments close on you,
 the student success team though,
 time is close on you, the student success team though.
 Especially if you need more points on any of the assignments.
 Let's see, practice problems are on the side, help seeker. So don't get stuck for more than 15 minutes.
[00:14:03]
 So let's see if there's anything new until I cohort.
 I haven't had a chance to check it yet.
 And it looks like there's nothing new. I mean, the newest thing that's already answered is about when you have a route handler.
 Okay, Alexander's about to post something.
 When you have a route handler and you want to insert the data type for the
 For the request data that's coming in either the query or the body
 Sometimes they won't let you do it directly
[00:15:00]
 So one way like this this one would I mean you can still do way like this, this one would, I mean, you can still do it like this, but
 TypeScript will just annoy you with a red line. One way to get around that, two
 different ways I posted here. You can use any first right here and then cast or
 assert the exact or the correct data type right there.
 Or you can assert the correct data type here, but put any at the back.
 And that solves that.
 And that solves that. Look, LM, continue to, you know, put your notes and your code and your transcripts in there.
[00:15:55]
 And it will help you find the answers based on lowest tonic class. Transcripts are available up to week 9, day 4.
 So let's see, did I update it for day 5 again?
 Nope, not yet.
 So up to the recordings.
 Basically, they're just walkthroughs.
 So, those are actually optional recordings. things that you already know, or should know, like topics, tech, well, some of the tech
 things were techniques were new, like a mapping object, but you know, creating Redux,
[00:16:57]
 states, using models, those are things that we're talking for. And you can learn those before.
 So there's sort of like a practice,
 nothing, not anything really new.
 The most recent recordings about last week,
 they're all,
 you know, just nothing really new.
 Those practice.
[00:17:27]
 So I'm going to do another practice for the first hour and review,
 but make sure you take notes if I say anything that you missed.
 And turn on your microphone to get ready for the mini evaluations,
 or if you have a question.
 I'm like, Sandra, you want to ask your question here in class instead or you just want to post it on
 on slack.
 I'm going to start the review now.
[00:18:15]
 So this is the review from Saturday.
 We were working on the side of practice. And a lot of it was just getting done with step number three.
 When the sign-up is formed is submitted,
 check if the email is in the database.
 So this one took long because I didn't have a route for that.
 So basically I just coded that from scratch.
 So that was practice.
[00:18:41]
 You got to see how to do it from scratch again.
 Maybe it was a little bit faster, but you should have been familiar.
 And you should already have something like this in your capstone.
 And you might have it in your sandbox if you did this practice.
 So I'm going to continue the steps here.
 I'm going to share my screen first. Okay, so one of the things, one of the new things that I went over, because this was When you're testing, you see here, the front end. [ Pause ]
 Yes, we left off.
[00:20:14]
 There were some tests that we did in the modules here.
 Which one was this?
 it's one of the most it's
 create a account where it says I know I did it just for something
 they answered [inaudible]
 There was a test that we did.
 Activate the click.
[00:21:13]
 I think it was one of these, here it is, handle signup attempt. Handle signup attempt.
 And you see the test here.
 Somehow for this test, it required just configuration.
 This one's up here
 Must install just environment
 Got which one that was exactly
 Sign up attempt
[00:22:02]
 Sign up attempt.
 Let's see handle sign up attempt is going to load
 going to get
 that extracted
 get a response
 Nothing here looks like it needs a, oh,
 and we'll sign up attempt. Nothing here looks like it needs a document. I don't
[00:22:42]
 remember, I don't remember why we had to configure just here.
 Let me see.
 I can cancel this.
 I can block out this or comment this out and I'll find out which one. required it. Before I do that, let's check the package JSON, which will Let's see, npm run test.
 Make sure those pass.
 Actually, they might not pass because it requires some things with a database,
 had to do some manual deleting whenever I created account.
[00:23:55]
 So let me start this server first.
 And can I start? I don't need to start the front end,
 but I do need to start the back end.
 I'll start it anyways.
 Okay, this one's the back end.
 I'm going to start this one.
 this one. It's reminding me to do it with just one command, one terminal one command. Okay so we're on the test from the front end. It'll fail because it requires some
[00:25:07]
 writing new data.
 I need to, I need to load AWS. So let me just do that really quick. [BLANK_AUDIO]
 [BLANK_AUDIO]
 I just need to manually delete this one here.
 To show that the tests are passing, but I have to manually delete that every time.
 Let me just delete it again, but I'll disable this one, maybe.
 It will have to look at when you go. And then we just deleted again, but I'll disable this one. Maybe it will happen, okay?
[00:27:07]
 I don't remember which one that was for. [no audio] Oh, yes, okay, so it needs to check which server to communicate with.
 And the window object is required for that.
 So if you run this test, because this one needs to create a count. [INAUDIBLE] OK, it uses authentication name of US.
 And this is the one that needs the window object.
 The window object is used in this module here. It needs to check which domain it's in. And so just needs So you must install jett- jett- just when allows tests with the window and document objects.
 What you need, you must install just environment, just JS DOM.
 So we want to allow the setup just using this config file, just.config.js.
[00:29:48]
 Where we set the test environment to JS stop, and we want to also
 include this one, just environment JS stop.
 This allows the use of test or this allows testing modules that have window and document objects or
 that use the window and document objects.
 So let's be aware of that. So we're going to continue the practice.
 I mean, let me just review the practice.
 Create a sign-up component with a sign-up button and model.
[00:30:58]
 This is the front end. I'm going to just render it here.
 Has a sign of button there. When you click it, there's a sign of modal.
 Notice that it's not aligned here.
 On your capstone, it should be aligned,
 because this is not a good user experience when it's like this.
 This is just, you know, just for quick fixes,
 getting some concept running, and then,
[00:31:22]
 but for your capstone, it should be aligned,
 and maybe you in center
 or extend it you can extend this all the way
 whichever looks better
 center or extended.
 Let the modal contain a sign-up form that asks for an email in password so that's what you saw there.
 When the sign-up form is submitted, check the email.
[00:31:57]
 Check if it's in the database. That's when we got into coding this part handle signup attempt.
 Basically, just going to get the data.
 This part is checking which server to communicate with.
 And then add the path. checking which server to communicate with.
 And then add the path that's the sign-up path.
 This one's getting the data ready.
 It's disforming an object that contains email and password.
[00:32:44]
 This one sends the data to the server URL. So it might be the local server.
 Well, this one, in this case,
 it's going to be the local server.
 But when it's deployed, it's going to be the Lambda server.
 And then the response to that data
 is going to contain the account information.
 Basically, if there's the account information comes in, that means that we are not able to create an account. So it's going to check if the email is in the database.
[00:33:50]
 Well, we have to do the backend part here, because I didn't create the route yet.
 So this is the path and the route right here the route handler is right here
 there's not going no definition found okay there's a route handler.
 It's going to call the function called create account.
 It's basically what does it do.
 It imports the nice client, gets an account.
 So if the account exists, well that means we can't create it because it's already there.
[00:34:54]
 So we're going to return undefined.
 And when you have a return statement like this, if this line runs, everything beneath it will be skipped because return basically just jumps out of the function wherever this return statement is.
 So that's one way you can avoid running the rest of your code if you put a return statement.
 A conditional return statement. See, this is a condition. This
 return statement will only run on this condition. If this condition is true. This will,
 when this runs, it skips all of this. But if it doesn't run, it keeps on going.
 So this is where the request is made to create the account with the put command.
[00:35:48]
 First one was checking if it's already, if the account was there.
 If it's not there, then we create it with the put command.
 So we checked if the email emails in the database. If it is sent an error message,
 then it has been previously created.
 So let's look at that route.
 So if we contact the signup route here from the front end,
 and it gives me back nothing if it's undefined
[00:36:31]
 The the sign up component right here
 Find up modal right here
 It's supposed to
 The sign up mod right here. It's supposed to,
 the sign up model is supposed to,
 give a message and account with the email already exists.
 So basically this is the one that either gives us an account
[00:37:02]
 or undefined.
 It comes back as undefined if it already exists. And then we run this error message into state variable,
 Redux state variable called signupmodal error message,
 which then gets rendered in here by the sign of content. But
 that's basically just almost just copying, placing because it was almost just like
 the sign in. This copied and pasted and changed some values there.
 So this is where we left off.
[00:37:56]
 Oh, this is where we left off.
 If the email is not in the list, create a new account in the database. So that's what we did.
 It uses the put command on successful sign up,
 login the user by setting the proper Redux state.
 So this is where we left off.
 We didn't quite finish this one.
 So this is what we'll work on now.
[00:38:27]
 So we're going to continue with the practice.
 So we left off on step number six.
 So that's where we will continue.
 Step number six was about if there's a successful signup.
 Log in the user by setting the proper Redux state. So we're going to set the proper Redux state right here. Basically when an account come in
 comes in that tells us that this account was created. So we're going to just set set the Redux state, but we need to also close the modal and reset the inputs.
 So I think what I'm going to do here is I'll make a new variable here called inputs.
[00:39:55]
 It's just going to be this part, just the target.
 Or maybe I can do it the other way and put form reset.
 Yeah, maybe I'll just do that instead.
 So it's less confusing.
 So what I'm going to do is just temporarily rename this.
 So I can change these all into inputs.
 And then I'll change this into a form.
[00:40:25]
 And I'll describe to you what's going on here.
 So event target elements, those are the inputs.
 I had an email input, a password input.
 So those are actual inputs, elements, their elements. If you want to get the value from them, you have to access the value property. So there's the input, the box is the input, but the string that's inside of it would be the value.
 So it makes sense. So out of the inputs, we're going to pick the email and get the value.
 But the form was the target, meaning this whole form right here is the target.
 And I want to reset that form.
[00:41:36]
 Reset the inputs.
 Basically, if there is something typed in there, if you don't reset it, it stays typed
 in there, if you don't reset it, it stays typed in there.
 Okay, so that one should work.
 I'm going to save this here.
 Let the sign-up component select the Meetux state regarding the login status. That's step number seven.
 So this is a sign-up component. I think I was going to say something here.
[00:42:32]
 Oh, yes, this one should be the sign in area.
 I think this one's almost, this one's self-explanatory,
 but I'll already have this done by the sign-in area
 I'm gonna re- I'm gonna update this one
 Let the
 At the sign-in area component. Select the Redux state regarding login status.
 When the Redux state shows the user is logged in,
[00:43:16]
 hide the sign component.
 Okay. Okay, this is fine.
 So, I need something to choose.
 Oops.
 I need to edit the sign-up area.
 Sign-in area, I mean, I need to edit this sign in area.
 Actually, before we even get into that, let's just check if this works as far as we have it.
[00:43:58]
 Here's a sign of the bottle and we have all these break points here. So let's check when the account already exists.
 Let's refresh this if I want to sign up and put in account that already exists.
 It's going to extract the email and then password.
 There it is.
 I'm going to get the closed button there.
 Okay, so that's going to come back with account eventually.
 So let's see what happens.
[00:44:44]
 Okay, let's see what kind of information
 okay it's undefined that means I set this up with the test to return undefined
 if the account already exists. So it's going to run this condition since there's no account that's going to go down here.
 There it is.
 Going to set an error message.
 Right now there's no error message.
 But I'm going to run the code.
[00:45:21]
 Let them error message happen.
 There it is. Okay, so we got that part working. Next, we need
 to get this part, part working. When we create a new email. I'm going to try it now, available email and the password will be also available.
 Try that.
 Let's see if I can sign up with that.
 There's a debugger. Try that. Let's see if I can sign up with that.
 There's a debugger.
[00:46:10]
 So did it come back with it? This part right here,
 it checked if the account was already existing.
 If it wasn't existing,
 it'll return the new account to me.
 So here's the new account.
 So now that we have a new account, we're going to run these steps right here.
 So we saved the account and we're going to save the account. in the state variable there.
[00:46:47]
 Then we need to close and clear these.
 So that one should have closed it.
 There's closed.
 Next one should clear it. So those work. And the the
 sign-up area automatically disappeared. The sign-up and automatically disappeared
 because the sign-in area was already taking care of it right here.
 Let's just double check. Yeah, the sign in area, basically there's two modes when they're
[00:47:48]
 Basically, there's two modes when they're signed in and then there's signed out. So when they are not signed in, that's when it shows the sign in model and the sign
 up model.
 But if they are signed in, it gives us the choice To show the sign out moment
 So it's already taken care of all of these right here already taken care of by the sign in area
 When the read-up state shows the user is logged in hide the sign-up component so yeah, that was
 It's hidden because we're not showing it here
 We're only showing it here. We're only showing it here. and
[00:48:51]
 when the user logs out, set the proper Redux state. So this one's already
 this is already done by the sign out model.
 So let's see. If this works, I should be able to sign out and
 should be able to sign out and and I still see the sign up modal and it's clear. Oh, this one didn't clear though.
 This error message didn't clear so I need to clear that to you.
 Good thing I saw that.
 So I'm going to clear the error message when there's a good sign in.
[00:49:29]
 Or I mean the good sign up.
 So I need to, this is for the, for saving the account information, but I also need to clear
 the error message.
 I'm just going to copy and paste this.
 This is regarding the error message anyways.
 But the new error message will just be cleared empty stream. So let's so I can reuse this action.
 Okay, this part right here is just setting my state variables.
[00:50:20]
 This one here is closing the model and resetting it.
 So let's see how that works.
 I'm going to need to clear this
 in email.
 Okay, so that email is gone. I should be able to sign up with it.
 Sign up.
 So we saw that this works. It's gonna check if I have an account,
[00:50:55]
 or it'll have an account if I was successfully signed up.
 There it is.
 Then it's gonna save the information
 and it's gonna close the model right now it's still open.
 It's gonna close it.
 Now I have the option to sign out.
 I click on sign out.
[00:51:21]
 I get signed out.
 If I click on sign up, I don't see the error message and I don't see any inputs here.
 So everything's working well.
 When the user logs out, set the proper Redux state. When the Redux state shows the user is locked out show the sign up component so that's what's going on here we see the sign up for
 coming when the user is locked out so that one's all done
 now it looks like it's time for a break so I'll just set up the break out timer for the break timer.
 Ten minutes and take a break.
[00:52:28]
 I'll see you guys after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And this time we're going to do many evaluations.
 I'll open the break our rooms, but I'm going to leave this practice posted here.
 This next practice.
 As a reminder of what we're going to do next, Redux the count practice.
 I'll open the break our rooms right now.
 I'll start the mini evaluation for a Yuki.
[01:03:44]
 And the break our rooms will be open for 45 minutes.
 No, we can do the full.
 15 minutes. just setting up the usual breakout rooms here. So, Yuki is going to do the week 9 evaluation today.
 That was from last week, but I'm taking week 9 evaluations today and providing on time points
 until I'm proud. But Yuki, I'll meet you in the break-iron room.
 Let me just double check.
 On time until tomorrow. So today and tomorrow if you can do your week nine,
[01:05:42]
 mini evaluation, you get on time points.
 You may or may not get all the points, but at least you can get the on time points.
 I'm going to head on over to the breakout right nowkay, so it's time for a break.
 We're going to about the break here.
 And I'm going to continue the remaining 10 minutes with Euchie.
 We had about 50 minutes.
 What was it?
[01:55:38]
 50. Anyways, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And just going to start the break-out rooms and continue. [ Pause ] 42 minutes, the break-arons will be open.
 Actually, since 42 minutes, and then I'll reopen them, because that's actually, I'm going to open them for 15 minutes to signal the end of the
 of the mini evaluation.
 And then I'm going to reopen them afterwards.
 Okay, so I've open the brick items for just 15 minutes because that's a time limit for the for you can use many evaluation.
 So you can now meet you over there, you key. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so UQ's mini evaluation is done.
[02:22:55]
 Any other volunteers?
 I'm going to open up the break-out rooms.
 And it can be open for the remain for 26 minutes.
 Break-out rooms are open for 26 minutes. Anyone else? I'm going to take a look at who's up next for many evaluations.
 We need to get these done.
 Let me see week 8, week 9, actually let me look at both of those. [ Pause ] [] [] [
 [
[02:25:12]
 []
 [ [ [ [
 [ [ [ [ [ [ [ [ [
 [ [ [ [ [ [
 [ [ [
 [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ Writing on Board ]
 >> Okay. So for week 9.
[02:25:47]
 Just refresh this. Okay, so let's see, by order of first-converser. for a serve. [BLANK_AUDIO] Okay, so, okay, so week nine, let me see what's up for week 9. So, week nine, if you have some TDD in your capstone, you can talk about that.
 And if you're familiar with the website, the Hugging Face website, I think those are going
 to be the two easiest ones. If you started adding Redux to your Capstone,
 you can talk about that.
 If you started adding Google App Engine to your Capstone,
 you didn't talk about that.
 So there's 20 minutes left for the breakout rooms.
[02:28:32]
 So Alex Sanders says TDD.
 OK, yeah, that's fine.
 Yeah, so let's go in the breakout room.
 And then because that actually you are the first come first serve,
 you are the next in line.
 So this would be the mini evaluation for week nine. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so the breakout rooms are back.
 Yep, breakout rooms are back.
[02:49:39]
 And in conclusion, actually, we didn't walk through.
 I introduced it. We're going to do this. We finished the walk through of the
 sign-up, but
 We didn't get a chance to do this one. So I'll talk about this tomorrow.
 You have four minutes to mark your attendance if you forgot to do that.
 Other than that, classes dismiss.
 That's today's class on evaluations.
[02:50:15]
 I can stick around and help Alex and her with.
 With her project, but I think it's going to work now.
 I'll stick around for a few minutes. [BLANK_AUDIO] [ Pause ]
 Now it crashed again. But at least it's giving me different errors this time.
 Let me try it again. [ Pause ]
 And make sure you remove the path parameter in all instances.
 It's not required unless you're using a different name of the ENV file.
[02:52:33]
 Because you can use a different name for the ENV file.
 You only need the path if you're going to use a different name. Atticant out of the reuser account.
 Are there any other instances where it's using a path parameter?
 They're not related to this specific function.
 It's in the other functions, but I'm not running that route those routes right now.
 So I don't think it should affect it.
 - It might, because when you import,
[02:53:11]
 when you import from a file,
 it runs things that are not inside of the function.
 And config, nothing,
 the config method will run as soon as the file is imported. - Okay, the key thing method will run as soon as the file is in the blue key.
 Okay, so.
 Okay.
 Okay. [pause]
[02:53:46]
 The debugger keeps taking over while I'm trying to decide.
 Okay.
 Next, we are the fixed read. [Music]
 Are we ready to start going?
 the server.
 All not sharing my screen.
 Right.
[02:54:39]
 Okay, so,
 I'm on that part right there because the, it stopped on the debugger so that's why it's not running it. Okay so it's still it's still crashing I think it's
 still crashing open open up the uh it's not going to the route yet open up the
 other terminals the debugger terminal I >> Open up the other terminals.
 The debugger terminal. I mean click on the debugger terminal in VS code.
 >> It's already open.
 >> No, I mean the terminal.
[02:55:18]
 >> Oh, it re-grashed.
 Let me re-load it.
 >> Yeah, so yeah, well, I want to see.
 You want to see the
 reason for the crash. I know where it crashes. It crashes in the return dynamic client function
 dynamo. Okay, okay,
 not function. Let's put a
[02:55:40]
 debugger in there then. We're at the
 before. There's already a debugger in there.
 I just have to reopen everything because I had to close it.
 OK, so there's no debugger right now.
 There was.
 I'm missing something.
 I had to debug.
[02:56:03]
 There's a debugger right It's right here.
 She's not red. Okay. It's not, it's not activating. So put it in a different spot.
 It was activating when I ran it myself when no one was watching.
 Okay. Let's get it to stop there.
 Well, they crashed.
 I have to go back to the browser window,
 because I have to load the reading.
[02:56:27]
 Oh, it said, uh, address in use.
 It's crashing because--
 well, I think it's crashing because it's trying to reuse a port.
 No, that's an old message.
 Oh, that's an old message. Oh, that's an old message.
 I have to go through it again.
 It wasn't crashing this fast before it was actually running up to a point.
[02:56:54]
 Okay, here we go.
 So,
 Oh, wait, I'll drop that.
 Oh, it crashed.
 Okay, let's find that word crashes.
 Well, before it was crashing, I know exactly where it was crashing before, because I watched
 it 10 times.
[02:57:13]
 Okay, so let's put a debugger right before that.
 There is a debugger there already.
 Okay, well, it's not stopping on it.
 We need to get this. >> Okay. Well, it's not stopping on it.
 >> That's because I have to refresh over here and make sure that I load this page.
 >> No, if it's crashing even before you visit the page, then there's a different problem.
 It's crashing before you even load the page.
[02:57:44]
 >> It wasn't crashing before even load the page.
 So, what's it crashing before I loaded the page before?
 Yeah, when the changes are made to the code, it could affect something else.
 So, let's start from the beginning from the index file.
 It's crashing before it even gets to,
 before it even does a console log. So let's figure out where it crashes in this file.
 But it was never crashing in this file before. Yeah, well, we need to find out. So put
[02:58:20]
 it the bugger on, uh, after the right before the listen on 35.
 So put it debugger on after the right before the listen on 35.
 Let's see if it can even get there. I mean on it, put it on 35.
 There so it won't run that line. They'll just stop at it.
 Let's let's run it. Let's see if it can even get that far.
 Just press play. You can remove that dot. Then get to that line that we wanted to yet. Hasn't gotten there yet.
 Already, it's already in the read function.
[02:59:05]
 It's not even--
 - Yeah, 'cause that's the import.
 Yeah, that's the import.
 When you import something,
 it's running the top codes right there.
 So you can press play.
 It goes crashed. Yeah, so it didn't even start the listener yet.
[02:59:29]
 It got in here.
 So usually the imports are before the config.
 So maybe you want to do that, but the imports right before the config.
 I've had problems with that.
 Oh, I can. Address in use.
 >> Yes.
 >> It's not killing.
[03:00:10]
 >> So it's not killing.
 >> Yeah, it's not killing the poor.
 Try to kill the poor twice before manually you kill the poor.
 >> Let me see if it's open anywhere else.
 >> No, there's an imperative being on this list in here. Just a big blue button and the sharing.
 >> Okay, so manually killed for 9,000 twice.
 Make sure it's really gone.
[03:00:51]
 >> I forgot how to run the command. >> You have to put a run.
 If you're going to put run the script, you have to put run in front of it.
 >> I don't.
 >> It disappeared.
 >> There it is.
 >> Close. >> Go for it. And it's closed for.
 Okay, let's start the server.
[03:01:27]
 Maybe okay, I think it might stay open because it never like it tried to execute, but
 okay, so it says address in use.
 Let's see what else.
 Yeah, this is new.
 Roll scroll it up.
 Let's see what else happened in the error.
 So it does look like it's trying to listen.
[03:01:57]
 It tried to listen.
 And there's an error.
 The debugger, I think you might have to manually put a debugger, like the debugger command.
 Okay, so you're closing all the windows.
 That's, yeah.
 That's good too.
 Okay, let's just start the server on a regular.
[03:02:22]
 You can start it on a regular one for now.
 See if it works.
 OK.
 This is all.
 So let's find out another place where it might be crashing.
 4,9,000 is hard coded there.
 Are you sure this path line needs to be removed?
[03:02:58]
 Yeah, you're not using it.
 I'm not using it down here.
 Where I put it in the get things.
 Nope, you're not using that.
 No, you're not using that path variable anywhere.
 Let's see, can the debugger stop?
 Put a debugger on line 34.
[03:03:20]
 Let's type it there. And then open the debug terminal. No, it's not going to stop on the debugger from there. [ Pause ]
 What is that the front end?
 Are you in the front end?
 That looks like web time.
 >> No.
 I didn't move folders on the debug terminal.
 I did it in the other terminal, but not this one.
[03:04:21]
 Okay, so it's not even didn't even start listening yet. So it's not really, didn't even start listening yet.
 So it's not really, that's just a false error there.
 It crashed, basically, in one of the imports.
 And I think it's in that read account,
 because it was able to get there. Let's put it right after the.env config.
 Like put online 12, put b boger there.
 Let's see if it can get there. Actually, I saw a listening.
[03:05:18]
 I saw a listening. That's odd how they even get there.
 They didn't even run the listener file.
 I mean, listener line.
 Is that the bug or okay?
 So put the bug right before online 14.
 Put another one online 14 there. Let's see if that goes. That works.
 Start from the beginning. Sometimes it could be the imports that's bugging You should be building at the same time.
[03:06:16]
 Yeah, that's right.
 Otherwise the buggers are not going to work.
 That's why it was failing. Okay. So press play. Let's see if it, how far you can get before breaking.
 Okay, press play.
 So it could get to the listener.
 Put one right after.
 Actually the listener.
[03:06:55]
 Why is it stopping on the listener?
 I've never had that problem before. Try changing the port to like just 90 90 or something. the
 the Okay, so yeah, so there's something else going on.
 Try to, what was that?
 Like, try to kill the port multiple times.
 But like, I had that problem before. I kept switching ports and
 it's still like crashing every time but there was no problem in the code.
[03:08:22]
 Yeah.
 Okay, let's try to start it now. Well, it's feeling nine doesn't. Okay, so
 Okay, so.
 Already in use, let's look at the terminal message. Maybe we're missing something in the terminal message.
 I did have this message a very long time ago and it was the kill port thing that fixed it.
 Yeah, it's supposed to fix it.
 And it's we have it building.
[03:09:33]
 Oh, there, unhandled error.
 That's the thing that breaks it. Now it says unhandled error.
 I don't see that.
 And dress already in use.
 Embedded error on server instance. I don't see it on handled error. There's a Let's see. No, it happens.
 I'm going to put this back to 9000 because. Yeah, and you can remove the debuggers that aren't, which are not the problem.
 Not from that screen. [ Writing on Board ]
[03:10:42]
 Read account, re-dozer account.
 So let's see if it could even get into the route.
 Put one in the, yeah, you can remove that one since that's not the problem there. You can try to pull one inside of the function.
 Why did you just put a D there? What's going on?
 Where?
 Oh.
 I'm going to put a D bug in there.
[03:11:33]
 And I realize that can just be thoughts if I want to.
 Okay, so let's put one in the root path.
 Put a debugger in the root path.
 The root path is working fine.
 No, I mean, the root handler.
 Oh, in the index.js, you mean, or in the read account handler.
 Root, right there, root TS.
[03:12:06]
 >> Okay.
 >> Let's put a debugger right there.
 >> This handler doesn't have a problem.
 It's been working the whole day.
 >> Yeah. Well, it's not working right now.
 >> But I didn't change the root TS at all.
 >> Sometimes you just have to do a wider sweep. I didn't change the root Ts at all. I haven't talked to you.
[03:12:25]
 Sometimes you just have to do a wider sweep, even though you know it's working.
 Because we can't even get to this point right now.
 So, yes, we can.
 It loves.
 Okay.
 Let's see.
 Well, the route was loading. It's still waiting.
[03:12:57]
 No, the route was loading.
 It's not going to be--
 The route was loading fine.
 Yeah.
 The route was no route problem. Yeah, so it's not working right now >> Yeah. >> Yeah.
 >> Yeah, so it's not working right now because the server crashed.
 >> Oh, yeah. I didn't reload the server.
[03:13:12]
 That's true.
 I think that's true.
 >> I'm not good.
 >> No. [ Inaudible ]
 Now, that won't work unless a server can listen, which is not, it's not listening because it crashes before it can even listen.
 So let's, let's put a debugger into listener how they're.
 >> Oh, it's crashing crafting little entire old tiny now.
[03:13:48]
 >> Yeah.
 >> I don't know how tiny it is.
 >> Let's copy that and put it into the listener handler.
 >> What? Listen to your handler.
 >> You have a listener index TS.
 >> Yeah, but there's no separate handler for it just the line.
 >> Yeah, the callback, yeah.
[03:14:08]
 That's the hat.
 We already have a debugger on there.
 We have it here.
 >> No, inside of the handler.
 >> Oh.
 We're just going to put it in different places.
 And see how far we can get with the debugger.
[03:14:32]
 Now, try to run it.
 Okay, so those console logs are going to work properly. Let's even put a debugger after the export.
 And we can remove that debugger.
 It's going to do that part properly.
 Before or after the export. After the export.
 I don't like when it opens these read only windows.
 Yeah, there must be some kind of setting that got changed.
[03:15:43]
 It was able to, able to execute the whole file, even the handle listen, and then it breaks. Does it open up a window?
 Only when I build.
 Only when you build, but the build is out of my, okay,
 when you build for the first time.
 Yeah, it doesn't open a window when I run start,
 but it's probably not configured to do that.
 Yeah.
[03:16:04]
 Okay, so I think. I run start, but it's probably not configured to do that. Yeah.
 Okay, so I think let's just close. Let's kill the ports.
 Maybe stop the servers, all the servers, the builders, the servers, all the terminals.
 I want to stop and about the the the
 the
 the
 the
[03:16:35]
 the
 the
 the
 the
 the the defined earlier. Yeah, so the NV file is getting read properly. How about the dot
 configs? The dot configs have those been fixed? Yes, they're all fixed.
 Not one in here. Okay.
[03:17:05]
 And all the things, there wouldn't be one in there.
 I mean, unless there's any in the routes, which they're not to have ever been in the routes,
 it wouldn't be in the routes.
 And I didn't check the front ends because I'm not working on the front ends.
 Yeah.
 This doesn't the front end won't be crashing that.
 Let's see what else.
[03:17:28]
 I would kill the ports here and then close VS code.
 So yeah, kill the port 9000.
 Oh, close port.
 Yeah.
 You have to run and come in. Maybe close it three times and then
 tuck down via code.
 It's possible that one of the processes are still open.
[03:18:09]
 Might even have to log out and log back in
 in which we'll lose our connection, but I'll hang out here if this is,
 let's try it one more time.
 If it doesn't try to start,
 then let's try the reset because we couldn't get the deep
 voters on it.
 Like log out, log back in or restart your computer.
[03:18:40]
 Oh, I thought you meant.
 NPM start.
 Yeah, wait, wait, wait, a reopen other one. So there was a message I think it crashed. It did crash. Okay, so
 it's never crash before on this. I don't understand. Yeah, so I stopped that server and then
 tried maybe logging out and logging back in. Of what? My computer? Yeah, just sign out and sign back in.
 Okay, sign out not sleep to computer, but sign out which will cause you to drop [ [BLANK_AUDIO] [ Pause ] >> Any good back?
 >> Yes.
[03:21:10]
 >> All right. [ Pause ]
 >> Hello, praffing.
 >> So, what am I supposed to do?
 I can't work on anything like this.
 >> Let's try -- let's try -- well, and this one,
 and that server, and that server.
 And let's just comment out all the paths,
[03:21:48]
 except the root path in the index file.
 Comment all the routes.
 >> Except the root.
 >> Oh, wait, you don't even have a root.
 >> I do have a route.
 It's right here.
 Oh, sorry about that.
[03:22:08]
 Yeah.
 I was looking at, I was looking lower.
 Sorry about that.
 Okay.
 Yeah.
 Comment all those out.
 You can select multiple lines and just.
[03:22:18]
 It's too late now.
 I've already done it this way.
 Okay.
 And then comment out the imports at the top.
 No, okay, yeah, you can do that too.
 The imports at the top,
 the ones regarding those pads and those two, yeah.
[03:22:45]
 Okay, so now it's back to bare minimum.
 Theoretically it should run.
 This is just the bare minimum,
 all except for that server list there.
 You can even comment that one out too.
 Okay. You can even comment that one out too. Okay, oh, you have to build it.
 It won't build.
[03:23:27]
 I'm not in the back end folder. Okay, so you should be able to run that then run a refresh here refresh that one. Okay, so we're gonna activate one route at a time
 Must be one of the routes or you can run activate two at a time
 Actually before activating the routes activate those other ones
 That that handler and the those
 right there yeah okay that's run that okay it's something happened there it's
 one of those something there it's because we moved the ENV file out of the
 source folder it was working before that happened
[03:24:54]
 But that's where it belongs. I know, but it was working until it stopped working after we moved the ENV file out of the So let's see a comment out those. No, don't
 It's supposed to be outside of the source folder. Well, it didn't move it anyway
 Okay, no, it's not.
 It's, you moved it out.
 I mean, it's still in the source folder.
 - Oh, it didn't, it didn't refresh my screen properly.
 Okay, let's, um, yeah, comment those out.
[03:25:36]
 Okay, let's run it with that one server serverless app.
 Okay, so it has to do with that line 39, I think.
 But that was working when the ENV file was in the source.
 Put a debugger on the line 40 and see what?
 Activate line 39, put a debugger after that.
 See if we can look at the value there. You need to open the JavaScript, the bug terminal.
 But close this one first. I mean, stop this server. Otherwise, it will conflict.
[03:26:19]
 Yeah, it's fine. I didn't run it over here yet. I opened some. Yeah.
 Okay, is running locally? Let's see the value there.
 Did be true.
 You have two terminals.
 The book.
 One is the belt terminal.
 Yeah.
[03:26:59]
 That's why.
 One is the rental.
 The belt terminal.
 One is the new debug console.
 Is running locally. It's true. Oh, it says true. Okay. So that's true. one is the real terminal. What is the new debug console?
 Is running locally.
 Oh, it says true. Okay. So that's true.
[03:27:10]
 As if it is running locally.
 Oh, that's why you're you have two listeners.
 Where?
 Line 35 and line 42. That's why they're gonna they're gonna conflict each other
 wait it's in the wrong way there okay somehow this got uncommented when it should have been Should it be good this deleted yeah
 Yeah, so when searching for bugs
 You know rule of thumb don't make any assumptions, the bug can be anywhere.
[03:28:17]
 Even if things look like they're working properly, I don't think this is what caused the other error because the other error had not to do with us.
 Yeah, so, but it did stop us from even fixing the other error, so, but we fixed it. So, you can activate my 39 to 41 now. - Yeah, I think what happened was that
 when I controlled the to get rid of the past stuff,
 I uncommented the extra listener.
 - Yeah.
 So, yeah, to uncomit line 39 to 41.
 - I did, I was trying to,
[03:28:43]
 but I got stuck in the unedited window. Okay. All right. So, okay. So it's running now.
 Can
 Maybe activate those one at it. Well, I guess that's this is trying to activate a mall. Let's see.
 You get all there was not a problem before.
 Oh, me. Yeah. I'm gonna get a little-- - There was not a problem before.
 - Let me just add it to you.
 - Yeah, let's see here.
[03:29:10]
 Back end and off.
 - I don't need that.
 - And the DB.
 - Yeah.
 - You're gonna comment those out.
 - Those are the ones that got archived.
 Why is your problem here? This doesn't need that.
[03:29:28]
 Module not found. That's that's archive as well. Yeah, three
 archive. Okay. Okay. So now this is working. You can. Okay. So it
 looks like it's working. All rightuckles) All right, so there, that's progress.
 Now you can visit the route that you think is breaking
 or that that was breaking.
 So, that's good. Maybe just press play.
 Let's see what happens.
[03:30:15]
 Does it crash?
 Oh, not keep on going.
 Oh, yeah.
 It doesn't crash yet.
 It's going to crash.
 It'll crash soon.
 No, it didn't crash this time.
[03:30:27]
 Okay.
 Okay, no, I'm only going to crash right now.
 At this time, it's actually.
 It didn't crash because the dot in V is in the correct spot now.
 Yeah, that's probably what was causing it to crash.
 Okay.
 So I think you could.
[03:30:44]
 I'm not a response. So that should fix no problem.
 And now I can continue with the front end stuff.
 But yeah, we're now already 10, 15 here.
 All right.
 So at least we got made some progress and you could keep on moving.
 But I lost four hours now where I wasn't able to work on the stuff today.
 Yeah.
[03:31:08]
 Yeah, sometimes that happens.
 So it's good to be with early every day that I lose four hours on something.
 Yeah, so it's good to take a systematic approach and make sure like every code change works before moving on.
 Because if you make a lot of code changes and you forget what you, what you did before, then it's hard to undo.
 I'm literally haven't made any code changes today because I couldn't get the route to load.
 I've literally spent six hours today trying to get this one route to load.
 Yeah, so I at least found the issue here.
[03:31:58]
 You can take a break and continue whenever you get a chance. But my problem is, this was the route for capstone back in the counts.
 That means I have four more time in and they all have to be done by 630 on Thursday.
 There is no possible way.
 I'm not going to have any issues or bugs in the next four things that I have to finish. So I'm not going to be done by 630 on Thursday. It's not possible.
 Because I have to plan for the fact that I'm going to spend 16 hours on each

///// FILE: "Level 4/transcripts 2/May 13, 2025 20-0.txt"

Transcript from May 13, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 This is week 10 day two.
 And the focus of this week is evaluations.
 So today's agenda will take attendance, do announcements,
 review. It should be a short review.
 And then we'll practice read-ups accounts.
 And then second hour, do MIDI evaluations, but the practice will be posted and the breakout
[00:00:38]
 rooms will be opened.
 Third hour, many evaluations, but the upcoming assignment will be posted and the break
 arrows will be opened.
 Before we get started, make sure you take attendance, head on over to your code X account
 and mark yourself present. Now time for announcements.
 I'm just going to get that loaded up. Okay, so the announcements.
 Next next week on Monday.
[00:01:37]
 May 19.
 They'll be a student collaboration day. and less than two weeks until the end of class.
 So no time to rest.
 If your goal is to graduate this class.
 This is this week right here.
 Until the 17th. Last week is in the until the 24th.
 You need to have your assignments turned in so I have enough time to grade them by the 24th.
[00:02:20]
 Any evaluations remember there's a 60 minute time limit and
 um, I did post it here week 10.
 Week 10 mini evaluations. Do the 13th before class today,
 to the gotten reminder,
 let's see here.
 Let's see here. Week 9.
 You can still do your week 9 and get on time credit.
[00:03:36]
 Last day for on time credit for week 9. And then,
 so you can get your on time credit for week 9 up to today.
 And then tomorrow before class, make another submission so that you can do corrections for week 9.
 Assignments so the finale is due on Thursday.
 Leave credit for App Engine closes on Thursday.
 Remember, contact the student success team if you need some more points on any of the closed assignments. But we're just reviewing them from the ones up here.
 There's only one more practice problem to review.
[00:04:59]
 And we're going to do that today and maybe we'll finish with it.
 Maybe we won't.
 We might not because I'm coding it from scratch.
 I don't have all the the the the CRUD operations in the sandbox.
 Let's see help seeker. Remember to post your questions in July cohort.
 If you get stuck, don't stay stuck for long.
 Only just be stuck for 15 minutes and then.
[00:05:37]
 And then post.
 Because if you're spending hours and hours just getting stuck, then that's a waste of time.
 You could be spending those hours and hours progressing, but instead,
 if you spend those hours and hours being stuck, that's not very productive.
 Okay, so is there a new question here?
 Oh, no, this is a fix.
 Alexander was just posting a fix.
[00:06:15]
 And there was a question about notebook LM.
 Notebook LM in the chat.
 It takes questions.
 It's similar to our,
 it's true, it takes, so Chris is saying it might take time
 to get a response on Slack.
 That's true, but at least just post a problem.
[00:06:40]
 You can still, you can get stuck for 15 minutes.
 And then, when you realize, okay,
 I haven't found the problem, the answer yet,
 post it on July cohort.
 Maybe you'll find the answer before someone responds
 on July cohort, or maybe someone might respond
 on July cohort before you find the answer.
[00:07:08]
 So yeah, posting is a good idea
 because it just covers the situation in which you anyone to get stuck for that long.
 And if you keep thinking, "Oh, no, I can do it, I can do it," but then one hour
 has passed already, two hours has passed already, and you still stuck in the things
 spot.
 Yeah, that's not a good situation to be in.
 We would have been better if you just posted 15 minutes ago and then maybe someone could have helped you out of that problem within, you know, 30 minutes.
[00:07:53]
 At least you have a backup plan. If you post in July cohort.
 Okay, so this one's about notebook LM you can't you can't include all your code inside of the question.
 That's because it's similar to our question answering AI that we made.
 And the question answering AI that we made, we ask a question about a context.
 So we provide the context.
 And then we ask the AI, okay, what does this context say about this?
 Or where's AI, what is the capital of California? And it's going to be inside of the context,
[00:08:39]
 like a document that you provide. So make sure you use notebook
 and land the way it was designed. It's supposed to answer questions based on the documents
 that you provide. So if you want your code, if you want your code to be analyzed,
 If you want your code to be analyzed, you can put it in the context or in the source section.
 So let me see if I can try it out here.
 Okay, so if you can ask a question in here, but you can't put that much.
 This is where you put your sources.
[00:09:29]
 So if you have a, you have some code, you can add it and then you can just paste in some
 copied text.
 So if I have some code, I can paste it in here and then it'll become part of the context
 or part of the source.
 So you put your long context in here, and you put your short question in here. That's
 how this works. And yes, you can put your code.
 But if you're going to put your code, you have to turn them into text files or just,
[00:10:21]
 yeah, make a copy of your code or paste it in.
 Yep. Well, you're going to end up pasting a lot of code in.
 If you have sample code, but it doesn't take the code
 when it has a dot dot t s or dot j s extension,
 you could make a copy of it with a txt extension.
 Then it'll take your then it'll take your code.
 Then it will take your code. It will take your class notes the way it is. It can take.md.
[00:10:54]
 Fast transcript. It will take that one as is also.
 You can also copy and paste the transcripts.
 So I haven't posted any new transcripts, but I'll post them today.
 Mark your day's green.
 And then let's focus, gonna do the review.
 And maybe you haven't finished the sign-up practice,
 or if you haven't even implemented sign-up in your capstone.
[00:11:40]
 Pay attention, because we're gonna review the last parts of it.
 And then if you
 haven't implemented accounts in your capstone, that's what we're going to do
 today. We're going to do the walkthrough for that. You can have your microphone
 ready and you know ask your questions audibly or you can just type them,
 but have your microphone ready for the mini evaluations.
 Now time for the review.
[00:12:24]
 So we finished up Redux sign of practice. Now time for the review.
 So we finished up Redux sign of practice.
 Let me load that for you guys. review. Here it is, Redux, sign up practice. And then we continue from one of these steps over here on these steps. And we love the front end.
 [NOISE]
 So where did we leave off?
 So I continued from here. And then the rest were finished pretty quickly.
 So I'm going to load the part where we continued from.
[00:13:45]
 That was from the signed up model.
 Here's the sign up model.
 To make sure it works, I'm just going to start the servers. [] [no audio]
 [no audio]
 [no audio]
 [no audio]
 [no audio]
[00:14:24]
 [no audio] So, the side of the model is where we left off.
 When the sign up is formatted, check if the email is in the database.
 If it is, send an error message.
 Then it has been previously created.
 So the way we check that is here. I'll put a pick an email that's in the database.
 I want to sign up with it, so it doesn't matter what the password is.
 Here's a debugger.
[00:15:44]
 And so it's going to check the email in the password.
 If the account, if it creates an account, we will get in account.
 But if it doesn't create an account, this will be empty.
 So the account is.
 Undefined.
 It's undefined. Therefore, it's going to jump over here. There it is. So it's going to end up writing an error message.
 First it's going to put it as a Redux state variable and dispatch it and then it gets rendered into here.
[00:16:35]
 That was this part right here.
 And if the email is not in the list create a new account in the database. I need to make sure that it's not already created. So I'm just
 going to log into DynamoDB and delete the test account.
 Let me show you this one here.
 One was this for testing.
 Check out the table items.
 Okay, so I need to delete this one here.
[00:17:54]
 Okay, so now I can create a new email available.
 Now I'll try to sign up.
 So what we're trying to do is this, if the email is
 logged into the list create a new account in the database.
 Click on sign up.
 Here it is.
 So I was going to send that email and password.
[00:18:27]
 If it creates an account, I'll get into account back.
 Let's see if I got into account back, yes, I did.
 So it's going to go into these steps down there.
 I'm going to save the account in the state variable.
 So my components have access to it.
 And it's going to remove the error message.
 Right there, it's going to remove it.
[00:18:57]
 It's going to close the model.
 And reset the inputs.
 Because the model, now I have the opportunity to sign up.
 On successful sign up automatically login with the user. Login the user by setting the proper Redux state. So that's what
 happened. Those were saved. Let the signed it, area component, select Redux state regarding
 login status. So the sign-up areas here. This one was pretty much automatic.
 which automatic is already set up.
[00:19:54]
 Here, this one is selecting the login state. Basically, if there's someone logged in,
 there's going to be account information here.
 So, the sign-in area is selecting the account.
 If there's an account.
 Here, if there's an account, it's going to show the. Sign out model. So that's what we see right here. And if there is it, it'll show
 the sign in model. And the way it chooses it is by can cancel out that mapping.
 And we get more cancel out that mapping.
[00:20:57]
 But just like this. And so when it says sign in modal, it's going to also display
 So when it says sign in model, it's going to also display the sign up model. Like this.
 And when the button is supposed to show the signout model, I'm supposed to show this.
 I don't have the accounts yet.
 So this is good.
 This is how it selects.
 So let me just continue this debugger here.
[00:21:40]
 It could be...
 to be, uh, okay, so it didn't fully, it didn't save the, uh, the sign in.
 Let's see, the sign up.
 They didn't save the sign in.
 So, uh, so there's a bug when I sign up, it doesn't save it in persistent login. So, let's fix that. To fix that, I'm going to look at how we did it here.
 I think I should refactor the code, but until then, I'm just going to duplicate the code.
 So if there's a sign in, it does all this, but it also does this part right here.
[00:22:56]
 I think I'll turn this into, I'll eventually turn this into a function.
 But for now, I'm just going to copy that and put it in the sign-up model.
 So when they sign up, it'll also save their information here.
 Making it persistent.
 So I'll try that again, but I need to delete. Okay, so it's deleted. I should be able to sign up.
 Okay, so it should get into right there.
 Then it's going to save the persistent login right there.
[00:24:17]
 Then it's going to close the model.
 If all works fine, I should be able to refresh this and it'll stay logged in.
 Yep, it's still logged in.
 And let's see if I could sign out.
 Okay, so that looks good.
 Let me refresh.
 Yep, looks good.
[00:24:41]
 Let's see if I can sign in with that same sign up with that same email.
 There's a debugger. Let's see if it lets me sign up. Account is undefined. So it's not going to let
 me sign up. I'm going to go in here, put that error message.
 And that's what we see right there.
 So everything's working good.
 It has persistent login, whether I signed up, whether I click on sign in or sign up,
 the persistent login gets applied.
[00:25:27]
 Since I've just basically duplicated the code,
 I can refactor this into a function.
 And I'll factor it into, I'll refactor it into a function called
 let's see if I can even, if I can go like this.
 Refactor into a new file.
 What happened?
 Refactor to a new file.
[00:26:03]
 They won't do it.
 And there's no message.
 Okay, that's okay.
 We're going to create a module here.
 We're going to be called Save Persistent Login.
 Save Persistent Login. going to be called save persistent login. Save persistent login.
 I'm going to cut this out.
[00:26:44]
 I'm going to cut this out. Place it right here.
 Save persistent login.
 Okay, so it needs some information.
 It needs an account.
 And it needs this data type.
 So let me get that data type.
 So it just needs an account.
[00:27:12]
 So I need to cut it out from here.
 Now I can import it.
 Save persistent login, and I need to give it an account.
 There, that should work now.
 Let me just clear this part again.
 I'm going to test the refactor if it works.
 I'm going to sign up here.
[00:28:24]
 Yeah, it works. I'm still assigned in.
 Yep, the refactor works.
 I'll do that also for, um,
 I'm going to remove some stuff that I'm not easy anymore. more. Okay.
 Oh yeah, because this is sign up,
 okay.
 Sign in, modal.
[00:29:17]
 And now I can now change this.
 It's been refactored.
 Save, persist, and log in, and just give it the account. Okay, sign out.
 Let's see if I could sign in.
 Available. available.
 Email.com.
 Okay, so it looks like it's going to be persistent.
[00:30:15]
 Yep, so when you do things like that, when you refactor your code, make sure you test
 it, make sure that the refactor didn't break anything.
 OK, so it's working well.
 So that's enough for this. So when the Redux state shows the user is logged in,
 we hide the signup.
 When the user logs out, the proper Redux state is saved.
 And then when the user is logged out, show the sign of component.
[00:30:54]
 So that's what it's doing.
 So everything looks good there.
 Okay. Now time for the practice.
 So we're going to practice Redux accounts.
 We're going to do the Redux account practice.
 This is where we use Redux to toggle access to the account page
 where users can edit their information.
[00:31:33]
 In your capstone, when you make an account page,
 make it look like an account page.
 Don't make it look like some demo page
 where you have multiple forms where you're testing
 out create, read, update, and delete.
 No, I could look like an example page, make it look like an actual account page that
 you would see on a actual like a actual, how you say like a website that people use and buy things from.
[00:32:12]
 So I'm just going to copy this here.
 Then I'll paste have all the credit operations in the sandbox,
 but you might have them already in your capstone.
 Since they were part of the assignment.
 Okay, so let's look at some keywords here. Account component.
 There we go.
 And a model. Account component right here.
[00:33:32]
 Delete component.
 Need a password. [ Pause ]
 >> There's an account component again.
 [ Pause ]
 >> The account component select the Redux state
 about the login status.
 Probably the sign in -- the sign in area will take care of this.
[00:34:12]
 You could make it self-managing though.
 Instead of having a sign in area, you can make these components self-managing though. Instead of having a sign in area, you can make these components
 self-managing, just let them tap into the Redux state.
 Instead of the sign in area managing it you can
 You can set up the component to hide itself
 But I'll do it for this one. I'll let this one hide itself
 Instead of the sign in area hiding it.
[00:35:31]
 Okay, so first step is to create an account component within account button and a model.
 So, going to go over here, source, views, and create an account component.
 Export function account.
 Import react.
 It's going to be similar to the sign-up or sign-ins, so I'm just it to account model, since everything is called model. [ Pause ] Okay, so I'm just going to delete some things and I'm not using yet. I just want to render it.
 Then we fix these.
 We name it to account modal. We name this one to account modal.
[00:37:32]
 This one says sign in modal button.
 Gonna change that.
 To account modal button.
 You can change these to account modal. with the button saying it's not going to say sign in it's going to say account
 the motor will say account So it's going to, this one instead of sign in content, it's going to have account content
 which are't made yet
 and we'll submit a haven't made that either. So just to get these errors out of the way
[00:39:07]
 It's going to get an event here. Yeah, it's going to be inside.
 Let me put it outside for now.
 And then when we discover that we need things inside of the component we'll move it inside
 But for now, I'll put it outside and then account content
 Account content
 CSX [ Writing on Board ]
 It's going to return a form similar to signed in content.
[00:39:59]
 So I'm just going to copy that for now.
 Copy that for now.
 And then we have to now, we're going to need an air message.
 And you have to put one here as a placeholder. and import this. Now, supposed to render it.
 Actually, it's good. I don't need it.
 Let's see.
 Signing area is going to render it automatically.
[00:41:38]
 I guess I will be, uh, I just let the sign an area of manage that then.
 And there was, I'll have to refract through this a lot.
 To do, um, So this is the easiest way since there's already a sign in area.
 I'm just going to utilize that.
 I'll use insert it there.
 So I see it right there.
 I need to put some space here.
[00:42:49]
 Similar to this.
 I'll make it for the sign-out mobile. Sign out model SES. So I just paste it in here.
 It should look fine.
 Okay, so I didn't put an ID there.
 My side-out model doesn't have an ID yet. one here. Sign out. I have to import it now. I need to do a style import. SES.
 It's a I'm still not showing sign out the whole sign out the whole button out there it is, there's a gap there.
 Last time I had a gap here too.
[00:44:59]
 Sign up a little.
 We're heading for the signup?
 Let's see.
 Oh yeah, I have a gap here for the signup so let me see how I put that. [wind] [wind] [wind] [wind]
 [wind]
 [wind]
 [wind]
[00:45:40]
 [wind]
 [wind]
 [wind] And this is style here.
 Oh, that's signed in. Okay, that's fine. That's the sign in. That sign in has a
 styles on both sides. The sign-up doesn't have any styles.
 So, let me just sign in here.
 So, I should put it on the account.
[00:47:07]
 Account model. SCS is going to be the moment button. The count, and then import the style. Okay, so I'm going to remove this style from here.
 The gap is through big now. And just going to do that.
 And since I know the music this year, I think that ID.
 I forgot the smaller. If I click on the account model.
 There's the other female password.
 I need one for the name and phone number. [no audio] Account content is the one that's going to contain the name and the only number.
 To make these accessible, I'll put these here, accessible by element name. These are not going to be required, but they might be read only. So I'm going to make the email read only for now.
[00:50:08]
 And I'll make the password read only for now. Being they're not gonna be changed.
 And the value, these should have a default value in them.
 This should have a default value in them.
 That value is going to come from the account. So this one is going to have account.name.
 It's going to get the account, I'm going to use the selector. Select the global account.
 Check that you might have some information now.
 So I put in this information here.
[00:51:27]
 This one should have a default value, or an axis, so just have a
 text value.
 When you put value, the difference between value and default value,
 default value can be changed. So this one's going to be account.email.
 This one's going to be account.password.
 So it's already here. I need to make a new state variable for the error.
 This error will happen just in case I don't know. maybe error updating the account.
[00:52:27]
 And it puts some gaps between these.
 Quick and easy gaps.
 You should be using,
 you should be using
 the grid systems and put gaps in and to align these.
 But this one's just a quick and easy way to do it.
 See, it's good.
[00:53:03]
 It's getting close to like production level. This is what you expect to see when someone
 Once added their account so yeah, I can I can change these but it won't let me change these
 I'm taking it, but it's not letting me change it because I'm just gonna set it up for now to not make these
 changeable
 It's easier that way.
 So let's see how far we got with this.
 Let the model contain an editableable form except for email when the account's information.
[00:53:50]
 So that's what we did so far.
 When the account form is submitted, update the database.
 Okay, so the first hour is done.
 We're going gonna take a break
 and I'm gonna have to spread out this practice
 throughout this week.
 So let's take a break. [BLANK_AUDIO] Hey, I'll see you after the break.
[00:55:15]
 [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and it's the second hour.
 I'm just going to post, I'm going to leave the practice posted up here for the second
 hour, but I'll open up the breakout rooms for many evaluations and for working on your assignments. So as usual, there's a collaboration room, the silence room and room for many evaluations.
 These will be open or 30, 42 minutes until the next break.
 Okay, so I'm going to do a week nine, many, many evaluation with Chris.
 I'll meet you in the breakout room Chris. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're going to continue. So we're going to get into a break for the second, the third hour.
 I'll start the break for that and then continue the
[01:48:34]
 mini evaluation with Chris after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the rank third hour of class.
 So I'm just going to post the upcoming assignment.
 That's two.
 And I'll open the breakout rooms again.
 But for this first part, it's just going to be open for 20 minutes because that's the remaining time
 For the mini evaluation and then I'll reopen it after the 20 minutes
 Okay, break out rooms are open
[01:59:44]
 I'll see you in there Chris. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 Okay, so, alright, so time's up for that first round of the mini evaluation. So I can use that for helping you guys with
 whatever you're working on. I'm going to reset the brain rooms.
 So I'm gonna reset the break rooms.
 For 30 minutes, okay, Chris, you have a question.
 - Yeah, do I have to, do I have to send a more key vowel or how do I?
 - Yeah, so let me have to finish up the notes here in the whatever we didn't finish.
[02:20:50]
 Let's see here and we were in the middle of talking about Redux. So talking about actions. [ Writing on Board ]
 Since I didn't turn this in on time, so I didn't turn this on on time.
 Okay. Okay. So I don't have to get to it.
 So then we probably have enough even if
 Even if we went over an hour, I would probably at least we could probably still get through two more points before the hours over with
 Okay.
 Okay. You can make a, so I submitted the, breakout rooms are open.
[02:22:16]
 So David, Alexandra, how are you?
 Are you guys doing?
 How's your coding going
 David are you all caught up
 Where are you at in the assignments?
 And Alexandra okay Chris you have a question?
 - Yeah, sorry. I'm, I'm, I gotta leave it 9.30,
[02:22:48]
 so I'm not gonna be able to do this today,
 but can we do this tomorrow?
 I can submit it now, we can do it tomorrow or something.
 - Yeah, that's fine.
 It doesn't have a,
 - Oh, wait, you should be able to
 so that you don't see an option to submit it. Yeah.
[02:23:10]
 And let me double check. [no audio]
 I'm going to go ahead and
 fill the 14th and let me
 just double check the
 settings here.
 [no audio] Okay, wrong date. Okay, um, alright, should be able to submit it now. Got it.
 Okay, thanks. Okay, perfect. Thank you. Are there David?
[02:24:33]
 Haven't heard from you in the while.
 Any status updates? How about you, Alexandra? Okay.
 How about you Alexandra?
 Okay.
 So since we're here, Chris, what are you going to work on right now and are you finding
 any difficulties with anything? Okay, so I guess you step away.
 I'm just going to be here for the remainder of the class.
[02:25:59]
 If anyone has any questions.
 Or something else that might be more useful.
 I can watch your code while you're working on your projects.
 It's called Para Programming, where you can have two sets of
 eyes. One person will be coding, the other one, which will be me.
 I mean, you'll be coding and I'll be just helping you, you know,
 giving you tips on your coding or helping you catch typos and bugs.
[02:26:39]
 A little bit faster than if you did it by yourself. And if you did the coding by
 yourself,
 error programming.
 Just let me know. I'll be here. I'll stand by. Bye. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so the breakout rooms are back and in conclusion, we started the walkthrough for
 Redux account practice.
 And we did many evaluations and you had a chance to work on catching up.
 Now, if you forgot to take attendance, now's a good time to do it.
[02:51:13]
 You have three minutes to do that.
 Other than that, class is dismissed.
 That's today's class focused on evaluations.
 Ask the ground for a few minutes just in case anyone has questions. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts 2/May 14, 2025 20-56.txt"

Transcript from May 14, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 It's week 10, day three, and the focus of this week is evaluations.
 So today's agenda.
 We'll do announcements. I mean, we'll take attendance, do announcements, review.
 I'll give you a quick tip.
 Then continue with the practice.
 On a second hour, many evaluations, but I will post the practice while
[00:00:36]
 opening the breakout rooms.
 Third hour, also many evaluations, but I'll post the assignment.
 Follow the opening breakout rooms.
 So you can take attendance. If you haven't marked your attendance yet, make sure you head on over to your codecs account and mark yourself present.
 Now time the announcements.
 Again, student collaboration day is Monday, May 19.
 Last day of class is less than two weeks away.
[00:01:52]
 It's crunch time, no time to rest.
 Last day of class is the 24th.
 But you should actually try to be ready and presentable because they're hoping that
 we can present on Tuesday of next week.
 Present what you have, even if it may or may not be graded, even if you haven't done
 all of your evaluations present what you have if they
 if they want to go through and continue with Tuesday
[00:02:33]
 and I'll see what I can do now pushing it until Thursday Okay, so time limit for linear evaluations is 60 minutes.
 So it's good if you can have your notes all together.
 You can put notes in your comments.
 When you do your linear evaluations that will faster.
 You know, have all the information in need.
 Okay, so no more corrections for week 8.
 eight corrections for week nine have closed and what I can still I can still continue to do evaluations I mean submissions for week nine
[00:03:45]
 have both, but I can still continue to do the corrections
 for week nine.
 But this is week 10.
 I still haven't written it here.
 Week 10.
 In the evaluations.
 This is the final evaluation. This is this is it when she gets this done rather than with evaluations. Hopefully you have all the points
[00:04:16]
 you need for all the evaluations. So this one for on time submission. She submitted it by yesterday.
 But she can submit it for late credit
 interactions until May 20.
 This is the final evaluation.
 And basically it's about transformers JS
 and how your capstone uses it.
 AI interface, so this is for your front end,
[00:04:59]
 your capstone front end,
 should have a AI interface, and it should, it should use the response from the
 AI in the backend.
 I mean, this is, this is easy to do if you just take what I showed you in the sandbox
 and just pop it into your capstone.
 That'll put this requirement, but the capstone finale though, capsstone finale over here,
 requires it for it to look nice and to be practical integrated into your website somehow.
[00:05:36]
 Not like some example page or anything like that that looks unpolished.
 No, we should look polished inside of your capstone canal.
 But for the evaluation, we just need it to be set up.
 It doesn't need to be polished for the evaluation.
 We just need to be able to talk about it
 and make it work in the capstone.
 Persistent and expiring logins.
[00:06:03]
 I showed you how to do that.
 I showed you how to do those last week just in case you needed a boost in applying that.
 And then the last one is editable accounts. Okay.
 Let's see here.
 So the assignments are still in the process of being graded.
 You'll receive extensions.
 Let's see, we have some close assignments.
[00:06:44]
 App engine. We have some close assignments, half engine, close this for Lake Credit on Thursday.
 Capital finale is due on Thursday.
 Remember, capital finale here. And here,
 May 15th before class.
 So that's tomorrow.
 They credit until a little week after.
 So we should basically have all the capstone assignments integrated. And this is just a quick list of those. your front end should connect to local and deployed servers when it's appropriate.
[00:07:53]
 And then this one properly structure and design the front end to provide an overall good
 user experience.
 So this one will help your presentations to show how follows your website looks like
 and how practical it is instead of just showing examples it's showing an actual
 thing that you can have customers visit and sell things
 on a service.
 services. For be a very good project, it'll be a very good project when you have a job interview. And it's just a basically a polished website that's ready to go and customers can start using it. Or at least your friends and family can start using it.
[00:08:46]
 And it doesn't look like an example website.
 All of these are,
 other things that we learned previous weeks
 like artificial intelligence,
 persistent login, editable accounts, using the post method,
 use the post method for security.
 So I need to start switching over to the post method
[00:09:23]
 if you're not already doing that.
 So, you don't have enough points in some of these assignments contact the student's success team.
 So, they can, you know, open up some of your close assignments.
 If you're working on, if some of these assignments close on you,
 which you've made it all the way to the finale,
 it's most likely that you do meet the requirements released
 and easily get the points for it.
[00:10:02]
 easy to get the points for it.
 Let's see. Don't get stuck for more than 15 minutes. Post into like, "Ho, ho, ho."
 And hopefully someone answers your question there and/or hopefully you find the solution before someone answers.
 As long as, at least if you post, then you have an opportunity,
 I mean, like you have a backup just in case,
 it might have been a situation where you could have been stepped for four hours,
 but because you posted it in July cohort,
[00:10:38]
 you were only stepped for 30 minutes.
 So you never know.
 Tonight cohort is a posting into my cohort is a way to just have a back-to-plant. And I see there's a new post here, you can see what this is all about. It looks like Alexander fixing here.
 Up and on.
 Skip that.
 And then.
 Alexander mock it.
[00:11:21]
 Okay, so. So in this case, you can mock it by just providing the location.
 You can set the value, I think, maybe not.
 I'm not sure.
 I haven't tried it, but it hasn't been necessary in any of the tests.
 So this one, Windows had to find.
 Show them the class.
 You need to install just environment.
[00:11:54]
 JSTOM.
 And you need to put it in the adjust config file.
 So this is for front and testing front end expects window location things will not refine. But if you're using just you can search through the transcripts,
 right top of that.
 Getting a 404 in AWS Lambda.
 Change post methods. So, as you get, cannot get.
 All these easy, I get the best instead of closer class. post here, but it should be axial should be using post. So I can also ask him if you are going to contact your AWS
[00:13:14]
 name with server manually, you can use postman and use the post method of postman.
 And so we get method.
 postman and said we get met it
 let's see both methods and explain locally.
 And then,
 and if it's saying "cannot" again, that means he's most likely using axiels.get instead of axiels.co.
 that again instead of X-E of black posts.
[00:14:09]
 But he's saying it's working on locally.
 So possibly we got to rebuild. I extended the So, yeah, for this one, I would say, go check your front end, make sure it's easy, axial is dot close.
 No book, LM.
 So no book LM.
 You can give your fast notes, your code and
 fast transcripts. Something I figured out, no book LM also accepts the URL of [BLANK_AUDIO] Okay, so here's a GitHub repository.
 Here's one of the files I have.
[00:15:56]
 I'll just take the redirect.
 If you try to give this link to the file, I mean to notebook LM.
 It's not doing a work.
 So I think redirect.js.
 It's not going to work. There should be an error here. [inaudible]
 [inaudible]
 [inaudible] Yeah, that one doesn't look accurate. to get something that'll work. You need to click on "off". Then when you see it look like the time here.
[00:17:56]
 yeah this one looks here
 so the tip here, go cook lm also except some URL of raw code from GitHub. So when you go to GitHub and you want to pick a file,
 one of your files from there, click on raw,
 or click on the file first, click on raw,
 and it looks like this.
 That's what you can give to know from them and add it to the sources.
 I actually, I think I added transcript to the game one.
[00:18:40]
 Now, this transcript up to week 10 day one.
 And now we're going to review. So get ready to, you know, just absorb or take notes if I say anything new.
 And now the microphone's ready just in case we have any questions for
 later we're going to do a media evaluation.
 Okay, so now time for the review.
 So with read-up read-ups account practice,
 we started
[00:19:25]
 to use Redux to toggle access to the account page,
 where users can edit their information.
 We were able to do this create an account component,
 let the model contain an editable form,
 except for email.
 And I also didn't want to change the password. At least
 not yet. That's gonna make things a little bit more difficult. When the
[00:19:54]
 account is submitted, update the database. So I didn't get a chance to be that
 yet. So let's just see how this looks first.
 A little pile. [BLANK_AUDIO] [BLANK_AUDIO]
 [BLANK_AUDIO] start. I say he changes, he changes route to post. This one could stay on yet. So he should be changing that
 back to get
 all right so with this render
 the front end (mumbling) [BLANK_AUDIO] I did install something. I didn't stop sleeping. I don't know if that helps. Anyways, I'm excited for you.
[00:23:29]
 I'm excited.
 Being easy.
 Okay, so we, we'll be signed in.
 So you met within the account page right here.
 And we had some information.
 So for the practice, we got to this part with the
 modal contained in the whole form with the
[00:24:18]
 counts information. So that's how far we got.
 I'm gonna continue with that.
 So I'm gonna switch to the next slide here.
 Actually, before I continue,
 then you guys, let me give you guys a chip.
 So what you could do is combine code
 into one text file or notebook L.F.
[00:24:59]
 So remember how notebook L.F. won't accept your code
 as a JavaScript file. Well, what you could do is just combine all your code into
 what text file. Now we, you don't need to do any converting, I mean, you don't
 need to manually convert your code into text files. And you say, "Space by just
 dumping all your code into one file." So I'm gonna show you guys how to do this. That way
 you can easily include your code in notebook L.M.
 I'm going to put this in the tip section. So these are all command lines right here. You can just fix them.
[00:26:16]
 You shouldn't get space there.
 Another command line.
 And I'll describe what each thing does here. Each flag, each option.
 Okay, let's follow the steps. Right here.
 We're going to combine our code into one text file and then we'll put the Lm.
 So let's install in the dead dependencies,
 attacking called content.cli.
[00:27:16]
 Next, the admin is listening.
 I guess I'm going to put that on the front end.
 And here I can install, save that, come cat, see how it might look like that.
 Come cat means like concatenate or combine things together and see a live command line, but it's also a
 function. So who want to use the command line for a it's command, well, NPX, let's you run one of the node modules.
 So here's node module, and takes that you run the node module in the terminal.
 Files, this flag here or this option, let's use specify which files to concatenate
[00:28:25]
 or to put it to merge together.
 I need to fix something here.
 Some things, there's too many spaces.
 There should not be spaces here.
 So not these spaces here.
 There you can see it. here. Again files specifies which files you want to merge together and this is This means right here go into the source folder and all sub folders in the source folder. If and I have many folders inside of it.
 And once you actually, I just have one file inside of it,
[00:29:55]
 directly inside of the source folder.
 So, we want to merge all the files inside of there including the ones in the subholders so
 that's what the two wild cards here meet. The asterisk means get all the sub
 folders and this one right here wild card for file names so any file name and
 then the dot and then ends with any extension.
 So this basically means any folder, any file in those folders.
 Here's the output flag.
[00:30:44]
 It tells us which file you want to combine them into. And so I want to combine it all into cool not text.
 So I'm just going to copy this code here.
 Run it on the front and command line.
 And then a root folder.
 Because the root folder has access to the source folder.
 because the holder has access to the resource holder.
 If this works, I should have a file called code.txt.
[00:31:20]
 So I'm here around here and it should contain all the code from front end. and looks like it finished.
 Let's look at the, let's look at the results here.
 Here's code now text.
 And here's all the code from the form. And just keeps unglowing and going.
 This is all the files merged together.
 Next one is this one for including the files in the current folder.
 So NPX, that's this a node package in the terminal.
[00:32:07]
 Here's a node package we want to write and we want to specify the files.
 So in the current folder we want to include JavaScript files,
 TypeScript files, NCL files and JSON files.
 And then we want to output it to the file called config.txt.
 So this one will get us things in the root folder.
 Because right now, right now these things over here, these over here I just coat from the source folder.
 I don't have anything from the config or the root folder.
[00:32:50]
 See, I have these files right here, but none of these are, you know,
 merged together like this.
 I'm going to merge them together with that code right there.
 To the JavaScript files in the root folder, time to go to HTML and JSON files.
 And then I'll put it to config.txt.
 So basically, I'm going to config.txt.
 OK, so I ran the command.
[00:33:22]
 I see config.txt.
 So it has things from my, my Babel.
 This one has redirect.js.
 This declaration file.
 This one's the Webpack file.
 Okay.
 Okay, so I got those.
[00:33:43]
 Now I can add code text and config.text to notebook L.F. [no audio]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible] So what should I ask you? How do I set of read-ups?
[00:34:30]
 So it doesn't have the notes about read-ups, but it has my read-ups code.
 So let's see if it says anything interesting about that. You have two of the kit, we have three dots, and it's mentioning that two packages
 we need right here.
 Yep, that's right.
 Store and selectors.
 So we save them in the store folder. State selectors.
 It looks good.
[00:35:17]
 Yeah, it looks good. So you won't see this kind of strategy if you search for it on
 the internet. I'm teaching you search for it on the internet.
 I'm teaching you the easy way to use Redux.
 When you search on the internet it's more complicated.
 So this looks good.
 So that's the tip there.
 You can combine your files into one.
[00:35:50]
 We'll contact that CLI and then
 bring it over. You can do the same thing with your notes,
 which are notes into one file.
 And then bring it over to notebook L.M.
 It will answer your questions. We'll go to the next one. We'll go to the next one. We'll go to the next one. We'll go to the next one. We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
[00:36:07]
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
[00:36:14]
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
[00:36:21]
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one. We'll go to the next one. We'll go to the next one. We'll go to the next one. the account form is submitted update the database.
 So I'm going to share my screen again.
 So here's the account model. Here's the form.
 And we'll submit. So under that is, to do is I'm going to sign up this similar.
[00:37:07]
 So I'm going to go into the sign up here.
 I'm just going to sign up.
 I'm going to sign up.
 I'm going to model it.
 So before I just sent the event object to the head alert,
 with this time I'm doing all the immense stuff here. So that's okay.
 I can continue with this since I haven't.
[00:37:49]
 But it's better you can re-factuate outside.
 So this part looks cleaner and so that this component just focuses on rendering things things and setting up read-ups where it is. on the same here.
 And puts them in a dark corner back in this.
 [BLANK_AUDIO] You can be on the password, no, I'm not going to get the votes.
 I don't want those.
 I like, I'm gonna get the name and the phone number.
 [BLANK_AUDIO] and the phone will rip.
[00:39:11]
 I'm gonna get the name and the phone number.
 And this will make a new thing to close the button.
 I should make this in sync so that this await from the handle.
 I'm going to use a different button called I can't repeat.
 You're acting as colorful, okay?
 So, actually, no, I'll let it update the name and the owner.
 I'm not going to make a TDD for this,
[00:40:14]
 because just to hit this down on the caster,
 we already have a TDD for the sign of localize.
 It's very similar.
 So if it updates, if it updates,
 then I want to receive the account information.
 But if it doesn't update, I want it to be in blank.
 So if it does update, if I want it to view,
[00:40:56]
 I want it to update the account object.
 update the account object and also I want to clear up any errors here there are messages I don't need to do anything with persistent login. If you want to include the form, and we set everything,
 and if there's an error, set account, and we will error message.
 There was an error.
 Okay, so to do this, to get rid of these errors, I can do this. Use dispatch.
 I need to bring this in.
 I need to bring this, I don't have access to this batch because it's outside of the
[00:42:52]
 component, so I'm going to bring all of this in.
 I'm going to be with here on the bottom.
 So it doesn't apply right to the top.
 I want the top to be clean.
 I want to focus on the rendering. When I'm looking at the component, from top to the clean. I want to focus on the rendering.
 When I'm looking at the component,
 from top to bottom, I just want to look at the things
[00:43:10]
 that involve the rendering.
 And then if I need to look at the headlifts in,
 I'll just go down and look at the panel.
 OK, so I need to set object.
 Okay, so I need to set object. I don't have anything for the counter-modal error message.
 So I'm going to set that up. [no audio] Just like that first.
 Make sure I have a select record.
[00:44:26]
 Just copy this down and hit "4". I can't move over every message.
 I need to select that.
 It looks like that.
 It's selected.
 Unless the name is variable, then I create it in state.
 Variable file. the name is variable, then I create it in state variable style.
 So I actually need to select it from here.
[00:45:01]
 But I do, I do need to select it, but not from here. It's gonna be used in the contents right here
 the error message
 so now I can select use select
 select account I need to put a few that work for me. And this one I haven't made this, I haven't made this
 function yet.
 That's okay, then just quickly make that function here and if you want and do account update.us and it's going to make an I think it takes ending your name and playing with the strings. which are more streams.
 And this is going to return a promise which results in the account
[00:46:56]
 for undefined.
 And that's the function signature.
 As I want, I wanted to either return in account if it was successful
 or nothing if it was not successful.
 Let's see if it rendered anything there.
 I don't see the placeholder, so that's good.
 If I refresh this, yeah, so we can see that the error message is blank.
[00:47:40]
 That's good I can change it here
 just like this
 just like this is the electric working
 property the placeholder right there
 that's a thing and then we'll select the other side.
 And then we'll select the other side.
 And then we'll select the other side.
[00:48:19]
 And then we'll select the other side. Now all that's left to do is set up this handler.
 Put a front there.
 Put a little one in the tab.
 You can go first.
 So this is the handler.
 I'm just going to copy the sign of the tent here.
 I'll see what else I'll need to change.
[00:48:54]
 Actually, this is not going to work.
 That's sign in the tent. and the same rectangle. Right here.
 And you guys should have something similar to this. Like this is the part that chooses which you are an L.
 It's a bit either the local or the deploy.
 So basically it's been trying to connect to the lambda server,
 but if it doesn't, it's going to connect to the local server.
 So here.
[00:49:41]
 This one is going to send some data,
 which is going to be this one for me.
 We will get this mixed up here. and the corner.
 and the corner.
 and the corner.
 And I'm not going to send it to the sub-assign of route. I want to send it to the update route.
 I haven't created it yet, but I already have an idea that I wanted to go to a route called
[00:50:36]
 update.
 And then all this looks fine right here.
 So now I have to rip off the back end.
 But we're running out of time.
 So I have to continue on the back end,
 tomorrow.
 But this wind should compete
[00:51:00]
 in front end.
 So let me just put a,
 you look it right here here because this is a hardware
 little crate because there's no vacuum to accept this.
 I mean there's no rot to accept that.
 So let's just get that far. So if I'm going to change this here, instead of handy it will be Arnold.
 Instead of sighted, I need to change that. I'm just fixing that first.
[00:51:52]
 I'm going to save.
 And then you see.
 And so it says "safe" right there. Change its Arnold.
 It's safe.
 And so if you handle a couple of things,
 you can't handle it.
 And if you can't handle it.
[00:52:22]
 And if you can't handle it that. Try it again. and for it.
 Alright again.
 Okay so this is the part where it's going to go to my local host URL.
 Which is not working right now because I haven't set up the big route. It's supposed to send the data. So this is the part where it's going to break.
 I'll just press 'Pray' and it breaks.
 And I'll continue with this tomorrow. some more.
 Now we're going to guys after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break.
[01:03:55]
 For the second hour of class, I'm just going to post a practice just in case you want to work on it.
 And I'm also going to open the breakout rooms. [no audio]
 [no audio]
 [no audio] Okay, so the break-, I'm going to look at the lineup.
 Unless anyone wants to volunteer for either corrections or many evaluation. We need to get these many evaluations out of the way.
 Oh.
 - Kiss.
[01:05:44]
 - I saw it to finish week nine, but so this is my second attempt. If I don't what happens if I can
 If I don't explain these well enough to
 Do you think you're ready?
 Now I need to look more at this
 App engine and Okay, well, okay, so you want to do so that's correct Now, I need to look more at this app engine.
 Okay, well, okay, so you want to do, so that's corrections for week nine, right?
 Yeah. So, I'm taking corrections for week nine all this week.
[01:06:18]
 Okay.
 So, if you're not ready for that, and it's going to be your second submission, you want
 to make an account.
 Right.
 But there are some things for week 10 that you probably can get out of the way.
 Let me look at it, see if I, yeah, I just saw that I have something from, let me see, let's just, it's from,
 two, an assignment that,
[01:06:59]
 oh, an evaluation for week two.
 What happened?
 I added a 64 on an assignment from week two.
 Having a good.
 Okay, so yeah, that's something you have to contact.
 I'll contact you.
 I'll contact you.
[01:07:17]
 Success team.
 Yeah.
 And if you need to get that reopened up.
 Okay, I'll message them.
 Let's see, with 10.
 Yeah, I can, I can maybe do this, the third and fourth one.
 Questions?
[01:07:44]
 Okay. All right, so let's head on over to the
 mini evaluation room and I'll use to get those out of the way. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Oops.
 Okay, so we're going to'll see you guys after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break and into the third alvera class where I'll just post the assignment and open the breakout rooms.
 And then we get those open first.
 Let's see here. 40 minutes for the remainder of Chris's MIDI evaluation, and then I'll reopen the breakout
 rooms.
 Okay, Chris, I'll see you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] >> Is there a pass?
[02:25:26]
 >> Evaluation rules are.
 >> That was 16 minutes when I did my evaluations and when I was a student, there are only 30 minutes.
 So I had to stay focused and not ask any questions but just do all the talking according to what the notes I had prepared.
 So I see. Yeah, at least you got some points and I gave you that point on the persistent.
 Oh, cool. Thanks. Oh, actually, no, I can't give you because you didn't talk about the expiring,
 but we're going to continue with the expiring there. Oh yeah, I didn't do the expiring, it's right. But yeah, we'll continue that. Once you have everything, I'm sure
 you'll just breeze through the rest of the topics there. Yeah, the AI stuff I'm not.
[02:26:23]
 Yeah, the AI stuff I'm not. Yeah.
 Yeah.
 So I'll just remember the evaluations are 60 minutes time
 limit.
 So it's good to stay on topic.
 And you know.
 OK.
[02:26:45]
 Let's see. So the rest of this time, I can use for another mini evaluation or corrections, or I can
 just answer questions that anyone has, or if you want me to take a look at your code
 and get my opinion on it, I can do that too.
 Otherwise, I'll let you opinion on it. I can do that too.
 Otherwise, I'll let you work on things. I'm gonna open the breakout rooms.
 Chris, you have a question.
 Thank you.
[02:27:17]
 - Can you just quickly show me how to do the time out?
 - Yeah.
 A time out while we're testing for the expiring.
 Oh, okay.
 Is it just adding like a...
 - Okay, so let's see here.
 I'm gonna pull up this sandbox.
[02:27:43]
 Let's see here. I'm going to pull up this sandbox.
 But the breakout rooms are open for 20 minutes just in case anyone wants to
 breakout will just open and I got popped into it. Was that not supposed to happen?
 I'm going to do this in the main room. Okay.
 I'm still in the main room, but I can hear you in the main room. I'm just sharing my screen in the main room. Oops. I'm going to run the
 thing there. Okay, so there was a practice we had on expiring persistence.
 Right here.
[02:28:41]
 Persistent login practice instructions. When the sign in area amounts get the
 let's see where do you want me to start. I just need to see like where this
 current timestamp and date just how it's used. Okay so the first occurrence is
 here at the beginning. When the user's authenticate,
 I'm going to get the first timestamp.
 You were using on the AWS. Is it okay if I use my read?
 Yeah.
[02:29:15]
 Okay.
 Because they're going to basically do the same thing.
 Yeah.
 And that's what I, yeah.
 I just reused my code that already did that.
 Okay.
 Cool.
[02:29:27]
 But if you, if you basically duplicated your code so that your, so that all your
 credit stuff is not in the same section.
 Yeah.
 And that's fine too.
 Oh, yeah, I'm going to switch the front end.
 I'm going to go to the part where we sign in.
 Then close everything here.
[02:29:50]
 So we can stay focused on the sign in.
 Sign in area or actually sign in model.
 There's a sign in modal when we get signed in.
 So it's going to handle the sign in right here.
 If it gets signed in successfully, I'm going to get an account, which contains their
 email, their password, their name, and their phone number.
 So if there is an account, I'm going to do these things right here.
[02:30:29]
 I'll save the account information and Redux,
 which makes that account information available to all the components.
 Then I'm going to save the persistent login.
 I refactored it out into another function.
 Because I'm going to use the same function when I create an account.
 So basically I'm going to reuse my code instead of typing it twice. Okay, why is it not going? There it is. All right, so let's
 see what the instructions say. Just going to go here. In the front end, when the users authenticate, get the current timestamp and date.
[02:31:26]
 OK, so they just authenticated.
 Wait, did I not?
 Oh, here it is.
 OK.
 I'm going to get the current timestamp with date.now.
 This is going to give me the number of milliseconds that have passed since
 1970. I'm going to save this object and just save that string of find object in the credentials key.
[02:32:10]
 Think of this as like one of the state variables in Redux and this is the value of that state variable. So, I have to string a find object because I can't store objects directly in local storage,
 local storage only stores strings.
 So, I string a find this object and save it in local storage right here with set item.
 So, the timestamp. So, your question was at that time stamp.
 So date.now, that provides this timestamp of when they logged in.
 Store the user's email password and timestamp in an object.
 So that's where it happens here.
[02:33:14]
 Use persistent login practice instructions to store login info.
 With local storage. So that's what happened here.
 During the file the object and then store that object. I know what you Chris I know that what you're doing is just saving each individual email and password and.
 In the individual key.
 That's fine too that way you don't need to stringify anything.
 that's fine too that way you don't need to stringify anything. But it would be actually better to pass the whole object because it keeps the time stamp with account like otherwise they're kind of something.
 And if they're all really if it's related you do want to keep them together in this kind of object format. - Yeah. - Because if they're separated out,
[02:34:05]
 and sometimes those can get to mixed up.
 So that's, I mean, it's more straightforward
 to just store individual items like that.
 It's easy, 'cause you don't have to stringify anything.
 But just one little step like this,
 then you keep them all together.
 - So when you do the, if it's streamifying the whole object, how is it, how are you able to
[02:34:35]
 subtract the current time from the, or the time sample the current time. I have to parse it.
 So it's stored as a string, but then when I get that string out, so let me get to that part.
 Okay.
 So when the sign in area mounts,
 get the current time time stamp with date dot now.
 So I want to check the basically.
 That's one the user, you know, opens the computer and they,
[02:35:10]
 let's say they log into the website. So let me see what happened here. Oh, this is,
 this is when I try to go to the other path. So like right now, I'm still signed in,
 path. So like right now, I'm still signed in. Still signed in. I tried to go to the update path, which is haven't created yet. So that's why I crashed. I'm still signed in and
 then let's say I'm a user and I just shut down my computer, shut down my computer that
 represents showing down my computer and then I log back in and open my browser.
 I'm still signed in.
 So when I open my browser, that's the that's the mount.
[02:35:52]
 It just got it just remounted the sign in area.
 So that's why this one says when the sign in area melts.
 Get the timestamp.
 That just basically means that the user
 just opened up their computer again.
 - Here you go.
 What do I did now?
[02:36:17]
 - So where is it sign in area?
 - Okay.
 - So here's the component did map. Yeah.
 Okay, and there's component here's the sign in area. So when it mounts,
 I know that the user just logged in or opened it.
 They opened the browser and I want to check what's if they
 said still stayed long, the logged in or not.
[02:36:48]
 So, so I have a separate function called get persistent login, which is over here.
 The reason why I wanted to take it out to a separate function is because I need a sync.
 to a separate function is because I need async.
 - async.
 - Yeah, because I'm gonna,
 I'm going to use a wait right here.
 You can't use async inside of component in mount.
[02:37:22]
 I mean, you can't use a wait in component in mount.
 Because if you put async in front of here, your cause component did mount. Because if you put a sink in front of here,
 you cause component did mount to load return to promise.
 You cause component did mount to return to promise, which is not something you want to do, because uh, but what do you need to, what do you need a sink? Can it just
 But what do you need to what do you need a sink? Can it just can't you just because
 All right, time because I
 Because I need to
[02:37:54]
 Possibly log out the user. I mean
 Reload, I mean, I need to log in the user
 because when they when they open their browser again
 They're not gonna be logged in Their information will be saved in local storage, but they won't be logged in. It's also
 possible that their password changed because they might have been logged
 in somewhere else. So there's something as I need to verify with the back end
 before I can log them in basically. I need to verify with the backend before I can log them in basically.
[02:38:27]
 I need to verify things with the backend.
 So you're talking about like if you're talking about automatically logging them in for certain amount, you may say log.
 Blog out somehow.
 No, yeah, yeah, that's right.
 When they log out like they have maybe they have a browser open and one computer,
 and then they have another browser, just like that,
 in another computer.
[02:38:56]
 So they could log out of this computer.
 If they log out of this computer,
 they should also log out of this computer, they should also log out of this computer.
 Right. So if I log out here,
 whoops, what happened? Why did it say that?
 Well, isn't local storage just set on the brow? Isn't that part of the DOM?
 So that's just local, I mean, so that's just a persistent lot for that one browser.
[02:39:26]
 And let me fix this part.
 Why does this thing break now?
 Can't even sign out.
 Oh, okay.
 So I got signed out.
 That's why it didn't let me.
 Okay.
[02:39:41]
 So let me just sign in here.
 What was your question again?
 - So persistent logins is only good for that browser
 because if look that local storage is just saved
 on that dom or that browser or is it?
 - Yeah.
 Oh, actually, yeah, it's only, let me see.
[02:40:04]
 Yeah, if they are, it's gonna be local storage on,
 you know, this is edge, the local storage on
 Chrome is different because there are different browsers.
 You're not really logged into the,
 you're just logged into that browser basically.
 You persist at all.
 Yeah, logged into the browser. Actually.
[02:40:26]
 But ideally, you wanted to be able to log into both,
 but that might not-- that's not a requirement right now.
 So let's say I have another browser right here. If I sign out of this browser, I should also,
 "Oh, I'm not signed into this browser."
 So there's no verification.
 Right now there's no verification if I'm signed in or out of another browser.
 >> And is it possible to sign in automatically
[02:41:05]
 on another browser if you're signed into,
 because when you have to go to the process of sign.
 - Well, what, is it possible?
 No, it's not possible unless the email was saved already.
 So yeah, like in all other production ready websites,
 if you're going onto a different browser, you have to sign in
 and basically that will cause the sign in to be saved in that browser.
[02:41:34]
 What about just like a different device?
 Yeah, even that too. A different device is local storage are, you know, local storage are local storage on chrome is different than the local storage and edge.
 Okay, so if I say my local storage here in chrome edge doesn't know about it because it has its own local storage.
 Could you do like a
 So the next step, well, let me just focus on one browser. Sorry.
 So it doesn't get confusing.
 Yeah.
[02:42:12]
 Let me just, that gets more complicated when you're thinking of cross-browser synchronization.
 Yeah.
 So when the sign-in area mounts get the current time stamp and date.
 So this is where I'm doing here. I'm gonna
 okay, so I'm gonna get the first I need to get the saved login. Right there, you're going to get the saved login. So if there is a login, it's kind of coming as a string.
 I mean, it's going to come in as a string, but I need to parse it and turn it back into an object.
 And this object, I'm going to just destructure it, but I can get some values.
[02:43:10]
 Here's the timestamp that I'm getting. So this is
 the timestamp of when the browser is reloaded.
 They just came back, they stepped away from their desk, and now
 they're back, maybe they're back one day later, or maybe they're back one hour
 later. We don't know, that's what this one checks. How long has it been since
 they've reloaded? Or since they've logged in. So here, this is where we check their laps time.
 How long has it been?
[02:43:48]
 We subtract the current.
 We subtract the, this is a timestamp when they logged in.
 This is a timestamp when the page was reloaded.
 So we're gonna get the time to lapsed.
 And I'm gonna create a Boolean variable here.
 This one tells me if it's expired.
 In this case, if the time elapsed is greater than one day,
[02:44:12]
 that's 86,400,000 milliseconds, you can ask AI.
 Like, how many milliseconds is in a day?
 I did have to talk it. it like they were like right away.
 Yeah. So if it is expired, I'm going to just clear the,
 clear that key in the local storage.
 That way there's no more login.
 Yeah. But if it's not expired,
[02:44:46]
 if it's not expired, I'm gonna read log them in.
 How do I read log them in?
 I don't have their full account information.
 I only have their email in password.
 For security purposes, I'm just keeping the bare minimum.
 Okay.
 So technically, if you do save their full account information in
[02:45:09]
 your in your local storage, then maybe you don't have to re-authenticate. But in
 this case, I am re-authenticating because it's possible that they did change their
 password through a different browser.
 So what's it, why are you, since you're defining what an expired amount of time is,
 and you're saying if it has expired, we'll just reload it.
 And why not just extend the expired time?
 What's that?
[02:45:48]
 Well, if you could do that, if you want, I want to set it to a fixed amount of time.
 But if you want to extend the expiration,
 you can do that too.
 So it looks like if it's expired,
 you're logging them in automatically.
 So if it's expired, I'm clearing the credentials.
 - Oh, if it's not expired, you're resetting the day.
[02:46:11]
 - If it is, yeah, if it's expired,
 I clear the local storage, which says that
 there's nothing saved.
 - Yeah.
 And then I'll--. And then other one.
 In recent time out for that.
 Because if they, basically, if they, if they reload the browser,
[02:46:39]
 they are not logged in because before I had, before I had persistent log in if you just
 refresh the browser it logs me out right yeah so it returns back to that
 state so when the browser is reloaded it just clears the local storage and
 they're already logged out because that's the default behavior when you
 reload a a browser the person gets logged out automatically that's the default behavior when you reload a browser, the person gets logged out automatically.
 That's the default behavior where we're overriding that with persistent login.
 But so if it's not expired, that's when I reauthenticate them just to make sure their email
[02:47:17]
 and their password match because it's possible that they could have changed these in a different
 browser.
 is possible that they could have changed these in a different browser.
 - Well, what happens if they did?
 - If they did change us in a different browser,
 then they will get logged out right here.
 - Oh, yeah, okay.
[02:47:43]
 - Okay.
 You know, for security purposes, what if they change their password in another browser,
 but in this original browser it didn't change,
 that becomes a security risk because someone else can start using this browser.
 You know how on Facebook you can say,
 log me out of all of my devices and all the browsers.
 So it's a similar feature. It's like that. Okay, basically logs them out of all. If the password
[02:48:14]
 changed, it logs them out of all all instances, all browsers. So yeah, so this checks it.
 So, yeah, so this checks it. So if it's still authenticates, then it's going to, you know, save the account and they're logged in.
 This is basically, if I save the account, it's going to trigger the login.
 But if it doesn't reauthenticate, it goes to here, which clears the credentials. That saved in local storage.
 And no login ever happens.
 Okay.
 That was good.
[02:48:54]
 Good demo.
 Thank you.
 So, basically, just follow the steps in here
 and they should get you going.
 We got to this part.
 This is expiration.
 If it's more than a day, sorry, empty string.
[02:49:14]
 And the empty string basically indicates the expired
 login.
 So once you get to that part, the empty string,
 then you're basically done.
 But I have here, if there's an account, that's
 how I'm going to set the buttons here, the me visible or invisible.
 OK, that makes sense.
[02:49:42]
 OK, so the breakout rooms are back.
 Okay, so the breakout rooms are back. And then,
 gonna conclude the class.
 So in conclusion, we did some of the
 Redux account practice.
 We didn't get that much in.
 I think we only got one mind. Actually, we didn't finish that line because we have to get the back end going.
[02:50:08]
 We just worked on the front end.
 So there's three minutes to mark your attendance.
 If you have any questions, I'm going to stick around.
 Otherwise, class is dismissed.
 around otherwise classes dismissed. That's that's today on evaluations. [BLANK_AUDIO] >> I'll extend your, do you need help on anything? Want me to help you with any code?
 >> Yeah.
 So I need some help troubleshooting this network issue.
[02:52:04]
 >> Okay. >> It's crashing my back end again.
 Okay.
 It's kind of sad because I've done create and read now update is the one that's, I mean,
 it's, you fit. And I don't have any trouble with update. Any, any, any, a reportable trouble.
 What is the other two?
 Okay, so what's going on here?
 Okay, so excuse me, this network error.
[02:52:34]
 So from, for now, I've just dumped all these on one page.
 The register review and update.
 So I enter all my update info and I hit submit and it crashed the back end server
 It's refusing the connection from the put command here on this part
 Okay, you put put It's a bit supposed to use a post method or the get method
 Whichever you
 But I haven't gotten to the post part in the Oh, there should be.
[02:53:05]
 Yes.
 You should be using axiels that get in order to make the update.
 Yeah, so think of it like a channel.
 Where's your axiels?
 I'm looking for a hang on.
 There's too many things open right now.
 This is front air
[02:53:27]
 All right now we're using axios
 Access communicating on two channels. There's a public channel, which is get and then the secret channel, which is post
 Those are the only channels I talked to you about
 Public channel is get and that's the one you're using your setup for right now,
 I think. You're not using post yet, right? I'm not using post, but I put put in my index.ts.
 Oh,
 It works.
[02:54:02]
 >> It works. >> Okay.
 >> Well, hang on.
 >> Yeah.
 >> Well, we should be using both the standard one.
 >> I know post is standard, but I haven't got there in the assignments yet.
 >> But you're using put, which is a, you're using put, which is something I haven't
 taught you, but it's almost the same thing as, it's pretty much the same thing as post.
[02:54:26]
 - Can you use post in Axios?
 - Yeah.
 - Okay, what I did understand is, to me,
 the word, the keyword get sounds like you're returning something.
 So if I put, get here, is it actually gonna send my updates
 or is it gonna freak out and not doing it?
 Yeah, well, you have to think of that as a CTP methods.
[02:54:54]
 So they're not action words.
 They're not action words.
 They're not action words.
 They're just channels.
 They're channels.
 That makes more sense.
 So this is get is the get is the public channel and post is the think of post as the private channel.
[02:55:14]
 The private. Yeah, is the public. The private is private.
 Okay. Okay. And so you're using a walkie talking and you're just you were just using two channels for simplicity.
 That makes more sense.
 You could use posts if you're set up for it.
 If you're not, then you just use get.
 Okay, let me see.
 I think.
[02:55:39]
 But if you're already, let me see what you did for your back end.
 Your back end. But if you're already, let me see what you did for your backend. My back is work.
 I don't want to touch the back end anymore.
 It's taking me hours to make it function.
 And it might not work because you just changed the axios to get.
 So let's double check your index file for the backend.
 So let's double check your index file for the back end. My index file is get it has gat in the foot.
[02:56:12]
 Yeah, right now it's not set up for the put.
 So you have to change it to get if that's the easiest fix that you can do now.
 I think it's common these out because I don't need them.
 The gats are already there. I didn't take them away. Oh, can just comment these out because I don't need them. The
 gets are already there. I didn't take them away. Oh, okay. Oh, they're doubled up. I see.
 Okay. Right. Cause I didn't want to remove stuff that I need. Yeah. Because some things
 we're using get and other things we're using good. Yeah. I would change those to, um, to post
[02:56:41]
 until you're ready. But I don't want to. I don't want to do that yet because I'm not ready to do post.
 Yeah, I mean, you can keep it commented out, but use posts instead of put.
 Oh, I see what you're saying.
 [pause]
 [pause]
 Your control D. Not working. You're controlled.
 You're not working.
[02:57:07]
 No, I'm just not used to doing it.
 I'm not used to doing it this is faster for me.
 Especially when they're all next to each other.
 If they were like all over the place.
 Okay.
 So.
 It should work like this.
[02:57:27]
 Okay, but it doesn't work.
 And I tried to see what happens.
 Let's see what happens.
 We're going to have to follow one of the routes. So that's what part of the front end is not working when this happened.
 When it wasn't working was the update.
 Okay.
 So the front.
[02:57:54]
 But the create has put in it. So now I have to update all of the stuff on the front. Okay, just, yeah, just the axial, that's a quick fix there.
 Yeah, it's not set up for the put or the post command, but you should be using those because that's the requirement in the. I know, but it's not in this particular assignment that i'm trying to finish. So, yeah, that's why I didn't do.
 Yeah, that's fine.
 Where's my page.
 Okay.
 Console.
 We let it page.
[02:58:31]
 So the part is not working is down here. Well, now I have to retest all of these.
 You have multiple errors there.
 Those are IDs are identical.
 Identical IDs.
 Back in the in the those are errors there. No, I thought they were warnings because they're yellow.
 >> Okay. Well, you should be using unique IDs for each one.
 >> Well, the problem is there are all different components.
[02:58:59]
 And normally all of these components are not going to be loaded at the same time.
 So,
 but they are loaded at the same time. - Right now, yeah.
 So let me comment these two out.
 - Okay.
 - Okay, so that's all that.
 - Dispert development, okay.
[02:59:21]
 Just refresh that.
 So that takes away all those, okay.
 So that takes away all those. Okay.
 Okay, there's some still identical things here.
 You might have copied and pasted some IDs.
 Oh, wait, no, that's a different one.
 Did have autocomplete attributes current password.
[02:59:44]
 Okay, so let's look at, let's see if we can fix that really quick.
 Well, let me see how you made that form.
 Kind of small like.
 That is not the right form anyway.
 Kind of small. I could barely see it on.
 Okay, there. that's better. Because when it's streaming on,
 when it's streaming, it's someone that pixels someone, no, some of the pixels get very.
[03:00:15]
 Oh, that's you. It like it makes it like a square and things like that. So, um,
 like that. So let me see here, it was saying something placeholder, class name, acquired,
 what's the message here? Input elements see, your input says ID.
 That's on account words.
 Quite that.
 What is that?
 See that.
[03:00:54]
 Can I see that?
 OK. type is password placeholder.
 It's not password.
 Okay, I don't not sure what that is.
 But yeah, that's the full room where the answer the password.
 It's shouting about.
 This it doesn't like
[03:01:26]
 something in this div. Yeah, I'm not sure why everything there looks fine. And I
 just found a site builder. I have this user label for user password.
 for user password.
 Yeah, that looks fine.
 I'm not sure. We can continue.
 So you should be able to send something.
 Right, send that to the backend.
[03:01:58]
 Is this for adding?
 Yeah, for adding an account.
 - Yeah, let's make a video of this. - Okay, let's see what happens when you try to.
 Okay.
 For testing purposes, do you want to have it with prepopulated values?
 Or you just wanted the placeholders there.
 I just wanted to placeholders.
[03:02:29]
 Okay. Because they go a lot of populates and from the browser window, once I am
 manually checking it, I don't like this button, this button has to go. So it has a created
 vehicle with the gas. Yeah, so that works. Yeah, that worked. That worked. Would they get method or think of it like the get channel.
 This one is good. Let me try the read one again.
 Oh, I can't you.
 >> I can't you. >> Yeah. Those were commented together.
 So you have to uncomment them together.
[03:03:09]
 >> I did the model together.
 Oops.
 >> Oops.
 >> There's a div all the way at the end.
 You have to bring it down.
 Where did it have to get thrown?
 That's that, dude.
[03:03:30]
 This is moving, Stephanie.
 Stop that.
 I had to fix this.
 I don't remember how to fix it.
 So I left it alone for now. OK, so it's working. You got to fix this. I don't remember how to fix it, so I left it alone for now.
 >> Okay. So it's working.
 You got to response back.
[03:03:49]
 >> I mean, it works.
 >> Yeah. It works.
 I'll fix it later, cosmetically speaking.
 >> Yeah.
 >> Consider it is not supposed to be on page anyway.
 I didn't care right now.
 Stop it. supposed to be page anyway, I didn't care right now. So maybe the update is not
[03:04:09]
 working because three things were running at the same time. I don't want to see the password.
 >> No.
 >> Also because your put method was not set up properly. Or the put channel.
 You just change them back to get.
 I think that's what fixed it.
 And you're also using them one at a time.
 >> Yeah, it's not running because I haven't hit submit with everything completed yet.
[03:04:44]
 >> Yeah, so let's try it.
 Let's see what happens.
 I'm trying to find the password field.
 Why where's my password field?
 What do you want to do?
 You're going to, are we going to disable that?
 Oh, this is what I want to update.
[03:05:03]
 Yeah, I don't want them to update their password here.
 >> So what you could do is just --
 >> I'm trying to make it not required, there we are.
 >> That's what I want.
 >> You could disable, put disabled.
 >> I don't want to do that.
 >> Or you could just put value value if they have a value.
[03:05:30]
 No, it updated now. Oh, but it says the bad. It's showing you that message
 because it's not into a password. Yeah, you need to put a password. Yeah. Yeah. I wanted to see it with, okay, now it freaked out.
 Network error, okay. So we can follow that. So let's go from the handler where you submit the form.
 And we'll just follow it from there.
 Well, the backend crashed.
 Back in crash. So eventually, you have to restart that.
 The logic in the back end must be something must be wrong with the logic in the back end.
[03:06:18]
 So we let's follow the front end. Let's go from your handler.
 The front end update form.
 So let's update form.
 Where does it handle the.
 The submission right there.
 Okay.
 So what is it doing?
[03:06:54]
 It's the same logic I have in the create form.
 It's grabbing all the data right here. It's grabbing all the data from the form.
 And then it's setting up an object to send to DynamoDB over here,
 using the data that it grabbed in the form.
 - Wait, I'll get.
 I'll get.
 There might be a cleaner way to write this.
[03:07:27]
 Oh, what's all that about?
 That's a, that's a, that's a big data type there.
 Basically target is event.target.
 You don't need that data type where you put as everything after as,
 you don't need that. Just comment that whole from 24 to 30. No, I mean comment,
 no, put that. Okay, you can do that too. I don't do it things until I know they're gone. Okay, so target that event.
 And then, okay, so this one, yeah, this one is that you need target. No, it needs to
[03:08:21]
 be target thatevent.elements.
 We're here.
 Otherwise, there was going to go through as undefined.
 Yeah, so let's do like this.
 24, line 24, let that be formed.
 Form equals event.target.
 Then inputs, let's put that in the chat.
[03:08:47]
 You chose that, I didn't do that.
 Press Ctrl C. Okay, and then make.
 Form and then make a new variable called inputs right at under that.
 >> Have that somewhere. >> No, actually just call it target.
 So make a new variable right underneath there.
 We don't need to use inputs.
 We'll use target.
[03:09:20]
 It's so hard.
 >> So I'm going to use it.
 >> Yeah.
 >> We'll use it. Yeah. When you start it, it's fine. Because we can change it later.
 So, Kant's target.
 I logic disappeared.
 I had a whole bunch of inputs things.
[03:09:37]
 And in one of these functions.
 And then now it's going.
 We probably moved it out into a different function.
 Okay. We probably moved it out into a different function.
 Okay, wait, you have the same data type there. You have the same huge data type.
 So I had all that and it disappeared somewhere today.
 I was living during this.
[03:09:59]
 Yes, which I don't know.
 Okay. I don't know. Maybe you switch branches. Yeah, this is update. This is update account. So,
 maybe I'm trying to find where the logic is so that I can copy and paste it instead of manually
 typing it all because no, it's okay. Just just, um, that's just.
 Because it's not like what you've already made.
 And I have to go to.
 Yeah.
[03:10:31]
 Yeah.
 It's all we're going to do is just going to change one line.
 You don't need to copy and paste anything.
 Just do.
 Fox target.
 Equals. I need form.element. Sorry. Form.element.
 There. And then for the data type of form, change the data type of form.
[03:11:07]
 Yeah, and I know. Oops.
 Oh my God.
 Press control Z.
 Form that element.
 Elements was spelled incorrectly,
 so I had to retype it.
 Okay, so I can.
[03:11:19]
 Yeah, it doesn't like itself for form.
 We're gonna change the data type to that, any.
 Make that, any, make that one, any.
 - There we go. - Okay.
 - There, now the value should be fine.
 The values were coming in undefined before,
 the way you had it.
[03:11:41]
 So email was gonna be undefined, password was gonna be
 undefined, everything, going to be undefined everything
 because you were not extracting values properly.
 Were these correct down here?
 Now it's correct, yeah it's correct now. But before I was before,
 the way you had it before it was not correct.
 So you could rename target there to inputs because it might make more sense.
[03:12:11]
 But you should do a right click.
 Otherwise, you're going to have to do that. >> Hopefully.
 >> We store our next to each other so I don't want to go searching for them.
 >> Okay. There. So that makes more sense.
 So the form, you have a form and then that form has inputs.
 So that's what the naming convention is doing there.
 You're copying and pasting, but you have different names. what the naming convention is doing there.
[03:12:48]
 You're copying and pasting, but you have different names, so you're going to get
 errors.
 They're not ever going to be all on the same page at the same time.
 No, I mean, you're variable names.
 Your variable names are different. That's why you're getting errors there at the bottom.
 So, whoops. Yeah, I do think still yet.
 No, no, the variable names will not conflict.
[03:13:22]
 It's the ID names that will conflict.
 So you can leave it as inputs.
 The ID, the element ID like in the HTML,
 where there's ID, those will conflict,
 but variable names will be--
 - What kind of thing are you gonna do right click?
 Find all references.
[03:13:41]
 - No, it's too late for that now.
 You can change that to target can change that to Target. No, no, no.
 Other one.
 Okay, change input to Target or Target.
 Then you can right-click it and then rename it rename symbol.
 I was here rename symbol here.
 It's almost that.
[03:14:14]
 Higher.
 Higher.
 Then.
 Input.
 For the.
 Oh, cool.
 I like that. Yeah, it has an S. - Oh, cool. - I like that. - There.
[03:14:25]
 - It has an S.
 - Yep.
 That works.
 Why is there something you're telling me to fit in here?
 - It's, we can see it in the sidebar.
 Now you can, let's fix it.
 Which one was it?
[03:14:40]
 You can see it in the sidebar.
 It's in the sidebar.
 - I'm not saying anything.. There's a G over here.
 There it is.
 It's fixed.
 All right, so we're working on update account.
 And I think it's going to work fine now.
[03:14:55]
 Let's just try to do it from the website.
 Because what I saw was it was coming.
 Everything was coming in undefined.
 That's the problem Jordan and I were having in our session today that we were trying to fix.
 Okay, so it's still broken. Okay, let's network.
 Okay, let's go back and
 read the back end. Back end is broken. The back end is probably not running. Yeah.
[03:15:33]
 No, I just crashed. It was, well, let's try it again then. Let's
 re-submit the floor. I'm already dry by side so we can see if it crashes.
 Okay. Well, we see that is running right now.
 So let's re-submit the form.
 Okay. So it's crashed.
 All right. So we're going to follow it from the front end.
 So let's put a debugger somewhere. Do you have it running on VS code debugger?
[03:16:14]
 No, or no.
 I mean, I did, but I couldn't get into work earlier. We could use depth tools. It's okay. So you're going to have it running. It just doesn't it just doesn't work. Okay. Yeah. So we'll just use
 depth tools for the debugger. That's put where's your XCO's call and that
 update account.tcsx. Why is it an X YCD bugger in this branch?
 Why is the debugger in this branch?
 >> Dolly's flame light wasn't working on it.
 >> Oh, is it? This is front end.
[03:16:53]
 It should be fine.
 >> No, it's not over-ended.
 >> I have a branch.
 >> You didn't make the, you're making changes.
 You're making changes. But I'm not supposed to be in this branch on this screen.
 I'm in a different branch.
 You're in the update branch, right?
[03:17:19]
 Front end.
 Upstate.
 You're in the update branch.
 I can't see.
 Yeah, you are.
 At the bottom corner, which grants you on.
 >> Oh, good.
[03:17:32]
 >> Bottom left.
 >> But the debugger is in this branch.
 >> No.
 >> I'm going to tell you the terminal because I need to deploy that.
 >> Yeah.
 It's just not refreshed. It's just not refreshed. That's that's a
 old terminal from earlier today. Okay. Well, let's put a debugger right before the axios just type the word debugger.
[03:18:07]
 Wait, what is that one for? Is that?
 That's what it is.
 Yeah, no, no, for the front end,
 you don't need a debugger.
 Is this for the back end?
 You're going to load a debugger?
 No, this is the front end.
[03:18:23]
 Okay, so do you have the server for the front end running right now?
 No, I was about to start it.
 Okay, you don't need, it has its own debugger.
 You don't need to open it on a debug terminal.
 Oh, yeah, you can watch, you can try it.
 So you can be only needs a debug terminal for no J for the backend.
 So that's that's that looked like the server for the, uh, which one's which now you have.
[03:18:56]
 This is the backend. It has a debug. Okay. I see. Okay. Yeah. That's good.
 That's a backend crash, which you should, yeah, restart that.
 And then the other one is the front end.
 (indistinct)
 Okay, that's good.
 Okay, that's good.
 It will, they don't debug it.
[03:19:13]
 If you just type in the bugger somewhere,
 right before the axial's call.
 (indistinct)
 - I'm typing in debugger.
 I just wanna hit red buttons.
 - Yeah, that might not work here. Put the bugger
 put the bugger in front of a axios call or right before an axios call. There's no axios call,
[03:19:36]
 axios call, there's an update user, yeah, right before update user.
 Okay, so will it stop there if you put a red button? There is no red button. It's making dots.
 It disappeared. Okay. No, it's right there. You can put it on the console. Try to put one on the console log.
 I don't like, I don't like doing it in the console. No, I mean the online 37 put one on 37 a dot on
 937. Okay, there I was I was hoping you would do it there. I was hoping you would do it there.
 Oh, I was hoping this council. Sorry, I didn't understand when use a console. If you're logged, I just started console.
 Okay, so let's see.
[03:20:29]
 It's possible. So if you're going to use a dev tools,
 they're not a good problem.
 It has a loaded before me.
 Yeah, so okay, so let's just clarify some.
 If you're going to use the depth tools debugger
 You have to write the word debugger
 Okay, if you're gonna use the VS code debugger
[03:20:53]
 You can just use the dots. You don't have to type the word be bugger
 But you do
 So that's kind of inefficient
 basically could run both fibers, although that's kind of inefficient. But yeah.
 >> Yes. If you're using the VS code debugger, it will also activate the browser debugger.
 >> I prefer the VS code debugger.
 I just couldn't get it to load for the front end this morning.
[03:21:21]
 >> You're going to get to work.
 Okay. So let's just use the browser debugger for now,
 but remove that line 18 debugger
 and move it to in front of the create
 or whatever that function was.
 Update account, yeah, put it right before that.
 Okay, let's see what happens here.
[03:21:53]
 So what we're gonna check for is
 if we're getting the right values coming in.
 Okay, so okay, it's on debugger.
 Let's see if we got the right values coming in.
 We've formed a object there.
 So what are the values in that object?
 That's not the object we're looking for.
[03:22:22]
 The object we're looking for is called update user account.
 Now it should be in the first layer.
 Now, go back up to the first closure.
 The first closure. The first closure. I wasn't there. I didn't see any
 conferences form. There we go. There it is. All right. So that looks all right.
 Okay. So let's watch it. Now let's go into the update user account function.
 No, gotta restart. You crashed the back end again.
[03:23:06]
 We have to make sure everything is coming in.
 Proper going through from the front end.
 Why don't we have enough break points to do that.
 Is the only debugger you don't have for anyone.
 Yeah, that's fine. I can get the work with it. Yeah, you don't have 41. Yeah, that's fine.
 I can connect with the work with it.
 Yeah, you can step through it,
[03:23:29]
 or you can put breakpoints in the browser.
 Okay, let's step into Update User Account. You want to go into there.
 Go step into it.
 Oops.
 Step into, okay, you can put some break points here.
 Let's see.
 Right on, on line 18,
[03:24:17]
 put a break point on 18.
 That's what the axial's call.
 Okay, you can press play now.
 Press play and then this should get there. the next few years. So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
[03:24:31]
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
[03:24:41]
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second. So, we're going to do a second. So, we're going to do a second. So, we're going to do a second. So, we're going to do a second. going on. The back end. Or is this the one where I just, I hate testing forms because you had to fill out everything every time.
 Yeah, so over and again.
 Which is.
 Yeah, that's why I was asking you do one prepopulated data.
[03:24:57]
 So that you don't have to type it over and over.
 The problem is when I, when people prepopulate those,
 then they push things to QA without taking their hard-coded data out.
 >> Yeah, well, let's do that.
 >> I would totally forget.
 No, I would leave it there and forget.
 I would push it and you would be trying to grade it that way.
[03:25:21]
 >> Okay.
 >> I'll freeze it.
 >> I will forget.
 So, you are all showing it showing is undefined. Well, it's
 didn't run that line yet. So that's why it's showing is undefined. So let's run that line.
 And press, no, it didn't run yet because it's still on that line. Oh, no, generated it. Okay, let me see. Wait, now it's gone.
 It went to some XHR or whatever that should.
[03:25:49]
 Okay, I didn't.
 Okay, press the up, press the up one step, step out.
 Okay, I should see URL here.
 URL is that look right?
 9,000 has email.
 Yes, it's correct. Password. your L is that look right? 9000 has email password.
 I don't know what's correct.
[03:26:09]
 I mean, it's missing some things here.
 What is it missing?
 Well, this is supposed to be an update.
 So are you going to update the name or?
 The other fields.
 I didn't put them in the function. That could explain why it's not working.
 But it's supposed to do updated user account and updated user account this year.
[03:26:38]
 You say it's going to the function.
 Oh, but it's supposed to put all these in the URL. Hang on. I mean,
 you're wrong. Right, right click on update user account. Or okay, you can do that too.
 And go to definition. No, uh, just definition. Oh, man. I do.
 What if they're no?
 Well, you know, you'll have to put conditions for those. And
 Yeah.
[03:27:19]
 As we're in it's easier to do it.
 It's easier with
 easier with the post command, but you're not there yet, or the post method.
 I could put a question mark somewhere. No, you can't.
 No, don't put that. There's an error there. You can see that already.
 Don't use it if you don't know what it does.
 Why is it wanting to put a question right?
[03:27:59]
 No.
 It just means it's not required.
 Yeah, so if it's not required, then it wouldn't require it.
 Okay, email.
 But you're requiring it for the update because you want to see if it's something that you want to update me. >> Add word. Use your name. Name.
 Phone.
 That should do it.
[03:28:28]
 >> Okay.
 >> Here, Adequally.
 That would be widespread.
 >> Yeah, so that means your backend is not handling undefined values.
 >> Oh, it's not handling undefined values.
 - Oh, it's not handling mode here because that's a lot of time that I haven't had to spend.
 I just want basic things to work first.
[03:28:56]
 - Yeah, that's called the Happy Path.
 The Happy Path.
 - Happy Path.
 - All the variables and values are there,
 which you need to set up your TDD to handle the non-happy paths.
 Okay, let's see if the URL gets formed properly.
 Okay, there it is.
[03:29:18]
 Does it look right?
 Okay, let's see the whole damn thing. If you mass over it, you can see.
 Yep, that looks good.
 Okay, let's see what happens when the back end takes it.
 This press play.
 Back end will take it.
 It'll either break. Okay, so we got a response. That's a valid
[03:29:50]
 response. That's in the thing. So I have to display it.
 >> I want to display it.
 This is the updated stuff.
 That will go in the view.
 They can view their username and the view thing, but not in the update thing.
 They're not changing it in here. That's it. They're not.
 Yes.
[03:30:27]
 Okay.
 Yeah.
 Okay.
 You're not up there.
 And.
 Okay.
 So it's working.
[03:30:38]
 You're just missing some values in your.
 Your.
 Yeah.
 I have to go back to the. So you know that. You're just missing some values in your URL.
 >> Yeah, yeah. I have to go back to the.
 >> So you know that your backend is crashing when it gets some undefined values.
 So let your TDD help you find those.
[03:31:04]
 >> Which TDD for this?
 >> For the backend, the TDD for the backend should help you find,
 you should be testing those undefined values and not crashing.
 >> Well, if the non-existing email address,
 it throws an error if the password is incorrect,
 if it throws an error, if they try to update the username,
 which we already saw, it throws an error,
[03:31:32]
 if the email format is invalid.
 Those are the things that I have currently tested.
 - Yeah, and one thing you might wanna do
 is undefined, undefined username undefined,
 stuff, yeah, undefined basically,
 because that's that's one is correct.
 - Well, I have a choice here.
[03:31:53]
 I can keep writing more tests for this,
 or I can work on the Redux assignment
 and the app engine and the finale assignment.
 But I can't do all of that by six thirty tomorrow
 Not possible. So I have to use what I'm gonna prioritize tomorrow
 Yeah, and yeah, so it's good. I'm kind of gonna call this today, but it's not down again
 Okay
[03:32:20]
 Yeah, so at least we got that fixed just just yeah, remember that
 Yeah, so at least we got that fixed. Just remember that
 Just remember that when you get undefined values coming in it's gonna crash your back in
 But so far I don't know how to submit this then should I just make a page for everything
 Yeah, or just rename that
 Okay, just rename it. Okay, just rename it for now.
 I could rename the IDs.
[03:32:49]
 Yeah, I'll already have seven pages up here.
 I don't want anymore.
 Yeah, so go ahead and post all those components at the same time,
 but just rename the IDs, make them unique.
 Okay, that way, though, I'll be on one page.
 My other thing is that I they'll be on one page.
 My other thing is that I don't ever want an end user to be able to sign into their account Okay. So how do I handle that on here?
[03:33:28]
 Just post it as deleteable now and then change it later.
 I think, I think,
 I think you should just let them delete for now until you figure out how to just disable it.
 Because that's going to take more logic.
 So what you want, what you want to do is you want to just give them ability to delete
 or it looks like they delete, but it's actually going to still stay in the database, right?
 Yeah.
[03:34:02]
 Actually, I would like it is a radio button thing that says, like,
 not for create, but like view account, view update or delete radio buttons.
 And then based on what radio button they select, it would load the right component. Yeah, it's cleaner.
 Showing all of the components. That's what I put that.
 Yeah, well, do you know how to do that?
 I don't remember exactly somewhere in here in this account.
 Yeah, so you're ready.
[03:34:41]
 So, so I would do buttons.
 The easiest, the happy path there would just be like, that would be like
 a to do, but you can't, if you do like that, it's going to show up on the web page,
 you will see that. Yeah, I did the wrong type of comment structure. Yeah. I forgot how to do this.
 There you go.
 No, the happy and easy path would just be to activate all those
 all at the same time on the same page.
[03:35:58]
 Add radio buttons. So users and select action and account action. So the happy path would just be to activate those again, but just change their IDs. Oops, now that you don't want to do it one at one line at a time.
 Okay, I just change their IDs to be unique.
 Like create or email that create or.
 They are unique IDs that.
 They're not unique when they're all.
 Render together.
 Yeah. This one says register account.
[03:36:28]
 No, how about the email?
 The the elements.
 The element.
 They're saying like that has to be created email.
 Like I can just add creates to the end of it.
 No.
 - Yeah, yeah, yeah.
[03:36:50]
 That's right. - Sorry, just don't get it.
 Well, no, it would have to be every place that it's used.
 - Mm-hmm.
 You have to make it unique.
 So, like a pen creates somewhere.
 - Yeah.
 - What a pain.
[03:37:03]
 - Yeah, the labels should match to.
 But be very careful. You don't miss anything.
 I won't miss anything. If I do it tomorrow, if I do it now, I will.
 That's why I'm doing one.
 And then the matching, yeah.
 I also have to go check how password is spelled on every page because there's a typo. [BLANK_AUDIO]
 Okay, so those are unique.
[03:38:07]
 Just do it from, yeah.
 Do you, okay, instead of read. Yes, because view is what?
 View is what normal people look at.
 They don't know what read means.
 They don't know database terms.
 You missed something.
 Where?
[03:38:42]
 Password.
 Oh, yeah, password.
 See, it's spelled wrong with me.
 >> No, not just that, but as view there.
 And maybe not copy the--
 >> I must have copied the location.
 >> Because it's not.
[03:39:00]
 >> Yeah.
 >> Okay, I got that one.
 >> So that's it.
 >> I didn't do this one yet.
 Yeah, it's better to do it now because I might forget tomorrow.
 You missed. Okay, there it is.
 I fixed that password.
[03:39:43]
 It's the incorrect placeholder also.
 For whatever reason, I had the international placeholder.
 I don't know why. I'm just thinking about things in those terms.
 Because that's how you're supposed to think about things globally.
 Not just about how we will do that.
 Okay, let's see how it renders on your on the browser if there's any ID conflicts.
 Oh, let me take you back.
[03:40:17]
 There's a way.
 Just should just be where I think.
 It's going to be near the function call.
 That's in the wrong function.
 No, it's in the it's in the component.
 We're doing the component, but I didn't see it.
 It's close to the function call.
[03:40:41]
 Oh, it was down here.
 That's right.
 It moved.
 Yeah.
 Okay. That should be and then you. Yeah. OK, that should be.
 And then you just have to take the dots away
 from the browser.
[03:40:51]
 Just press play and then order refresh and then
 the--
 You can--
 That refresh?
 That's--
 No, refresh is--
 That's the--
[03:40:59]
 Or it's--
 Or it's--
 That's a different one.
 OK, the break one is away.
 OK. All right. So console. Okay, so console, click on console and let's see if you get any errors.
 No, just that weirdo about the.
 Okay.
[03:41:19]
 Input elements should have autocomplete attributes.
 Yeah, I don't know why it wants autocomplete.
 It's a browser error.
 That's about Google saying that we just use a Google message.
 And the browser.
 Yeah.
 Yeah.
[03:41:42]
 Okay. Okay.
 Okay, so we got at least we got your, your front end. Oh, look, I don't know why I want this, but it's a browser error.
 Do I need to fix that?
 I don't care. No, no. That's how you fix it. There's an autocomplete attribute for HTML
 apparently. I've never heard of it before, but okay. Other people probably have.
 Must be related to the update. They want to enforce. - The company want to think it's proud.
 I've seen that for a while, but I've ignored it
[03:42:28]
 'cause it was because it looked like it came from Chrome
 and it was yellow.
 I was like, "Yeah, I'm okay."
 - So, I see.
 Yeah, I use edge and I don't see those things.
 So.
 - Oh, that's why you don't want to see those.
[03:42:42]
 Yeah, I've chrome bells and these stuff.
 I'm like, "Hmm, okay, someday, maybe. Alright, so I just need to do the one, and then I'll be
 done with this. Yeah, so the key there is just making sure the data is going
 through from the front end to the back end properly and that'll help you solve
 any bugs. The happy Path. The Happy Path
 provides a lot of data. >> I mean, that was the thing. It worked fine on register/create
 and view. It was only update that freaked out. The other two were just fine. >> Yeah.
[03:43:19]
 It freaked out because it was getting undefined because you just copied and pasted the URL which was incomplete.
 - Yeah, so it was the incomplete URL
 that caused the crash, not the other things.
 Okay.
 - Yeah, that completely URL caused undefined values.
 All right.
 So there's going to be--
[03:43:41]
 - I'm giving you the--
 - There's going to be the delete.
 You're gonna--
 - Yeah.
 So that means the, it's not gonna take just gonna work on the delete. You're gonna. Yeah. So that means the, it's not going to take me long to do the delete. The delete's probably one, the delete's gonna be as easy as the
 it's going to take a lot less time than read even or maybe about the same
 as to read because because all I'm going to do for the delete is do the same
[03:44:02]
 thing where where they just entered the username and the password. And then, and it'll delete it based on
 that. I really want to, okay, I have a question for now, just, we had it for
 now, just let them, for now, just let them delete. And then when you figure out
 how to just like keep going, I'm not worried about that. I'm just what I'm saying
 is when they're going to delete stuff,
 I'm not making them fill out their entire account information.
 I'm just making them fill out the username
[03:44:31]
 and password to delete just the way I looked at you.
 Okay, I don't know what to do about animation
 'cause part of the original assignment
 from way back when was we have animation.
 And so I have this animation button and I think think it makes it makes me miserable because it looks terrible.
 I don't like it.
 Well, you can change you can change the angle.
[03:44:53]
 I mean, this is too much of an angle. You want it.
 You want it less of an angle or not.
 I just don't like animation on buttons. So I don't know where to put animation.
 I could animate my name up here in the corner instead
 of the button where my name is up here.
 - Okay, so do you know how to do that?
 - Yeah, I just would take the class that I put here
[03:45:17]
 and put it on my name instead.
 - Yeah, yeah, you can do that.
 - Yeah, I'll just do that.
 'Cause this is distracting to to it. Yes. I don't like it. It's not a good usability feature. I just needed a place. I just needed a place to animate and I didn't know where to put it.
 Also, this tab is really squished together.
 What if you can put it on your image.
 On the image map? Oh no.
[03:45:50]
 Oh no.
 Your image and your picture.
 Am I about page?
 This.
 You can tilt your picture.
 Why are there borders shown right there?
 That way it's more.
[03:46:03]
 That's why it will make it more prominent.
 If there's borders, then you just have to deactivate.
 Yeah, but I thought I went deactivated all the borders, but there's one stuck around the picture that I just go,
 Oh, you know, I couldn't ever see it because I was like zoomed tiny and then I never saw the lines until this now.
 I never saw the lines until this now.
 Oh, another thing I'll have to do is,
 I have to add handling for the stupid API for the quotes 'cause if the quote API is ever offline,
[03:46:39]
 there should be a message in the card that says,
 no quotes are available. - So you saw a message in the card that says no quotes are available.
 No.
 Or just have a preset quote.
 That copy that quote and then the.
 Yeah.
 I find a quote that I like and I'll do a preset quote.
[03:47:01]
 So I would need it.
 And if statement for that.
 - Yeah, if it ever comes in as an error or nothing
 we place it with a preset. - I wanna put it in the back end.
 - Oh, in the back end, yeah, you can do that.
 Yeah, that's right in the back end.
 You can put that in the to do, what that's not required right now. So
[03:47:28]
 I'm just going to make a comment in here so that I know in here because
 something happened earlier in the fabric fabric use thing was was refusing to connect. I realized
 belated Lee it was because the server had crashed but if then at then at that point, I said, hey, oh, what if it actually goes offline.
 Yeah.
 And then you can put the idea is to load a preset. that pretty safe quote,
 "The safe and the variable." >> No, we're actually coded right now. >> I made it a note.
 >> So I started it.
[03:48:41]
 >> I see.
 >> I see.
 >> I would know what I wanted to do. >> Okay. >> That's a feature thing. >> All right, see. I see. I will know what I want to do. Okay. That's a feature thing.
 All right, cool.
 So when I face the delete thing, then I will go poke at the Redux. Um, but let me
 Okay.
 Deploy this now. I'm loving this. Oh, I'm loving this deploy command. You gave me.
[03:49:05]
 Oops. I forgot Ron again. I shared loving this deploy command you gave me. Oops, I forgot run again.
 I shared it with Chris because Chris started complaining about how many times he had to write all the get messages.
 Same thing I said at the other night.
 And I was like here, have this deploy script.
 It helps so much.
 I don't know why it's popping a commit but number here or the. It helps so much.
 I don't know why it's popping a commit, but no, you're here, though.
[03:49:32]
 That's what that's about. Yeah.
 That's the backend update.
 That's also probably an extension that you installed.
 It's automatically generating a commit message.
 Yeah, to get, no, it just loads the last commit message that I used in that box. It just defaults to it.
 That was a good request from when I created this branch.
 >> Did you just, okay, you're deploying from your branch? >> Yes. Should I not deploy from my branch? I should deploy from me.
[03:50:18]
 >> You should be deployed.
 >> Yeah, you should be deploying from me. Yeah.
 Push merge everything to main and then deploy from main. If you're deploying
 from this branch it's actually deploying from main. It's an optical illusion. It looks like
 you're deploying from here. It's funny. I did not know that. Because the command is get, get push origin main.
 That's the command it's running.
 So it's actually just deploying the main branch.
[03:50:56]
 Not the update branch. So if I go, if I merge the branch, but I'm in the back end, when I do it, is it going
 to merge the front end stuff?
 I guess it merged everything.
 Yeah, it merged. So you want to merge twice. You just have to merge the front end stuff? I guess it merged everything. - Yeah, it merges.
 - Yeah, it merges.
 So you want it to merge twice.
 You just have to merge the one time.
[03:51:29]
 - Metal.
 - Yeah.
 That's right.
 - And then should you be in the point.
 - No, you didn't deploy it.
 - It didn't, do you need to be in the root
 or it doesn't matter?
[03:51:41]
 - You need to be in the folder where that has the script.
 I don't know if that, that one doesn't have a deploy script.
 That caps on the before.
 Folder doesn't have a deploy script.
 Okay, so then I have to deploy.
 So I have to deploy from both.
 Oh, yeah, it depends on.
[03:52:03]
 Yeah, it depends because there are points in different places.
 Yeah wait no. So I think this is the same thing as the same command though.
 My script is not the same the backend script is going to
 and there is a zip file to the lambda.
 Okay yeah that's a different one.
 Where is Taehue?
 - The front and--
[03:52:32]
 - From the front and though,
 if you're deploying from the front end,
 I think that's pushing everything to get.
 - It is right now.
 - Including the back end stuff.
 It pushes that to you.
 - I think so, yeah.
[03:52:54]
 And you should verify it just to make sure, like, after you.
 I always go.
 Yeah.
 I verify the folders.
 And like, I do a cursory test of the folders and I look to see that it message stuff and then I'll go actually go in here and look for.
 What I changed.
 >> Is it not take my change with my comments? They're not here.
[03:53:31]
 >> Is this the main branch?
 Yeah, you're in the main branch.
 Those your main branch have, well,
 maybe it didn't apply to changes yet. Four minutes ago it was
 in four minutes yet. >> It's not here. It didn't take it.
 >> Oh, there's an area here. Change the United States for commit.
 >> Oh, yeah, that's right.
[03:54:27]
 Well, I thought the merge automatically.
 Okay, so I didn't, yeah, I see there.
 I see it there.
 The fin queues were not committed. And now you can do the
 one of the the the the
 the
 the
[03:54:51]
 the
 the
 the
 the
 the
 the
 the
[03:54:58]
 the
 the
 the
 the
 the
 the
 the the changes in the back end.
[03:55:09]
 And the five few things.
 The comments are here. Okay, so.
 Those were in me.
 I see. Okay.
 I see because.
 I would.
 I would.
[03:55:23]
 And main when I committed those last two, which is fine. I'm not.
 That's not a big deal because they're really.
 It's a bit slow.
 That's open up your open up the depth tools inspect and make sure there's no simple errors going on there.
 I don't know.
 Yeah.
 Just the weird things.
[03:55:59]
 Who.
 What's that other error then what's that one's a one, one error there at the top.
 No, I don't see any error.
 No, there's a red flag at the top right.
 Where?
 If you click on the right flag at the top right. Yeah.
 Click on that one.
[03:56:27]
 Oh, it's it's here.
 I encourage the use of the label.
 Mm hmm.
 Which one is that?
 That's yelling about the autocomplete.
 It's again.
 No, this one's.
[03:56:41]
 That's the only one.
 That's different.
 That's new. Let me see
 It has to be one of the new forms
 HTML4
 HTML4
 HTML4 HTML4 HTML4
[03:57:01]
 HTML4
 I've seen this error. It's in all of my forms.
 Every time I have an HTML4.
 - Let's look at the area a little bit more closely
 than this read it.
 Labels for azuremases and match any element ID.
 So we have to find that there's Okay, so let's click on it. And the dev tools and find out which one is it's complaining about.
[03:57:27]
 >> Good luck.
 >> Yeah.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
[03:57:34]
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
[03:57:41]
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see. >> It's hard to see. >> It's hard to see. >> It's hard to see. >> It's hard to see. Okay, so let's click on it and in the dev tools and find out which one is it's complaining about
 Yeah, it's hard it's hard to find it that way so just click on it here. Maybe I'll tell us which one
 It is
 violating known
[03:57:58]
 It's not going the yeah, yeah, yeah, click on that. Does that do anything? It doesn't do it. It's not a valid link
 Okay, like it won't even write a lot.
 It's learned more button works and it tells me how to use the label.
 It's not an issue. Okay, I can try loading up your page on
 Can you can you put the link here in the chat?
 Can you put the link here in the chat?
 I'll load up your page on on my browser and see what comes up.
[03:58:35]
 I have a edge open also, because I'm running the classroom from it.
 Because I was accidentally closing the classroom a couple times.
 And it was thin, chrome.
 Okay, let me refresh this.
 The arrow was popping up in the form page.
 So which one is that account?
 Oh, in the edge, I'm getting a 404 error on the about page. So which one is that account? In Adam getting a 404 error on the about page.
[03:59:08]
 I just refresh it and then it should disappear.
 Okay, I don't see that error in mine.
 I don't see that error.
 It's Chrome.
 It's Chrome. Chrome is here.
 >> You're not so glad you're.
 >> I'll show you my screen.
[03:59:34]
 >> Yeah.
 So weird.
 >> This is Chrome.
 This is your website.
 There's email update.
 Let me shrink this down right now.
 That's the size of it.
[03:59:53]
 I'm going to pull this up here.
 This will-- there's an error here,
 but it'll disappear when I refresh.
 OK, it's gone. How are you getting those cute stars in the required fields?
 >> This is an extension I installed.
 >> It will put in passwords automatically for me.
 I don't see that in those errors here.
[04:00:24]
 >> It disappeared on mine.
 It's not showing it anymore.
 But now it's showing us two other areas.
 It's going to be fine.
 Oh, they're so far.
 Oh, they're so far.
 I don't see that.
[04:00:43]
 I don't see that.
 Yeah, the back end. Yeah, the back end.
 Um, no, the back end.
 Just refresh it.
 Just refresh it.
 And then refresh and that should disappear.
 Oh, we've.
[04:01:02]
 Okay, so are we all set for tonight?
 I think so.
 I think this for for can you come back?
 No, it's gone.
 Okay, I think so.
 Yeah, sometimes it's just a first look.
 The floor element thing came back.
[04:01:18]
 It has to be on this page.
 It has to be on this page. It has to be so on. I'm on mine.
 Oh, wait, let me try doing a hard reset.
 You're fresh.
 I mean, yeah, no error here on my side.
 I'll fix it somewhere.
 I'm going to try.
[04:01:37]
 I'm going to try it on edge.
 Maybe my Chrome is out of date. >> Possibly.
 >> Where's the update thing?
 >> It's just the first.
 >> It's updating Chrome.
 I opened the Help page.
 >> Okay. I'm happy to grow as soon as I open the health page.
[04:02:05]
 Okay.
 All right. So yeah, it looks fine to me.
 There's no errors, at least not on the account page.
 No, yeah, it's fine.
 Correct.
 As we're all set here.
 Okay.
[04:02:24]
 Good night. It's the entire area is going. >> Correct. >> I hope so.
 >> I hope so.
 Class your finger.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
[04:02:34]
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
[04:02:41]
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.

///// FILE: "Level 4/transcripts 2/May 15, 2025 20-47.txt"

Transcript from May 15, 2025

[00:00:00]
 Good evening class. Welcome to CoDAC Academy level four.
 It's week 10 day four.
 And the theme of this week is evaluations where we're spending more time doing evaluations.
 So today's agenda in the first hour, we'll take attendance to announcements, review, and work on the practice
 that we were working on yesterday. Second hour will do many evaluations, but I'll post
 the practice and open the breakout rooms will be open.
 So now, if you haven't taken your attendance yet,
[00:00:53]
 go ahead and head on over to the Codex account.
 Mark yourself as present. and now time for announcements. announcements here or to love the screen.
 Okay, so as a reminder Monday, May 19 is student collaboration day.
 schedule. For this week is evaluations. And next week is the last week, but we'll be hopefully we'll start doing some presentations. I'm asking the staff if you can do the staff
 presentations on Thursday. And I'm hoping you guys can, you know, are you guys willing to do some practice?
 Are you willing to do some practice like doing your presentation in front of like some cohorts?
 Or maybe one cohort so you can practice in front of a cohort first. And then maybe on a Tuesday,
[00:02:29]
 practice in front of a cohort, possibly even Wednesday, get two practices in. And then on Thursday,
 do the staff presentation or the presentation towards the management staff of
 Codex. What do you guys think?
 Just basically present what you have to the cohorts
 the one or two cohorts on to ZAN Wednesday.
 That way, you know, like you guys, you never got to see a level
 four present their their capstone project. What if you were in like level two,
[00:03:14]
 level three, or maybe even level one, and you saw a level four student
 present their capstone project to you. Would that have inspired you more. So that's what I'm hoping
 you guys can do. Next week, if you want to practice on Tuesday and Wednesday in front of other
 cohorts. And so is there something wrong with attendance?
 Let me see here.
 So as I was saying, if you're going to do presentations. May 15th right here.
 Should be able to do that.
[00:04:13]
 So May 15th, I mean Tuesday and Wednesday next week,
 whether or not you're fully finished with your capstone,
 at least you could practice your
 presentations in front of other cohorts, maybe on Wednesday, practice in front of each other
 right here in the room. And I can even give you some pointers. You'll get better and better each
 time you do it. Just present what you have, and, but I have to get permission from the staff for you to be able to do that.
 But if you're interested, then I'll get that permission.
[00:04:56]
 I think it'll help if you can, if you can do your presentations in front of cohorts.
 Okay, so,
 um,
 so yeah, we're focusing on any evaluations this week. Remember 16 minutes.
 Many evaluation per submission. That's very generous because when I was
 doing my evaluations, it was only 30 minutes and I had to cover a lot more topics than you guys.
 So I just had my notes and then I had everything basically for me, every evaluation was like a presentation. I had to practice and then get evaluated.
[00:05:54]
 So every, but for you guys, you just able to just come into the mini evaluations and just wing it. But that's why we're going to do
 presentations so at least you have something that you can prepare for. Like
 you have some kind of experience presenting because that's what you're
 going to do if you want to get hired as a programmer. You have to be able to
 present your work and be confident about it.
 Remember, click on that and submission button to get on the waiting list and qualify for that on time point.
 We need evaluations for week eight is closed.
[00:06:37]
 Week nine is also closed,
 not accepting more and more submissions,
 but we can do corrections, correction evaluations until Saturday for week 9
 and you volunteer as anyone needs to do corrections for week 9.
 We have today and Saturday to finish corrections for week 9.
 week 9. And then for week 10 mini evaluations, it'll close on Tuesday next week, but you can still get on time credit until Saturday. So if you want to get started on time credit. You have until Saturday to do that.
 So assignments are still in the process of being graded.
[00:07:33]
 I purposely slowed down on grading up some assignments
 because I saw some assignments are not
 going to receive good criticism or good constructive
 criticism because it's just going to basically have a bunch of zeros because a lot
 of things are not worked on and it's not very constructive if I say, "Oh, I
 don't see anything. I don't see nothing meets these requirements right here."
 So I've waited a little bit to give you
[00:08:05]
 some time to do just a mitter assignment and see some things being done. So you
 can expect these assignments, these next reassignments, you come in a little bit faster if you haven't gotten them graded.
 I've graded some already.
 So once I thought that's lacking that,
 at least get some contracted criticism or constructive notes.
 Let me see here. So Chris is asking Saturday, it doesn't have to be before class, it could be during class.
 So Chris is asking many evaluations for week 9.
[00:09:09]
 Need to be done before Saturday class. The answer is it can be done Saturday during class time.
 And right after class, if anything, like, flows over. [BLANK_AUDIO]
 [BLANK_AUDIO]
 Remember contact the student's success team, look at your grades.
 You get your grades and make sure that at least I think 75% are more.
 I think yeah, 75% are more on each assignment.
 And I think 80% is the highest you can get
[00:09:59]
 if you turn in something late, 75% is at least 75%
 something late 75 is a, you need at least 75 per passing each assignment and for graduation and each assignment means evaluations or many valuations and
 also capstones. So basically these are assignments. Those things that you get points for,
 you need to have at least 75% points on this.
 Anything that you will see points.
 So don't reject that.
 Okay, so let's see.
[00:10:42]
 So yeah, contact the students,
 success teams in which they're sport. Help seeker. Okay, so let's see, so yeah contact the student, success team to boost her sport, help
 seeker, remember don't get stuck for 15 minutes or more.
 It's crunch time and we can't afford to waste one, two, three or even four hours being
 stuck. Post into like cohort. Have that back up plan.
 There may be an easy question that you get after.
 You might post it and then you get an answer.
[00:11:12]
 Maybe you solve yourself after five minutes.
 Or maybe you don't solve it after four hours.
 But at least if it's in July cohort, someone can chime in
 within those four hours and give you a boost. And that's it's there for your own, you
 know, for your own benefit. Notebook LM. So I provided something very useful. Compiled notes have been added to reference level 4.
 Here's reference level 4.
 There was this one, you know, you know, the old reference where there was a list of topics.
[00:12:08]
 Sometimes this can be, you know, time-consuming to create.
 But I'm doing that.
 But you can upload your notes, code and transcripts, and the sources panel of notebook lm.
 What I did here is you can just click on it and then you go to notebook lm.
 But what I did here, actually before you even
 provide some context for notebook lm you get up can upload code, but it must be a text file,
 paste it in, or provide a link to the raw code source in GitHub.
[00:13:04]
 I also provide provided compiled notes. So compiled notes can be combined.
 You're also able to compile notes are.
 So I've made a repository.
 And these notes are compiled from level 4, level 3 and level 2.
 So here if I click the link to the link, I'll be able to click the link. So I've made a repository and these notes are compiled from level 4, level 3 and level 2.
 So here if I click on this, these are the compiled notes of our files that we have.
 So here's like the Babel config and the
[00:13:42]
 and the
 There's account.ts
 Greater count there's the tests are here too
 You should give you a boost if you need some help. You should give you a boost at all here
 Everything from the sandbox is here. You see here's sandbox.
 So that's level 4. It's not just the code, but it's also the notes.
 So the notes are over here.
[00:14:22]
 So here's like the AWS loop right here.
 We're all compounded here.
 And then towards the end there's like the AI notes,
 text script notes.
 It's all compiled into one file.
 You can feed this file into no quick LM.
 You'll need to click on raw.
[00:14:45]
 You can basically just click on the file.
 Right?
 There's this level 4.
 That's the code and the notes.
 And then there's level 4 transcripts.
 You can pick one.
 Click on raw.
[00:15:03]
 That shows you the whole thing, and the thing that
 you want here is the URL.
 Here, the raw URL, and then give that to no cookie on them.
 So when we find something weird, I'm just going to replace it because I've already
 pasted them in here.
 And then you do a bit.
 So I'm going to add a new source.
[00:15:34]
 It's going to be the raw link from GitHub. And it's just going to take a few seconds to study the document. So remember,
 you can get to these compiled notes by clicking on reference level 4. Click on compiled notes. That shows you a list of the compiled notes.
 Right here.
 If you go into the pick a file and click on raw,
 you get the URL, which you can feed into notebook LM. And so I've made a notebook LM for July cohort,
 which contains level 4, level 3, level 2 notes and transcripts. So I can ask questions like
 Now, to fix types of errors when using events.target. LMS. As you might get touch your pairs and you do that.
[00:17:12]
 Right, so I'm gonna ask that question here.
 And based on the notes and the transcripts, it's gonna give me an answer.
 And this will leave me a look at this quickly here. It doesn't get any bigger.
 It doesn't get any bigger.
 So, I can make it.
 So, let's see here.
 Here it is.
[00:17:50]
 Cast, you've got that target to any.
 So that's correct.
 And if I click on, if I mouse over one of these numbers,
 it shows me the part of the code that it's talking about.
 So here,
 conform
 equals the head dot target cast that to any or insert that to any.
[00:18:20]
 And then use this form right here and access the elements from that form that elements.
 But you can save that as inputs because it
 makes sense when you do inputs,
 these inputs, you'll increase the
 3/2 input elements.
 Inputs got email inputs that passed in.
 Inputs got codes, but then.
[00:18:40]
 So yeah, this is right.
 It even points me to the part of the notes out a quick and easy way to fix types of errors.
 This task is before or before it will not target any.
 I know there are some things in July cohort.
 So we'll see if we can answer some questions from there.
 And so, this one right here.
 So, Alexander was asking why this command, why this command doesn is important in the command line.
[00:19:25]
 So I'm going to try work. I'm going to try that.
 Move with the limit.
 Why isn't this command working in the command line? And then, okay, so right there, let's see if it can identify, because I answered her
 question, because command doesn't work in the command line because command line doesn't
 need those extra max actions, those extra max classes are only for in-pamps rips.
 Whoops, it removed the, it removed those back slashes.
 Because those are escape characters. Oh wait, it's season right here.
[00:20:22]
 Okay.
 A WCLA installation and configuration. Admissions.
 Might be the distribution ID that we wrong.
 Syntax or CAPS.
 Both escaping.
 Okay.
 So the sources show that we're using this command with an end-file script in your package
[00:20:47]
 JSON file, you need to use the escape character before the build open.
 We'll prevent conflicts with outer posts.
 I'll just skip the script.
 Right?
 You need to have posts within quotes when you have an NPM script.
 However, if you're running the commands directly in the
 terminal, this gave characters are typically not needed and correct syntax is used in the AWS
[00:21:15]
 without the max dash. So this is correct right there.
 So you can get a lot of your questions answered instantly. If you just use this right here, just put these compiled notes.
 I'm going to update these.
 You'll see when I update them.
 I update them when we get new things. So we'll see
 when there was less updated and you can compare it. You can compare when you
 upload it, when you upload it there. You're copy to your notebook. Because it
[00:22:02]
 doesn't fetch this again. So these are URLs, it doesn't fetch it again.
 If I make changes, it's not going to get those changes,
 which you have to do is delete the URL,
 and then we paste it, then it's going to apply the updated notes.
 So we're going to put that down. So for note, click on them.
 Use the raw links and then to sources.
 But if I make changes to these files, we need to re-upload. We're moving them first.
[00:22:45]
 Let me see what it's like.
 Yeah, we have to, if I, let's just say, for example, I've updated
 number four text. So you need to remove the source and then Come back here and get one again.
 And then add it.
 You should be able to look at that. and give you a lot more context.
 If you have questions, it gives you a lot more context.
 If you want more context around an answer,
[00:23:34]
 because you see I try to give you the straight answer,
 but little quick, it gives you a lot more information.
 If you're a current kind of person who likes a lot of context, no book-a-love, and these compiled notes will give you that context.
 So you can use that to your advantage and to help you with any problems. You can even
 with any problems, you can even upload your own questions
 like your own code, right? You can upload your own code, like below the compiled notes.
 You can put your own code and say, what's wrong with my code
[00:24:18]
 that I just have to wait, or I think you should be more
 specific like, what's wrong with my handle submit function
 Here's my here's the code from my front end and back end. Why is my front end?
 Why is the back end crashing when?
 When a user tries to log in
 It's gonna take your your code and your notes compared and add also the compiled notes from
 number 4 and level 3 and level 2 and it's going to generate an answer based on,
[00:24:56]
 you know, global's hot and fast. And when that, what I teach in class is the easiest
 And when that, what I teach in class is the easiest way to do things that you search on the internet, they'll teach you hard to waste the living.
 So it's going to be to your benefit to use reference level four and look at them to answer their lot of your questions.
 Transcripts are available up to week 10, day 3.
 If you want to look at them individually,
 here week 10, day 3.
 Let's see, get right there.
[00:25:43]
 Oh yeah, another question I was asked.
 Let's see, I'm gonna ask it in the black,
 um, local, Lm.
 Then testing.
 We'll just
 help to fix just on the corners.
 That was another question that you'd like to offer. and if you like, go for it.
[00:26:30]
 Okay, so let's see here. Let's see if we can scan here.
 Yeah, it's correctly identifying that when you're using
 just, you don't have access to the window and
 how it can get objects.
 So to fix that,
 install just Environment.js DOM. And just It's not something exactly here.
 Okay, here it is.
[00:27:08]
 That's here.
 Here's the test environment JSTOP in just in the big batch AS. Let's see what other questions are here.
 Okay, so Alexander had some questions here.
 No form handler in the couch.
 The correct forms are your own components.
 Yeah, so you can any component.
 When you have Redux, any component has access
[00:27:47]
 to the state variables. So if your forms need access to them, they can just select them,
 and they can also just pass the actions. They can set very well too.
 And he's still thinking. This component doesn't talk before,
 though. This component is a parent component and the forms are in the children.
 So that's where I'm stuck.
 Yeah, and every component has access to any state variable.
 So even the children have access to it that they can just bypass the parent that they want.
[00:28:34]
 It doesn't matter. So if you want to set a value from within those children, you can do that.
 If you want to select that.
 That's not what I'm trying to do though. I'm trying to do the radio buttons in the parent component and use the radio button on the parent that the users
 selected to load the child. Okay, yeah so the child will need to see that the child will need to check which radio button is selected
 Why you're a child in not the parent that that's because it won't you can you can decide how you want to do it
 So there's two ways you can do it the parent can then can say okay, the miss radio button is choke up this
 This pick so I will run there this time.
[00:29:27]
 You can do it like that. Or option number two, the tile looks at the radio buttons and
 then it sees, okay, that's not my radio button so I'll stay in this one. And then it
 sees, okay, that's my radio button. I will render my phone.
 I've already wait it.
 I've already written it to do it from the parent.
 - Okay, yeah.
 And you could go with that.
[00:29:51]
 So when you're going from the parent,
 parent looks at the radio buttons
 and decides, okay, this radio button was picked.
 So I'll render this channel.
 - So that would go and component did update that would go and component did mallet. That would go in that would be a handler. You could do that from the
 handler but that's what I'm saying there's no handler here because there's no
 form it's radio buttons. Yeah so the radio buttons yeah so the children are the
[00:30:29]
 handlers I mean the children have the handlers right so I mean where are the
 buttons rendered are they rendered in the children or the parent no the
 buttons are in the parent okay yeah so the parent has access to the buttons.
 Correct. I mean, the random one.
 So, when have access to the button?
 It's not working.
 So, I'm clicking, click, click, click.
[00:30:56]
 So, I click, you can just put a handler on click.
 Okay.
 Put it on the handler. And then that's how you figure out the value is chosen.
 Um, yeah.
 Somehow I'll figure that out.
 Okay.
 Let's see.
[00:31:19]
 Let's see if I can ask a notebook on that.
 My notebook out of my mind isn't going to tell me how to do it,
 because it doesn't have enough self-loaded anymore.
 Well, you can load it now, because I've provided all the compiled
 notes.
 I don't have time to load that and do all the bay eye lectures
 that I haven't caught up on.
[00:31:41]
 And it's only six or two seconds.
 So you can see it's a good investment of your time to look at that because I have to use and ask which radio has been selected.
 Oh, I've already written that part.
 Yeah, that's already written.
 So you know which radio button is selected from the parents?
 Well, partially, but I was doing it as an event.
 And so, yeah.
[00:32:37]
 So component did not take an event as an argument.
 So I will have to read it.
 Yeah.
 So component is the component that update isn't
 except parameters.
 That's just update based.
 So where do I put the handler?
[00:32:57]
 Do I call the handler and component it update?
 Or do I use the handler as the action for the dispatch?
 Neither.
 The handler is the handler.
 Is this a separate function?
 Just like, okay, let me know the forms are only the any load sandbox.
 I'm not happy to put this after the form though, I think. Is the form not be completed?
[00:33:27]
 No.
 So, going back to, so this is going back to
 Ann Lewis.
 Now I think we talked about handlers in level two.
 So, handlers, how do we talk about the multiple types in different levels?
 So, handlers, I care.
 So, I must have talked about this in level 3 then, because that's when I can reach the act.
[00:34:11]
 I'm pretty sure it was level 3, because we did the radio button a account model and I have a form.
 This is the on submit event and then here's my handler.
 Where do I put that handler?
 First I put it down here outside of the outside of the component.
 Okay, so here's my handle right now. The first thing I did at first is I just put it here outside of my component.
 And there is a function.
 I put it outside of my component, but then when I realized, "Oh, I need the dispatch."
[00:35:00]
 Then I took this and I put it here at the bottom of the component.
 Now it has access to this back.
 So that's the handler's 101, greater function.
 Okay, so what would go at the end of the function after the component did unmount.
 >> Outside of your component.
 So this, I don't call it function, call it component,
 because that's what it is. I mean, it says,
[00:35:36]
 what it says with more specifically, it's a component.
 So I'll put the handler outside of your component.
 Then when you realize you need something, So, put the handler outside of your component.
 Then when you realize you need something,
 put it inside.
 So, if I, if I were to arrange this and compress everything,
 it looks like this. This is, this is the brains of the component.
[00:36:01]
 Not much brains.
 This is basically again a dispatch something.
 This is the render part that's going to render the form in here.
 This is the handler.
 There's no component that did not.
 There's no component that's update here.
 But if you have an account page, then you should have a component did not because one of the requirements is to have a component that was complete.
[00:36:32]
 So, I can say this, I'm going to turn this.
 So, if I were to ask with LM, how did you, which, how to find out?
 which how to find out how to find out which radio mutting has been selected?
 I would be a little bit more specific in a react form component. How to find out which radio mutting has been selected?
 Oh, you already have a mutton?
 OK, I'll ask you that.
 You said you're partially going to have.
[00:37:29]
 Well, when I said partially, I meant that it wasn't connecting to the to the radio button event
 because I had a handler originally and I took out the handler thinking that I was doing it
 incorrectly. Okay, well, let's just ask this question here and let's see if we have...
 If your solution is in the right direction.
 [ and so on.
 So first setting up the vent arm target so pass the vent arm target to any
 access to elements. I then find the radio button.
[00:38:20]
 So radio buttons are belong together in a group.
 They share the same name attributes.
 They have to have the same name.
 Finding the selected radio buses, we're doing it.
 So there's different methods here.
 And the inputs.
 And the tags, the main properties. and put it's and turn it on the upper
[00:38:47]
 and put it in the value
 here, the value
 just the value and what's the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the value of the node? I think it's going to be on or off.
 I forgot what the value is going to be.
 Check the value of the radio button.
 If it's not paired up, you can just ask it for more information.
 Okay. Okay, so the chance gets up to day three this week and then the focus.
[00:39:35]
 You know, get ready to take some notes.
 I'm going to take the last few minutes of this hour to reveal. And then make sure you get your mark
 up in the very point that many evaluations are.
 So when you further review, actually we went over this and so you guys had to combine code.
 Like if you had multiple files of code, you can combine them into one text file for your
 new command. one text file for your new quick lm. And this is the instructions on how to do that.
 Just going quickly cancel underneath. And for the Redux account practice, how far did we get?
[00:40:38]
 We're still stuck on number three because we didn't get the back end yet. Well, I didn't not
 for the sandbox. You guys probably have a back end already in your capsule
 projects. So I'm just going to show you how far we've had with our account.
 Right here, it's going to have those submit.
 It's going to, it's going to have the account update.
 And then it's going to send the post request to the back end
 server, but the back end server is not ready yet.
[00:41:38]
 I don't have the off date route created from the back end server.
 So that's what I need to do. So you're going to continue with the
 practice. This one in which I make the back end server update the database. [BLANK_AUDIO]
 Anyways, it's been through my screen.
 [BLANK_AUDIO] Start the front end here. [wind blowing] [wind blowing]
 [wind blowing]
 [wind blowing]
[00:42:56]
 [wind blowing]
 [wind blowing]
 [wind blowing] Okay, so let's see if I'm going to work on the back end now.
 I know that it's working.
 It's running here.
 Some reason it doesn't slow.
 It does not have a ground for the update. We need to create that.
[00:43:55]
 So we do need to do first.
 I need to go to index file and the route.
 And that post.
 Okay, you can't just go straight into using the post method. You need to also do this one right here.
 You have to use JSON.
 If you want to test it, you also need to add,
 if you want to test it,
[00:44:38]
 put PostNet.
 PostNet, you need to add URL included.
 Postman.
 And then this one is for... for
 that seems
 this one is for receiving
 data [inaudible] data. I'm going to create the update route and set up an update route handler.
[00:46:07]
 It's not created yet so I'm going to go here and create it in the melts.
 I think I already have some functions here. It's creating something like it.
 I have hot things.
 I'm just gonna
 gonna copy this and
 change it a little bit
 make it work
[00:46:36]
 with a mouth.
 You can paste it into here
 this one's gonna be called called up in the cup.
 Change it here, up in the cup. all the
 so my route
 call that
 is my paper out
[00:47:17]
 actually i don't have anything
 it's going to
 copy that
 my read route.
 Okay, some changes. [BLANK_AUDIO] [BLANK_AUDIO]
 >> Okay, so here, I'm gonna use the function call campaign account.
 [BLANK_AUDIO]
[00:48:04]
 Gonna take an email, actually, Use the function called this will be the count info. I'll just say a count.
 Alright. So this one will go into here, then it's going to give me
 actually, then we just put, well,
 we're going to give you back in account.
 Actually, then we just change this to me.
 It's all.
 So basically, we're going to take that with Alton's in it.
[00:49:07]
 We're going to change this back to your account.
 So if I pay the account is going to take in an accounting code based on the account data
 type.
 An account data type has an email screen name and phone.
 If you had only this part right here, I'm getting this somewhere.
 I'm going to get the nice pipe in somewhere.
 I think I've seen enough since the import.
[00:49:52]
 Import the nice pipe.
 And in another function, or in another file,
 I just basically created the nice pipe object and I just need to basically
 and so let me see here. This one is the rule of right. (mumbling) [inaudible]
 [inaudible]
 Well, these are not important.
 [inaudible] Okay, that's not that we got two coffee balls in fact.
[00:51:17]
 Basically just gonna run this function,
 whatever it gets, it's gonna send that.
 That's pretty easy, I'm going to basically, I'm expecting to get an account.
 This is where the data is received from request request.
 I'm going to get the account info.
 I'm going to get the account info.
 And the name is going to come from account until that name.
[00:52:27]
 And the problem is going to come from the house and the problem is going to be a maybe not, I think that's it. I think that's been going on.
 I just recorded this.
 So it should work now.
 Let's check if we serve the crash or not.
 And it's building.
 So it's back to work.
 So I'm going to start the front end. [BLANK_AUDIO]
[00:53:10]
 [BLANK_AUDIO]
 So I'm going to set some break points,
 actually, I need to, so we can watch it happen.
 I'm going to set some great points to the back end too.
 Put it back in. That's where you hold the one you're working in the terminal, which is
 the back end. That need to use the JavaScript
 because that's not is not running in the terminal it's running in the browser
[00:53:58]
 so let's see here
 this is the handle update so that
 I have a debugger here.
 I don't need to stand here.
 I'm going to put the back end.
 I'm going to watch it go to the center here
 and it will be the center. So let me just side in here
[00:55:07]
 [inaudible] I think it is through our own scene in the future. Here's that story.
 Here's that story.
 I hope David was coming here.
 Maybe this one is king.
 I think it's a great one.
 Trying to make it.
 Actually, that's happening with the sign.
[00:55:30]
 So I'm going to check the sign in here.
 Sorry, I'm going to top of here
 and he follows his knees values these values so email
 that's good
 education [BLANK_AUDIO] >> [INAUDIBLE]
 >> [INAUDIBLE]
 >> [INAudible]
[00:56:52]
 Oh, under the attack is approximately injecting this.
 [BLANK_AUDIO] [inaudible] Well, there's semicolons in the middle of those. the semi-colors. Oh, look at this after the break just taking a break right now. [BLANK_AUDIO]
 Okay, I'll see you guys after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from a break.
 And for the second hour, I'm just going to post the practice.
 So I haven't figured out the problem there.
 The environment there was not working properly.
 I'm just going to post this here and then I'm going to open the break [BLANK_AUDIO]
[01:10:22]
 Then I'm just gonna put everyone in the room. You don't have to go in a room.
 I just want to make sure you see the brick and rooms.
 Okay, so does anyone want to do their
 Level 9 corrections today?
 Or it's already good with their level 10. I mean week 9, many evaluations
 corrections anyone wants to do those today the last day would be Saturday
 during class or right after class. Same thing with the menu evaluations week 10.
[01:11:11]
 To get on time credit, you need to do it sometime this week. and see here in the lineup.
 If you're going to wait for the last day Saturday, and may or may not have time to do your evaluation. Basically, we're asking, you know, we're hoping that you can do your evaluation during class.
 If a lot of people want to be your evaluation at the same time,
 it's going to be a problem that I won't be able to fill everyone.
 So you wanted the corrections for level week 9, is that what you're saying? [wind blowing] [wind blowing] [wind blowing]
 [wind blowing]
 [wind blowing]
[01:12:58]
 [wind blowing]
 [wind blowing]
 [wind blowing] [inaudible]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible] I'll see you in the great camera. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so I'm going to continue with UP's mini evaluation.
[01:54:58]
 Actually, he finished we just started the
 week 10 mini evaluation, so the timer starts over for that.
 So I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] We're back from the break.
 And for this third hour, I'm just going to post the assignment, but open the breakout and down the open foot.
 Okay, so I'm going to continue the mini evaluation with Ue. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so the breakout rooms are back and in conclusion, while we did sort of a Redux
 account practice walkthrough and sort of got stuck.
 I found out what the problem was.
[02:49:49]
 I'll tell you guys about it on Saturday.
 Actually, we have a few minutes.
 I'm just going to show you guys just in case you want to run into the same problem. This is the answer.
 So I was trying to get, environment variables, these are coming from webpack.
 The, one of these environment variables were improperly formed.
 So I checked my ENB file and I saw it was improperly formed or the value with that set properly.
 I fixed it, but it did not update here. And I kept trying and
[02:50:47]
 trying to change it in the ENV file, but it's still didn't update here. Then I realized
 Webpack, it doesn't know if anything changes in the ENV file because that's separate
 from all my code.
 So the answer basically to get my changes to apply, I had to restart webpack.
 Just like when you edit webpack config.js,
 the only way the changes will apply
 is if you restart webpack.
[02:51:22]
 It will not restart by itself with new changes.
 It only webpack only restarts when you edit things that are connected to your app.
 This is a dev dependency right here, so it's not connected to my app.
 So webpack doesn't reload when I change things here.
 But same thing with the ENV file, if I had changed things in the ENV file,
 those changes are not applied until I restart the server. So that's what I was doing. I was just
 assuming one pack saw it, but that was the answer. If you're using environment variables in the front end.
[02:52:08]
 Make sure you restart your server when you if you change the values.
 Okay, so you have two minutes to set attendance accordingly.
 And then that class is dismissed.
 That's that's today's evaluation. So I can do one, another, after fast evaluation,
 that's one slot, and I can probably do two
 many evaluations on Saturday.
 So I have a total of three slots remaining for this week.
[02:52:50]
 Just keep that in mind. So, do we have any, anyone that wants to do any mini evaluations after class today? Otherwise, I only, I have two slots tomorrow, I mean on Saturday.
 Okay.
 Okay.
 Do you guys want the breakout rooms opened? We're going to continue working together.
 [ Pause ]
 David, did you get your attendance working properly? the that they didn't show like it's not even it just got three question marks.
 I've already asked
[02:54:14]
 one of the city was that Andrea Torrey and she said she looked at the two days asked about the six and the eighth and it shows that I was present.
 And I know it's a day and it just like you got question marks on it.
 It's not sure.
 So you're you're a you marked it on those days,
 but somehow the changes didn't take?
 - Yeah, yeah, marked it on the days,
 but it didn't actually take anything.
[02:54:33]
 So I got three days with just little question marks
 that don't have anything.
 - Okay, I can, I can check those.
 - Okay, thanks.
 I'll just make sure those are, you know,
 properly filled in
 Yeah, just the past three days, right?
[02:54:49]
 No the
 yesterday the sixth and the eighth
 Okay, I can just check it right now
 So those three days it didn't have much of a lie.
 Yesterday was 14. Let me see what yours says here. Yeah, it shows us not marked.
 So you were present there.
 So I'll just correct it to present.
[02:56:02]
 So that was yesterday the 14th and you said the 8th.
 Yeah, the 8th and the 6th.
 8 and 6th. Okay,
 that one fixed. Okay, so I'm showing up properly now.
 Yeah, everything looks good now thank you Okay, so let me see the status on we tend evaluations.
 Okay so looks like... Wait, what happened here? [no audio] You have a question?
 Yeah, I don't know how to, I put like a component, or I put a account in
[02:59:27]
 in
 selector
 and
 But the selector can take in either an account or a string and when I tried to use like
 The like for example the selector's name is reader response
 reader response dot email the email has For example, the selector's name is "Reader_SPANTS" "Reader_SPANTS.email"
 The email has read squooly on it because it says
[02:59:52]
 "string the type string does not exist"
 It could be a string or...
 Can't we see?
 Yeah.
 So let me take a look at it.
 Right here. Yeah, so yeah, um, we'd response. This will be a let. Yeah, so, um, you need to type cast it or insert it as an object there as an account.
 Over here. No, no.
[03:01:08]
 No, no. If you try to put it after the email, let's see what happens as--
 Oh, it tries to put it as a calendar.
 You're a tried to clear.
 Yeah, so if you try that, it's going to turn red.
 What you need to do is put parentheses around read response.
 What you need to do is put parentheses around read response. And then stick as account inside of those parentheses. Okay, but as any end then account that well it's gonna
 yeah it's gonna let's see a cleaner I'm trying to think of the cleanest way to do
[03:02:20]
 this I tried to deconstruct it earlier too, but it would also turn red just like
 Yeah, actually if you deconstruct it it might work better
 Because oh, yeah, it's gonna still yeah, it'll still
 So you have a or It's to be either in account or a string.
 If you put instead of "or" put "and", I know it doesn't make as much sense, but it's
 type string.
 I mean, type script in it's a little bit different.
[03:03:04]
 Let me see here.
 Yes, okay, so that doesn't work either.
 And let's see.
 Did I put any?
 Yeah, you would have to put any
 and then type cast it down there to account.
 Oh, it seems to work once it's any.
[03:03:38]
 Yeah, you just won't have,
 you won't have, you know, intelligence.
 What you could do is, let's see, is,
 put actually put account and or string up there,
 put account orstring back.
 And then in the condition on 34. In the condition of 34.
 But after that condition,
[03:04:20]
 put an N double N.
 No after the condition.
 And you're going to put read component.email.
 Let's see if that works.
 There.
 Does that fix it?
 Just put that one in there.
[03:04:48]
 Oh, I mean, it wouldn't be recombinant.
 It would be re-response.
 Oh, yeah.
 Re-response that email.
 Oh, it still doesn't catch it.
 Oh, OK.
 Sometimes it can be tricky. Oh, it still doesn't catch it. Oh, okay.
[03:05:05]
 Sometimes it can be tricky.
 The, um,
 what can you typecast it at the top in that condition,
 but as after read response.
 And put it in parentheses.
 And then put as account. Okay, so let me see, though, it should be in the parentheses.
 And you see what it says there. Members in the time stream, maybe you mistake.
[03:05:48]
 They don't know your lap.
 So it needs to be unknown for us as unknown as account.
 But unknown and then put as account. No, after unknown. And then you can, after the parentheses, that email,
 does that eliminate? Nope, it doesn't eliminate that.
 eliminate, nope, it doesn't eliminate that.
 What you could do is,
 you can, uh, destructure it out. So,
[03:06:37]
 let's see which line.
 Yeah, so what take,
 take the condition out.
 The ones that has parentheses and the email.
 Actually, the one with the parentheses,
 take the read response as unknown as account and move that one to the line 35.
 You can take that condition out. Yeah.
[03:07:08]
 Move that to 935.
 And then now you can destruct your read response from there. Okay, there we go.
 I was unusually complicated.
 You got to change it to unknown and then account.
 What is unknown?
 Yeah.
 Unknown is like any.
[03:07:51]
 It's like any.
 So if you change it as any and then account has the same effect.
 So change unknown to any.
 So it.
 It makes a little bit more sense to you.
 But TypeScript was saying do it with unknown.
 So, so it just overrides this.
[03:08:23]
 Yeah. So it just overrides this. Yeah, it overrides any with this.
 Yeah.
 Basically, what you're trying to say there is,
 you know that this is account by the time you get to this point.
 Okay, so you use any to disable TypeScript and then you override that and you say it's
 an account.
 So you get the, so you get the, the Intel a sense.
[03:09:07]
 So when you're typing, when you're de-structuring, those properties probably popped up for you, right?
 Yeah. Yeah.
 Okay.
 So same thing, how about the other ones?
 Why are they on any?
 Do you know what? I'll leave you across the door.
 They start off as a string as a change.
[03:09:33]
 I'll wait in the one.
 They change into TSS.
 Right, React element. We actually can put, I think, this react element.
 Bring and react element.
 Is the capital R?
 Did you see it? No. There. It's like the fourth one down. It fits one down. Not anymore. It's gone. There. There it is. Yeah.
 I think.
[03:10:14]
 How would you find this react element with when it's here?
 Right. Let's see.
 Let's see. I know that, you know, I guess you won't find it.
 You might see it on a component.
 Oh, okay.
 So there's React element right there.
 Yeah.
[03:10:41]
 So the other ones are also React element.
 So you can use that to be more clear that it's
 going to be either one of those.
 Makes the code a little bit messier.
 I don't know how this extends, how it can extend further.
 Or is it only extend to this much halfway?
 - I haven't looked into that.
[03:11:16]
 - I think that's something that you can always do it like this.
 - Something to do with the pretty here,
 I think, 'cause it's formatting.
 something to do with the prettier I think because it's formatting
 I wonder if you put the instead of putting it there where if you put it as string or react element instead of in the front if you do it in the back Maybe it keeps it as one line. Okay, I'll try that.
 Oh no, now it's even weirder. Okay, so I see.
 Has the two.
[03:12:07]
 Yeah, now it's a bit more confusing to look at.
 Okay.
 Well, at least those are more specific.
 But harder to read.
 You couldn't. but harder to read. You could
 You might be able to type cast it
 Or just not not what happens if you don't put any type there
[03:12:38]
 And delete delete those
 And so it sort of breaks down there. Let's see what happens at the bottom
 timescript. There it is right there. Does it expect it to be a string? You can put the Academic element. Let's see.
 For the for the state variables
 Go to that account
 Read component state variable.
 Where is the So if you put as string or react element, no, no, that's not going to work like that.
[03:13:42]
 That's not how objects work.
 That's an object.
 You can need to put it after.
 So there, that's clear. At least in the state variables part. Okay. Save that. Nothing broken there. At least your, your, your defining.
 I select your broke.
 Oh, I see. Okay.
 Bring that. Okay. Okay, okay cancel that then well
[03:14:29]
 Actually, that's actually no it's always going to be a string here
 So yeah, it's it's always gonna be you're always gonna be storing a string in the state variable
 So let's go back and that was a mistake.
 You're always gonna restarting the string in there.
 It's only when it's in the component
 that you're gonna reuse the variable.
 - Yeah.
[03:14:53]
 - The variable that you have there is what you're reusing.
 So that's what you, maybe,
 oh yeah, if you put paths and then
 what you could do is just override it,
 just put any, no, I mean like leave that as is,
 I mean, no remove put it back the way it was without the types,
 like that and then down there on line 41. Put it as any
[03:15:28]
 not there it's gonna it won't work there
 It only works when you define it
 If you're gonna put it after I mean put it after yeah, right there as any
 I should I got rid of it there. There's another one.
 I think I might keep it like this.
 So the.
 You want to keep those?
[03:16:00]
 Yes, I can be right away that it's a.
 Spring or react element.
 Okay.
 Okay, that means you can remove as any.
 Because, yeah, it's just big lines.
 So it's a line's only released.
 Look at this part when I,
[03:16:24]
 when it's at the top and where they look at it
 that much.
 Okay.
 So yeah, whatever you're comfortable with, there's different ways to approach that.
 Yeah.
 At least when it's like that, the code is ugly, but at least you know that that variable
 is going to store either a string or react element.
[03:16:47]
 Yeah, I don't have to be bouncing over to look at it.
 And it's informing you that you're going to repurpose that variable. What you could do is make a custom type and call it placeholder, component
 placeholder, make custom type.
 So anything that's going to be a ring or react element you can call it a
 placeholder. So type placeholder equals
 for the capital P though, as types are using capitalized
 and some types. No, it's not going to be an object.
[03:17:42]
 It's either a string or a react element.
 And then just use placeholder up there. [ Pause ]
 >> There's that.
 That's a little bit better. there's that yeah string root j-s-x.
 Okay, so yeah, make a custom type called j-s-x.
 No, oh, you want to call it.
 Okay, basically it's going to, gonna describe what it is.
[03:19:14]
 I should have did the rename symbols thing.
 Oh, everybody don't work. There we go. So, if I hit "Don't Work."
 There we go. Well, you can make it.
 Well, okay.
 I'm already asking you that way too.
 I was going to say, if you wanted to be like...
 "Tape?"
[03:19:44]
 Is it because placeholder was not clear or he just didn't like what you saw when you
 mouse over it.
 Oh, it was it was a clear.
 I didn't want to have to mouse over it.
 If I was, it was going to have to mouse over it, then that was might as well just keep
 it how it was.
 I see.
[03:20:01]
 Okay.
 So you just wanted to be able to tell what it was from just looking
 at it. Yeah. Okay. So we got everything solved here.
 I think it should work now.
 I think it should work now.
 Objects are not valid react child. That would go by this error, pops.
 You just want. >> It's what? >> This is objects are not React child.
[03:20:50]
 So you're rendering it objects somewhere instead of a react element. I think it's saying this part right here.
 That can't be.
 Because that's, are you rendering a read response somewhere?
 Check double check.
 Yeah, we will click on it. And we're also rendering it directly.
 Double click on it and then we'll see where else you're using it.
 Yeah, just double click on it and scroll down.
[03:21:39]
 It should have highlighted it other places right there.
 It might have come in as an
 account by then.
 Oh, my opinion is a complete response.
 Okay, yeah, with response.
 Oh, wait, no, never mind. That's wrong.
 This is read component.
[03:22:11]
 This is read response because this is the other alternative
 where it could be a string.
 Just put a debugger there and you'll find out which one
 crashes. Put a debugger there and you'll find out which one crashes.
 Put a debugger right before that condition.
 No, not that condition, but it's crashing after it.
 Is that someone where it's rendering a possible object.
[03:22:50]
 Possible that it might not come in as a string by that time.
 So it is read response there.
 If you mouse over it, you'll know the value of it.
 The string.
 Oh, there we go.
 It's fine right now, but eventually it's going to break somewhere.
 Right here. going to break somewhere right here okay on the go again and then press play again okay so it's a it's an object now
[03:23:38]
 okay still not broken then so like four clicks and then it it. So that's the click that you're going to check more closely.
 So let's refresh, click on play of one.
 It's not even two.
 Two. I think it's this click.
 It's the first two clicks are just to load the page. Okay, there's click.
 Click it one more time.
 Okay, so that's three on the third click it breaks.
[03:24:22]
 Okay.
 So we need to check the variables after the second click.
 It's it's the fourth click, I think, because this is one click and then two clicks and then the page loads.
 And then I click here and then one click and then the next click should break.
 Okay. All right. So that's okay. So now let's check the very the values or step through it one at a time step
 Let's find out which breaks where it breaks
 Because I'm breaking here. Yeah, I'm step through it one at a time the conditions
[03:25:07]
 conditions. Okay, so it doesn't break there.
 I think it breaks in right here.
 Okay, keep going.
 I'll just do the step over.
 Or I think it broke by now.
 Yeah, it breaks at the end of this return.
 And that's that's see what somewhere in that return statement something is
[03:25:32]
 getting rendered that shouldn't be rendered. I think but it says right here
 it says it has to do with this. Yeah but the only part that I use this is right up here.
 I think it's in here.
 But then you're just destructuring it there.
 You're destructuring.
 This is still the object that that's being rendered. So there must be a time when you're rendering the object instead of the values.
 So it must be only
[03:26:15]
 the button that clicked is only for this handle this handle right here.
 Let's be on here somewhere. [BLANK_AUDIO] So what in here, since this is true, we're component and we're response. I think it's rendering a, let's see, where are the instances where you're
 rendering read response as a string. Only right here.
 That's only spot. Okay, put a debugger there.
 So we'll check if, if ever, if it ever comes in there as an object.
 But it shouldn't update properly. Never, never went in there.
 Are you sure that's the only might be rendering in a different component?
[03:28:29]
 First of the bugger.
 The debugger is not there. [no audio]
 Yeah, never goes to the stiblogger down here.
 So that's not the place where it's breaking.
 But there's only somewhere else must be rendering somewhere else.
 Okay, there.
 That's inside of this return.
[03:29:19]
 But it never comes here until it unless it goes into either this one or this one.
 Right. It never shows up here until it.
 You must have missed the condition.
 So let's see. I would put the debugger right before the return.
 Right before the return. If it reaches that debugger and it's a, and it's a, if read account is an object,
 then that's why it's breaking. So, the reader count with the value that I mean,
 read response.
[03:30:34]
 So, it's going to be rendered as an object down there.
 >> Oh, okay.
 I think this is, this is most-- >> Oh, read. I think this is
 this is most component.
 No, we component where is it?
 Where is it? You're saying component. We component gets the span.
 Okay, yeah.
[03:31:13]
 This would be a brief update component.
 Yeah, you want to up the render the components, not the not the actual response. It worked by now.
 I can just play through.
 Yeah, I got to delete all these key buggers.
 Oh, [ Writing on Board ] Okay, I'm just going to go through that.
 All right.
 Any other questions?
[03:32:52]
 I don't have any more questions now.
 I think I'll have questions later but I don't have any more. Okay. Oh, wait, maybe, um,
 could I delete this?
 Uh, did update if I'm not using it?
 Um, yeah, because that's not any of the requirements for, uh,
 level four.
 The did mounts and the component did update.
[03:33:29]
 The mount, those are Level 3 things.
 You can leave it there as a placeholder or you can delete it since I'm not using it.
 Well, except for if I delete it, then my selector for did mal. Is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, is, it to the true, but it doesn't, I don't have a condition for it anymore.
 Okay, but you should have a lot of the requirements for the assignment is have it did not for. Or you can do it.
 But I could still have it, but it not use it.
 I mean, like not have it with the condition where it turns into a darker blue color.
 Let's see.
[03:34:39]
 Yeah, that's fine.
 Yeah, you know, I mean, even if you don't, even if you don't use it, one of the assignments is requiring
 for a did not for each page component.
 So, you should market.
 You can console log it if you want to use it console log did not
 in the date now face and console log it through that
 we've got to colorize it. I would also log it in from the phone.
[03:35:27]
 I would also log it in from the phone.
 I would also log it in from the phone.
 I would actually like after I said it's true or maybe that's in a did update.
 Yeah, my did update only had a condition of the data.
 You can put a console log there. You can do a, you can, if you have a, if you have a component
 did update, you can console log did not from there.
 Okay, yeah, I'll do that actually. Or you can just console log.
[03:36:06]
 Because I did update will be using the did mount in the condition.
 So that takes care of the colorization of the mount.
 And then if you want to make component did update more useful. You can just do it also log and say, you're updating.
 So, show me, show me your code. Do you have component did update?
 Yeah. Okay. Can you show the code? I'll show you what I mean, if you're not sure what I was talking about.
 So yeah, you don't need to console log in now.
 You just put, because you're already using the not right there online 191.
[03:37:00]
 So you could just put their update phase.
 Or the account component has updated.
 Whatever it makes sense.
 Is there, you're using the mount there, so it's colorizing the top where you're
 at the top of the component did not should be the proper color now.
 Yeah, that's how I had it originally, except for just without this console, a lot of it was just empty inside.
 Are you going to keep it within an account page, or are you going to change into a modal? How are you going to need to model hiring it into it.
[03:38:08]
 So I was going to keep it as a account page. I wanted to make it so that it only shows up with your signed in.
 Yeah.
 And make sure it doesn't look like a sample page.
 Like it shouldn't have the code operations there. It should just look
 like you're actually editing an account. You shouldn't have read the link and things like that.
 Because like that it looks like a sample page.
 sample page. What do I like make it a button or something? No, you could still have an account page but make it look like an account page, not a sample page. Like if you went to,
[03:38:55]
 you know, pick your favorite website like Amazon or whatever, how would it look like? Or even
 GitHub. If you go to your GitHub page, how would your account information look like?
 Does it look like this where you can read, update, delete like that or is it more streamlined?
 It's more, you can just probably show when I log in,
 show. When I log in with the persistent login, I was thinking of when it holds the login information,
 it'll also show the information here without having to do this part. So, yeah, it's just access this after your sign in.
 Once I figure out to do that, then have the update area maybe underneath or as a like,
[03:39:58]
 this should only be just one field, just like I would remove the retrieve information and I would remove the delete account.
 I would probably account.
 Maybe you have a bunch of, and then you just have to put their password to verify not instead of putting their email.
 that's what you're email.
 Okay, yeah, I gotta figure out to make it so that this only shows up when you're signed in, though.
 I think maybe I gotta put like a-
 - A big selector in the side.
[03:40:36]
 - So it needs to look, yeah, it needs to select there.
 If it sees an account, then it should pop up.
 If it doesn't see an account, it should be invisible.
 - Whoosh. - try to use it with?
 With this
 This variable. Yeah, how do I get this variable?
 Without selected
[03:41:04]
 You selected.
 Oh, just select it.
 You selected it.
 No.
 Okay, I see kind of like,
 kind of like here.
 Yeah, you could have a condition.
[03:41:23]
 If there's an account.
 Then render it.
 If there's not a account, then just render empty tags.
 To use the selector on a different page, I just do the same thing like this because I remember over here,
 I think you somehow use a selector but didn't put it down here like this.
 Not here. Oh yeah, right here. You said it here, but you didn't, you never declared it up here.
 - Yeah, I don't need to, that's a, that's different.
[03:42:11]
 So you select what you want to render or use,
 but you at the bottom, you're setting something
 that you might not necessarily render.
 So those are two different things. So selecting is for
 something that you want to use. Setting is for something that you want to
 set. You don't need to declare it. So for selecting you would have to declare it
 though. Yeah, you have to do that syntax right there if you want to select something.
[03:42:48]
 >> What if you need to match it?
 >> You'll need to just don't you if you're going to use it.
 >> Okay, I understand now.
 >> I think if you're not using the dispatcher and this component and you don't need it there.
 And the other one, I have just the dispatcher because I didn't need to select anything.
 But I needed to dispatch something.
 Yeah. So there, yeah, totally separate.
[03:43:28]
 Just use them only when you need them.
 We're going to have to put this, um,
 kind.
 It was here.
 Add a comment somewhere.
 Um, telling me that I
 yeah that's the one that signed us one word so you got one only has a dispatch
[03:43:55]
 not selecting anything it would probably happen in here in the sign in there, sign in model or sign in area, but whatever. after, probably after I pressed this button is when, when it should, it should, um,
 do the become visible. Yeah, after, yeah, it look at a, you should have it look at or select
 the variable, like the account variable. If it sees there's an account variable, that means
 someone logged in. Okay, so I could just use so there's a there's a account selector right there that one that one knows if someone bocked in or not.
 And it's set.
 And it's set.
 I'm sure I'd think of where I should use it at so that probably, but I'm thinking once it's signed in, or should I use it in the handle or.
[03:45:41]
 No, like you can use it directly in the component. So the thing that you want to disappear is that my account,
 where is that component?
 That's my account component.
 Where is that?
 Yeah, so select the account.
 Are you selecting the account anywhere there?
 No.
[03:46:00]
 Or do you know if there's...
 Read, well, read response.
 Oh, yeah.
 So it's a count call.
 Yeah, so if there's an account, then render yourself.
 If there's no account, then don't render anything.
 Probably up here.
[03:46:32]
 If it's a tag of this object, then rent. Well, if there is, actually, if it's not an object, then rent or nothing. that would have to put it, probably put it all over the board.
 So, I would put it as statement right before that, if you want to keep it down there.
 Would I need to put all of this inside of a component or something?
 - Well, it's fine like that. It's, you can do it.
 If we just sponsor is an object,
 then if the type of it is an object,
 then you can render that stuff down there.
[03:47:19]
 Otherwise, render nothing.
 Or you can do it the other way around.
 If you want my be cleaner, if you do it the other way around, if it's not in object
 and render nothing else, render something.
 If it's undefined or because it's only only well it might come in as a string
 Actually, if it is if it's a string
 render nothing
[03:47:54]
 I think because oh, yeah, yeah, when it's when it's a string it means an account then go through render
 return on the tags
 render our return on the tags.
 There. That should work.
 Else.
 Else the other one.
 But I need to put else or just have it down there.
[03:48:21]
 No, you don't need to put the, you don't need to put, no, put else, but put the,
 without the curly braces.
 It's not really necessary, but it shows that it's connected.
 Oh, wait, um
 No, no, I don't want this the button to show up either though
 The bunch it oh, is there a button?
 Yeah, or this link in the
[03:49:07]
 In the navigation that's that's what I don't want to show up instead of in here. Oh, okay, yeah. So we affected the wrong thing. That's not the right thing. That's
 not the right thing. You wanted to hide the link. Yeah. So that's what you want to go.
 That's where you're gonna check.
 Whenever you're right on the reader.
 What will you randomly map link?
 I think it's in now collapsible now for collapse.
 I'm sure here's one.
[03:49:48]
 I should, I think you did this before.
 Oh yeah, I remember now.
 But I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this. I changed this, it's because it's always set to true right now.
 It's over-righted. So that's why it's always been show up.
 And you're over-righting it. So I'll have to select it up here, the global account. Yeah.
 Now you can use the actual value instead of overriding.
 I think when you showed me this, I didn't have the Redux completed yet.
[03:50:31]
 Yeah.
 Now that you have your variables, you can use it.
 By the way, it's been working fine, but would I have to put the domain for cloud front
 here as well?
 I mean, it hasn't been with different paths.
 Does cloud front just share the same? No. No, because
 Cloud front doesn't have a, yeah, Cloud front just has the regular root path.
[03:51:19]
 You only need a special loop path for get.
 Now type of a or an object. So, you can put if accounts.
 That makes sense to
 unless is it coming in as undefined or an object? Yeah, so there it's gone.
 Maybe I'll just start from here.
 Find in.
 There we go.
[03:52:22]
 There we go.
 And then sign out.
 It's like a hidden room. Okay, thank you.
 >> You're welcome.
 >> I got to stash this and then put it in to a different branch.
 >> Okay.
 All right, so I guess what I'll say,
[03:53:04]
 I'm going to see you Saturday morning, maybe.
 I'll be there.
 I don't know if you'll be there.
 I should be there.
 See you Saturday.
 See you Saturday.
 Bye.

///// FILE: "Level 4/transcripts 2/May 17, 2025 10-46.txt"

Transcript from May 17, 2025

[00:00:00]
 Okay.
 Welcome to Codex Academy, level four.
 This is week 10, day five.
 And the focus of this week is evaluations.
 Today's agenda.
 This to take attendance, do announcements, review.
 Run the practice that we were working on
[00:00:26]
 before, second hour, mini evaluations, post-apractus and open the breakout
 rooms during that second hour. And in the third hour, we'll also do mini
 evaluations, but this time I'll post the assignment and open up the breakout rooms.
 Attendance. So make sure you head on over to your code X account and mark your attendance as present if you're here right now.
 And now time for announcements.
 Then we get that loaded for you. Okay, so as a reminder, team. And it's crutch time. There's only pretty much going to be only one more week of class. A bunch of time, no time to rest. You want to spend as much time as possible,
 just getting things done. And only when it's done, that's when you should,
[00:02:07]
 you know, take a break or rest, because
 then it should just be smooth sailing.
 The presentations are going to start next week.
 presentations are going to start next week. Sometimes next week I ask the staff if we can do presentations on Thursday but that's not,
 this doesn't seem likely. So it might be, you know, Tuesday or Wednesday. And during the presentations, you just need to
 present what you have.
 And I'll go over more things on Tuesday.
[00:03:01]
 Or maybe I should post some things today.
 Yeah, maybe I'll post some things today about the presentations.
 If not today, then Monday during the collaboration.
 That way you can practice during the student collaboration day.
 So many evaluations, 60 minutes per submission.
 This is the last day for week nine corrections. And also the last day for week 10 on time credit.
 The assignments are still in the process of being graded.
[00:04:03]
 And if you don't receive an extension to submit
 some corrections or some assignments that are posed by now,
 just let me know just like what was posted in the chat.
 Because those extensions need to be manually done. They're not
 automatic. So sometimes when the assignments are being graded, it can be very
 easy to look over to skip this part because it needs to be manually done to grant the extensions.
 Okay, so all the assignments are closed so if these are being graded for you, you should
[00:04:54]
 get extensions and if you don't see them right away, then send me a message.
 So the capsule in finale was due on Thursday and there's going to be late credit until Thursday next week.
 And also correction until Thursday next week.
 A contact student success team. I see some, I see some assignments have closed. And,
 yeah, some assignments have closed,
 and they are below the 75% requirement.
 So you need to contact the students
[00:05:37]
 suggesting as soon as possible about that.
 And ask for it to be reopened.
 Also tell them, "Hey, it's going to be a quick fix, maybe?"
 or you've already fixed the problems in those closed assignments.
 So most likely they'll say okay go ahead give it a try
 since it's already done. But it can't be last minute and these needs to be
 like as soon as possible.
[00:06:19]
 Okay help seeker don't get stuck for more than 15 minutes.
 Host in July cohort. So let's see if there's anything new there.
 Which there is.
 Okay, let me see.
 Okay, so you had a question about making the account path not available.
 So in the front end.
 So in browser router, you have a path, you have paths.
[00:07:14]
 Let me load up the sandbox.
 So we can take a better look at it. Okay, so you have routes and paths.
 One of these might be the account page.
 And you can use asking how do you disable
 or out if they're not logged in, how do you disable the account page if they're not logged in?
 Well, that just makes things more complicated, which I haven't taught in class.
 But there are some things that you can apply.
[00:08:31]
 From whatever component, whatever component, oops.
 So whatever component you're rendering, it can decide what it will render. So I haven't taught the class how to disable a path, but
 you know how to render a component from a path. And you also should know how to
 give this component the ability to show itself or to not show itself. You've
 basically look at the Redux variables.
 And if you like what you see in the Redux variables render it normally,
 if you don't like what you see, just let this return empty tags.
[00:09:19]
 But instead of doing that, if the person is not logged in, and they go to the, they manually
 go to the account path, when there is no log in, render a message saying users must
 be logged in to access the page.
 So instead of rendering nothing, render a message. you can also redirect users back to the home page. You know, use that navigate to.
 Maybe do it after a few seconds.
 You can say, uh, we can say, uh,
 users must be logged into access this page redirecting you back to the home page.
[00:09:56]
 And after five seconds.
 So, uh, we can see that there's a lot of data.
 So, uh, we can see that there's a lot of data.
 So, uh, we can see that there's a lot of data. So, uh, we can see that there's a lot of data. users must be logged into access this page redirecting you back to the home page
 and after five seconds. So you can do that. So you can do both of those. Or you
 can just redirect them straight. So if they go straight, if they go to this and
 they're not logged in, it just redirects them straight to the home page
[00:10:23]
 without any message. You can just do this by itself, or you can do both of these.
 And let's see Chris gave a tip on how to view Moodle in dark mode.
 And then Alex Sandra is asking something about the unit test.
 Which name is also used as a describe. So there's a unit test right here.
 It doesn't provide an answer.
 There's a question here about Amazon Forest, but the question is in a different language.
 I mean, the context is in a different language.
[00:11:40]
 Or waiting to get an answer expecting it to be undefined.
 So let's see here.
 This one is a very low score. If score is less than 4%, this basically means 4%.
 So I think you have your things backwards here.
 Backwards.
 If the certainty level is 4% give me the answer.
 That's what you're saying.
[00:12:42]
 You want it the other way around.
 If the score is less than 4% return undefined.
 I used a 50% score, which is 0.5.
 So if the score is less than 0.5, return undefined.
 Let's see, did you...
 So I would fix the score here.
 The condition doesn't look right there.
[00:13:17]
 So if the score is 1, that means it's 100% searching
 that it has the right answer. If the score is 0.5, it means it's 100% searching that it has the right answer. If the score is 0.5, it means
 it's 50% searching that it has the right answer. So use that understanding to create the
 condition here. And I've built the route for the AI in the sandbox webpack is looking for a different loader.
 Yeah, so there's some setup that we needed to do.
 Continue with the videos. There's some setup that we need to do.
 It's going to say something about node loader.
[00:14:12]
 And I thought in the class, how do you handle this?
 Yeah, so if found out external thing. All right, so again, a reminder, you can use notebook LM and I've provided a compilation
 of the notes and the code and the transcripts here in reference level 4.
 If you click on compiled notes, there's a compilation for level 4, level three and level two.
 So level, this one right here, level four text, that includes the code and the notes from
 class, level four transcripts.
 That's the transcripts all compiled into one file.
[00:15:32]
 Level three text, that's the code and the notes, and level two, that's the code and the notes.
 So if you feed these all into notebook LM,
 it can answer things, it can answer your questions based on what was taught in class. Now, when you get better answers, then if you search the internet, you get better answers
 if you feed this to notebook LM.
 Or more direct answers.
 It doesn't take long to feed this into notebook LM.
 Let me show you here.
[00:16:07]
 Let me just remove all these. It just takes a few seconds for notebook LM to study these documents.
 Okay, so there's nothing in here in the sources. So how do you add them to notebook LM so that it can answer your questions about the class?
 You need to go here, click on a document, click on raw, which gives you a link up here, then you give notebook,
 alumni on the website, paste it in there, so that's the whole Oops, did I just close it?
 The transcripts.
 Click on raw.
 Copy this link.
[00:17:24]
 Paste it into here.
 That's for level 4. If you want some contacts from level 2 and level 3, you can do that too.
 Click on the file. Click on raw. Get the link, add it here to the book LM, and then the last one is
 level 2.
 Click on raw, gives you a link up here, and that link right there.
 Now, you just need to give notebook LM a few, like one minute to process these files.
 And then it can answer all your questions.
[00:18:23]
 And the answers it gives you will be based on what was taught
 in class, not just all the possible solutions
 when you search on the internet.
 So it's gonna be more efficient.
 But this, you can see here when it was,
 the last time it was updated.
 But you can see here when it was the last time it was updated.
[00:18:53]
 You can see here that these files were updated two days ago. So these are up to date, up to two days ago.
 Eventually I'll update these maybe next week.
 updates maybe next week.
 It finished loading or processing these files. It's still processing.
 Well, it needs to.
 You'll see here there's only three files,
 but it should add another one there it is.
[00:19:19]
 Yeah, the files disappear for a while.
 And then while they disappear, sometimes when they're processing, then they reappear you just have to wait for it.
 So if I ask here the question that Alexandra had about.
 Where is that?
 Can I build the routes? Looking for a different loader and then,
 let's see here.
 Let's ask that question here.
[00:20:07]
 Aye. Let's ask the question here. AI.
 So I'm just going to copy this question.
 I'll probably change it to be more specific so that the AI can give a better answer. the route. route, and send box.
 When Webpack is looking for a different loader.
 I'm going to fix the error when Webpack is looking for a different loader when trying to build the backend server for AI in the sandbox.
 Let's see if it talks about node externals here. [ Pause ]
 >> Yep, talks about your external modules.
[00:21:57]
 It's here.
 Even without watching the video, but it gives you the --
 it tells you where in the transcripts
 and where in the code to find an answer.
 When you mouse over or if you click on this, those where it is in the transcript, I think
 I might update these transcripts to show the date and the time. Right now it's just showing the time in the video,
 but you don't know which video it is
[00:22:31]
 until you scroll all the way up to the top,
 and then the top shows which video it is.
 So I'll see about updating these time stamps.
 updating these time stamps.
 They're not, these time stamps are less useful when it's compiled in, when all the transcripts are compiled into one file.
 Okay, let me see what else is here in the announcements. Okay, so the transcripts are up to date until we attend day three.
 Okay, we're gonna review now.
[00:23:12]
 It's gonna be a short review because I think I was able to build the back end,
 but not test it.
 So, you know, if you haven't finished the practice,
 account practice yet,
 the ability to edit accounts,
 then you should pay attention to this part.
 And then have your microphones ready,
[00:23:34]
 if you're going to do many evaluations,
 or if you have a question. So review basically on Thursday, we were still working on this line right here when the account is formed is submitted update the database. Yeah, still working on that line.
 It's short, short one liner,
 but it takes a lot of work to finish,
 especially if you didn't make your front end
 and back end routes yet.
 What was accomplished was the back end,
[00:24:31]
 coded the back end, coded the back end, but then it gets to connect it to the front end. So let me load that. I'll share my screen.
 I'm going to start these servers here.
 I'm going to start them in reverse order for the back end, and get I'm gonna start the reverse border for the
 backend and yeah run start to
 start
 yeah this appears
 it
[00:25:38]
 again
 that's the back end. This is the front end. [BLANK_AUDIO] And then start.
 [BLANK_AUDIO]
 So in the back end, on Thursday, this is what we did.
 Added the update route.
 I mean, added the path right here, the route and the handler, using the post method.
 Remember you need, you need this one if you're going to use Axios to send some data through the post method.
[00:26:36]
 And you need this one if you're going to send data through postman with the post method.
 with the post method.
 And you get your data from the body, you first that body if you're gonna,
 if your route is getting data from the post method.
 In this case, the data that comes in will be the account.
 So it's gonna be an object that has,
 So it's going to be an object that has,
[00:27:10]
 it's going to be basically this, it's going to be that, it's going to be an object that has an email password name and
 the phone. That's what we expect to come in.
 Then we're going to run our function called update account,
 pass it in these things here.
 going to run our function called update account. Pass it in with these things here.
 What is it going to do?
 Well, there's a quick and easy one.
[00:27:37]
 This is the request right here, the request object.
 Provide the name on the tape.
 I mean, provide the table, the key. Okay, so this one's not right.
 This one's just obvious right now.
 So account info needs to be emailed.
 Provide that email there. That's going to be the key.
 And then we want to update the name and the phone.
[00:28:18]
 Okay, so then use the update method on the nice client. Give it the request and then.
 In this case, we're returning the response straight.
 Probably shouldn't do it like that.
 I should be.
 Let's see what test could we do some tests here. So we said provide a message saying if it was process properly.
 So if response not metadata equals 200.
 What I'm going to do is
[00:29:16]
 that message.
 This. this message equals Okay, get count for.
 And I'm going to provide the account info. [BLANK_AUDIO]
 [BLANK_AUDIO]
 I guess it's gonna come in, it's a string.
 [BLANK_AUDIO] Oh, God, that's that must go.
 Then return the message.
[00:30:35]
 So the message is going to be a blank string.
 Actually, let me put here, undefined.
 and define string. It's going to be a string or undefined. So if it's successful, I get something. If it's not successful, I get nothing. Okay, so that's the back end and then it's just gonna return that result.
 Either message or undefined.
 As far as we got, then eventually I found out the problem with the front end.
 Because these values are not coming in properly. So I fixed it in the ENV file. But then it was not taking, I was not seeing the values being, the new values being reflected here.
 And that was because I didn't restart Webpack.
[00:31:51]
 Webpack doesn't know that the ENB file has changed.
 So it just stays instead of applying the changes.
 So whenever you make changes to Webpack,
 config file or the ENV file, you need to reset Webpack.
 I mean, we start the server. So here's the Webpack config file.
 You know how, if you make changes here, the server here won't restart.
 You have to manually restart the server whenever you make changes to files that are outside
[00:32:32]
 of your app.
 So basically whenever you make changes to files that are part of your dev dependencies
 or not imported by your app, you need to restart webpack.
 But if you're making changes, things connected to your app,
 or things that are imported by your app,
 then webpack will restart and apply those changes.
 Okay, so that's as far as we got on Thursday. Now we're just going to continue that.
[00:33:18]
 We're going to continue this part when the account form is submitted, update the database.
 So I'm going to put the debuggers. So we can follow it all the way.
 I'm going to change this to a JavaScript debugger.
 So I'm going to keep going blank. Again, you only need the JavaScript debugger terminal for node.js applications.
 So your back end is no JS. But your front end is not no JS.
 That's in the browser. It runs in the browser. So if here, right, it has
 Dev Tools. You can use that for debugging, or you can
[00:34:32]
 use the
 VS code debugger there, if you're in the front end.
 You don't need to start it with the debug terminal.
 This is just a regular terminal.
 It's only when you're working in the node.js or the back end
 that you need the JavaScript debug terminal
 if you want to start debugging.
[00:35:00]
 So I want to debug the front end.
 So I'm going to instead of using dev tools, instead of using these,
 I'm not going to use that.
 We use the DS code debugger.
 And to do that, you need to open up a browser page that's controlled by VS code.
 I'm just going to sign in here.
 Because we're testing the update.
[00:35:41]
 This is handling the sign in the time.
 Only one needs to handle that.
 This means authenticating.
 We don't need to handle that.
 I don't the account information.
 Right here, it automatically populates the email, the password, the name, and the phone number.
 I don't, what you see here is I don't have multiple forms one for read one for delete one for update right I just have one form it's all combined into one form.
[00:36:33]
 This one basically just did the reading right because I see it here I see the account information so read I know that read was done. This part's gonna be here if I make any changes
 this will be the update so I'll change it to Arnold.
 And we actually let me just make it a name so obvious that it's changed. Now we can watch the debugger.
 Okay, it's gonna go here and then it's gonna go there. Okay, that's gonna, it's gonna catch.
 Okay, there it is. So it's handling the submit.
 And you see if it goes into here. Yep. Okay so it pulled out the name here. Come on. So name. There's a name, phone number didn't change, though.
 Okay, so it pulled out the information, or extracted the information.
[00:37:51]
 Now it's gonna send it to handle account update.
 Gonna give it the new name and the phone number.
 So here it is.
 Gonna get the URL to send the data to.
 You're gonna perform get the URL to send the data to. You're going to perform that data object.
 And now we're in the back end.
 This is the back end.
[00:38:15]
 It's receiving it.
 We should see the account information here.
 Actually, this account is not complete. We see here it has
 the name and a phone number only. It's not complete. So I need to get that
 information. It's going to crash here.
 Why is it going to crash?
 It's because it can't.
[00:38:53]
 There's nothing to update.
 It doesn't have an email key.
 Oops.
 Sorry, I haven't been sharing this whole time.
 She said something sooner. Okay, so where was I? I'm gonna start over. So I've set some debuggers and I was saying before you only need to have the JavaScript
 debug terminal if you want to debug your back end. You don't need the
 job with the bug terminal for the front end. See the front end is in, this is the regular
[00:39:56]
 terminal right here. It's handled by either in dev tools or by VS code debugger. This one right here.
 Okay, let's go. I'm going to try try that again try to edit this account output
 Just an obvious name change and
 There the debugger stopped
 Okay, missed that part right here
 Anytime that again
 and again. And you also see here that the persistent login is working.
[00:40:51]
 It's still logged in, even though I press reset
 or refresh.
 So here it's extracted the name and the phone. And then it's going to pass that name in the phone over.
 I'm going to create a data object with that new name and phone number. Then send it to the back end.
 to the backend. Here's the backend catching the name in the phone. Then I just realized
 this is not enough information for the backend to work. It needs an email and the password to update the account. It only has the name and it only has the name and the, it only has the name and the phone.
 It doesn't have the email here.
[00:41:47]
 And it doesn't have the password.
 So it's probably going to crash.
 So let's see what happens.
 Yep, it crash.
 It didn't even get, it didn't even get to the red spot there.
 So what I'm gonna do, I need to provide everything here.
 So I'm gonna just update this.
[00:42:23]
 I'm gonna pass it the account object.
 What I'm going to do is provide the current account.
 Let's see.
 Let me rename this one.
 So handle account updates. So if I get a result from here,
 I want that to be called updated account for, actually,
 what I mean by,
[00:43:00]
 oh, I need the new account. Okay, so I'm expecting the new account to pass this.
 I need to pass not just the name of the phone, but I also need to pass in the email and
 the password.
 So I need to get that with the selector.
 So that global account.
 It's a global variable, meaning all the components have access to it, and the data that
 it contains is the account data.
[00:44:01]
 So I'll store that in a variable called account.
 And then I'll pass that account into here, but with the new name and account.bone equals phone.
 So I'm taking the account that I have in,
 I currently have that's logged in.
 I'm going to pass in the new name and the new phone from the form.
 Give it to the handle account update.
 So I need to fix this to accept the new info. [BLANK_AUDIO]
[00:45:07]
 New info.
 That's gonna be an account.
 [BLANK_AUDIO]
 And I don't need to form this data anymore.
 I'm just gonna pass the account as is the new info.
 Let's see, let me call it new data.
 Even though, now that's fine.
[00:45:38]
 Okay, so that one should look good going into there.
 I need to, let's watch it go into there, but it's the
 response is not going to be right, because it's just sending a message instead of what's can crash here. We start this.
 Okay, so I'll rename this. We can watch it happen.
 Okay, so we have a name here, a new name, Z.
 There's a new phone right here, I didn't change it.
 So let's just say it's a new phone.
[00:46:35]
 And we have the current account that we have.
 This is the current account with the current name.
 But we're going to change the name here.
 I'm not assigned to read only property of the object. Okay, I guess I can't edit it.
 So I'm going to make a new object, a new data object. on the next data equals, and's going to be a name.
 Wait, no, there's going to be an email.
 That's the account.
[00:47:54]
 That's the account.
 That password. That's account.password. There's going to be the name which is going to be a phone which will be a new phone.
 And that's what I'll pass into here.
 I'll pass in that data.
 That should work.
 I guess I didn't want to read up.
 So it's basically looking out for the state variable.
[00:48:59]
 If I try to edit it, read us doesn't like it.
 Oh wait, I was just editing. I was changing the
 with a flip left here. I should be able to edit the properties, but let's see what happens if I just put left there.
 If it'll let me. Okay, I put my chainset in the name and the account.
 So there's new name here and the phone number.
 I mean, let's see if it'll let me edit this.
 You'll crash.
[00:50:02]
 It won't let me edit.
 Redux doesn't want editing of the variables of objects.
 You can edit it if it's a placeholder string, but if it's an object,
 Redux will not you. So let's just reform that.
 Okay, let's try that again.
 Put a name here and a phone number, trying to save it. Okay, we're going to form this data with the
 new information. So the data that came in, there's an, there's an, the current email,
[00:50:59]
 there's a new name, the current password, and there's a new phone number. I'm going to send that to the backend.
 The backend receives it here.
 The account info that has all that, so that looks good.
 Right here, you can see that we haven't verified the password.
 You can see that we haven't verified the password. It'll just go ahead and change the information without verifying the password.
 So here, it's going to create the request.
 It's going to be created the request object with a new email name and phone.
[00:51:41]
 Actually, with a current email, but with a new name and a new phone.
 And it's going to try to update it, which it does. It updates it without verifying the
 password. So that's a security risk because all you have to do is provide an email and then it'll, if you know someone's email and
 you know this server address and the server route, you can just send the request and it
 will just update that email even if you don't authenticate it with a password.
 I'm going to say message. It should be returning an account instead of a message.
 So we're going to get wrong input from the, it's going to make a round trip to the front end.
[00:52:45]
 Front end is going to receive something.
 It's expects to receive an account, but instead it receives a message.
 So it's going to start getting buggy from here.
 The message is just a string, but it doesn't receive an account.
 So that's fixed at the back end should be returning an account.
 So if response is 200, maybe rename this to account, this will be either account, it'll store in account, or it will be undefined.
 The account will be... account in both the thing that came in.
[00:53:59]
 Actually, to make it easier, I just basically don't need to do that. It's not equal to 200. 100.
 That the account be the account info.
 The one that came up through here, that that one be undefined.
 Just change it basically.
 And now return the account info.
 So this means return the account if everything goes fine. We're going to
 whatever came in through here. We'll get returned. But if there was something wrong,
[00:54:33]
 then just change it to undefined and that return undefined. So that looks good. So I need to to actually this update phase should be authenticating first.
 You can have a question, and you have
 have it return multiple things.
 If you want to return an account and the message and return an object.
 So if you want to return multiple things, you make an object.
 Let's call it result.
 You can make it a tuple or you can make it an object.
[00:55:26]
 So here's how it would be as an object.
 So if your account is an account info, and then the message right here could be like
 success updated account.
 Then you would instead of returning the account,
 you just return that result.
 That's how you return multiple values with an object
 or with a tuple.
[00:55:54]
 If you're going to do it with a tuple,
 tuple is basically just an array, a fixed array
 would just the information, a structure to array basically it has, it's always
 going to be the same structure.
 You can do it like this so position zero will always be the account.
 Position two will always be the message. You can do it like that to
 to pull and then return the result instead of the account information.
[00:56:36]
 But I'm gonna, I don't need that message. I just want the account information.
 If it's successfully updating, I just want the account information. If it's successfully updating,
 I just want the account information.
 It's up to you. You decide.
 People like to have more information.
 But when you provide more information, it's just more complex.
 You have to pull out and extract the information that you're providing.
[00:57:13]
 This takes a little bit more work.
 So it's up to you however you want to design it.
 For large systems, most likely they're returning an object or a tuple.
 You can decide which one you want to use, providing more information.
 For larger systems, larger apps so that it's easier to keep track of what's going on to return more information through a
 tool or through an object.
 So what's missing is the authentication part here.
[00:57:55]
 So that's what we need to add here. as I authenticate the password before updating.
 So I'm going to take a break now. [ Pause ] All right, there we go.
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so we're back from the break.
 And again, to the second hour of class, I'm just going to post the practice here.
 If you want to continue with that. And I'm going to open up the breakout rooms. And they'll be open for 42 minutes. So, I'm probably two slots for many evaluations today.
 Maybe you're ready, maybe you're not ready, I suggest this
 Do it anyways and see what you what points you can get
[01:10:34]
 Because it's probably gonna be your second submission
 So maybe your pass, maybe you won't
 If you don't pass, then you can at least
 contact the Student success team and tell them, I want to do an extra submission
 for this mini evaluation.
 Actually, let me see here for week 9.
 Yeah, week 9 will basically the corrections for week 9.
[01:11:12]
 If you don't have those in, those will close by, you know, the end of today. Week 8 corrections are closed. We have to contact student success team for that.
 We have to contact student success team for that.
 This is the last day for week nine corrections after that.
 Then you have to contact the student success team for that to be reopened.
 So as I was saying, I always announced it at the beginning of class, if anything is
 closed on you, contact the student success team.
 You'd rather do it in the next hour.
[01:12:56]
 Okay, so yeah, you can take this 39 minutes, which is remaining to go over what you want to discuss in the evaluations.
 And then we'll talk about it in the third hour.
 So if no one will be doing a mini evaluation
 in this second hour,
 I mean, that means you're willing to let the,
 it's possible that the assignment might close on you
 and then you're gonna contact to in success team
[01:13:23]
 if you wanna make that decision.
 That's fine.
 I can use that this hour to help catch you up or answer
 any questions that you might have.
 Oh, I did notice, Alexandra, I tried to look at your website
 yesterday, but it was not rendering so
 You have to be careful only upload things to GitHub or
[01:13:54]
 You know anything that deploys your site
 Anything that deploys your site only upload it
 If your if it's if the code is working. Never upload broken code
 because you don't want a site that goes down.
 So as soon as if something is working locally and then as soon as you upload it, you find out there's something wrong.
 Then you should probably revert it or.
 I don't know how I never tried reverting the the push, but it's most likely the problem is because it's contacting the wrong servers.
[01:14:44]
 The problem is because it's contacting the wrong servers. And that should be a quick fix.
 Just basically if condition that says contact
 AWS NEMDA instead of local host.
 Okay, so I'm going to try to help Alex and her then.
 I'll give you screen share
 and we'll try to find out what's going on but yeah as much as possible.
 Never let crashing code be deployed.
[01:15:18]
 If your code is going to crash only let that happen in your local computer.
 Yeah, it's crashed. So render is nothing.
 Server responded with a status. So it's probably, it looks like it's trying to contact the wrong server
 I can hear you, well I heard something.
 You don't know I had to tell, I didn't want to yell at you, I had to yell at
 Alexa to stop the music. So.
 Oh.
[01:16:08]
 You had some music playing in the background?
 Yes. [BLANK_AUDIO] [no audio] So you said everything works fine locally.
 Let's get it running on the other side. [ Pause ]
 Okay, I just wanted to make sure I have the right commands
 because I've been playing in the sandbox with the Google Cloud back in.
 Hey, you should have a different folder for Google Cloud back in.
 It's just that the commands are different because I have a start to start to over there.
[01:17:59]
 So I want to make sure I wasn't supposed to be running start to over here.
 are always in its twist to be learning start to over here.
 Okay, well, what you can do to remedy that is just put the note there in your console log.
 Right now it says, "
 "NPM run build." So,
 so we should tell your console log should tell you what you should do. So,
 what basically the workflow is just type "NPM start" and then just follow what you,
[01:18:27]
 the message you left for yourself in the console log.
 >> Wow. That's really large. >> Oh, it's very 500%.
 >> Okay. [ Pause ]
 >> Yeah, so it doesn't look like it works even locally.
 >> No. >> It was the --
 >> Yeah. >> It's the Redux stuff. But it should have gotten
 learned. Well, right now you're in the main branch. So let's fix that main branch. So let's look at the message. Look at the error message.
[01:19:46]
 What is it saying?
 Missing a semicolon in home.
 What? Why?
 Why does it say CD import? So look at your file that is pointing to home.tsx.
 That's what I'm doing.
 Why is there a semi-light in one?
 Look at line one. That's wrong.
[01:20:26]
 No way that came from.
 Probably I was typing fast and thought I was in the terminal and I wasn't
 It even says there on the in the message.
 What was wrong with it? Line one says that it's even pointing at it right there in the message what was wrong with it.
 Line one says that it's even pointing at it right there in the message.
 Okay, that's that's even rendered.
 It rendered so let's at least push that at least push that so it's.
[01:21:04]
 Yeah, that's not the right color. I don't know why it's growing around with the colors now.
 And tab colors are not correct either. So, did you install an extension?
 No, I haven't done anything except Redux.
 Maybe you actually.
 Change a value in a CSS file or something or a SAS file
 I haven't changed any colors in this I say I see something there
 Where I
[01:21:37]
 The same color that you see in your page
 Well, let's see where this group item color. So maybe like, that's not the
 age. That's a T. Old background color. Okay, I have a
 that's not the olive. Yeah, that's not olive. I don't have any olive in my CSS. Okay.
 Let's, most likely it's going to be background color.
 So, you can click on the browser and I can inspect it to see the CSS and the browser.
 It's also no longer using this logic, so that got my stuff somewhere out too, because that was working. So you have to pull up the CSS at the bottom. Or on the, that's actually on the side.
[01:22:49]
 It got, it's in the side panel.
 You can close the bottom panel.
 Don't need that one.
 In the bottom panel.
 Or in the CSS panel.
 It's bigger.
 So something is changing the background color here.
[01:23:16]
 Why does it say it's all.
 Dark haters.
 Yeah, can you disable that background color, see what happens?
 >> I do want to do it.
 I know what it is.
 It's that new extension that it's this.
 >> Yeah.
[01:23:37]
 That's what I asked you.
 Did you install an extension?
 >> I thought you meant a VS code extension. Yeah, that was it. Okay. Well, dark reader can, I'll just go blind. That's fine.
 All right, so that's fixed.
 So this is maybe you can set dark reader for specific or to more local host.
 I mean, I don't care about it right now.
 I'll just turn dark reader off. It's fine.
[01:24:11]
 Okay.
 All right. Well, at least your site looks like it's rendering. So I would commit those changes and put the first dose to GitHub.
 So at least you have something rendering all the time or something that can
 render. You never want anything crashing, but it's deployed. [ Pause ] >> Thank you.
 Yeah.
 >> I didn't know the dark reader would do that.
 Wow.
[01:25:16]
 That was very educational.
 >> That's basically overriding the CSS of the science that you visit.
 Okay, let's double, you want to double check if it's properly rendering on GitHub
 or AWS Cloudfront.
 >> It is not. You need to make sure that if it got the new updates, not yet, it's still two days ago.
 It's stinking.
 Interesting. interesting. It didn't commit. So it looks like my deploy script is working correctly.
[01:26:11]
 Let's take a look at it then. All this refractive one more time. Go click on settings and pages.
 No, I mean, there's no commit in here. The last commit is three two
 days ago on the.
 Repository. So, okay, there was not committed here. It's definitely not going to
 the page. Yeah, why is my script not working now? Yeah.
 >> If you want to get a >> If you want to get a
 >> If you want to get a
[01:26:52]
 >> If you want to get a
 >> If you want to get a
 >> If you want to get a
 >> If you want to get a
 >> If you want to get a >> If you want to get a So it's maybe just taking a while. It looks like it should work.
 - It could be. I'll check it again.
 - I'll just refresh.
[01:27:08]
 Yeah, refresh.
 I'll go to the settings page.
 It's a little bit easier to check it from there
 if it's deployed or not.
 - It's not doing it.
 It's clearly not.
 It never takes too long.
[01:27:22]
 It's always much faster than this.
 - Yeah. Okay, I guess that'll do it manually then. It never takes this long. It's always much faster than this.
 Yeah. Okay, I guess that'll do it manually then.
 And see what happens.
 Nothing to commit working to be clean.
 Interesting. It should be able to commit because you're, oh, no, you're rebuilding it, but it doesn't
 it didn't make any changes.
[01:28:13]
 So.
 Yeah, I'm going to have to make a change. After the word welcome, you can put a, okay, you can do that too. [BLANK_AUDIO] [ Pause ]
 >> Okay. So it looks like it's not liking the deployment somewhere.
 Let's look at the message again.
 I think it's still trying to contact not found.
 I think it's still trying to contact local host.
 It could be. >> Thank you.
[01:30:54]
 >> Thank you.
 >> You have already deployed AWS.
 >> Yeah, but not after I rebuilt it again. >> Why would you still have to play with it?
 >> Have to look at the error message.
 That's going to be your biggest clue.
 >> My logic is missing, no.
 Maybe that's only on the sandbox.
[01:31:42]
 It's the front end. You're looking at the back end.
 I was looking at both.
 I thought it was on the front ends,
 but it's possible that that logic doesn't exist in my capstone,
 and it might only be my sandbox.
 No. No.
 That's the sandbox.
[01:32:12]
 That's the issue.
 I know I had that logic where it said that if to check the domain and if the domain is local and that logic, I don't know where it is now it's gone.
 But it was very hard to put their front hands out of the back end.
 I don't remember if it was the front end of the back end, but it said, look at the domain. And then it said, if the domain is this, then do that, if the domain is this,
 that's right. And that was right. And then there was not in the back end.
 Is not in index dot.
 No, it wasn't where is it.
[01:32:51]
 It's in the it's related to the root path.
 So.
 Is it in here?
 Yeah.
 Wait, look at index dot TSXs-x where it calculates the path.
 Yeah, so it must be in the gap of the path.
 Yeah.
[01:33:11]
 But it's not.
 There's your logic, right there.
 No, that's not it.
 There was another whole set of logic somewhere.
 Oh, yeah.
 For reading.
 Yeah, so.
[01:33:24]
 That might be in the back ends. No so that might be in the back end.
 No, that should be in the front end.
 The front end should be deciding.
 So where's that quote of the day component?
 That's the one that's the split.
 That's probably where it was.
 It was in the quote of the day component.
[01:33:40]
 Yeah, it's right here.
 That's what I was looking for.
 Is that the right lambda URL?
 Yeah, all of that is all of those URLs are correct.
 But should they only be in the code of the day or should they be somewhere else as well?
 Like in the get root path.
 the day or should they be somewhere else as well like in the get root path.
[01:34:12]
 That depends on how you want to program it.
 Well I mean what the what the component needs. Get root path right now is is so what is the purpose of get root path?
 That's for the nav bar you need
 to make right so this purpose that you have right here on this file is it's not
 for the nav bar this is for the back end so it's a different I don't have
 anything in the front end except which in get root path, which is here.
 Yeah, so it isn't even, um, does it even get to the point where it renders get root path online 9?
[01:35:08]
 No, it's stopping before it. Okay, so let's let me let's look at the error message one more time in the the tools
 from GitHub I
 Think I close the window
 Let me open it. >> It's just doing a 404.
 >> Main.js.
 >> Yeah.
 So let's for the front end, go back to your VS code.
[01:36:05]
 Let it render something very simple like a hello world.
 So comment, that's the back end.
 Go to the front end.
 >> I was going to see this.
 >> Okay.
 >> No, I was going to see a box.
 I had to switch windows.
[01:36:19]
 >> Yeah. So just comment stuff out so that it can
 just render a simple hello world.
 Let's see if it can even get to that.
 In the get root path?
 No.
 In the home page index HTML.
 I mean index TSX.
[01:36:39]
 Basically just we wanted to render hello world.
 Can it do that?
 So disable everything there and then just render hello world. Can it do that?
 So disable everything there, and then just render hello world.
 Maybe with H1's around it. [no audio]
 And in that case, you don't need quotations.
 Otherwise, it will literally put the quotations.
[01:37:18]
 I mean, I don't care if it's a quotation or not.
 Because it's just a text.
 Let's see if it can do that.
 That should be...
 [no audio] that's easy to do that. That should be actually, let's look at the imports and just Okay.
 Now you just have to wait for it to take the changes.
 Make sure that's it.
[01:38:20]
 Okay.
 Let's go ahead and try it.
 Let's try to render it.
 Let's look at your your ignore file.
 So it can even render hello world. So the problem happens even before that.
 So let's look at get ignore.
 Yeah, you're ignoring the disk folder. You don't want to do that.
[01:39:01]
 It needs, it needs that. Okay, now front end needs the disk folder back, but in
 back end, GitHub can't use a disk folder for the back end, but it needs it for the front end.
 If you're not sure if whether or not you need to This folder and then just remove it from get ignored.
 I mean like from all instances, even your back end.
 If you're not sure. I mean you should only ignore it if you know that you don't need it.
 But if you're just putting it there because you just want to copy a pattern of putting it and get ignored.
 So that was the problem. You're ignoring the disk folder. So you can reactivate everything.
[01:40:01]
 Front end needs the disk folder.
 That's where it deploys from when it comes to GitHub.
 It might be working fine in Cloud Front though,
 'cause it doesn't,
 well, it does use a disk folder too. I'm not going to be able to do that.
 I'm not going to do that.
 I'm not going to do that.
[01:40:59]
 I'm not going to do that.
 I'm not going to do that. I'm not going to do that. I'm going to do that.
 I'm going to do that.
 I'm going to do that.
 I'm going to do that.
 I'm going to do that.
 I'm going to do that.
[01:41:23]
 I'm going to do that.
 I'm going to do that. I'm going to do that. I'm going to do that. I'm going to do that. I'm going to do that. So be very careful with what you're doing with your code.
 If you don't understand what the code is going to do, it's possible to crash your things.
 I mean, like, even with get ignore, you need to understand that you need the disk folder for the front end. But you don't need it. Basically GitHub is just a
 place to share your code. And in this case, you're also using it to render your
 front end. So if it's going to render the front end, it needs the disk folder.
 And in terms of the back end, GitHub cannot run run the backend, so it doesn't need the
[01:42:09]
 disk folder there.
 But one of the assignments requires the disk folder, so I recommend removing the disk
 folder from Gitignore from the front end and the back end.
 Thank you.
 You're welcome. Okay, so let's see, eight minutes left until the next break. Any more questions. Is there Redux all set up?
 Are you in problems with Redux or?
 The assignment requirements for App Engine going going up to App Engine, basically you can
[01:43:30]
 meet the requirements just by integrating sandbox, the sandbox code into your capstone.
 So, for example, the App Engine assignment assignment that just requires just for your front end to connect to the back end app engine. It doesn't require any AI or
 or fancy interface.
 So that one's going to be pretty easy to accomplish because it's all in the sandbox.
 Just need to get it to work in their capstone.
 Okay, so I'll just wait until the next break.
 I'll hang out if anyone has questions.
[01:44:28]
 Third hour is when Chris will do his mini evaluation. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're going to take a break.
 Let's go ahead and do that.
 I'll post the break now. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back for the break.
 Kind of into the third hour.
 I'm just going to post the assignment here and start the breakout rooms.
 Well before I do that, I want to share something useful. So here's notebook LM set up with, you know, the compiled notes and code and transcripts. So if there's any code that you're you're wondering how it might affect your projects, and you're not sure
 about it, you can ask it here. Like for example, is the dist folder required to be in the GitHub repository for the front end.
[02:03:53]
 And ask that question like that.
 So like you're thinking to yourself, like, should I put the disc folder in the getignore file?
 Quick answer is based on the sources.
 Yes, the disc folder is required in the GitHub repository
 for the front end if you want GitHub to render your site.
 So that's correct.
 And it just gives the details about that right there.
[02:04:25]
 And then I can ask the question,
 is it required for the back end?
 So is the this folder required to be
 in the head repository for the back end?
 [
 Does here based on the sources in our conversation history, the
 Disfolder is not required to be in the
[02:04:55]
 GitHub repository for the backend.
 That is correct.
 And it describes you here.
 It's not required, but there is an
 assignment that is is that's the
 App Engine assignment or the App Engine or Capstone App Engine for that
 assignment it requires the just folder to be and it needs to review the
[02:05:19]
 just folder. So even though your back end cannot run in GitHub, therefore the
 disk folder is not necessary to be in the GitHub repository. The capstone
 app engine assignment wants to review the disk folder. So therefore you should enable the
 disk folder in your GitHub repository to fulfill the requirements for that
 capstone app engine assignment.
 Okay, so that's that. So basically, when you've got notebook,
 notebook LM set up with the compiled class notes code
[02:06:12]
 and transcripts, you can ask if
 like how some code will affect your project.
 And I'm gonna start start the break our rooms now.
 And I'll be Chris in the breakout room, the mini evaluation room. [ Writing on Board ] Okay, so I'll need to rename the rooms here.
 Okay, I guess it's not taking.
 So room number three is for the mini evaluations. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so, alright, so the breakout rooms are back.
 Looks like Yuki has a question.
[02:47:07]
 The raw for level three text is not working for notebook LM.
 It's working.
 Maybe you're not copying the correct link.
 So, remember, click on the word raw.
 It'll open up the page that just looks like a text file.
 That's the link that you copy.
 And then that's what you paste into notebook LM and just give notebook LM a few seconds process to file. Okay, break our rooms are back. And we were able to work on the Redux account practice a little bit.
[02:47:53]
 Be sure to mark your attendance.
 You have four minutes to do it.
 Other than that, classes dismissed.
 We're still working on evaluations this week.
 And let's see.
 And there'll be corrections available for week 10 next week.
 I'm going to open up the.
[02:48:36]
 The breakout rooms for 30 minutes to finish the eval for Chris. Okay, it's open. I'll meet you in the breakout room, Chris. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] I was going to say, can you hear me?
 Hello?
 I can hear you, yeah.
 Yeah, basically, that's, you get the point there.
 You get the point for that.
 This is the bigger it is, but it takes more, it's more expensive because.
 Yeah, it takes up more space and more CPU,
[03:19:06]
 and basically that'll be the usage.
 You will get the free usage on App Engine.
 (gavel bangs)
 - I'm setting up my capstone to use,
 like, you know how I have to do the API
 also and the AI and integrating it so that, and with in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image in the image And then that question is answered by the user.
 It push the answer of that question is the image that gets generated.
[03:19:51]
 So it turns into like this one hole, like flow thing of three different actions.
 So you said, did you do that or that's what you want to do?
 And that's what I'm sending up.
 That those, remember how I had to delete this stuff from my AI?
 I think that was what me always been working on
 the API recipe response from the spoon-acular.
 >> Yeah, you can basically, that's called the pipeline.
[03:20:15]
 You go from one API or one AI from another just taking the,
 giving it input, getting that output,
 giving that output to another AI
 and then letting it process that,
 and then you get another output.
 So it's basically a chain,
 and basically you can have like five AI,
[03:20:35]
 AI is line up in a row.
 One gets, and you pass the input.
 You get, you give the input to one AI,
 it provides an output, and you take that output, give it as an input to one AI, it provides an output.
 And you take that output, give it as an input to another AI
 that gives you a different output.
 So that's what you're doing.
[03:20:51]
 You're setting up some kind of pipeline
 with two check points.
 The only thing that I've had some, like a bit of a speed
 bump is like
 just the formatting the responses so that
 just constantly changing the response formats so that the next thing can use it.
 >> Yeah, that's what you need to do.
[03:21:18]
 Format the result or the output so that the next AI can use
 can use it as an input.
 Yeah. That's right.
 Okay, so that completes the mini evaluation.
 It looks like you get all the points here.
 Woo-ya! Awesome.
 Okay, so I'm going to send you.
[03:21:41]
 I still have that level two.
 It'll just take a second I still have that level two. You know, just take a second.
 10 level two.
 I have to talk about TDD with you for level two.
 Level two.
 Any valent level two eval?
 I have still apparently.
[03:21:59]
 Level two or week two or week two.
 We value.
 Yeah.
 My bad.
 Yeah.
 So yeah, you have to you to, you have more than that. You have a few things that are below.
 Yeah, check your check each assignment and make sure each assignment and check each evaluation and make sure they are meeting the requirements.
[03:22:22]
 And if they're not, and if they're closed, make sure you send a message
 to student success team. So back and just not someone.
 Oh, fuck yeah.
 I had to change that because of the,
 all the API's weren't returning,
 they were causing an error because of that change
 of hugging face.
[03:23:01]
 So I just fixed that last night.
 That's why I couldn't resubmit it until then. I needed that point.
 Then this level 9 is a little bit of submission.
 I submitted that didn't I?
 Yeah.
 So two of them.
 Okay.
[03:23:19]
 So that's a no.
 I did submit that.
 So you just corrected this.
 Oh, you just did to dig them out.
 Okay. Okay. I'll submit this today.
 Okay, so I got a contact here about the back, the front end.
 The re-opened front end for a new submission. Is that what?
[03:23:42]
 Is that already done two submissions?
 Yeah. I think you, right, or I think it might have closed on you, you didn't,
 you didn't get a chance to submit the correction, because usually when you submit a correction,
 that you know, you meet the requirements after that, but I think for that one,
 it closed on you before you can submit the correction.
 I think that's funny too, because I finished everything except I went through that,
 fixed everything except for the error page chain from the email token thing because of the
[03:24:13]
 hugging face change. So, if I wasn't able to, I don't want to submit that to what I was done,
 I should just submit it and let it sit there. Should have submit the 7. Let's sit there and make some more sense.
 should submit the 7. Let's sit there and make some more sense. Okay, help.
 Contact you about this and week two.
 Okay. Thanks for your help today.
 You're welcome.
 You're going to be here Monday, right?
[03:24:35]
 Tuesday?
 Yeah. So I'll post some things for Monday for you guys to look at because it's
 presentation week.
 So it's post something different because at because it's presentation week. So it's a post something different
 because usually when it's student collaboration day, I posted a specific slide, but
 this coming Monday since it's presentation week, I'm going to post a different slide that
 will give you a, you know, a head start on the week. Okay, cool. Thanks thanks good luck with your in-laws. Oh yes thank you very much. See you
[03:25:07]
 again. Bye. Bye.

///// FILE: "Level 4/transcripts 2/May 3, 2025 10-36.txt"

Transcript from May 3, 2025

[00:00:00]
 Good morning class. Welcome to Codex Academy level four.
 It's week eight, day five, and the theme of this week is AI or artificial intelligence.
 Today's agenda in the first hour will take attendance, do announcements, review, and talk about some new AI topics. We're going to try to
 finish off our topic from Thursday, second hour, time to practice or catch up,
 third hour, many evaluations or corrections and time to work on assignments.
 Mark your attendance head on over to your code X account.
 If you hear right now mark yourself present. Now time for announcements.
[00:01:07]
 Then we get those loaded up. Okay.
 For the class schedule, there will be a student collaboration day on Thursday, May 8.
 That will be just basically a full day of collaborating.
 But there is still not a day off.
 We're on regular class schedule. The class schedule has been updated with capstone
 finale final evaluations and presentations. So here it is it's it's clearer
 now. So the capstone finale is from May 5 to May 10. Let me just put up a calendar here.
[00:02:25]
 May 25 calendar. Oops.
 Okay, so next week from Monday to Saturday, that is, you know, we'll focus on the capstone finale.
 You know, we'll focus on the Capstone finale.
 I might tell you a few tips
 on how to complete your Capstone, but it will not be required to be in your Capstone.
 This optional, you'll not be tested on it,
 wherever I teach here on this week
[00:03:22]
 and the following weeks, there'll be optional,
 but that will help you to
 they might help your capstone project, you know, look a little bit better or function a little bit better or
 the code may look a little bit, you know, more, more sleek. So I'll teach a few things here, but it's all optional for your capstone.
 Same thing for the other, other weeks. I'll just teach a few tips here and there.
 But the focus is helping you to get your capstones finished.
 Answering your questions.
[00:04:02]
 I'll also do some walkthroughs.
 I'll also do some walkthroughs for this capsule and finale week. Walkthrough of the practices.
 Just to make sure that you understand the practices.
 The practices have been posted here.
 The latest ones.
 Redux sign in practice,
 Redox sign up practice. And there will be a new one today to help you with your
[00:04:33]
 capstone. But I'll walk through these practices.
 Maybe the, I'll start with this one persist and login practice maybe next
 yeah next week I'll walk through this one
 and this one and sign up practice and also the practice that I'll introduce today
 because those will all help you with your capstone.
 And so capstone finale may five to may 10 and final
 evaluations 12 to the 17th.
[00:05:23]
 12 to the 17th final evaluations.
 We're going to focus on getting all your evaluations done.
 Also corrections this week.
 Then presentations 19 to the 24th. So you'll present your capstones to codex staff and students throughout that week.
 And the survey still here in the July cohort.
 If you haven't had a chance to fill it in yet, it's waiting for you.
 The survey right there. Million evaluations, remember it's 60 minutes per submission.
[00:06:32]
 So get your notes online so that you can answer the
 questions in the million evaluations.
 Or I can just say, you know, talk about this, and then you just go from your notes.
 Let your notes guide you.
 Remember to add your mini evaluations so it can be placed in the waiting list and also
 get your on time point. This week, we're still doing the mini evaluations for week 7.
 Today's the last day for that.
[00:07:11]
 I mean, that's the corrections for it.
 Or if it's coming in late.
 That's the last day for that.
 And mini evaluations for this week will close next week on Tuesday.
 Okay, so Chris says he wants to do week seven corrections.
 So we'll these are closed. The one for app engine closes next week on Thursday.
 And the finale is due on Thursday. I'll attack the student success team. if any of the assignments closed on you.
[00:08:08]
 Just let them know which assignment to reopen and what caused you to fall behind.
 Practice problems are posted here. So the ones from this week are these two.
 This one was about converting your sign-in,
 your website converted to Redux.
 This one is adding a feature to sign up.
 Then later today, we're going to talk about adding a
 feature to edit user accounts.
[00:08:56]
 Okay, so permanent is available for mentor meetings. just contact him directly.
 It should show his slack.
 You can even send him a message and say, "Something your calendar currently doesn't look like
 it's working properly."
 So don't stay stuck for a long time.
 If you're stuck for 15 minutes or more more like you can't get your program to run or maybe it's not updating when you deploy the live site it doesn't seem like it's updating.
 Don't be stuck for more than 15 minutes posted in July cohort.
[00:09:41]
 If you find the answer, that's good. Just post the answer in the
 "like" cohort also. But if you don't find the answer, hopefully someone will
 answer you here and make you unstuck or help you to get unstuck. Because it's
 not productive to be stuck. It's more productive to just keep going and going with things that work.
 Notebook LM, let notebook LM AI provide answers based on your class notes, your code and class transcripts.
 And transcripts are available up to week seven, day five. So up to here.
 I just need to post the new transcripts for this week, but being graded, you'll receive an extension.
[00:11:00]
 You'll receive an extension to submit corrections.
 So any of these assignments that haven't been graded yet for you,
 don't worry, you'll receive an extension to submit corrections.
 Okay, so now we're gonna review.
 Okay, so now we're going to review. During the review session, you should already have the notes for it, but if I mentioned
 anything new, make sure you take notes on that.
 And have your microphones ready for many evaluations or any questions you might have.
[00:11:52]
 Okay, now time for review of what we talked about on Thursday.
 Okay, so we had a poll on Thursday and asked, what do you think of the remaining three weeks schedule and there's the week nine, like I just talked about where we focus on
 the capstone finale week 10 final evaluations and week 11 presentations and some of these
 might overlap.
 It's not gonna be purely for like capstone finale
 and this one might not be purely for final evaluations,
 but some of them might, there might be some overlap
[00:12:35]
 how we saw like how some topics I talk about like
 a like, you know, Google, Google Cloud on week seven,
 like, you know, Google, Google Cloud on week seven,
 but some of it, or maybe it was that week six.
 week six, yeah. Week six is a Google Cloud as a theme,
 but then some of it goes into weeks, week seven.
 So there's some overlap.
[00:13:03]
 So there might be some overlap with, you know,
 these things here. Absolutely. Finally, final evaluations and presentations. So I ask
 you guys what do you guys think of that schedule and most of you said it's just right. One said it's not enough time.
 And then what do you think of shortening it to two weeks and just get it over with?
 That would have been finishing by the 17th final evaluations and then presentations.
 And then all of you said that's definitely not enough time too short.
 So I showed that to the code X staff and they said okay,
[00:13:57]
 stick with the three weeks schedule.
 So we're going to do the one where we go up to week 11.
 Okay, so what we talked about was how to convert the AI route.
 Use the post method to securely send unaltered data through an AI route.
 Because when you use the post method,
 let me just,
 so using the post method,
[00:14:37]
 you're able to send data and it's hidden or obstructed.
 So that's what this means.
 But when you send, when you use the get method,
 let me try to type it here.
 When you use the get method, you can see each one clearly.
 You can see-- you will see the--
 like, if they have an email, you'll see their email or you can see their password.
[00:15:08]
 It'll appear inside the, it'll appear inside of the year.
 In the query parameters.
 So we don't, we don't want to use a get method for things that we don't want to expose.
 So we're going to use the post method and obstruct everything with that.
 And the way we did that, let me load it up here, the sandbox.
 I almost loaded. I will slow it.
 Okay, here it is.
[00:16:45]
 In the index TS file, we have an AI route right here that we use to connect to our artificial intelligence, question answering, AI model, change it to post.
 It used to be get just like these, but change it to post
 so that the data can be hidden.
 And the data can remain unaltered
 Because when we send it through to get method
 Remember it gets some like parenthesis
 percent 20's or plus signs that that can interfere
[00:17:22]
 Where is that here
 Here it is. So we update it to the post method and then we use request.body instead of the query.
 So it used to be request.query.
 That's query parameters. three parameters, but request.body, it's supposed to get data from the post method.
 And we tested it with postman and we were able to get data there. Here, I'm going to add this.
 Get the data from the URL encoded. Get URL encoded.
 This one here, URL and here.
[00:18:56]
 URL encoded. So if I sent, oh, my backend is not, the backend server is not running yet.
 So let me just run that really quick.
 And again, run start.
 And I'm going to, I'm going to look at the comments here or the log and it says, run the start to
 command. It used to be renamed build, but since it's connected to the previous
 one, I just renamed it to start to npm run start to. and we can see that the We're going to open or start the server from the job as good debug terminal.
 If you want to be able to stop on break points. So I'm going to send a post request with some URL encoded parameters
[00:20:30]
 here. And then it should stop on the handler. There it is. It stopped there. And we should
 get the data from request body. Here we're restructuring it. and we see the question and the context. If I press [inaudible]
 Oh, there. It's right there. Here.
 John is the answer. So let's see if it works with the longer, as we remember, I tried to send a long one
 with about California and it didn't work.
 So let's see if it works better without all the percent 20s and things like that.
 So let's see if it works with just the first paragraph here.
[00:21:59]
 Gonna put that here.
 There's the first paragraph and the question is what is California? Send it.
 It goes to the back end server.
 The question we can see here is California.
 The context is that one paragraph.
 Let's get the response here. A state in the
 Western United States says to answer, where that was the response. I'm going to try to put in the thing here, so you can figure it out.
[00:23:13]
 Okay, put in the hole for just that the whole section about California, the first section. All right.
 So we see the question again.
 What is California and the context?
 Okay, this one. That's not everything.
 Okay, why is it it look right?
 It's a claw way to the side.
 Doesn't look like it's enough.
[00:23:41]
 It looks like it shouldn't be more.
 It looks like it should be more. Let's see what let me see it from here.
 Maybe it doesn't send it with doesn't look complete. Okay, so it's not it's just not it's just not displaying the whole
 thing. Let's see, let's see if we can get the answer. Yeah, it's the same thing. It
 did get the answer this time. A state in the Western United States.
 Let me remove this so we can compare and see.
 Let me just remove the context.
[00:24:38]
 I'll put a different context.
 My name is Roll Azar, but I'm going to ask it what is California.
 So we can see a difference here.
 I'll stop this debugger so it can just flow in.
 Oops.
 What happened to you?
 Okay, I'm going to send this.
[00:25:16]
 The question was what is California and then it answered role is our, okay. I'm going to put in the whole context here. Copy this. It contains the context
 to one that has the answer, put the whole context, send it, and it properly answers it. Okay, so when we, when we try to use a get method and we put all the context inside here,
 it didn't work.
 When we try to put it all through the query parameters, it didn't work.
 It just said California was 20.
 But when we send the data using the post method,
 we didn't need to include any query parameters here.
[00:26:14]
 Instead, it sent it through URL and coded parameters,
 which were hidden.
 And because the data is unaltered,
 it was able to answer the question properly.
 It was in the get method right here.
 When you include data in the URL parameters,
 it puts percent 20 and plus signs,
[00:26:40]
 it messes up the data.
 So the post use the post method to send data securely
 and to send it an altered.
 Okay, so we press that body
 is where we get the new data from not the query parameters,
 not request.query.
 Okay, so front and AI interface. So we were able to get started on the front end,
[00:27:28]
 coding the interface.
 Let me load that.
 We were coding the interface where we contact the AI from the front end from the website.
 We didn't quite finish, but this is the point where we got. I'm going to load this here.
 So it doesn't have to be these input elements.
 We just basically created a form and use whatever input elements that makes sense to you.
 I wanted to use different input elements. One for a single line.
[00:28:45]
 One for a multi-line.
 That's what these are.
 Input is usually for single-line text.
 And then text areas for multi-line.
 We created a React component called AI.
 That's this one here.
 And there's where we return the XML.
[00:29:14]
 I mean, the JSX or TSX.
 Basically the HTML looking stuff here.
 Basically, the HTML looking stuff here. And it's going to render a form that takes a question in a context, but use the name
 attribute, like this one here.
 Use the name attribute that will give access to the values through the form elements.
 So here's that question input. We set the name as question and here's the
 one for the context. And the way that it looks is right here.
[00:30:09]
 It takes a question and has a context.
 This one is multi-line.
 The text area is multi-line.
 You can put multiple lines.
 But usually when you do this and you press enter, it sends it.
 So that's a difference, right?
 This one is the input element.
[00:30:37]
 If you press enter, it usually sends it.
 But here, if you press enter, it goes to the new line.
 Multiline input. goes to the new line. Multi-line input.
 This is the text box.
 I mean text area.
 Okay, so the next one, this is where we got into the form elements.
 So the form, usually we mark the target,
[00:31:20]
 event that target as the form. But we saw that the elements, if we get to the elements, it contains the things that we're looking for.
 So, if we store elements into form,
 We have direct access to the question and the context from the form. See, here's the form.
 There's the form and then directly we go and get the question.
 Actually the value of the question.
 If we just go up to question here, we get the element, which is the input element.
 But that's not what we want. We want the value that's stored in it.
[00:32:11]
 That's the actual question or the string.
 Same thing with context. If we just go up to here, dot notation up to there.
 We get the text area element.
 But we don't want that. The thing we're looking for is the value that's contained inside. That's a multi-line string.
 So we're going to store that in the context and the question. We're going to get the strings store them in there.
 The way that looks in the code.
 that looks in the code. It's like this.
[00:32:55]
 So there's a form.
 We handle submit.
 We handle the submit event.
 So when the submit button is pressed, it runs this function.
 It's a callback. Notice there's no parentheses.
 We give it a callback.
 So the form will run the function when it wants you.
[00:33:14]
 If we put parentheses here, then it will run the function right away.
 We don't want to do that.
 We want to let the form run the function.
 So we give the form the function and it runs it when the submit button is pressed.
 And it also gives it the event parameter or object.
 And here we extract the form up to the elements so that we can access it by name. So this is by name here. We access them by name.
 Form.question form.context. Form.question form.context.
[00:34:08]
 Form.questionform.context. It's easier to find in that way.
 Instead of having to search through their index
 for their position in the form.
 See, if we try to get their position in the form. If we try to get their position in the form,
 it's a little bit tougher to get their position.
 So let's try it.
 So there's the event, the event came in.
[00:34:47]
 Let's look at the form here for event.
 There's the event.
 The target is here.
 Actually, we're not going to see it.
 It's not going to appear here. Maybe, we're not going to see it. It's not going to appear here.
 Maybe, right, let's see.
 There's target.
[00:35:09]
 And now it has the index or different positions.
 I have a question here.
 There's that break input is on position two.
 And then the text area is on position six.
 So instead of having to access them by their position,
 we just access them by name,
 if you include their name here.
[00:35:33]
 A lot easier.
 We just did it the other way so that you get familiar with,
 you know, arrays and accessing them.
 You get your practice.
 Okay, so that's it for that one.
 And the question in context to the module.
 I'll get answer and then save the response in the local variable.
[00:36:09]
 So that's what we did here.
 How, sending the question in the context to get answer and then we save the response in a variable. Then we did some TDD.
 But and TDD where we started to design the get answer module. So let me show you that.
 So here's the test file where we started to design it.
 And here are some things that it should do.
 So to get answer module, we're going to describe the
 get answer module and it should return for it returns a response when given a
[00:37:12]
 question in the context. It returns a correct answer when the given when it's
 given a question in context. And it returns a response when the answer is unknown.
 We were just in the middle of coding this.
 And here it is.
 We started coding it.
 There's a get answer module.
 Takes in a user question and a user context.
[00:37:44]
 Using different variable names to show you
 that it doesn't have to match what you give it, right?
 Here, we're giving it a question in the context.
 We don't have to match exactly what's coming in.
 Let me import this now.
 Just going to import this.
 Okay, so if I mouse over here, it says user question and user context, right?
[00:38:15]
 Well, we don't need to match those names. That's just, that's just to help us understand what it's asking for.
 But we can use any variable name we want. We can. Because all it wants is the value that's coming in.
 So this question is going to be a string.
 Yeah, it says question.
 Yeah, that's a variable, but it's actually just the string that's going to go through.
 Not the name question and not the name context.
 Those are not going through.
[00:38:42]
 It's actual string that's going through and it's going to come through here. So the string is going to get stored in this parameter now.
 It comes in as the name question comes out as a name user question.
 Okay, so just think of it like aliases.
 So, just think of it like aliases. You're free to use it, whatever variable names you want.
 So, don't get confused.
 That's why I purposely use different variable names here.
 The thing that we want to do is, we want to form some data.
[00:39:19]
 As an object.
 The here's data is an object.
 It has two properties. It has a question and a context. As an object, the data is an object.
 It has two properties.
 It has a question in the context.
 The question is stored in this variable
 and the context is stored in this variable.
[00:39:39]
 And they both those variables came through here.
 And then the way to send it is use axios post method instead of the get method.
 Here, you give it the URL.
 In this case, we're going to send into our AI in the backend server.
 And then we're going to send the data as a second parameter.
 Here's the data. Then this is where we stopped.
 So now time for artificial intelligence, the new stuff. Actually, let me just go here.
[00:40:36]
 So this is where we stopped and we saw it didn't receive the data.
 Like we would send this, then we put a debugger here,
 debugger here, let's watch it get to this point, and I'll put a debugger in
 the backend route right here, and watch it go all the way through.
 Okay, so here it is. We're going to go in, extract the question and the context.
 The question is, what's my name? The context is, my name is Rolesar, gonna send it to get answer.
 Here it is, it's generating the URL to visit. That's the AI route, generating the data to send.
[00:41:35]
 That's an object.
 Then it's gonna send it with Axios.
 Here it is, it's sent in with Axios, and now it has come into the handler.
 And let's see what happens when we try to get the data from request.body.
 The question shows undefined and the context shows undefined.
 So that's the output we sent.
 We sent a question and we sent in context, but for some reason it didn't receive it.
[00:42:10]
 So we're gonna we're gonna fix that.
 This is how to fix it.
 JSON parameters.
 So axios accepts data as an object, right? That was the second parameter
 of Axios. And it uses the post method to send data as a JSON string. So Express needs to be configured to receive JSON parameters.
 Let's copy this and paste it. I'm going to share my screen now.
 This is going to go into the AI notes. But you can also save it and express.
[00:43:27]
 I'm going to see, I'm going to add a note here.
 And I'm going to copy this to express any output of code right here.
 I'm going to copy this for now.
 Place it into the code sample.
 And I'm going to just put some highlights here.
 Okay, so that looks good.
 I'll also copy this into Express, because they're related.
[00:45:00]
 Okay, that's enough for Express, I'll close that back. I just pasted it into Express. The Express notes.
 express notes.
 Okay, so we use a data to confirm that data is not being transmitted from front end to back end. So that we did that already.
 Now to the back end index.ts file, let's open that up.
 Back end index.s file right here.
 Add app dot use JSON.
 So I'm going to add it right here. App dot use.
[00:45:41]
 And JSON.
 Let's give it a pop up of what to import.
 You want the one from Express.
 And you see there's a TypeScript error if you don't put the parentheses.
 You need to activate it from inside there.
 So what this will do is allows data to be received from Axios to JSON parameters. Okay, that's the only change we made.
 We just added this.
[00:46:35]
 So if this works, we should receive data from the front end.
 Now let me finish this part here. How did this reset?
 Okay.
 It still didn't receive its data.
 It's not going to receive anything.
 That was from the previous run through.
 Now we're going to use the debugger to confirm that JSON parameters are being received.
[00:47:07]
 Okay, so let's try that again.
 Submit this.
 Okay, so the submit event came in.
 We're going to extract the question in context.
 There's a question, what's my name?
 The context is my name is Rolozar.
 We're going to pass it into get answer right here.
[00:47:35]
 And we're going to pass the data right there.
 Remember, this is data is an object, but objects cannot be sent as objects when you're transmitting it to the internet, through the internet, or from server to server, or from browser to backend server.
 So even though you see an object here,
 actually else is going to send it as a JSON string.
 It's going to make this look like a string
 and then send it as a string to the backend server.
 That's why it's called a JSON string.
[00:48:30]
 So that's why this one says here,
 XCL six steps data as an object.
 Right, it's a data as an object right here.
 And it uses the post method to send data as a JSON string.
 and uses the post method to send data as a JSON string.
 So it's going to basically it's going to convert this, this kind of stringify this object,
 turn it into a string,
[00:48:55]
 and then send it through the internet
 because it cannot send it directly as an object.
 It has to send it as a string.
 Okay, so I'll press play.
 Backend receives it. This is the back end handler.
 If everything works fine.
 This back end handler is automatically taking that JSON string
[00:49:18]
 and turning it into an object.
 It does the work for us.
 We don't have to do any converting.
 So let's see.
 Okay, so the question did come in this time.
 What's my name and in the context?
 My name is Roll Azar.
[00:49:36]
 Okay, so it all went through this time.
 The JSON string part is like, it's all invisible to you.
 You don't know that it's being,
 you don't directly know that it's being turned into a JSON string.
 It just looks like you're sending data as an object here.
 It looks like you're receiving data as an object here.
 But in between, there's a JSON string conversion happening. That's
[00:50:07]
 why it's called, that's why it's that run through here.
 Where is it?
 Here.
 Gonna generate the answer. The answer we can see it here.
 Answer is roll is our.
 Gonna send it.
 Then you put it here.
[00:50:43]
 There's a debugger there anyways.
 Actually, what we want to do is look at it from get an answer.
 As Play, it should receive this response.
 We see the response now.
 Response.data. So response is an object. It has these
 properties. The data property has the answer that we want. So I'm going to
 collect this. So response.data, that's the one that has the answer that we want. So I'm going to basically just sort of alias it right here.
[00:51:29]
 The answer is response.data.
 So that's what we want to return.
 We want to return the answer from here.
 I don't need this debugger anymore.
 I can put this debugger right there instead.
 Okay, so we're gonna, that's what we observed.
 Can you see what the next slide looks like?
[00:52:02]
 We observed that the data came through. And let's see here data came through.
 And we're going to try to send that answer back. So let's do that really quick.
 To admit this,
 okay, so it comes in here.
 It's going to send the data to the back end here, back end receives it, generates the
 answer, and then it's going to send it back to the front end receives the answer right here through the get answer module and here it is back in the component. We're back in the component is to render this answer.
 But before we render that answer,
[00:53:28]
 let's just fix this TypeScript error here.
 So it looks like we're returning a string.
 Let's make sure it's a string coming in here.
 'Cause I said any.
 If I go like this and I mouse over it,
 answer is gonna be at any data type.
 We could be more specific and just say,
[00:53:51]
 okay, we know it's gonna come in as a string.
 And so we see a data type error here.
 It says "type string" is not a valid async function return type, and
 ES5 because it does not refer to a promise compatible constructor value.
 What does that mean?
 It means whenever you make a function async, it causes the function to return a promise.
 If it's returning a promise and we're
[00:54:30]
 trying to say, hey, it's returning a string,
 then there's a conflict.
 We should say that it's returning a promise
 and that promise contains a string.
 And that that fixes the error.
 The TypeScript error. It still runs, but TypeScript would just say, "Hey, something doesn't
 look right." So we have all these tests. They're not going to run. I mean, they're
[00:55:11]
 So we have all these tests. They're not going to run. I mean, they're not going to pass yet because we didn't fix everything.
 Let me run the tests.
 I'll stop the debugger to. So I can receive the responses without stopping.
 I'm going to run the test here in the front end.
 NPM test.
 I already have it set up to run just this one function.
 Let's see if it passed.
[00:55:48]
 It says it.Only.
 So it will just run that a test.
 I mean, that one passed.
 Let's try to run all three of them.
 See what happens.
 Two past one failed.
 We can get this to work.
[00:56:13]
 But we'll take a break and then let's see if you can get it to work.
 So the one that failed is the one that says Okay, so what happened here?
 So this context is supposed to be what's my name.
 And then the context is he is an instructor at Codex Academy.
 So I'll let you guys try to fix this during the break. We'll take a break right now.
 Basically, we wanted to say, sorry, I don't know.
 I'm going to share my screen for the break timer. And I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break and we're going to continue our discussion on artificial intelligence.
[01:08:08]
 So, we were at that point where one of the tests was failing and we saw that it depends
 on whether the context contains the answer or not.
 So that brings us to the next slide.
 Answer probability score.
 The AI model provides the probability that the answer is correct.
 So probability is a score from 0 to 1 in which one means the AI is searching of the answer. And zero means, you know, the opposite, which is it doesn't know the answer at all.
 And then there's, you know, everything in between.
[01:08:57]
 So copy this into the notes.
 I paste it into the notes now and I'll show other slide.
 Let me just double check.
 I don't know.
 This was the previous one. Ai probability score.
 And there's some sample code there.
 So, we're going to de-structure the answer and score from the response.
[01:10:07]
 And then we'll check if the score is high enough to send the answer.
 Okay, so this is how we're going to do this.
 Okay, let me finish this code sample. is how we're going to do this.
 Okay, let me finish this code sample.
 So that we're going to get a response from the AI.
 And that one, that response object,
 we can destructure it into answer and the score. But we should also declare these
[01:10:51]
 better builds right there. Remember coding goes from right to left. From the
 response, there's one response object. We're going to destructure it into two values, the score
 and the answer.
 That's how you have to look at it.
 If you try to read it the other way, you might get confused.
 You need to read it from right to left.
 Okay, so that's how that one looks.
[01:11:27]
 And then we can go to the code here.
 The AI response happens in the backend.
 I mean, that's where that's the first part. We get the actual answer in the backend right here through get answer.
 Right, is this which workspaces this.
 In this.
 Yeah, that's the correct one.
 Okay, and we are correctly data typing it right here. Asserting the data type.
[01:12:23]
 So this response is an object.
 It should have a property called answer,
 but it should also have a property called score
 that we can destructure out of it.
 And we even see it when it-- when I start typing,
 it pops up here.
 It already knows that it should have a score.
[01:12:43]
 But only if you put this, the correct
 data type, and this data type, you can see it from here. This AI model, it returns.
 That's what this blue arrow means. I might know. Oh, yeah. Yeah. That's what it just
 means right here. It returns a promise.
 That's why we use a wait.
 And that promise contains a question answering output.
 Or in a array, but in this case,
[01:13:18]
 it's just we're just getting one.
 So we're just gonna use this one here.
 We're just getting one answer, not multiple answers.
 Okay, so we're going to pause the debugger to stop there.
 We're going to use the tests to get there. In the front end,
 right here, the front end, it was just this one that was failing.
 Returns response when the answer is unknown.
[01:13:51]
 Okay, so I wanted to say, sorry, I don't know.
 I don't want to have like a empty response.
 So it's up to you how you want to design it, but I'm designing it like this.
 I want to just get a, get the string already that I want to have.
 Like if someone asks a question here and it doesn't know the answer, I don't want it
 to just like be blank.
 I want to have some kind of feedback.
[01:14:18]
 So I'm in the front end right here in the front end.
 I'm saying, okay, just when I when they ask a question and it's not the answer is not there.
 Okay, provide some feedback already.
 Don't just say nothing.
 Provide the feedback.
 So I'm just going to run this one test. So it stopped in the backend, it went from the front end to the backend where it's getting And here there's the response object.
 And the response object has an answer and it has a probability score of 0.3.
[01:15:18]
 So the closer to it is to zero, the less certain it is.
 The closer it is to one, the more certain it is. So this one is pretty, a pretty low score.
 So we de-structured the answer in the score from the response.
 Check if the score is high enough.
 I should add here, use a condition.
 Use a condition to customize the response. Use a condition to customize. Okay, so the score is going to be, it's going to destructure it out.
 Right now it hasn't destructured yet.
[01:16:18]
 I'm going to destructure it now.
 Okay, so destructure the answer and the structure the score remember the question is
 The question is
 What's my name and the context is he is an instructor at Codex Academy?
 So this AI says okay, I'm gonna give the answer a score of point three
 So that's a pretty low score.
 So we can now use a condition.
[01:16:52]
 We don't need to always send the answer because in this case, the answer is not correct.
 And we didn't have tests here.
 We didn't finish the test.
 So this is going to finish the test now.
 So this is the backend test.
 Actually, it's going to tie into the backend test also.
 So let's do that too.
[01:17:27]
 Let's see which one is that.
 Doesn't respond with an answer if it's not in the context.
 So this is the case right here. So if the answer is not in the context, we want it to return undefined.
 Well, this is how I'm designing it right here. So it will either return to answer, string,
 or it's going to return undefined. This is the back end test that I'm looking at.
 We didn't finish these because I left these up to you, but this is going to answer it now.
 I'm going to start finishing these backend tests.
[01:18:16]
 So how do we get it to return undefined if the answer is not here. Basically just use a score. If the score is less than, I'll just say,
 0.5. So 50%, correct, or 50% wrong. So if it's less than 50% certain, I'm just going to just return undefined.
 Or I can do this.
 I can put let here and then.
 Then I'm going to change the "answer" to undefined. Then at the end it returns the "answer".
 So this one just modifies the "answer" if the score is low. We can, so I'm going to start switching to the back end test.
 Let me just let the front end finish here. Let the front end finish this part.
[01:19:39]
 Okay, finish, I think. Yeah, it finished. It took too long.
 Okay, I'm switching to the back end and I'm gonna run the test from there.
 Because this back end has a test
 for the context.
 If the answer is in the context.
 So it doesn't respond with an answer if it's not in the context. So it doesn't respond with an answer if it's not in the context.
 Okay, so I'm going to run this test now from the back end.
[01:20:21]
 With a debugger and PM test.
 Let's see, is it running the get answer test?
 Yeah.
 Okay, so this one's testing that what happens when the context doesn't contain the answer.
 So let's see what happens.
 The answer it says here is Amazon rainforest
 and it thinks it has this probability score of 0.12
[01:20:57]
 that the answer is correct.
 So it's low.
 So the score is less than 0.5.
 So it should set the answer to undefined,
 because right now it is Amazon Rainforest.
 If you want to see what the question was,
 which name is also used to describe the Amazon Rainforest
[01:21:17]
 in English.
 The context is, the Amazon Rainforest
 is the most tropical rainforest. So it's basically describing the Amazon Rainforest is the most tropical rainforest.
 So it's basically describing the Amazon rainforest,
 but this question is asking what's another name for that Amazon rainforest.
 So the answer is not in the context.
 The AI says, "Okay, I'm only 12% certain that this is the correct score.
[01:21:47]
 I mean, this is the correct answer.
 So we're going to, instead of using this answer, Amazon Rainforest,
 we're going to use an empty answer.
 The answer is now undefined.
 And it's going to go into the test and it's going to we expect the
 response to be undefined, which is correct.
 It failed because it took too long. So I'm going to rerun that test.
[01:22:30]
 Okay, it's going to run through it. And now the test passes.
 We can check that test from the front end now. So here's the front end test. Another context. So the question is what's my name?
 And here's the context. He is an instructor. So when the answer is not in the context,
 we wanted to reply with, sorry, I don't know.
 So we're gonna run that test and see how it comes in.
 How the answer comes in.
 So this is the backend. It received the, it went from the front end to the backend.
[01:23:25]
 It received, it went from the front end to the backend.
 The question was, what's my name?
 And there's the context which didn't contain the answer. Answer is instructor at Codex Academy.
 AI is giving it a score of 0.3.
 Core is too low.
 So we're going to change the answer to undefined.
 Basically, return nothing.
[01:24:04]
 Then going back to the front end, it timed out.
 Took too long.
 That's okay.
 We just want to see the, we wanted to get to get answer.
 So let's get in there put a
 debugger here let's see what the response we get from we should get a
 response now so I'll let it stop there let's try that again try that test
[01:24:39]
 again NPM test and PM test.
 Okay, so it didn't stop on this part right here.
 So I'll just put a debugger.
 So let's try that again.
 NPM test. I'm in the front end.
 Testing in the debugger here.
 You wanted to stop on the debugger, you need to run it from the JavaScript debugger terminal
[01:26:07]
 npm test. Okay, so here we asked the backend server for a response. The contain the answer. The answer is empty. So, in this case, if it doesn't have an answer, we wanted to say, I don't know, instead
 of having just being an empty answer. So, how do we check that?
 If not answer, basically.
 So if this means if there's no answer,
 change the answer to sorry, I don't know.
 And since we're going to change the value, there we go, just like that.
 We can watch it happen again.
[01:27:07]
 Okay. Let's refresh this or no, let's play through it.
 Run the test.
 Okay. So we're going to get a response from the back end server, extract the answer
 from it. We see that the answer is nothing. So that means if there's no answer, change
 the answer to, I don't know. And then we're going to go and return that answer.
 I'll put a debugger here.
 So let's see if it comes back the way we want it. We're going to remove these
[01:28:07]
 debuggers. Now running one more time. Okay, so we're gonna now call the get answer module.
 We're giving it a question.
 What's my name and the context is he is an instructor.
 So the answer is not in here.
 The answer that we get back is, sorry, I don't know.
 So we expect that to be the answer right here.
 It shouldn't pass now. We won't pass because
[01:28:49]
 they got timed out. So if I remove these, then it should be fine.
 So, what happened? Oh.
 Okay.
 So, it was expected with a period, but it got one with a comma.
 So, I just have to decide which one that I wanted to be.
 The one with a period.
 We're going to go with what's written in the test.
[01:29:24]
 Or maybe, now I'll change the test to a comma that we
 it's fine. It's better with a comma there.
 Okay, so it should pass now.
 Okay, so, please front end tests. They're all passing now.
 You'll see. NPM test. Okay, they're all passing now.
 We're getting the answers that we want. Now we can start
 rendering it. But we use the answer. We use the probability score to modify our
[01:30:35]
 answer.
 Okay, the next one, this, did I put the, okay, yeah, there's already the code sample there. Final one is rendering it.
 We need to render that answer.
 And so I'm going to show you how to do that with Redux.
 And there's a code sample there.
 So we're going to, so with Redux, we have to edit three files.
 The state variables file.
[01:31:19]
 Let me change this here. We need to edit three files, the state variables file, state selectors and state I'm going to also copy this and Redux. There's going to be a code sample. So, state variables dot TS going
 to highlight that. Stateselectors dot TS. Stateset.ts, because these are all key words.
 There's these, there are these hooks you select and use dispatch.
 There's action.
 Okay.
 Let's see what was that code sample.
 I guess I'm going to copy it here.
[01:32:56]
 But I'm going to put this in Redux too. [ Pause ]
 It's useful, maybe it's not, but at least it's a practical demonstration.
 I'll put here a note like,
 see,
 AI got MD or details.
 This is a text I want to show.
 I'll put square brackets around it and then in parentheses, I'll put a link to the file.
[01:33:56]
 So this Redux will have a link to the AI file if I want to see the context a little
 bit in more detail.
 Okay, so this is the front end code.
 We're done with it all the tests. We got, we have three tests and they're passing.
 And since they pass, we're going to say we're done with get answers.ts.
 Now we can focus on rendering the answer right here.
 right here.
[01:34:50]
 Okay, so if I submit this, tops on the debugger,
 we have an answer here.
 We just need to render it.
 So we're going to do that with Redux.
 So we're going to do that with Redux. So in state variables.ts add a categorized state variable for the answer.
 So I guess I'll just call it answer.
 Date variables.
[01:35:38]
 Let's see, where do I want to put this?
 Click put it in the home page, or make it available all throughout the
 website.
 I think I want it to be available all throughout the website.
 So global answer starts with nothing.
 Starts as the empty string.
 So that's what I'm going to do.
[01:36:15]
 So I put it in the global section, just by name, and the real name of the state variable is answer.
 Now we're going to code the selector and setter.
 So let's code the selector first.
 Okay, so there's already one here.
 I'm just going to copy that.
 Paste it. paste it, select global answer is what we want to do.
 And we're going to go into the structure, the global answer from the state variables, and
[01:37:00]
 then return that.
 Okay, so that's what this is doing.
 Notice it's a pattern here.
 Whenever it's a pattern like this,
 you can program it to automatically do this for you.
 Instead of manually copying and pasting,
 you can program JavaScript to do this for you
[01:37:21]
 or a TypeScript.
 But I'll let you try, that something that's for you to figure out.
 Basically, you will have a function, you create a function to create these functions.
 So that's something you can figure out when, after you've graduated level four,
 whenever you see patterns like this,
 you can take a creative function that takes in some,
 basically take a creative function that takes in
[01:37:52]
 your state variables and then it outputs
 all of these selectors for you.
 You can do that.
 I'll probably, I'll show you maybe that you can do that,
 but I don't want to confuse you with the code,
 but maybe in the coming days, I'll show you that you can't do that.
 Let's see what's next.
[01:38:26]
 State centers.
 So we did, we already finished the selector.
 Now we're going to finish the selector for it.
 I don't have anything for GoBools.
 I'm going to make a new section for the global. So we want to set,
 so this is our group of setters. I just copied and pasted. We want to set
 global answer.
[01:39:04]
 Okay, so it's not a Boolean. It's a string. So I'm going to change this one to
 Spring. I didn't make it yet. So this action is, this data type is going to say that
 the action will contain a payload, which is a string. We expect that payload to
 contain a string. I'm just gonna copy and paste this one. Instead of Boolean,
 this will be action string and that payload will be a string. And that fixes that data type. Okay, so again, we can see here
 action string is an object that has a payload, which is a string. And it also has
 a type, which is a string. This type is always a string.
[01:40:07]
 I can put a debugger here so we can watch it all happen.
 So I set those. Now add, use, I would need to add use selector.
 And then you remove this using that. You select there, then give it the selector, which is select, global
 answer. We're going to use that function. We have to give it the callback or the
 function, it will run it. And then that's going to be the answer. So we can watch that happen.
 What a debugger there.
 I think we can start with that.
[01:41:33]
 Refresh this.
 Okay, so the website is reloading now.
 It's blank.
 Here it's creating the state variables.
 We see that there's no global answer right now.
 It's going to try to select the answer from state variables.
 Here it is.
[01:41:57]
 It's going to select it by de-structuring the state object.
 The state object has all these properties. We just want this one, the global answer.
 That global answer right now is empty string.
 So it's going to return that.
 And, uh,
 gonna return it. And then we capture it here.
 There it is, the empty string.
[01:42:31]
 So we properly selected it.
 And here it is trying to select it again.
 That's because the state variable, the states are getting updated. So this one is checking if anything changed.
 Remember, the state object has hon hounded mount and message.
 So it got changed.
 It changed some things here.
 So AI is checking, okay,
[01:43:14]
 did you change the selector?
 It's checking it a few times.
 Just make sure that the selector then.
 I mean, does it change the answer?
 Making sure that the answer was unchanged that's why we saw that it just kept on selecting it a few
 times. I'll let you see that one more time here we're creating a state
 variables which includes these other state variables. We're gonna select the
[01:43:39]
 answer here it is it's selecting but then I'll press play it's here again
 that's because it's checking again if the answer changed because did not
 also change and the message also changed okay so it saw that nothing happened
 and it's something else changed so it's gonna check
 okay I want to make sure the answer didn't change so here it's gonna see that
 the answer has not changed so there's nothing to render nothing new to render
 okay so we got it selected we got the answer selected right now.
[01:44:26]
 So this part's done. Now we want to change that answer with use dispatch. Use dispatch.
 That's going to give us access to the dispatcher.
 access to the dispatcher. We need to declare this. So now there's our access to the dispatcher. [ Pause ]
 Dispatch in action to set the value of the state variable. [ Pause ]
 Okay, so we need to dispatch an action from here.
 Because we get the answer that we want.
 So we need to dispatch an action from here. Because we get the answer that we want.
[01:45:27]
 We need to dispatch an action.
 So let's create an action.
 How do you create an action?
 You get it from the set object.
 Set object is automatically created for us.
 It's automatically created for us, depending on what we put in these files. We just said at these files and then the set object will be created for us.
 And we choose which one do we want to set. We want to set global answer. It's not going to pop up here in the list.
[01:46:07]
 It shows the selector here, but we don't want the selector.
 That's the wrong thing.
 We don't want the selector.
 We want to select the global answer.
 State variable.
 This doesn't pop up there.
 And then we put in here the value that we want to set it to.
[01:46:31]
 That gives us an action.
 That returns the action.
 And then we can dispatch that action.
 Oops, not dispatch event.
 What happened here? Oh, I put this handler outside of the component.
 It needs access to the dispatch here, so I need to bring it in. I'm going to cut this out, now I'll bring it in.
 Before everything was working outside of the component, but now we need access to something
[01:47:19]
 inside of the component, so I'm just going to put it right here.
 Okay, so this will bring bring us the things that we need to need to see.
 Let me take this debugger off. And I'll take this debugger off.
 Take this one off. Actually, I'll keep the one for the answer
 so we can see it come in.
 So right now the answer is empty string, which is fine.
 Website loads.
[01:48:02]
 I'm going to submit this.
 Actually, I think I'll put a debugger here.
 Right here.
 Okay, so I'm going to submit this question and context.
 Okay, so here it gets intercepted by the handler, handle submit.
 We're going to get the answer.
 We have an answer.
[01:48:38]
 The answer is roll is our.
 We're going to create an action.
 Think of an action like a like an invoice, or like an order,
 like a command, like a request that we're going to send.
 So it forms an action object, and then we're going to give it, hey, this batch here, take
 this and make it happen. Take this action object, or take this piece of paper, take this and make it happen. Take this action object or take this piece of paper
 take this invoice, make it happen. So this this factor is going to run, take it to the
[01:49:12]
 reducer, to change the action. So here the reducer, the reducer gets it or state setters. The new value is right here, the new value.
 So it's going to set it right here, it's going to state.
 And now the AI component is made aware and now extracted the answer.
 We just need to render it.
 I'll render it right here.
 Put the answer in here.
 Press play.
[01:50:03]
 OK, so it started over.
 OK, I'm going to try it again.
 Submit this.
 Okay, we're going to receive an answer.
 Create the invoice.
 That's the action object.
 We're going to give it to this batcher and tell him, "Okay, make this happen."
[01:50:28]
 This batcher gives it to the reducer or state setters where they do the actual work
 and changing the value.
 So the new value is roll-as-art or the answer or the global answer. The component gets the
 answer here and it's going to render it down here. But we don't see the answer
 yet down there. I'll press play and now we see it, if I scroll down, right down there.
 And that should do it.
 That one, we render the answer.
[01:51:16]
 We did everything.
 So for the sample code, I'm going to put this right here where we get the action and dispatch it.
 And I'll copy that to Redux to it.
 It looks like that.
 Wrong one.
 Okay.
 So that's what we got the, we got Redux to render the answer.
[01:52:12]
 Let's try it one more time without the debuggers.
 Um, actually what I'm going to do is let me just
 enter my screen again.
 We're going to put a default answer so that I don't have to scroll down every time.
 So I'm going to go back to state variables here instead of empty answer output the answer will appear here. We don't remove these de-builders now.
 Okay, so now I can scroll down and it says the answer will appear here.
 If I suppress the mid.
[01:53:18]
 Oops, there's a de-bodyber again.
 I can equal these.
 There it says, "roll those are." If I change it to John,
 there it is, the answer is John.
 And then if I put something that doesn't contain the answer
 like the sky is blue
 it says sorry I don't know." Everything is working well.
[01:54:15]
 So if you've gotten up to this point, congratulations.
 You've integrated a full stack AI front and interface
 with back end server and you can make it look fancy use bootstrap to style
 the AI interface actually let me go back here and just copy this into the
 notes interface. Actually let me go back here and just copy this into the notes.
 Just to just to have it there. Okay, there it is in the notes.
 All right, so you can do something like this, just using bootstrap.
[01:55:41]
 This is interface where you can someone can type in a question and then they click on
 "Ask" and then the answer will appear down here.
 Here's the, this is a bootstrap icon of a robot and this is the answer.
 So the question was, what's this website about?
 The answer is a place to buy the coolest stuff
 The context is hidden inside this button if you click this button it'll pop up the context
 So
[01:56:16]
 Here are some bootstrap components you can use you can use the grid system
 You can use the grid system to align everything.
 You can use the collapse.
 That's what I use for this context here.
 Collapse, if you click on it, it'll show the context.
 And if you click on it, again, it will hide the context.
 Icon.
[01:56:44]
 This is a bootstrap icon. Remember when you want to use icons, you need
 to add the CDN to the index.html file.
 Spacing this is the spacing pattern for margin, for this one, M3,
 set the margin all around to 3.
 Or MT means set the top margin to 3.
 MB means set the bottom margin.
 MY means set the top and the bottom margin to 3.
[01:57:24]
 And then these are the ones for the padding, similar pattern.
 Borders, you can set a border,
 but you have to use the border class.
 And then you can change the color of the border,
 like this border primary or whatever. These are just
 examples, right? You can use primary, secondary, black, white,
 just check the colors. You can make them around it. So these are around it
[01:57:57]
 instead of square borders. And you also see the borders, right? You see,
 if you don't put border, then you will not see a border.
 Colors.
 So BG is like the background.
 You can change the background right here.
 It's BG info, but you can also do BG primary or whatever.
 It makes sense.
[01:58:22]
 You can change the color of the text. So
 this one here is white. So this would be text light or text white. This one,
 this icon counts as text. This one here is text warning for yellow. You can set the size of things. So Fs, that's font size 3. So the
 icons count as font. So you can change the font size of an icon to increase the size
 of the icon. You can change the width. So there's a there's a width class. You can put 50%
 75% 100%. So that's what this one means 50% of the screen. Or 50% of the box that it's in.
 or 50% of the box that it's in.
[01:59:28]
 Yeah, this one is 50% of the box that it's in. This one, VW, 50% of the total viewport
 or total browser box size or display.
 50% of the total display, but if you're,
 you could have a display, but then you could have a small box.
 This one, W50, will be 50% of that box.
 So I'm not going to demonstrate those today. I just want to, like, a quick, I just wanted to show you a quick,
 cheat sheet of things that you can use to design the interface.
[02:00:11]
 Part of the fun is just experimenting with these.
 But this is the actual interface I used with just these bootstrap concepts.
 And you know know HTML. Next week, I can show you how to do this.
 So I'm going to copy this into the notes. [ Pause ]
 Then you just replace these loaded points. Okay, so this looks good.
 Let me see how this looks.
 These are all codes.
[02:01:19]
 So I'm gonna just highlight everything individually.
 See if it looks right.
 Yep, that looks good.
 These are all examples.
 You don't need to use like primary here.
 You can put secondary or info or success.
 And these numbers are also just examples.
[02:02:15]
 You can look these up in the bootstrap website.
 So the only new ones here are collapse. I think
 everything else you might have known about already. You should know about everything. Maybe you might not have used these before, but
 you can. Just use any class, but don't spend too long designing. You should
 spend most of your time meeting the requirements of your assignments.
 After you've met the requirements of your assignments, then you can spend more time designing or on the visuals like this.
 Okay, so we're going to use the remaining amount of time just for the practice here for the second hour. Redux account practice.
[02:03:15]
 So use Redux to toggle access to the account page where users can edit their information.
 So let's say a user logs in.
 Now you can have a account page for them
 where they see all their information and they can edit it.
 So create an account component within account button and a modal.
 So this is following the pattern that we had before where everything's in the navbar.
 If you click on the sign in, it pops up a modal.
[02:03:52]
 Well, if you see the account button, if you click on account, it'll pop up a modal with
 their account information.
 Let the modal contain an editable form, except for email.
 Don't let the email be editable.
 You can look that up how to make something not editable in React.
 Do that with the account information.
 Actually,
[02:04:33]
 let's see here.
 Well, yeah, I just get something working.
 It's fine. Because you might also have to check if they're password,
 if they, if they enter their password properly.
 their password if they if they enter their password properly.
 Next, when the account form is submitted, update the database. So you should already know how to do that, how to update a database when their information has been submitted.
 has been submitted. This was part of one of the assignments, the credit assignments, and then, you're going to add something to that account component, account component. So add a delete component with a delete button and a modal. So not only will
[02:05:31]
 you give them the option to edit their information or update their information. You also
 give them an option to delete their account. So you can have a button for that and another model pop up for that.
 So let that model confirm with a password that the account should be deleted. So if they click on the delete button, it should set up a should show a model saying,
 "Are you sure you wanted to delete?" And if so, enter your password.
 Are you sure you want to delete? And if so, enter your password.
 So if it's confirmed, delete the account and automatically log out the user.
 So hopefully, you'll put some like a check saying,
[02:06:28]
 it's going to check if they entered the password properly. So if it's a correct password, then it's going to go ahead and delete the account and log out the user.
 But if they put the wrong password, it's going to say, sorry, that's the wrong password.
 We're going to do that check within this line here, within this line number six.
 So if the account was deleted, you need to set the proper Redux state to show when the user is not logged in.
 So basically, you're going to just set the Redux state.
 After they deleted account, you just say, okay, they're not logged in. Maybe you have a state in Redux saying, is logged in, you'll just said it's a false or something.
 And it's just going to go from there.
[02:07:13]
 So let the account component select the Redux state.
 So in that account component, you're going to use the selector.
 The view if the person is logged in or not.
 So when the redirect state shows the user is logged in,
 so the account component.
 And when the redirect state shows the user is logged out,
 either account component.
[02:07:44]
 Actually, I think I might change this.
 This would be in the sign in area.
 Let the sign in area check the lock-in status.
 And then the sign in area will decide to show the account component or not.
 So this is what that's about. Just let me know if you have any questions.
 And I'm going to use the remainder of the second hour to look over this practice or to
 answer any questions that you might have. So I'll just leave the breakout rooms open for
[02:08:23]
 15 minutes. The remainder of this hour.
 Oh wait, actually.
 Or did I go over?
 The go over. We're going to after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break. And now you have time to work on anything,
 but here's the assignment.
 The one that's due on Thursday, the capstone finale.
 I know that number one here is properly designed and programmed the
[02:19:44]
 front end to the provide an overall good user experience. I know that number one here is properly designed program the
 front end to the provide an overall good user experience.
 I know it's on number one, but I think you should work on this
 last because like if you're especially if you're working on design
 sometimes it can you can get stuff designing things for a long time, like get it perfectly positioned and doing research on how I could, how can I make it this color or position regards to styling, it might take a while
 to figure that out.
 So what I would do is focus on the other requirements,
[02:20:33]
 like the programming requirements,
 like converting the routes to the post method,
 adding artificial intelligence to the back end server, creating the front end interface for the AI and assign a feature, add account feature, persistent login, persistent expiration,
 the programming stuff, focus on those as fast as you can, get those done as fast as you can,
 so that you can spend more time designing later on.
 Because when your program is working functionally, all you have to do is worry about the design.
 Okay, so we're going to start the breakout rooms now. Again, prioritize your tasks,
[02:21:47]
 Prioritize your tasks, focus on the programming requirements. Don't get stuck on designing or trying to add new things, just stick to the requirements.
 Because the requirements are what will get you points. And you need those points to complete this level.
 So Chris said he wanted to do corrections for the mini evaluations. The breakout rooms will be open for, let's see here, 28 minutes.
 Chris, I'll meet you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. So the, um, all right. So the break items are back.
 And in conclusion, we learned about JSON parameters, you know, using axios sending data through axios, the hidden data.
 hidden data using JSON parameters. We also set up the Express backend server
 to accept the JSON parameters.
[02:51:11]
 And then we use Redux for the question answering AI.
 We created an action, we dispatched it,
 we rendered the answer.
 We also set up state setters, state variables and state selectors for it.
 And then Redux account practice was introduced.
 If you haven't taken attendance, make sure you head on over to your codecs account and
 properly mark your attendance. You have one minute to do that.
[02:51:47]
 Now, doesn't that pass as dismissed. That's today's lesson on AI. I'll continue. I'll open the Many evaluations for Chris.
 Okay, the breakout rooms are open. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 And I see some of you still here, any questions or anyone want to do corrections evaluations. [ Pause ]
 Okay, well you guys have a good weekend.
 [ Pause ] But feel free to stick around. >> Okay, good weekend. But feel free to stick around here. If you want to ask, I mean,
 if anyone else is here, you can ask questions or work together. It's up to you. Have a good weekend.

///// FILE: "Level 4/transcripts 2/May 5, 2025 20-22.txt"

Transcript from May 5, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 This is week nine day one. And the theme of this week is the capstone finale where we won't be
 learning anything new, but we will be going over through things that we learned in the past. Maybe practicing things, practicing ways to apply them,
 especially to the capstone.
 And I can also answer questions about your capstone,
 so it can start making it presentable.
 So today's agenda.
[00:00:47]
 Take attendance to announce
 minutes review and practice second
 hour. I think maybe the practice will go into the second hour and also have a chance to answer questions.
 And on third hour, I can do corrections for
 many evaluations week eight.
 And also time to work for work on
 capstone assignments.
[00:01:23]
 And pass assignments.
 So now is the time to take attendance.
 You can head on over to your code X account and mark your attendance accordingly. And now time for announcements.
 Let me just load that up for you guys. [no audio]
 Okay, so this Thursday is student collaboration day.
 So you'll have a whole task time to work together and work on your capstone and whatever other assignments you have. As usual, the class schedule in the class schedule, the dates are posted here.
 Capstone finale is this week, next week, final evaluations, the last week focused on presentations.
[00:03:01]
 Possibly, you know, some of the evaluations are not done yet, they'll fall into this category also.
 The Codex staff, they are expecting presentations. ready for your presentations by Tuesday of this week.
 Shouldn't be that hard view.
 In your presentation, you talk about your website.
 What it does, like the features it has, you should also talk about the technologies that you're using, like React, HTML, CSS,
 and all those things.
 You should all know those by heart by now, any, all of that stuff.
[00:03:54]
 You should know by heart.
 I guess the hardest part is if the students have any questions and it's regarding your code,
 you should be able to explain your code.
 Or if the instructor's have any questions and I don't know, maybe they'll try to ask you a question.
 Okay, what, what, what is Redux? How do you use it? And you might need to show your code
 because maybe that concept of Redux might interest them.
 because maybe that concept of Redux might interest them.
[00:04:29]
 Or maybe your AI might interest them. What are you using for your AI and how did you do that?
 I might get interested and ask you how you coded it.
 That would be the hardest part, I think. but everything else, you should note my heart.
 And you can, we'll take the opportunity that last week, or presentation week, we can practice
 with each other. And then you can practice. Well, hopefully everyone will be all caught up and finished by presentation week.
 So you'll be, you know, fully comfortable presenting to Codex staff.
 But Monday, for sure, we'll get a chance to practice presenting to each other so that when you go and present to other people, it'll be easier. At least you had a tougher audience than, you know, codec staff or other codec students.
[00:05:48]
 Because we know the code and,
 and we know you well, so we might try to stump you.
 But other people, like,
 when you pronounce other people, they'll probably be nicer than we are.
 So the survey, survey is still available.
 And one, get a chance to fill in that survey from Lillian.
 If not, then you know, just take a few minutes and do that.
[00:06:22]
 We need evaluations. Remember there's a 16 minute time limit for many evaluations.
 I don't have the many evaluation ready for this week yet.
 So when I posted, I posted by tonight, basically I'll let you guys know tomorrow with that many evaluation week 9 is and then LPD1 Wednesday.
 But as usual, you need to, when you see that many evaluation, because that's the mid button to be placed on the waiting list and to qualify for the on time point.
 The assignments and all the assignments will be graded this week.
 Okay, so we can go into the mini evaluation, the final evaluations week like fully prepared.
 But you'll still receive extensions and might not be. fully prepared.
[00:07:31]
 You'll still receive extensions. It might not be as long as before,
 because we're in crunch side, but we'll see how that goes. But you'll receive an extension when your assignment is created.
 Let's see, App Engine. So that this capstone app engine closes Thursday before class for late credit.
 Capstone finale is due Thursday.
 This Thursday before class.
 As usual contact the student success team.
 They want to help you succeed.
[00:08:07]
 So any of these are closed,
 which are ready to take them and get points on them, let them know.
 And we'll see what they can do for you.
 Practice problems are all posted here.
 Some of these practice problems you'll need to know for your capstone finality.
 I've updated the descriptions and this capstone finality to point you towards practice
 problems that will help you.
[00:08:44]
 Like for this one here, properly
 create a branch in, basically this one's about creating a user friendly
 experience of signing up. So see Redux sign up practice for ideas so we'd have sign up practices this one here that's posted
 on the sign also sign up practice
 But in regards to using readups to sign in and sign out, you can get ideas from readups to sign in practice.
 But what I just talked about is sign up practice.
 That's about new people creating new accounts.
[00:09:51]
 This one right here, create a user-friendly experience of editing account
 information. So you can get ideas from readouts to account practice.
 That's this one here.
 Also posted here by user friendly.
 I mean like a some kind of interface.
 Some kind of interface that they can use to edit their account information.
 That's front end stuff. So front end stuff using bootstrap,
[00:10:35]
 HTML, CSS, event handlers, like handle submit. Those are we learned those from like up to
 level 3. So that that user friendly part. You learn that the front end stuff up to
 level 3. You knew everything you knew you had to know to create the interface by the end of level 3.
 Same thing here, user friendly experience.
 We're signing up, user friendly experience for anything that are count.
 Basically, these are, there's our ideas for using a button and a model to pop up that page.
 When you can do it in another way, like you have a full page
[00:11:31]
 dedicated for signing up, or maybe a full page instead of a
 model for editing account information.
 So to you how you want to do that. Whatever fits the design of your website.
 I think it's more interesting if you could make it a modal.
 Like the ideas here.
 And another one for adding persistent login.
 That's listed here in this practice persistent login practice which is
[00:12:08]
 also here week six
 how to make the login how to keep someone logged in even if they reload their
 page or refresh their page that's what this is about. And we should be somewhat
 familiar with using local storage and JSON. We use this before. We use
 local storage in level three for redirecting. At least I showed you that the tools that you used
 may depend it on local storage.
 Expiring login. So you can get ideas from expiring persistence practice.
[00:13:05]
 You have this practice called "Prist" This is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is with expiring persistent practices here.
 Right there.
 So I need to update that link.
 Okay, so that's what I how I've updated these capstone requirements, basically provided good links to the practices,
 but I will be walking through these practices when they at a time.
 Hopefully, you can push forward and get ahead of me when I start doing the walkthrough
 from these practices. Today I'm going to do the walkthrough for this one here, Redux sign-in practice.
[00:14:09]
 You guys should have implemented this already, but if you haven't, can you show
 me how to do that? I'm going to walk through it today. And that's the capstone.
 And practice problems.
 And so again, the Hermit is available for mentor meetings.
 Actually I'll be more available for mental meetings this week too.
 So you can also contact me.
 Don't be stuck for more than 15 minutes.
[00:14:58]
 Don't look at this and say to yourself, "How am I going to do do this I don't even know where to start
 don't be stuck on that for 15 minutes get help like how do I even get started on this
 I can get stuck on how to add persistent login and you're just blank
 use cool blank while then just close and select cohort and cohort and get some ideas on how to get started.
 Let's see if there's anything new there. Okay, so you can ask on what this is for.
 This was about changing the Redox variable names.
 Yeah, you can name it anywhere you want.
[00:16:01]
 So basically you're categorizing your B-lux variables by
 name and you wanted to put it on this floor that time. You can even
 categorize them my object property. Instead of a name, I think my name would be
 the easiest, like put the category right, and then put the name of the
 state variable right there.
 But it's also possible to make it an object or home.didmount.
 It's just harder to do that.
[00:16:37]
 If you have an understanding of, if you have a good understanding of objects, you can do that. You can categorize with an object.
 Instead of my name.
 But this is the easiest way.
 So I recommend just doing it my name first.
 Once you have what you feel,
 fulfill all the requirements of your capsule project,
 or like by name like this, with underscore, what you fill the requirements of your
[00:17:13]
 capsule project, then you can start experimenting with other things.
 But right now just focus on the requirements and getting the points.
 Because you don't get extra points for creating them in the object
 notation. You just have to categorize them somehow. It becomes more complicated if you try to do the object way.
 But right now, the way it is with this plate, you don't have to change store.gs in this style.
 But if you do the object way, object notation,
 like if you did the home dot did not,
[00:18:04]
 you'd have to change the store. TS and I won't code to it.
 And I made a new announcement here about the plan for this week.
 So, if you're asking, can you change it to TSX?
 If you do that, if you store empty tags, that means you're trying to say that you want
 to store react elements in your state variables.
 And if you store react elements in your state variables, you're going to get an error.
 So I don't recommend changing it to TSX file, because if you do that, that means you're
[00:18:54]
 going to start using HTML tags.
 And if you start doing that, you're going to get errors.
 And you're not going to get, I mean, you're going to get, you're going to
 miss some points because you'll have some errors in your code.
 So I'm just going to, what I would reply to this is keep them serializable. Serializable non-serialized means things like
 you know like
 these female components, react components. Those are non-serializable.
[00:19:38]
 Things that are serializable, I mean things that are non-serializable,
 reactable complaint and so are never.
 I mean, redots will complain and so are never if it's non serializable.
 Meaning, so serializable means that it can be stringified.
 You can put JSON dot stringify and give it an object and it'll, it'll give you the proper stringify, you know, notation of that. But if you give JSON about stringify and object that cannot
 be stringified, there's, it'll tell you like, this cannot be stringified because there's
 infinite, it's referred, an object is referring to itself. So if it tries to string a client, it's going to be like an infinite string.
[00:20:27]
 That's non-cerealizable. And react components, j-s-x, that's non-cerealizable.
 So you don't want those, because they're going to throw an error.
 So a short answer is, I don't recommend it, because if you go that route, you'll you'll get errors and if you get errors you won't get all the points.
 What I would do is instead of storing JFX in the state variable store place holder a string or an object.
 a string or an object like if you want the story image, maybe you want to store an image tag in a state variable in a Redux state variable. Well, in sort of storing the image tag just store the source, SRC, and then when you see that converted to an image tag in the component.
 So that basically the source would be the placeholder. This is a string.
 When you hold a value from read-out store, convert that string to an actual image tag.
[00:21:44]
 I don't remember which day I discussed how to use placeholders, but I didn't talk about
 it.
 Use a placeholder instead of storing actual JSX. Okay, so it's okay to use notebook lm.
 So help you find things in your class notes, your code and transcripts.
 The transcripts are available up to week 8 day 4.
 So right now is week 9.
 We don't have any recordings for this yet.
[00:22:31]
 But I have everything up to day 4 here.
 Transcered up to day 4 right there.
 I'll try to add this to date. I'll just process it right now.
 And make sure to go through these days in order so that one day is not confusing because
 they're built on each other.
 If you skip the day, you get confused.
 And let's see here.
[00:23:17]
 What else?
 Okay.
 So we're going to review those taught on Saturday, basically we've finished up the concepts, AI concepts
 on Saturday.
 So that's what we'll review.
 But if I think of anything new, make sure you take notes on that.
 Also, I'll give my comments ready.
[00:23:41]
 Just in case you have questions or if you have some really evaluation
 corrections to do.
 Now it's time for review. So we've learned about JSON parameters. So JSON parameters, that's what it says here.
 JSON, axios accepts data as an object and uses the post method to send data as a JSON string.
 Let me pull up the sandbox here to clarify. Okay, so I'm gonna go over my screen now. and where's that park to backstand.
 It's looking a little scary.
 I'm a son of a cat.
[00:25:35]
 I'm a cat.
 I'm a cat. [BLANK_AUDIO]
 So Axios.post started using this method to send data securely.
 And we basically give it a URL to send the data to.
 And we provided the data.
 In this case, the data is an object.
 The objects don't get transmitted to the Internet.
[00:26:14]
 Strings do.
 So this needs to get stringified.
 When an object gets stringified, that's called JSON.
 JavaScript Object Notation. When an object gets unified, that's called JSON.
 JavaScript Object Location. [BLANK_AUDIO] We also see a reference of it and then note right before it.
 And so this will dislike.
 This is the note right before it.
[00:27:15]
 It sends axials.post.
 sends data as a JSON string.
 But, Express needs to be configured to receive JSON drivers. I mean it
 sends it as JSON parameters. It sends the data as JSON parameters so we had to
 add use JSON to the backend so that our server can receive the data. And so let me move back in here.
 Here's the back end and here's the here's the here's Express and here's where we added
 Here's Express and here's where we added app.use.json. So our server can receive JSON parameters.
[00:28:09]
 The way this JSON parameter is sent to the XOs Post-Matic.
 I also have comment here.
 It allows data to be received from XELs, the JSON parameters.
 And when we do that, the data is visible to response request done body.
 So I didn't.
 So we're here.
 So you can go ahead and say something rather than being received.
[00:28:57]
 I should also add here.
 Request done body.
 The same as the other one, where we added this one so we can receive requests from postman.
 And that was also visible if you request that body.
 Right here, request that body.
 You can, um, de-structure this one object into two variables.
 And remember it goes from right to left.
[00:29:45]
 The whole goes from right to left. You do this first. And then in the Okay, so answer probability score.
 So in this slide, we've learned that the AI model provides the probability that the answer is correct.
 So score of 0.
 The score goes from 0 to 1.
 Right there, 0 to 1.
 And 0 is lowest point as the highest.
 0 means absolutely not certain about the answer.
[00:30:41]
 1 means 100% certain about the answer, one means 100% certain about the answer.
 So, 0.5, which is right in the middle,
 that means 50% sure that it's a correct answer.
 And basically, when we get a response from the AI,
 we can structure that and get the answer and the score.
 Here's get answer.
 On line 15 here, we gave the AI model the question and the context.
[00:31:30]
 And game was its response, which is an object.
 You don't see the structure of the object.
 You just see here, oh, here's here's the structure of the object.
 It's an object with one, 2, 3, 4 properties.
 The ones with the question mark are optional properties,
 which may or may not appear.
 May or may not be available for it to be undefined.
[00:31:55]
 Because they're optional.
 So if they're here, then, if they're available,
 they'd be numbers.
 But if they were not available, they'd be numbers. But if they were not available, they'd be undefined.
 But those response should have a score property, which
 is a number.
 And this should have an answer property that's in the street.
[00:32:16]
 So we structured those out right here.
 And then in the city of sleep, right where we have for it. Oops, we're not going to share my screen.
 This is a response object. Here's the AI model.
 We give it the question and the context.
 We get a response from it.
 That response is an object.
 It's right here.
[00:33:00]
 And it's going to be an object that has a score.
 And an answer, but it may or may not have a start or an end.
 That's why there's a question mark here. So we know that we'll receive a score and an answer so we need structure those out.
 And then you check on that score.
 And in this case, we're saying if the score is less than 0.5,
 or basically this means 50% 50% wrong 50% right
 because of the AI is saying the things that the answer that is providing it's 50/50, it's either right or wrong
[00:33:58]
 50% right or 50% wrong
 but in this case we're saying, OK, AI is less than 50%
 certain than--
 don't give the enhancer at all.
 That way, I know that, hey, this is probably
 the longest answer.
 I don't even want to see it.
[00:34:20]
 And then we return the answer.
 So, when we call this function, we can answer function and we give it a, see that this is the handler, right?
 This is the dot handler. And we need structure the question and context
 the request by body or with JSON parameters.
 I'm gonna add your get URL and code and data.
 Or JSON parameters.
 And then we'll move on to the next one. And Jason from this.
[00:35:10]
 And Jason from this.
 And Jason from this.
 And Jason from this.
 And Jason from this.
 And Jason from this. And Jason from this. And Jason from this. is you get them both from request on body from the constructor, the question and context
 out, you can pass these in and you'll either get a correct answer or no answer at
 all and then that's what this hand will be sent to answer. I just remembered it is this one right here.
[00:35:47]
 So we have a student of week.
 Congratulations to you again.
 I'm here today.
 Second time from getting this.
 Good job.
 It feels like it's going to be very easy.
 Before we go.
[00:36:16]
 Yes, good job.
 Everyone's back to this. And so we can look at the next slide.
 And this next slide, this is where we started talking about using Redux.
 In the front end, or rendering the answer.
 Instead of using newState, we're using the Redux system.
 We're creating an actual end dispatch that action.
 The way that looks, right here,
[00:37:18]
 and spin the front end.
 And have a AI component.
 Here, AI.
 Select.
 You'll stay very open using this view selector hook.
 And the selector function that gives us the state variable called answer, which we
 save in the global category. So let's look at the state variables first. So in
[00:37:57]
 the state variables, so this is basically our object containing all our state variables. And we see a category here at the global category.
 This may be about this answer to me available globally.
 Or we want the AI to be available all throughout the website on every page.
 So that's why I put it in the Global category, Global section, and I did it by name.
 Not by object, but it's by name. Stay variable is called answer. I'm going to list and start.
 If I render it, you should expect this.
 The answer will appear here.
[00:38:58]
 You should expect that. So let's see how that works.
 So that's where it is.
 I'm going to try to do it right there.
 So how did you get that to happen.
 So we have to prepare our variable. And this will value here.
 And then in this AI page,
 we use the selector function to pick it out of the state variable.
[00:39:45]
 Select your function here.
 Right there.
 You have to code it.
 The selector function receives a whole state.
 The whole state, almost a very bold.
 And then we just tell it to eternally the variable that you want, which is in case, in this case, in the answer, which is in the global category.
 And then we use just to name the category.
[00:40:30]
 Just like if you have files you're working with files and you want to just know by the file name that they're all from which here those files were created, you can just
 begin each file with the name of 2025 meaning those files were created in 2025.
 So basically you're category those files,
 categorizing those files by name,
 you just put in 2025 in the front,
 and then you put the actual name in the file after that.
 So same thing here, put the category of the front,
[00:41:02]
 then put the name in the very front.
 put the category in the front, then put the name in the variable. So this is the selected function. It picks the variable we want.
 I mean the destructures that out on this 8 object of our list of state variables.
 It picks the little one and then you turn it, and then it returns it,
 but gets stored right here.
 Store it right there.
 So we have an answer,
[00:41:34]
 and then we write that answer right here.
 That's why you see it right here.
 And then answer a little bit here.
 And next up step after that is to submit the form.
 Divide a question and then you can submit the form.
 So you're going to get this working property.
 I need to start the back end. So we're going to have it now.
[00:42:32]
 So what's going to happen here is when I submit the form, it has a question in the context. Right, this form has a question here in the context.
 I'm going to pull the question in the context out using the
 the elements property.
 So there's a question input.
 I don't want the input element. I want the value that's in it or the stream that's
 the same thing with the context. I want the value and the screen that's in it.
 I just want the screen not the actual element. This is the element, this is the value that's contained in it.
[00:43:15]
 Like this box here is the element. I don't want the box, I want the value that's contained inside of it.
 That's the screen.
 So I'm going to submit that answer to the back end.
 I'm going to submit the question and the context of the back end is going to give me an answer.
 And then, I'd have to carry it sort of like an invoice
 or a work order.
 In this case, it's called an action. So this one here basically creates a work order
[00:43:53]
 and then we give that work order to leave a dispatch
 and it goes in, it goes in at least
 so you need to get it done.
 Okay, so this right here is where our setters come from.
 We have state setters.
 Actually, we have a computer.
 Set to another one.
[00:44:21]
 This one is automatically created for us. It has, it knows global answer from our variables here.
 We will go to answer.
 This object here, the set object is automatically created for here, create slice.
 And it creates a business-owned thing, and basically just formats the data in a way that it likes to see it.
 So it provides the actions for us, which we stored as a set variable.
 Set is an object, right?
 Set is an object because we see not notation. Set is an object that has a property called global answer.
[00:45:27]
 The answer is a function.
 But since it's attached to an object,
 global answer is a method.
 We also see parentheses here activating the method.
 So the slice gives us this set object,
 it's weighted for us, which basically we just provide the name of the state
 variable and the value that we want to save in it. That creates a sort of border that Redux calls it an action. And we give
[00:46:10]
 that action to dispatch, which will then give it to state centers. The correct one. So it's
 this one. This is the same same one same name. It's going to give it to this one. this is the same one, same name, it's gonna give it to this one.
 This is where the new value is extracted from the payload,
 and then saved into the state variables.
 And you're actually going from this direction, but if you value against
 storage into a global answer property of the state object,
 this is here.
[00:46:55]
 Relax comes in and gives us a copy of all the states.
 You can see it gives us a copy of all the states.
 State variables. And then we choose which one you want to change.
 By the end of that, we should have a form that we could send and get a response.
 We could submit and get a response because the main thing that's happening here is in the front end.
 We get a question and a context. We send it to a module called "Get Answer."
 The communicator with the back end server is calculated to answer and give the back to us.
[00:47:55]
 We use Redux right here in two lines.
 Just go with that answer and it's debatable.
 And then it comes back in here and sees the update, sees the new
 answer and then it renders it right here right below the form which is rendered right below the So after that, we've successfully integrated a full stack of AI front end interface back-ends. And this part, I can go over this next week, but this one is just to give
 it an idea how you can make sort of a nicer looking interface for the AI. Just using
 bootstrap. And you can put this anywhere on a page on all your pages.
 You can put at the bottom corner of the page.
[00:49:14]
 But these are the components.
 I used to create this.
 I used to create this. And some spacing that you can customize these are margins, these are paddies.
 To create a border like this, a black border around each element.
 You need to use the border class and pick the color.
 In this case, this border black instead of border primary.
 These are wrapping borders right here in that square.
[00:49:52]
 So that's where this one comes in.
 Roundly.
 Others.
 You can change the colors.
 So this one's actually this one's ultim primary.
 This one right here is BG info. So I don't have your ultim primary but they all add that. So you can notice in the colors I'm going to add here a button in the primary.
 So if you don't assign a button color, it's going to be basically almost invisible.
[00:50:39]
 It will be almost invisible.
 This is basically a pump size this one is for this one is for the viewpoint width.
 It looks like the amplitude took up the first hour, so in the second hour, I'm going to do the walkthrough
 or the sign impact.
 Now we're going to take a break and we're just going to make sure we're going to take a break.
 Next slide.
 Next slide, we're going to do the compass.
[00:51:31]
 Now we're going to take a break. [BLANK_AUDIO]
 Okay, I'll see you after the break.
 If you have any questions, feel free to post it to the chat.
 I can use it in half of the break. If you have any questions, feel free to post it in the tab.
 I can use it in half of the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And for this second hour, I'm going to go through this practice here.
 Redox sign-in practice.
[01:02:19]
 I'm going to walk through the solution for this.
 Hopefully you guys had a chance to do this already.
 Basically just converting your sign in to Redux. So use Redux to login and log out the user.
 Then let me just save a copy of this so I can access this from the screen share. Actually, I can access it in the redox notes.
 I have a lot of other things that I have on the right side.
 I'll save this practice in the redox notes. I'm going to read that snopes.
 I have one for practice here.
[01:03:33]
 Okay, I guess I'll save if you're in the practice page. the marks on keywords here in area.
 Sign in.
 Sign in.
 So you buy.
 Sign out. Let's see here without sign out action. Here's this batch of all of the keywords.
 The exact word that we use.
 Set keyword. Wait, why is this same thing but different context?
[01:05:11]
 Okay, so we have the practice here.
 Let's see, do we have any sign in for the front end?
 So we have little sign in right now and we don't have a, and this menu is not even
 Redux, I mean it's not even bootstrap right now.
 That's okay, I'm just, what I'm going to do is I'm going to copy
 my site in and sign out from
 sandbox level 3.
[01:05:55]
 I'm going to go and get that. and then we'll find the first.
 Here's the sandbox level 3.
 And we just make sure I have it here. I'm going to shut down the front end first.
 This one is level 3.
 I don't think we had scripts yet.
 We didn't have scripts. We didn't serve Webpack steps over yet.
 So this one's going to be the Npx Webpack. and see how it looks like it's smooth pack.
[01:07:07]
 And see how it looks like that one is getting going.
 Long forward. [inaaudible ] >> Well done. That's not in sandbox, the material is in the react sandbox.
 [ Inaudible ] [no audio]
 [inaudible]
 Here, and the X1 pack will start.
 We'll start our things back then and the X1 package
 and the X1 package. and I think it really just gives my server
[01:08:47]
 so I think it gives my server
 so I think it gives my server
 so I think we use black server.
 So I have a sign-in and sign-out button there.
 So it's confirmed.
 It looks like it's working.
 I'm just going to copy and paste it from there.
[01:09:36]
 I need a flower to the...
...in the glitz in here. Sign in area.
 Sign in contents and the models sign up for it.
 And you're called copy all of this. [BLANK_AUDIO]
 [BLANK_AUDIO] And here, I'm gonna rename it.
 Thanks, Brooke.
 [BLANK_AUDIO] So the point what I want to do is just get it to render on the nav bar first. And then we'll be outside in here.
[01:11:08]
 And the nav bar.
 Let's go to the start right here. And then we'll start with the front end.
 And some of the corners.
 And then we'll start with the front end. and then you can't use wall handle side in the time.
 Again, we'll get that one. [ Inaudible ] and these AWS authentication on this instance thing here.
 So I'm going to add that to.
 And it's this type here instead of default values.
[01:12:41]
 You can put the type now.
 We can put the type now.
 And it's either an authentication AWS. Yeah, this one will be in here.
 Once I got in these, these are very filled out marking.
 So I need this one,
 I'll have the execution page on the rest,
 and the module is filled there.
[01:13:16]
 I'll do that.
 And you see, clear.
 We made it to text it. I guess I'm missing this, I'm missing this package. I'm working in the sandbox right now.
 So, missing a lot of stuff.
 So, we know how to install those in QM. I'll put that package and I also need the second package here.
 I'm not going to put save depth because I'm directly importing these. What time do you put in the salt?
 So these areas should put up some angle over that. And we are using, I'm using the New York using the Martinburg with mouse a lot of these credentials [no audio]
[01:15:09]
 so I'm going to install that and then install that in the key
 and then you can click on the process that I noticed is from the front end. I'm not going to actually call this.
 In front end is not going to actually do this.
 I don't need this in the front end.
 Again, it's all not buttoned, it's all.
 This is the front end. The front end doesn't actually do the calling of DynamoDB.
 The back end does. I just need to tell the back end of the week. And I'm going to un-assault the end of the week.
[01:16:27]
 And it's called that, you know.
 So it's not going to be called authentication AWS.
 I can rename it, but I know I don't need a key.
 I don't need this client.
 I don't need this request.
 My back end takes care of this.
 The back end here will take a pair of walrus.
[01:17:09]
 So I'm gonna leave this empty. [BLANK_AUDIO] [inaaudible ]
 So I'm expecting a Boolean.
 Is authenticated.
 So I'm expecting a Boolean from authentication AWS.
 So I'm just going to put here in the function signature that I'm expecting a Boolean.
 Even to our calls, I expect it to return a Boolean.
 We're now into the default.
[01:18:43]
 So I figure out.
 I can be a promise. It's going to take a while because it's
 facing here.
 So I need to make it a promise, which
 resolves to infinity like that.
 So there's normal arrows here.
 For now.
[01:19:04]
 arrows here. For now.
 And so I'm going to need to update this. I'm going to move some of these things out. Like there's not like this. and
 and [ Inaudible ] everything I need from the accurate space.
 And we start this movement.
 And then start. So the first part is just, you know, getting that sign in, sign up, what's in.
 So it's, uh, as is without read-ups. that lead up.
 Okay, so I see a sign and what's it? The motor works.
[01:20:58]
 And it looks what is gonna happen.
 I can hold it, I can hold it this time.
 It's relaxing, it's relaxing space.
 So it's going to go from the sign in area.
 sign in area. Actually, so this one,
 it wants instead of quotations with wants, wants,
 numbers to be escaped.
[01:22:01]
 Like that.
 Remember the curly braces escape into JavaScript.
 So all this here is like HTML.
 This curly braces like a window into JavaScript.
 And then like the negative one here is actually JavaScript.
 It looks like a hand-to-sewing it right here.
 And with the piece of the,
[01:22:28]
 it's like looking through a wall of HTML
 and looking through a hole
 and in that hole you see JavaScript.
 So that's how you can use curly braces
 to escape into JavaScript.
 And message. into the atmosphere.
 And this is the very cool.
[01:22:55]
 Well, this is where
 so it's going to go into here.
 And the lines is going to be a lot of and you can utilize it in the raw data type.
 And the side of the tap is supposed to give you an error message.
 It's going to go here.
 Handles side of the tent. It's going to pull out. I'm going to put a name here. That's going to be the other one.
 So I'm going to put a name here.
[01:23:50]
 That's going to be the other one.
 So I'm going to put a name here.
 That's going to be the other one.
 So I'm going to put a name here.
 That's going to put a name here. That's the email I want. And then
 name of this is password. That way I can access it by name from here.
 So I don't need to get inputs anymore.
[01:24:30]
 Then you just
 copy it on this app,
 then update
 class form equals event target and the the
 the
 the
 the
[01:24:58]
 the
 the the directly. You get it from the form that email. It's connected to this right here.
 Email from that email. That's value. Because I don't want the element. Right. I don't
 want this box. I don't want this box. I want the thing that's tagged inside of the box.
 And you can want this not the box. I want the value that's inside of it. So that's where I get that.
 And here, the password, I know I get that. That's from the form, the password.
 Right here, by adding a name to it, I can access it by name.
[01:25:59]
 Password, but I don't want the box. I want the password. That's, I want the string that's inside of it.
 So I put value here. He's going to give me the string that's inside of it. So I put value here.
 It's going to give me the string that's inside of it.
 These are just TypeScript areas.
 It's all in more than for now.
 And then it's going to try to authenticate using authentication in the US.
 So I can add that for me quick.
[01:26:40]
 Basically what it needs to do is contact my back-end server and I need to know the URL of it.
 It's 8CTP.
 the data that I want to send to it is an object that contains email which will be the email that's here. I'll rename this to user email actually. So it's not confusing. So it doesn't look like email email.
 And then this user password. So the data will contain an email and the password. Those will get the values
 to user. And then I need to send those through axios. The post method because I want to hide the data. If I use the get method, it'll expose
 the data in the URL up here. I don't want to expose that. So I want to use the post
 method. Using the post method, I give it the URL and I give it the data to send. I
[01:28:27]
 giving the post method, I give it the URL, and I give it the data to send. I need to await it to is the location route. I don't have that.
 And I have to make that too.
 Authentication.
 Or I can do a mean. I would work this way too.
 And lifting the half of the post.
 And then we'll be wrapped.
 Finding a re-candy or cut out.
[01:29:40]
 And you can start to practice yet.
 I'm just doing set up.
 And just realizing that I'm missing a lot of stuff before you can get started.
 So I'm going to create the route here called green.
 And copy it.
 When one of my other routes just to be quickly and then just change the
 wrapping here and it's not going to do this but it will, it's supposed to get the, it's supposed to get the
[01:30:31]
 email and password.
 We're not going to get that from the request.body.
 That's where S-R-X-Os will send the data to.
 And I'm going be structured out.
 I can set that to the,
 should have another three.
 Oh, working in the long server, it in the other back end server.
[01:31:07]
 Not the Google Cloud server, but the Google Cloud server is for that one is for the AI. [speaking in foreign language] [no audio]
 And I'm going to get the other, back the other server.
 You can see the back end server, put all our cards up. See how you need?
 I have some demos here. So this one is one of my favorite.
 Something called account.
 Get paid for the account.
 And maybe read account this one or one.
[01:32:38]
 And it looks like it.
 Yeah, that's it. The count, I should have the count for it.
 And I should have the wrap for it.
 There it is, the re-wrap, it means a green account.
 Okay, looks good.
 At least I have it back in, done.
 And then start.
[01:33:24]
 I guess I didn't rename the script here. It's the fog in here, but I'm going to.
 I'm going to call you to build on the entire, start to.
 built on the entire start to change. It's going to change slightly.
 Then we've got the little edit this index and the end one
 is like two.
 So it's still showing the old stock, so I'm going to reset this. Okay, so it's showing the old stock. [BLANK_AUDIO]
 After one start, two first, and four.
[01:34:30]
 Take the side, then, you need to stop.
 [BLANK_AUDIO]
 Looks like we didn't catch it. [BLANK_AUDIO]
 [BLANK_AUDIO]
 >> Yep, since the end run starts.
 I think it's gonna work.
 I can just test it.
[01:35:07]
 See what works.
 You can see the work that I want when you see what happens.
 You can open the mail-in password and then match.
 You can watch it when it does when you Watch it. Watch it.
 Oh yeah. It's a little bit rough.
 And that rock is not easy.
 So I'm going to update that.
[01:35:44]
 It was a little rough and then change the team to post.
 Now it's going to send it data a little bit differently.
 So instead of it coming from query,
 it's going to come from body.
 Here I'm now constricting it. It's going to come from body.
 Here, I'm not restructuring it.
 Extracting it one at a time. That's fine to you.
[01:36:17]
 So I think that should be it.
 You can see it from this.
 Also, you can have the air and then this back track and see where you're involved. And you can go here.
 It's going to get into here so I can get in here there.
 See if it gets that far.
 The authentication.
 So, get started.
[01:36:59]
 Go to the URL.
 Data. the URL, data,
 same coming straight.
 Oh, I'm always between false, but I will see
 what kind of response we get.
 (mumbling)
 Except we're not gonna do the response. The whole post-ad
[01:37:27]
 1000 ring.
 Let's see if it even gets into the back in.
 So the problem is to get to the back end.
 Maybe might not find a very good one.
 Then let's start this in volume light. Okay, so we're going to go down and hit some gap.
 Here's the front end.
 It's going to send the request to the back end.
[01:38:49]
 There's the back end of the c-zip.
 Oh, that's the end of the here.
 See what happens.
 It's going to be easier. [inaudible] just on parameters.
 Because it was trying to, this is the part where it crashed right here.
 Since there is no request on body,
 body was undefined, so undefined, this would have a property called email.
[01:39:44]
 When you try to do that, it crashes.
 It's so it crashes on this first line right here,
 because it didn't receive the data.
 Because the back end server is not set up to receive
 JSON parameters yet.
 That's app.use.
 JSON.
[01:40:01]
 And you can see the entire server the same as something wrong there and it's
 color yellow. Basically just this activated. It will basically this function It returns a value that happens.
 I probably won't.
 To make it clear, I probably wouldn't write it like this.
 I would write it like, like, a little bit.
 It gets complicated. It's called middleware and it's a function and it's going to get in turn here.
 Just leave it like this.
[01:40:54]
 This is what you'll see in a documentation.
 I think it'll work now.
 Let me see here.
 See if I can get the values.
 There's the point that I'm sending it.
 But back end, let's see if I can get the values out now.
 I got the email out and I got the password out. Let's see if we can read the account information.
[01:41:26]
 [BLANK_AUDIO]
 [BLANK_AUDIO]
 And I think the client crashes,
 that's why I'm here.
 Instead of continuing, I think the client crashes, that's why I'm here. Instead of continuing, I think the client crashes
 because it won't be in shows.
 Oh, yes, I don't have an E and E file.
[01:41:51]
 I don't think it will be like,
 should have a quality and E file here.
 Okay, it works.
 So, there it is.
 Name password. Okay, so there it is. Then password. So that's good. I have to look at the information coming back.
 So I have a look at the information.
 You're going to get it here. I mean, it's going to send it to the front end right here.
[01:42:19]
 Front end receives it.
 But I'm not using it. So response is a object.
 And it's-- well, we can't see the value of it,
 because I didn't want it.
 But response.data is where that account information will be.
 And then we turn that account. Instead of returning a Boolean here,
 you can return the account.
[01:42:58]
 I don't have that account.
 Data type yet. So I'm going to copy into the modules.
 See, we have a low-count data type in the back end.
 You can use account.ts or copy that. So this is what AWS authenticates AWS and return and return and account.
 If it'll either return an account or undefined. We'll start this one.
 Try it again.
 This is what I call the happy path, where you know where, if you're putting in the correct
[01:44:26]
 values, everything should run fine.
 We're not checking for errors yet.
 We're just checking if everything runs fine, but you put the correct values.
 That's the Happy Path.
 So I put the correct email and the correct password.
 So this is the frontend I'm gonna get a response.
 That response is an object that has a data property
[01:45:00]
 or data object which has email, name, password, and phone.
 So I'm just gonna say that, basically, I'm going to say that data into this account variable.
 So here, we see the account is an object that has an email
 made in password and company.
 That's going to be returned.
 So at least I know everything's working fine
 with that point.
[01:45:27]
 And it was a sine of the tent.
 This one is actually gonna get the finger count.
 Let me see what happens if I put in a long pass rate.
 And just make sure it's coming in as one time.
 Okay, so the gallery response is going to send the email and long passwork.
 It hits a response and the count information I get is at oh it's
 empty stream. It's not account. So that means look at the account, the undefined. In this case, uh,
[01:47:10]
 um,
 that's the ones. Yeah, that's one. So, my account's got to come in, it can't be it, it can't be it, it has an empty string. So that means basically if there's no account, it can't be as empty
 string, I'm just going to change it to undefined.
 So that I can return in the account and unify. Okay.
 And then handle sign in.
 Yeah.
 So this one is going to either, it's going either receive an account. So it should be an account.
[01:48:07]
 You will be a account or be undefined.
 So if there is an account, if there is an account, then I want to close the button, reset
 the inference.
 I don't have a button that's in time.
 I actually want this to be done.
 And it's siding over right here. and then we'll see what we can do.
 So I want to have a side and a tenth
[01:48:52]
 to either return an account
 or return nothing.
 So we'll return and account for undefined.
 Since its basic is going to return the Thomas that contains an account for undefined.
 So in this place, if we want to return this, I don't want to return this.
 I don't want to return this. Yeah. Return account.
 So I'm just going to, this one is going to either return in the count or undefined.
[01:50:07]
 You can see here, the count will be defined next to the promise there.
 So it's not going to return in the error message.
 It's going to return in the count. So if there's an account, I wanted to do something.
 Otherwise, I wanted to set an error message.
 And then this is the thing that I want to do it.
 The error message. I'm not getting this from anywhere. I'm gonna get it from here.
 This goes to the error message.
[01:51:27]
 It's something that there is even over here in here. Let's see how it feels.
 I still haven't even looked on the practice yet.
 I have to make sure everything's running properly before I can start the conversion.
 It's actually bit in the couch. And you'll see it'll get in it.
 Looks like we're back to your weight.
 So, as grown, there should be a sink here.
 And we're in this one.
[01:52:15]
 The reason how I know I need to do that is because I see here a count is a promise.
 Because that's supposed to be a promise. I expect an actual account to come here that's why I need to wait back.
 Try that again. Next, we'll be back in. This is the process. The process in the previous information.
 We've seen the per count comes in as a date.
 That bit of information here.
 The amount of count.
 So it's going to be on-signing.
[01:53:01]
 What is on-signing right here is basically converts
 and there's this right there and converts it to the sign up, but it
 also closes. It's a close
 the model. So these are the things I forgot to do. I need to click on the toes butt tip and I need to reset the inputs.
 It does an account. I guess I can do that for you.
 I can do that for you.
 So I don't have to worry about it.
[01:53:58]
 Or I can move it from here.
 I'm going to come here so it's here. I'm going to pop in this.
 So it needs a close button and input.
 So I need to extract that out of your things.
 Actually, since I'm doing all the extraction
 in the event from this file,
 I'm going to use what we're doing there.
[01:54:30]
 I'm going to use the file.
 Since I'm extracting that, you can do the event.
 So I'm going to need a... [no audio]
 [inaudible]
 I'm putting the air in this using the front.
 The front is either side and the side and the model
 so I can delete that in here.
[01:55:07]
 What I do want to pose, and we step the things here.
 So, where's that pose button coming from? and you can put it straight and easy way to fix that.
 Now you can put it from the effect for the name.
 I should have direct access to it.
 So close button is going to be for that close button.
 I'm not close. I've formed that button for that same name.
 Put here.
[01:56:13]
 I could have put a button.
 I don't want the value because I want the actual button.
 Right, I want this actual button right here.
 So I can click on it.
 I want it to not click inputs.
 Input is the form.
 So actually, I have the left hand.
[01:56:47]
 So, it's a good place.
 You can see here, it depends on that target.
 There, now all our variables are defined.
 This one's from the OK. This is an x-ray curve.
 So at least before we go to the break, let's make sure this is working.
 So it's going to be authentication.
 I think you learn that this pipeline.
[01:57:33]
 So we'll get the app account information.
 I think it already closed.
 I think it already closed. I think it already closed.
 I think it already closed.
 Okay, it closed everything now. It closed everything.
 So let's see that again.
 Going back to handle the sign and it should get into this part.
[01:58:04]
 Oh, I think it's a signup.
 Then you'll be requested.
 Okay, so it has an account.
 It found an account.
 So if you found an account, it found an account.
 So if we found an account, if it's true fee, it's going to go into here.
 And it does, so it's going to click on the close button.
[01:58:34]
 And it's going to reset the inputs.
 We're not going to see that right away.
 I can only see the effect of the right away.
 If there's a catlifer patient that's going to run the on-side inflection that
 was passed to it, we're going to change this. We don't want to do that anymore.
 We're just mentioning with Redux, we're just going to store
 this account information into Redux, and then all the components have access to it.
[01:59:14]
 So let's be able to sign it.
 Then we'll start over here and now put a wrong password.
 We should get an error message instead.
 And then put the error message in the password. So it took a whole time to fix our sign in.
 So basically you saw me integrate the sign in from level 3 into the sandbox.
 Basically you can do the same thing with your capstone.
 We're going to take a break here.
[02:00:16]
 And then even get a chance to touch this practice yet.
 Trying to get it working.
 Just go sign in as is. try to get it working as is.
 Without the new desktop.
 So it looks like it's already.
 It's going to be a sign in part.
 We're going to take a break now.
[02:00:37]
 Once you have after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so we're back from the break.
 And so during this third hour of class, you have an opportunity to work on your latest
 assignment, which is the capstone finale.
 You already know about this.
 Since I didn't get a chance to finish the walkthrough,
 I can go through it right now and finish it up.
 Or I can just take this opportunity
[02:11:37]
 to answer any questions you might have about your capstone.
 your capstone. Any questions or should I just continue with the walkthrough here? You have a question? You posted it on July cohort. Yeah Okay
 Gonna share my screen here
 Says you're trying to use a class for
 Non-serial serialized states instead of a component
 But you keep getting this error. Yeah, if you're using a class,
 those classes are non serializable also.
[02:12:37]
 So let me see what you're trying to save.
 Yeah, there's a class there.
 You're making an object from the class
 So what and are you trying to save this class into a state?
 So what you're doing into a Redux state variable this pass object. Yeah
 classes that I keep getting a error
 You get an error.
[02:13:09]
 Yeah, classes and objects. This one stores an object.
 Objects are not JSX.
 I mean, JSX looks like, you know, like tags like this.
 So you can render strings. And you can render JSX looks like, you know, like tags like this. You can render strings and you can render JSX like these tags, but
 you can't render objects unless this is supposed to be a string right
 here.
 Description.
[02:13:39]
 No, those are properties of an object, the link card content object.
 Yeah, and there's these are properties,
 but they also contain values.
 Oh, yeah, the description.
 Yeah, suppose to be strings.
 So this one should render link card content.
 Okay, so this is the, this is the class.
[02:14:06]
 Yeah, and the link content is there.
 Okay. Yeah, and I see here that you're,
 yeah, you're going to re render or you want this class
 to store JSX in the property called current content.
 store JSX in the property called card content.
 No, I want the class to render depending on what position I put in the parameter.
 Render, it'll change.
[02:14:35]
 Oh, yeah, right here.
 Yeah.
 It'll actually have.
 OK, yeah, it'll render it'll render something.
 It's basically what
 your story is, is J-S-X into the card content property, right here, right? This
 dot card content, so this is what this is, right, your card content. You're gonna
[02:14:59]
 store this into here, depending on what the position is given to the when you create a link card
 here you're choosing position 0 you can render the link card link card dot card content. So in your code, you should be rendering card
 content, then card one dot card content. You should be able to render that in
 your return statement of your componenthome link card then replacing it with that. Yeah, yeah, so this is I see what you're doing. So
 you're storing home link card one as your placeholder. Yeah. Wait, okay, so this is your
 state variable then. This is your state variable. And then you're gonna
 replace, since it's the placeholder, you're gonna be facing what the
[02:16:33]
 actual value that you want. It's gonna be that. And then if you want to render
 something, it's gonna be link card one card content. That's the be that and then if you want to render something it's gonna be link card one card content
 That's the one that's containing the JSS
 What I need to change the state variable to link card one card content as well that
 No
 No, you can just leave it as hard one.
 The reason why you don't want to, your state variable becomes harder to manage when it
[02:17:15]
 has like, dot notation in it.
 So it's good. Just have this placeholder here.
 And then what you could do,
 what you could do is,
 let me see here. next time. I get a new air right now.
 This is how this is another way you can do it.
 And you do it from here, potentially.
[02:17:55]
 I have a very few modules. modules J-cell [no audio] It looks like this. Actually, we're meeting with the JES.
 I just got the mark.
 Okay, so it looks like this.
 I would change it to...
 something like
 the
 car
[02:19:20]
 car car one equals to the power of the object.
 Now we have to work here.
 Now you don't need to put any documentation there.
 Let me see what I'm doing here. This is where I store the object, but then this is where
 I store the actual content that can be rendered. So you can't be not getting, so you need to start a debugger.
 If you can't read this property here, maybe something is happening.
 Maybe something is happening in a code where, where, uh, card content is not being saved. So put a debugger on this line right here.
[02:20:32]
 See if the card content is actually getting saved into there. You could also put a debugger on this line right there.
 So we'll actually this line.
 So you can see with the kind of
 link card object to get that.
 And see with values exploring.
 Okay.
 Any other questions? Okay, and the other question.
[02:21:07]
 Yeah, you see the debugger?
 Make sure you're getting your values are coming in properly.
 So I'm going to just continue with the practice here.
 But feel free to interrupt me if you have a different question.
 Just raise your hand and I'll hear it otherwise I'm just going to
 if I don't hear anything I might just keep going anymore. But I'm going to continue with
 this. Redux, assign and practice. I mean I think you guys already had the sign in on your
[02:21:58]
 capstone, but you saw how I was able to integrate the sign in into the sandbox. At least it's you know practice for you guys to see how
 you've integrated things from scratch. Not completely from scratch because we had the components and So now, I have the side in area.
 I wonder if the sign out works properly.
 Let's see what happens if I click on sign out.
 I know this part works properly.
 It's properly signed up right there.
 Let me just fix this because it's only one night of code for this if statement.
[02:22:56]
 So I don't need to coat block from this either.
 It will not be able to coat blocks.
 I'm going to start over because I'm going made change.
 Can't see if I can sign out. I'm sure you want to sign up.
 OK.
 Looks like the sign out is working properly.
 So, can I see if I can sign back in,
[02:23:47]
 yeah, I can sign in and sign out.
 All right, now that convert this to redox, the notes,
 so you should have this a working sign in already in your caps,
 and you probably don't have to go from where I just want to.
 Getting it working from scratch almost.
 So for the redox store, create a state variable,
 selector and set it for the login status.
[02:24:27]
 That's the front end. [inaudible] workspace here. It was everything I needed. So the Redux, how do I add a new state variable?
 That's with the save variable file. I'm going to save it in the account. And I'll say that account globally. Since that's what a... that's the information I'm getting back.
 I'm getting some account... some kind of account.
 And the initial value will be undefined.
 And this value will be undefined. You let them view and have it account for the beat undefined.
 I created a state variable. Now I need to create a selector for it.
 That's going to be in the selected file.
[02:25:56]
 I see here select golden to the quantity, select global answer. I'm just going to copy this one and change it for the global account.
 And I need to get the global account out of the state. Next, I need to add a setter. So the login set is basically, I'm not storing
 the two or halls, I'm just basically storing the account. If I have the login status, basically, I'm not storing a tool or false. I'm just basically storing the account.
 Because if I have the account information,
 I know that they're logged in.
 If I don't have the account information,
 I know that nobody's logged in.
[02:26:57]
 So basically, I'm going to store the account.
 You can have a different approach in this corridor, you can use this way in this
 corridor.
 You can also answer, so this is the center.
 Just going to copy that and change it for the account.
 The payload here is gonna be different. I'm not, the payload is not going to be a string.
 It's gonna be an account. I need to make a new, um, you actually
[02:28:02]
 So the action account is going to be an object that has a payload which is an account or it's going to be in the bind.
 So I need to fix this. One volt account.
 There.
 I'm set.
 I created the Steam variable.
 Global account.
 Basically, the category is global.
[02:28:39]
 The state variable is called account.
 Initial value is in the client.
 The way it's selected from the state objects,
 in this case the state object.
 And this is the whole thing.
 The way it is selected is the selector.
 Basically pull it out on the state object
[02:29:03]
 and then return it.
 basically pull it out on the state object and then return it.
 And then the state center.
 It gets the whole state object and it gets the action.
 The payload of the action contains the mean value, which is supposed to be on the in account for the fine.
 And then we're going to say that move value in the state variable.
 So I hit this part next one. Let'll let the side and area before it. Select the redox state
[02:29:47]
 regarding the login status. Sign in area now. I'm done with this. So here I was using a I'm going to be there for now.
 So the account, what is the size inside from the right side of the design.
 Here is the selected.
 I want to get the account information.
 You select there. And I want to select the new local account.
 Then what that will be available on our pages.
 I might say when I'm younger, in which case I have two remaining options.
[02:31:13]
 So, I'm going to get the account, state variable, and the story here, but I need to be better. I'm not going to change the value, so I'm going to
 repair it as a constant. So, if there's an account, I know there's fine here. I can change this now. I'm not going to use this anymore as the condition.
 I would use that I can listen now using account.
 I guess I'll start from the top here. I can use this anymore. Let's comment that out. I'm going to update. It's not going to monitor that anymore.
 I'm going to come on into that anymore. It's going to monitor our count now.
 If there's an account that means I'm signed in,
 if there is no account, it means I'm not signed in.
[02:32:47]
 Let me say anything. [no audio]
 And so, the thing that controls this condition is the account. If there's, that means basically they're signed in. If there's an account, there's that means they're signed in.
 So if they're signed in, I wanted to show the sign out that what's in the sign out.
 But if there is, if they're not signed it,
 or if there is no capital information, I want to show the sign in model.
 Same thing here.
 Just going to update that. and then we'll see anything here.
[02:33:27]
 Just going to update that.
 Add a little sign in.
 So this one actually is supposed to, I need to be creating a
 action.
 I want to store the account into Redux.
 I'll put it in your bug repair.
 So you will know when I'm going to run.
[02:34:01]
 Let's hide it there.
 Come home and select the new.txt and got any logins on it.
 So that's fine.
 When the relux.txt shows, the user is logged out.
 Show the sign in component.
 OK, I did that already.
 Thank you.
[02:34:20]
 So if the user is logged out, that's
 going to show the sign in component, right there.
 Also the same thing here.
 If the user is logged out, the show is the sign in component.
 When the relux stage show is the user are logged in, then the button I will show is this sine And then sign in. This is I'm going to show you a sign out mode.
 So that's what this is.
 Actually, what the redox state shows the users
[02:35:18]
 gone in, hide the sign in component.
 So this is what it will actually, it hides it.
 It hides the sign in the corner.
 By replacing it, when we sign out component.
 So this is the bottom.
 It's just rendering home thing.
 This component is just rendering one thing, which is what's going to show.
[02:35:41]
 And so this is basically talking about either what or the other will show up
 either the sign-out button or the sign-in button will show that the same time you could
 and the redox state shows the user's log in. So the sign-out component,
 the rest of the system, the user's logged in.
 So the sign-out component.
 The user's log-out, hide the sign-out component.
 So this one is log-out. The way to hide the sign out component. So this one is logged out. Well,
[02:36:26]
 the way to hide the sign out component is just going to face it when the sign in component.
 So we're going to do this pretty quick, the practice,
 in the sign in component, when the user logs in,
 dispatch in action
 so the sign in component I slowly to fix these things here
 and the side in component. That's the assignment mode in here.
 Actually, it's a single called sign in mode.
[02:37:18]
 When we use a log in, dispatch an action.
 Okay, so here they are.
 If they're logged in, dispatch an action.
 So I'll keep this one out.
 And so here, here, I'm just going on.
 And I guess, hopefully, we'll go over here.
 You get there for now. I want to dispatch an actual
[02:37:45]
 so set
 let the action set the proper V.State.
 So I need to use the set
 object.
 Here it contains what do I want to set?
 The global account.
 What do I want it to be?
[02:38:15]
 I want it to contain the account.
 Information.
 This is going to return the work order.
 It's going to run this and it's going to create a work order, which we call the action.
 Then we need to discharge that action you need to use at the hook?
 Right here.
 You just need that use the selected.
[02:39:07]
 This one doesn't even care.
 I'm not going to let it manage itself, but it's fine like this. Okay, I think that's all I need to do here.
 So in the second component, when the user logs in, he's got some action.
 Let the action set the property in the next state.
 Okay, so let's just get that from time.
 Okay, so it's signed in. I got an account from the back end.
 So if there's an account, I want to create an action.
[02:40:14]
 There's the action called a look order.
 It contains all the information that this batch reads.
 This batch is going to eventually go into state settings so I'm gonna open that up
 I mean this batch is gonna hand the action to the state settings It's going to handle two of the mandates here. This account.
 There, I read it.
 This batch here gives the action for the work order to be
 paid federal and the user.
[02:41:00]
 The pay load.
 The pay load is actually the account right here.
 You see it.
 So the new value here is the account that's going to go from the previous value, which was undefined.
 Now it's going to have an account inside of it. And side in area is going to see that in the press place.
 And I'm going to press play to the side in here. Okay, so this part actually we don't need
 this anymore. So it is signed in, I don't need that anymore.
[02:41:47]
 I've actually just commented out, I don't need that anymore. This will have to
 information, it's all I need.
 It's going to crash if that happens. So that means I don't need this, but either.
 I don't need those because this account
 contains everything I need.
 It takes everything I need to display.
 Correct information.
[02:42:25]
 And now I don't need this,
 because the site and model just took care of it myself.
 It doesn't need a callback anymore.
 It doesn't need this callback.
 I can leave it like that from now,
 but it just basically leave it more.
 I can feel the air effect, I'm coming at this now, trying to run it.
[02:42:54]
 So let's try it again. [BLANK_AUDIO]
 Okay, so it's good to pass on the bind right here.
 [BLANK_AUDIO]
 And see what happens.
 You can pass on theide to the signing mode.
 And see what happens.
 And the signing is not the time.
[02:43:45]
 When breaks, it's right there. It's like, there. It's not the time. It's not the time. It's not the time. It's not the time. It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's not the time.
 It's not the time.
 It's the time.
[02:43:53]
 It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's the time.
[02:44:00]
 It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. And since it's not taking any props, I can even see parking is coming down. Sign up for you.
 Well, this is the signing part, so let's just get the sign in more to you.
 This is working with the gucks right now.
[02:44:42]
 It's not using the other stuff anymore. So here goes their
 account and it's going to dispatch an action and here it's going to store
 the account in the state variables. Now it sees it selects the account from
 the state variables.
 and the same as the very holes.
 Now, this is the Captain Information.
 And I see here a sign out.
[02:45:24]
 Next, it's going to go and, if I click on the sign out, the mode is going to, it's going to break.
 That breaks, because on sign out is not a function.
 Here's the sign out mode.
 On sign out is not a function.
 So I'm just going to comment that out.
 There's nothing more. the function. So I'm just going to comment that out because I'm not using anymore.
 So I'm going to put this in here. And you'll need to put the paper in.
[02:46:08]
 It takes this one, tab index.
 And there's a mod,
 rotations and logs to actually remember.
 So you have to escape the JavaScript.
 And I think that's it.
 And I think that's it.
 I have to dispatch an action here.
[02:46:38]
 So what we did was discard and assign When the sign component, when the user logs in,
 dispatch an action, that the action set
 will pop in the next state.
 Then the sign out component,
 when the user logs out, this batch in action.
 So the sign out component is right here.
 component is right here. These are logs out.
[02:47:09]
 Just batch in action.
 So we need to dispatch an action.
 What do we get?
 This batch from, we get it from
 use this batch. Use dispatch.
 Use dispatch as a hook. That will return the function on the dispatch.
 Here is the function.
[02:47:43]
 We're activating it. We're supposed to give it an action.
 Where do we get that action from?
 We get that action from the set object.
 We want to set the global account.
 So here's a sign-out model.
 If they want to sign out, we need to
 clear the account. We're gonna set it to undefined. [inaudible]
[02:48:27]
 [inaudible]
 So that should be it.
 It did all the steps here in the practice so that the action set the proper meet-ux state for logging out.
 I should edit this and get the coming edit this in one bit.
 Vdux state for logging out the relux date for logging in is store that account.
 So, let's watch it happen again. So, I've reached the website so the account is undefined right now. Nothing. Nobody's logged in.
 I signed it here.
[02:50:05]
 It goes and checks their back end for an account. It gets it. Now it's going to take a very in account. If there's an account, create a work order or an action, which is supposed to, which says,
 save this account information.
 And then just that action or look order. the report, the reducer or the state center gets it,
 same's at new value, same's in the state variable.
 Then we have access to the account, which was just saved
 into the state variable.
 Now that we have the account here, it knows with what's in this way. So if there is an account, then I will just go in the sound side-up model.
[02:50:59]
 In this case, it goes in the account, Sign up mode because you're conforming, updating.
 And then we'll take questions in there.
 So it's showing us sign up.
 Once in mode.
 Now I'm going to try to sign out.
 Now I'm going to try to sign out. Here's the back-click on sign out so now it's handling that.
 What's in here, I just click.
[02:51:34]
 It's going to click on the close button to close that mobile.
 Now it's going to clear you the work order.
 We simply store nothing. Figure out that account. And we find that.
 Figure it out. That's what the size of the border. This
 matter is going to execute that order. Or give it to the person who's
 been an execute that work order. And that is the user right here. Save that new value into the state object.
 And now we should see that the account is undefined.
[02:52:16]
 Sign area sees that the account is undefined.
 If the account is undefined, if the calp is undefined it's going to be the side in middle
 right there. I'm going to use this big sign in middle. I mean it's going to set the
 I mean it's going to set the button to the side of the wheel. It's going to run right there.
 And so we see it there.
 We can watch it happy to see it now.
 I'm going to remove all the envelopes. [BLANK_AUDIO] and the important one is the other in the sine mouth.
[02:53:43]
 So it's which to the sine, can't click on this, can't ask if I'm on a sign
 out, now it's switched to the sign and button.
 Okay.
 All right, so one of the tasks was to convert everything to Redux and not use any local local state variables. See, this is a local state variable. These are local state variables.
 Okay, is this is classical?
 Big class is done. Yeah.
 I guess next time I can discuss how to start converting everything in these individual state variables into Redux, but maybe not this little scene. We didn't have any break down.
[02:55:07]
 We didn't have any break down.
 We didn't have any break down.
 We didn't have any break down.
 We didn't have any break down. practice. So we saw how we can use Redux to sign in and sign up.
 Maybe tomorrow I'll clean up the code and remove all the internal internal state period. And just leave the read-up state period.
 Well, yes, class is dismissed.
 And that's today's review for the capsule and finale.
[02:55:55]
 You can start using that.
 Or, you know, just start adapting it to your capsule project.
 But I'll stick around for any questions that you have.
 You were able to get your cart to render.
 Yeah, I got it to render.
 Okay.
 Very good.
[02:56:20]
 Let's go around for any further questions that you might have.
 Let's thank for the comments. That's the ground for any further question that you might have. I'll speak for a few minutes. [wind blowing] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ]
 >> Could I have a handler function inside of a class?
 >> Yeah.
 How would you use it, though?
 Usually you want to be able to test out your handler functions,
 but if you can, it's harder to test things when they're inside of a pass,
[03:02:53]
 but it's possible that you can test it when it's inside of a pass.
 Well, I wanted the class.
 It's a, it's a, it's a trivia card class.
 I made a trivia card class. I made a trivia card class.
 And once it goes on to the, once it mounts,
 I wanted the, on click to work.
 - Okay.
[03:03:19]
 - But I was thinking whether I should put the,
 the on-click function
 or the handler for that on the did-mountator.
 >> Yeah.
 So, yeah, you're going to,
 yeah, you're going to have to put the handler in the class
 if you're going to put the J-S-X in the class.
[03:03:55]
 Your class has the J-S-X, and it needs to be on click or on submit. It needs to call back the handler.
 So you have both choice but to put the handler in the class.
 Yeah, both choice but to put the handler in the class. Yeah.
 So that handler in that case would be, you know, you could put it,
 you could actually put it outside of the class unless it needs values that's inside of the class. >> This is actually needs to,
 it needs, it's over here in home,
 right here, when I was using it,
[03:04:35]
 not as a, when I was using it before.
 It's actually, it's for this handle click API event.
 Okay.
 So you're going to replace.
 I was wondering if I should just put this one in instead.
 That's it's, but I need the event from the on point.
 Yeah, you need the event to come in.
[03:05:03]
 But you're rendering. You are rendering that, right?
 >> Yeah, I want to render this.
 >> Yeah.
 So you need the event from on-click.
 So what values do you need from the class?
 Was that in the previous page that you showed?
 Let me see.
[03:05:24]
 I think all you need? Let me see.
 I think all you need is the event variable. Yeah, all I need is the event.
 Yeah, you're going to get the event.
 You don't need anything inside of the class.
 Okay.
 You're going to get the event when it gets called.
 The event.
[03:05:40]
 The event.
 Because you didn't create the function.
 because you didn't create the function. Okay, so I'll put the function inside the class or.
 You can put it outside because it doesn't need anything inside of the class.
 So basically put the functions outside and then when you realize,
 put the functions outside and then when you realize, put the functions outside. And then when you realize you need--
 Wait, oh, oh, I see, you need the handle click API.
[03:06:12]
 Yeah, where is that coming from?
 Is that--
 It's coming from a module?
 A module?
 A controller.
 Okay, you could import that module there.
 And then that's to take care of it. You don't need that one anymore
[03:06:31]
 unless, yeah, you don't need that anymore. You just replaced it with your class. I was doing.
 There's a... There's that bug right there on line 58.
 So you replace that too, basically.
 You replace all that?
 Oh yeah, I'm gonna replace this with the class with
 Dawn serialized... Or like a non-serialized state.
 Okay.
[03:07:08]
 It was a true idea.
 Work.
 Okay. [BLANK_AUDIO] [ Pause ] I'm not connected with this. [ Pause ]
 Nope.
 It'll attribute a cart. [typing]
 It's just when that works in.
 [typing] [BLANK_AUDIO] [
[03:11:06]
 Make sure why that's not work [ Writing on Board ] [] [] [
 [ [
 [
 [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ I don't know why it's not working.
 Okay, let me check.
 I'm just working on something here. Okay, so I wasn't looking at
 something. What happened?
[03:12:14]
 Um, it just it loads like this. Oh, it says trivia card. Okay. And I inspect it. Card content.
 So the section is already there.
 I think there's a typo.
 Or trivia card.
 Yeah, it says there trivia card object.
 Oh, yeah, I changed this one to trivia card object.
 So you should change the site.
[03:13:01]
 OK, and this slide should change line 50 to trivia card object.
 Oh, I see.
 I see. This is
 (mumbles)
 [ Pause ]
 >> Okay, there. Yeah, I'm probably going to move these, this one, and this one.
 I was just wanting to get it working before I moved it.
[03:13:59]
 Okay.
 All right, that's all for my questions. Okay. All right. That's all for my questions.
 Okay. All right. People took a good work. Congrats again on the week.
 I didn't even know you could get it twice.
 Yeah.
 I've seen some students get in twice.
 Thank you.
[03:14:31]
 Especially in smaller classes.
 Yeah, I didn't.
 I didn't know I got it until I got Chris said congrats to me.
 And I was wondering, like, what is the reason for this congrats
 Okay, yeah, it looks like you understand the concepts and you're even using classes
 Yeah, I had a very that's very good because a lot of
 Programming tutorials if you're gonna start learning new stuff on your own That's very good because a lot of programming tutorials,
[03:15:05]
 if you're going to start learning new stuff on your own,
 they use classes too.
 So it's functions and classes, you need to know them both.
 Yeah, I was looking at the Redux notes,
 but there's nothing about the classes in there.
 And I was using classes classes before from like this one.
 I mean this one doesn't work anymore. That's fixed it but I was thinking maybe I can
[03:15:35]
 that I'm using a function for everything and maybe I can switch it up and try to use a class.
 which it up in tried to use a class.
 Yeah, classes are good.
 I wasn't just the left there. Not just know that they're not serializable classes or
 objects made from classes and not serializable.
 So you can't store them in a Redux state.
 Yeah, you can't even stringify them.
[03:16:13]
 Let's see what else functions.
 If you use a function to return an object,
 then that one is serializable.
 So if you have a function, and it returns the object for you, like a
 trivial card object, that one is serializable, and it might be able to, or as long as it
 doesn't have any JSX in it.
 If a function returns an object.
[03:16:55]
 - Then it might be serializable, you said? - Yeah, just as long as it doesn't have any JSX in it.
 - Okay. - But your objects have JSX in them.
 So it's already, if you're storing JSX in your objects,
 then it's already non-sterilizable.
 Yeah, a lot of my use states from before use return.
 >> Yes, XO.
 >> That's why you could cause Redux to
[03:17:37]
 restore non serializable stuff,
 but then the Redux dev tools, that Chrome dev tools interface where you can pass the
 states change.
 That one will work properly if you're storing non-surilizable values in Redux.
 Well, it may or may not work properly as long as it just depends on what values are changing.
 So, yeah, that's why I recommend just, you know, store placeholder values like a string,
 or maybe an object, a regular object, and then just convert it to the JSX that you need.
[03:18:26]
 So that's what you're doing.
 You are staring a string and then converting it
 into some JSX later on with a class.
 - Yeah, this, this originally just works like this.
 Like this part that I had commented out, it works,
 but it was just taking up a lot of space,
 especially three of them back to back, so I wanted to make them into a class.
[03:19:00]
 And it's kind of, I mean, I don't know how to load a page with it all scrunched up like this.
 So every time I load it, again, it'll just be all spread out and be hard to read, go in through, get overwhelmed, so I wanted to make it as--
 You could have a function, you could have a function that just returns the thing that you need.
 And just put all those if statements. Maybe. Yeah, I'll do a function
 for I mean the function one could work for the trivia card sense is only one type of it,
 but I didn't want to make three different functions for each of these cards that have the inside is the same. It's just the...
 So let me see those statements again. If statements again, where are the
[03:19:56]
 statements? Oh yeah, right here. So you're storing things in trivia cards,
 history, link.
 Yeah, and these I actually renamed my rename to these ones right here.
 This part's the same, but so it's much easier to understand what instead of having it all as
 link card one, link card two, link card three. It's not that descriptive. Yeah, now it's more descriptive. Yeah. So I don't even need these anymore because one of the link card 3, it's not that descriptive. Yeah, now it's more descriptive. Yeah. So I don't even
 need these anymore because one of the link card was there, I was confused a little bit which
 order I put them in earlier. Yeah, but now it's anymore.
[03:20:50]
 And yeah, so the position 0 for about 1 for location and history, but I'm probably not going to use
 location and history, but I just made it in any ways, but what I'm not going to use it, I was just commenting through that over here.
 - Okay, so going back there to your if statements.
 So about link card right there,
 about link card on line 34.
 Is that a, that's also,
 you're using, where's that declared that variable 35 on that 35.
[03:21:30]
 No, I'm 35. Yeah, where's that declared?
 This about link card is the same as here and it's right here.
 Okay. Yeah, so what you could do is you can turn that if they
 minute to basically just one line with a function.
 Like it will be called get about link card.
 Oh, change this whole part into a function.
 Okay, let me, let me screen. Let me copy that and then I'll show you what I, what I mean.
[03:22:14]
 Okay.
 I'm going to share my screen.
 I'm gonna share my screen.
 Oh, I closed my VS code, let me reopen it.
 - Well, I think I see what you were saying.
 - So let me,
 let me just open a temporary file here. Okay, so, So I can turn this into one function, how would I want that function?
[03:23:26]
 So I would basically, I wanted to give me the JFX.
 Okay, now I'm going to start from the function, get a link card.
 What I would give it is about link card.
 I will give it the about link card.
 And then it will either return the JSX or it will return nothing. Because that's what you want to do, right? Either return either render
 or some JSX or render nothing. Yeah. So instead of doing this, this line, this one line will take care of it. And then just put the if statement into a
 link.
[03:24:32]
 Yeah.
 I know, let it, so get about
 link card.
 If you created a function, I'll get about
 link card.
 It's going to take in a card,
 we'll just say a card here, and whatever the data type is,
[03:24:57]
 maybe it's link card.
 And the return value is going to be the JSX.
 I think it's called JS.
 I think the data type is JSX.
 I think it was React.
 React.
 You can import the JSX directly
[03:25:27]
 instead of putting React.jsx.
 Instead of putting that,
 you can just put JSX.
 So it will return either JSX or undefined,
 or maybe empty string.
 I don't know which one there.
 Going to return, but then you put that if statement here.
[03:25:56]
 And you would return.
 You would return the JSX, which is this. Actually, I would start it as undefined.
 Or, or I can just.
 Or an empty string.
 It can be undefined or empty string
 That would take care originally starts as empty string in the
 Or end the year
[03:26:41]
 Yeah, okay. Oh, yeah, that's right. Okay. Yeah, this one should take care of it. Something like that.
 But at least one, it's only one line of code here. Like, habit.
 Good. Get, uh, get link card instead of a get about and have all three link cards in there.
 Yeah, you can do that too. At least it cuts it down. Yeah, you can change the parameter.
 So you can put all those statements in here if you,
 but you're going to be returning different JSX. I don't know.
 I might end up being about the same size.
[03:27:22]
 I don't know. I might end up being about the same size.
 Yeah, but at least it's not at the, at least it's not at the top of your component.
 It's going to be at, only this will be at the top of your component.
 This one can be all outside of your component.
 Yeah.
 And then you just look at this only if you need to.
 You can basically scroll down to look at this if you need to.
[03:27:52]
 Most of the time, if everything appears working fine, you don't even need to look down here. I'll put that for the front end with like a get function like that be a handler or module.
 Yeah, it could be a module.
 Yeah, it's a module.
 You can put it as a module or you can leave it in as a helper function at the bottom of your component or outside
 but at the bottom of the component. Below the component, yeah, I see. You can just
 leave it in the same file or you can make a separate file out of it whichever
 you prefer. I'll put it in the bottom so it's easier to remember where it is.
[03:28:52]
 Yeah.
 Okay, we take a screenshot of that so I have a reference.
 All right, thank you.
 You're welcome. So, yeah, just basically replace those if statements with just one
 liners like this, cleans up your code, the top, it will clean up the top of your component.
 Put all the mess at the bottom underneath your component.
 And only look at the mess.
[03:29:35]
 If the top part doesn't work properly.
 - Okay. I got it.
 Okay. Anything else?
 No. I have a lot to work on right now.
 Yeah. I have a lot to work out on, but I'm sure there'll be more questions coming up as I work on it.
 Okay, no problem.
 All right.
[03:30:12]
 Well, you have a good light.
 I'm going to start recording now.
 All right.
 Have a good night.

///// FILE: "Level 4/transcripts 2/May 6, 2025 21-4.txt"

Transcript from May 6, 2025

[00:00:00]
 Welcome to Codex Academy Level 4.
 Good evening class.
 And this is week 9, day 2 of Capstone finale week.
 This week we don't really learn anything new.
 We apply things that we've already learned, maybe in different or new ways.
 But we're not really learning anything, any new content,
 just practicing what we already know.
[00:00:31]
 So today, I'll go over another practice.
 I'll walk through that practice, which is part of the capstone.
 So if you haven it implemented yet,
 then you will see how to implement it
 at least in the sand rocks
 and you can apply it to the capstone.
 So in the first hour, we'll take attendance,
[00:00:59]
 do announcements, review what was done yesterday.
 If there's time, start on the practice, that can our continue the practice third hour mini evaluations, which is
 corrections from last week, or continue working on the assignment, which is the capstone finale.
 So make sure to take your attendance and on over to the codex account.
 If you're here right now, you can mark yourself as present.
 And now time for announcements.
 And now time for announcements. I'm going to share my screen here.
[00:01:58]
 Okay, so as a reminder, student collaboration day on Thursday may eight.
 That's where you spend the whole day just collaborating or just focusing on coding.
 I won't be doing any walkthrough through or anything. This is this class is just totally
 Basically in your hands I'm just basically the the point is to just code for the full three hours and get help from each other
 You can share your screen
 I'm not available on this day to teach
 new material or actually I'm not going
[00:02:47]
 to teach new material but I won't be available to do any walk through this day. I'm
 bringing my son to a doctor's appointment which is out of town and I won't be able to get back on time. Let's see what else. So the schedule, well, this is the schedule here. We've
 nine capstone finale. Next week, the valuations week after that, presentations.
 And don't worry too much about, you don't have to be nervous about presentations.
 Because you know your web, your capstone project, you should know it well enough.
 You can describe at least the front end. And the technologies you've been using
 it should just be like you should know it by heart.
[00:03:53]
 The hardest part will be if anyone asked you
 about the code.
 Maybe they will, maybe they won't,
 but that would be the hardest part.
 they won't but that would need a hardest part.
 Let's see what else.
 Thoroughly is still available in the July cohort.
[00:04:29]
 Right up here hopefully all of you guys have had a chance to fill it in. If not, please fill it in.
 We had a lot of questions today.
 I think we got them all answered. So it is possible for your deployed front end to connect to the
 deployed backend, such as NAMDA or Google App Engine.
 You need to get the URLs right.
 You need to get the route handlers right.
 You need to use the same post
[00:05:07]
 methods in the front end and then back end. A lot of things need to match so
 there's a lot of possibility for bugs. But this one's all solved. This one
 was basically an accidentally installed package. We'd cause the back end server to crash.
 Thus, this is refuse connections and it may seem like a course error.
 This one right here, secrets. So if you have, if you're, if one of your old API keys are stuck inside of an old commit,
 just let GitHub accept it,
 but then delete that exposed key,
[00:05:56]
 and just use the new key from moving forward.
 There should not be any keys, no access keys in GitHub.
 There should not be any keys, no access keys in GitHub. If it is, then it should only be the expired or deleted keys.
 And then right here asking about how do you get that values from the handler.
 And let me see if I can have a sample of that in the sandbox.
 Looks like we are doing.
 Let me see here.
[00:06:47]
 I can load up the front end. screen. Okay, it's all in the sharing.
 And the folder is handle sign in the template.
 Okay, so that's that's one.
 Let's also look at handles in the
 which one is this one is in. Let's also look at handles in the next one.
 It's fine all references.
 I guess nothing is using this. This one is just a test.
[00:07:49]
 Like this one, definitely need to use.
 And sign in the middle.
 So this form has a handler, and will submit when it gets called.
 It calls a handler, which is in a separate file.
 But this handler returns a value that can be used by the component or the outer function.
 But it can't be used directly. It needs to be saved in a
 Redux state variable.
[00:08:37]
 And then the component has access to it.
 Actually, not this component. the component has access to it.
 Actually, not this component. The other component will get access to that component is signed in here.
 Right here.
 So this is not even a hour function.
 It's more like an hour function.
 It's like a function that's not even connected to the handler.
[00:09:08]
 So that's a benefit of using Redux. You can you can share your state variables with functions that are not even posted to the handler, like distant from this handle right here. This handle is trapped inside of here and the
 value is trapped inside of here, but with Redux, we can make it available to
 other things like this component right here. So that's that was the answer for this one. How do you pass an object forever out of it in your handler function for the outer function?
 And the answer is that the handler, which is in a separate module file. So this one right here is in a separate module file.
 We did return the value that the outer function means.
 So it's returning the value that the outer function needs.
 So it's returning the value that the outer function needs. And then store the value and the read-up state variable.
[00:10:33]
 And here.
 And we'll take this one. So the outer function can access it with a selector.
 So this one over here, this other component, which is distant from the handler, has access to the account.
 With a selector.
 Going back to the next one here.
 Remember, many evaluations are 60 minutes.
 For submission, get your notes ready.
[00:11:18]
 Select your MIDI evaluations done quickly.
 The mini evaluation for week 9 is posted due tomorrow. You should already know these things.
 The hardest part may be just getting your notes in order so you know what's about.
 There's no detail description here, but maybe you can, you know,
 explain it properly, explain and demonstrate TDD and how your capsule uses it.
 And so the TDD that you used for the sandbox might be very similar for which you
 did, which you did, I mean, which you implemented in your capsule.
[00:12:11]
 It might be a little bit different, but we've been working on TDD for a while now,
 and it should be in the capsule, and TDD was also required in some capsule units.
 So I'm just talking about some of those.
 Including the principles of TDD.
 Properly explained and demonstrated read-ups and how your capstone uses it.
 I think that's self-explanatory, how your files you're using, your state variables,
 are your components accessing the state variables.
[00:13:05]
 I think lastly, you were describing it, describing the
 meetups in your sandbox, but this time your
 capstone should be using readups.
 Maybe you're in the middle of converting all state
 variables to meetups.
 That's okay, I just want to see that
 you're using meetups in your capsule successfully.
[00:13:34]
 Besides, meetups is on requirement and this is a side of your corner.
 This is a sign that will come here.
 That's since 26.
 Hopefully expand and demonstrate who will go up engine and how your cast them is.
 So that was the previous assignment here from week 7, half this mini evaluation, it doesn't have to have AI ready.
 If you don't have AI installed in your Google App Engine yet, that's fine.
 I just want to see that you get a response.
[00:14:40]
 One Google App Engine underneath.
 One of the next reasons. So sign-up properly in the capsule.
 And then this one is about AI, but not about programming AI.
 It's about AI tasks and AI models on the HUC-based side.
 And how to choose them for use with transformers.js.
 This is to see if you're, you know, when you're done with this course and you've graduated,
 you should take a look at the other AI tasks and models and see how you can use them.
[00:15:20]
 How you can add them to your capsule or it doesn't even have to be your capsule,
 just like a separate project, or you do whatever you want to do with it,
 after this course.
 At least I want to know that you can at least you know about re-itask and models and choose them.
 We are tasking models and choosing.
 If you have any ideas that you have to implement, the documentation that you need to look at,
 we'll have a good stuff. We'll just be comfortable with things. And it.
[00:16:20]
 So many values in week nine is due tomorrow and for class.
 Valuations, many valuations for week 8 is closed, but still open for corrections until Sunday.
 And we decided to close.
 App engine closes one Thursday.
 The assignments will be graded this week, all the assignments are now behind. And all the assignments will be graded this week.
 And we'll see the extensions to submit the correction.
 to submit the correction.
[00:17:10]
 And contact the student success team to get points that you missed.
 Awesome, too.
 If they can reopen some of these
 and tell them what's going on.
 Practice problems right here on the side.
 We're gonna pack this a little bit more today.
 And we talked about help seeker permit is available for
[00:17:32]
 mental meetings.
 We can also send me a message.
 Since I'm not teaching much new content, I have more time.
 So if you're unable to get into the mentors, just send me a message. And if you
 really get stuck, I can, I can even possibly need the new on a short notice basis.
 So, you know, I'll be available different times of the day, sometimes mornings, sometimes
 afternoon, sometimes evening. So it just depends. So in the message, and I may or may
[00:18:14]
 not be available that very minute. So I haven't been posting, I haven't been updating the references here.
 Reference level 4, but I did put all the transcripts in up to week 9, day 1.
 All the transcripts should be here. If you push or if you provide at least
 transcripts and all your notes to note with LM, you will know where some
 topics where the topics are in the videos. Because L.M. We'll tell you something like all of that topic about
 using Redux for the sign-in. That was it's going to refer to you. It's going to refer to the
 file here and then you'll see here it's from May 5 And that tells you that you can go to the May 5 reporting.
[00:19:31]
 Notebookella will tell you which paragraph here
 was it talked about.
 So you can see the timestamp.
 This means three minutes, 54 seconds into the video. this one's three minutes 54 seconds into the video
 This one's 14 minutes, so you can use this
 Maybe there was silence there
 Actually what I'm using for this transcript generator is actually the lowest model, the smallest AI model.
[00:20:15]
 If I use a bigger AI model, it into using a more intelligent AI model.
 Now, that's going to be after those things.
 Maybe, maybe I have extra time I can upgrade the model. I'm upgrading the model might be changing the code and you know doing a lot of
 research on how to use that new model.
 I'm on it so we'll see how that goes.
 I have time.
 But yes, you've notebook LMs.
[00:21:00]
 So it's two-year notes. Your code and the transcripts are helping find topics.
 There's transcripts up to week nine, day one.
 Go through the recordings in order.
 Catch up as soon as you can in the through behind the recordings.
 Now we're going to review. Take notes if I say anything new during the review.
 And actually I'll be reviewing the practice too. So you might want to take notes on that,
 as much as possible.
[00:21:53]
 So we're going to continue now.
 So we're going to go to the review section here and this is pretty much it. Yesterday was focused on converting the sign and of the capstone project to use Redux instead of
 the regular state variables instead of regular React
 The longest part or the thing that's at the longest was just
 The longest part, or the thing that took the longest was just the sign and it was not part of the sandbox. So I had to copy it from level 3 and adapt it to the sandbox and adapt it to the back end server. But then I eventually got to these steps here which went pretty quick. [BLANK_AUDIO] I'm going to copy it into here. Here.
 And so there's a practice.
 And the fire up here.
[00:24:25]
 And the left side here. I'm not gonna have a sign for you.
 And then get started.
 That's how we get the back end going.
 And we do that.
 At least the data base part. database.
 When you start the NPM script, except for the start script and the test script.
 So for the Redux door page, stay in variable, select there and set it for the login practice.
[00:25:56]
 So that one is pretty easy.
 And from here, it's almost like copy and paste in this change of value. These things are very good.
 So I categorize these variables by name.
 So I just put category in front.
 And then the name of the state variable.
 This is when I started.
 Or this practice.
[00:26:33]
 You started values undefined.
 Basically it's going to store an account after somebody longs it.
 And select her. after somebody lives in a selector.
 Selector is basically copy one of the selectors and then chains of values by extracting
 the state variable that you want and then returning it.
 they variable that you want and then returning it.
 In the next one is for a setter.
[00:27:15]
 I've been placed one of these and then added the values. So this is one of the values you can change.
 It specifies that the action will take in an account variable or account object or undefined.
 So this new value will be either an account object or undefined.
 I'm going to come from the store it in the state area.
 Then let the sine in area component.
 Select the read-up state regarding log-in status.
 So the sine in area. And there, you can also do this, you'm going to look really clean this.
[00:28:30]
 With everything's working fine, it's your scene.
 So the second area is selecting that account stays variable from Redux
 and we're just storing it here in account variable.
 and we're just storing it here in the account variable.
 And we're using it here for the update phase.
 You could just delete this part right there and this is going to update,
 it'll run this update phase whenever anything changes,
[00:29:05]
 then we component.
 But if you go like this, it's more efficient
 because basically we only wanted to keep track
 of the account anyways.
 If we see here this update phase is only,
 it's only dealing with account.
 So it's not really necessary to view what the question is here or it did not.
[00:29:32]
 Even though we see the map here, you might have to have the map changed.
 We still don't need to call component update because we're not actually doing anything.
 We're not changing the value of the amount anywhere we're just using it to get into the update phase
 property basically we run this code only after the component of mount over here
 we don't want to be running at the time, because they will run at the same time
 if you don't put a condition.
 When the Redox States shows the user is locked out. Show the sign in component.
[00:30:30]
 So with the redox state right here, so basically if there's no account, show the sign
 in component. So if there's an account, I'm going to show this, but if there's no account,
 I want to show the sign in model. Same thing here but if there's no account, I want to show you the sign and model. Same thing here, if there's no account, I want to show the sign and model.
 And notice that there are no conditions here. This is the render section, right? There's
 no conditions. I only want to render the little button. The conditions are here.
 This is what decides which button to render. So it makes the render section
 in the inner. And then just basically you can call you on and do it. When you're looking at this,
[00:31:24]
 you can just say you can easily see that you just want
 to render a button.
 And then since we can easily read if if if if if else statements, we keep these outside of the revenue statement.
 So when the relux state shows the user is logged in, the hide_design component. So the user is logged in.
 Basically it goes into account.
 It's got to show a different component,
 not the sign-in component.
[00:32:06]
 It's going to show the sign-out component.
 So effectively hides this by replacing it with this one there.
 So the Redux, whether Redux shows the user is logged in,
 show the sign-out component.
 So that's what this is.
 If the user is logged in, show the sign-up component. So that's what this includes. If the user is logged in,
 basically, if it's account information, show the sign-up mode.
[00:32:34]
 And then if they're logged out, show a different mode. Not the sign-up mode.
 When one of the user logs in, this patch is the action.
 So this one is going to happen in the side of mode. [BLANK_AUDIO]
 And deciding what I can do is to bring that up.
 [BLANK_AUDIO]
 And actually, I don't need any props.
 [BLANK_AUDIO]
[00:33:16]
 Yeah, I'll just move.
 Remember, we had, we used to have a callback here.
 [BLANK_AUDIO] We have callbacks here, right? On sign out or
 on sign in, callback, on sign out. So we don't need those anymore. We only needed
 them because we didn't have Redux. We now we don't have any callbacks here.
 We're totally eliminated because we have Redux
 and we have access to the state where it was that we needed.
[00:33:54]
 This parent component can communicate with these child component
 through Redux instead.
 With the report, this scented area, it was giving its
 town components like a walkie town can be considered the callback to this.
 Instead of the scented area, I'm giving these guys the walkie talkie.
 Basically, all of them have access to like the internet.
 You think of Redux as the internet, so they all have access to it.
[00:34:29]
 They don't need to walk you talk anymore.
 Or a special line to each other.
 There's access to internet and they form Redux and then they see everything there.
 So no more back, necessary.
 Read-ups to communicate with your student parent and child's components.
 So, I'm going to delete that thought right there.
 So, we'll use our signs in.
[00:35:05]
 This is a form here.
 When they submit the form, or they only submit their email and password,
 the event will contain their email and password right, that contains the form. So this one basically
 gets the information from the form, which is an e-mail and password, sends it to
 the back end server for authentication, if it authenticates, it returns the
 account. If it doesn't authenticate, then we get nothing.
 So if we have an account that means it authenticated.
[00:35:51]
 So we save that account in the state variable right here.
 But this one just creates the invoice when we're ordered.
 And the dispatch here takes that order
 gives it to you in the center.
 We left the we set the action set, let the action set the proper delete of state command.
 We have to use that set object here.
 It gives us basically we want to set the global account.
[00:36:41]
 It's almost like the naming convention that we used to use for use state.
 Set more naming.
 I mean, it starts with set, but this time we're using an object.
 And instead of combining with this together, we're using an object and putting the variable name right there, but instead of it being a variable name it's actually a function that takes the new value.
 And that's something that the slice did for us. We didn't have to do this manually. The slice did that for us.
 And then the slice provided us with that set up. basically it's a set of actions right here and we just pull the one of those actions out
 right here
[00:37:58]
 this is where we pull one of those actions out
 and create a little blender.
 And then in the side-out component, when the user logs out, this has the action.
 For the side-out component,
 I'm going to try here.
 It's not taking property boards like anything like that.
 And I can do this to connect the code.
[00:38:33]
 So here's a sign-up component of someone's signs out.
 Like click, click, "I guess."
 The main thing that we're doing here is creating a work order to clear the account and
 have you dispatch that action.
 So this is what that means.
 That the action sent the proper re-lux date.
 We're log in. And proper u.d.x. state for logging out is, in my case,
[00:39:11]
 here in the account.
 You might use a booty.
 And that u is a booty.
 That's fine.
 You can be true.
 Like, it's logged in.
 True.
[00:39:20]
 And it was logged in.
 False.
 You can do that.
 I have to sort can do that.
 I have to sort of put the account information down the front.
 So when it's ready,
 it's fine.
[00:39:47]
 Just going to load up here. and then we'll just go in the loop here and show you
 since all my back end servers are ready.
 And put this
 in here on here.
 And now I can, it's signed in.
 Now I have the opportunity to sign up.
 We're asking every single other sign out.
[00:40:11]
 And we're having a map, and we're having a map.
 And we're having a map.
 And we'll see the artificial intelligence.
 And this one, I guess the one, I need to start that server.
 I only started the one with the database,
 not the one with the data.
 The one that's about what this practice is about anyways
[00:40:39]
 is this about signing in and signing up.
 about signing in and signing up.
 So that's, you could implement something like that into your capstone.
 Now we can start the walker of the next practice,
 which is persistent login. It's right now when we log in, if we refresh or reload the website, we get logged out
 again. We don't want that to happen, especially if we have a real website.
 It's the users.
[00:41:33]
 And you don't want them to go in.
 You want them to have a good user experience.
 And if they refresh your website and it's not looking like they expect.
 I don't like it.
 Some of the shares are free.
 It's going to copy this into the end. and then the practice notes.
 Let's see what are the keywords here.
[00:42:19]
 I'm just emailing past the keywords. That's going through the names of some variables.
 This is also keyword.
 And there was a space here.
 So I remember in this one, in this question,
 about not being able to not be able to not be able to not be able to get cool
 to get cool found running.
 And it was just a typo.
[00:43:01]
 That space, that space in the name, like this.
 If you try to run JSON.stringify it, but this space there, it's not going to work.
 So I'm going to look at what is type of one little character.
 Actually, it's like an invisible character.
 It's a space. It's an invisible character.
 It'll crash your program
 so you need to find bugs like that when you find bugs like that it's uh
[00:43:35]
 try to run your disk folder locally
 right if you can run your this folder locally.
 Just run that command node.
 The little command that you run the JavaScript file. And your JavaScript files are inside of this folder.
 So you can run the node command and you can give it the file name to run.
 This file name has one space in this file name.
 You can put a space in the command to the bolt run, because it takes again a morning limit
[00:44:27]
 with the cloud.
 So we're going back to the practice here.
 If this way is a key way, we're actually going to see if it's not sent.
 This is going to be this is going to be
 this is going to be
 this is going to be
 actually this is going to be So we have a few months for that.
[00:45:07]
 And we're going to sign it here and now it's getting longer.
 We're going to drop the depth.
 We're going to use this before.
 So just on that parse, we need that before and we need this level. or in previous levels.
 Pressing them in your ear from the plants or on
 APIs.
 Email password. [no audio] [no audio]
[00:45:54]
 [no audio]
 At least this is the set of 4D for the practice and you can set up the practice file
 or set up the key right. So, right here is a good spot to take a break
 and then you can actually get started on the practice
 acting the break.
 And then you get a great screen going here.
 Hey, I'll see you after the break.
[00:46:46]
 [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break. And for the second hour, we're going to continue with the practice,
 which is persistent login practice, where we will keep the login status
 persistent so it stays, even on the pages refreshed. fresh.
 Okay, so
 the login is right here. If I'm signed in.
 And see, it shows that I'm signed in, because I can sign out now.
 If I press refresh, it's gone.
[00:57:54]
 I should, for a good user experience,
 I should be able to stay signed in.
 So the first step in the front end when users authenticate for their email and password in an object.
 Okay, well, I'm already doing that.
 That's in the, that's in the account page.
 I mean the account object.
 I'm actually storing their whole information.
[00:58:32]
 Maybe that's not a good idea.
 So I'm going to do a, I'm going to create a different state object
 just for the, just for the persistent login. I think I could use this account,
 but just imagine, like, if there account had a lot of information. You don't want to just, you don't want to store all of that.
 We just want, you know, the credentials.
 So I'm going to create a new one, a new state variable.
 You don't have to, you can, you can stick with just account if that works for you, but I'm just going to create a new one.
[00:59:32]
 And I will call it, you know, it's just going to be the email and password, so it's credentials.
 And it start off as undefined. and then the next one is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one access to it.
 I'm just going to copy this one and make a new one for credentials.
 And global credentials is what I'm going to.
 This is the selector.
 And then show okay there it is.
 So that's the select there that's all done. Now the center.
[01:00:42]
 Just gonna change this one.
 So this is a function, right?
 The gllo, there's function, is just a different way to write it, because it's inside of an
 object.
 The count will be credentials.
 Actually, this is not going to be an action account.
 It's going to be action credentials.
[01:01:16]
 Because the account is slightly different than the credentials.
 The account has-- let's see.
 So I have it here. The account has email password name and phone and
 however whatever else I want to include with the account.
 I want to make a separate one.
 One for just the credentials.
 So what would this look like? So to pay load, would either be the credentials or undefined.
[01:01:55]
 I didn't make the credentials yet.
 I didn't make the credentials type.
 And the type is always a string. So I'm going to make this credentials type
 and put it right next to this account type.
 Export type credentials. So what is it going to be?
 It's going to be an object that has an email and a password.
 Both of them are strings.
[01:02:47]
 So this is a custom type, right?
 I'm defining a custom type or a custom object.
 This is not just any object as a special kind of object.
 For the braces here.
 Special kind of object which only has an email in the password in it
 and both are strings. Now I can go back here and import it.
 And this one's all set. So this payload is supposed to be credentials.
[01:03:27]
 The credentials object which just has the email in password or it's going to come in undefined. So there it is right there.
 credentials.
 So we got the state selectors, the state variables. Okay, so let's look good.
 Let's see if we finish this in the front end
 when users authenticate, store their email and password
 in an object.
 So that's right here when they authenticate,
[01:04:03]
 that's in here.
 So that's right here when they authenticate, that's in here. So their email and password is going to be in here.
 I'm going to make a new one here, new section right here.
 So when they sign in, this is when they sign in, right?
 Otherwise, this part is when they don't sign in.
 Instructions say here when they sign in.
 Or the email and password in an object.
[01:04:34]
 So I'll call that credentials.
 The data type is going to be credentials.
 The data type is going to be credentials. That's going to be an object.
 And it's going to tell me what kind of object I need.
 An object that has an email and a password.
 So what is this email going to be?
 It's going to come from this account.
[01:05:05]
 Because that's this account has all the information I need.
 And what's the password going to be?
 It's going to come from that account because the account has everything I need,
 but I only need these two from the account.
 So I did the, I did this part. I created and I saw the email and password in an object,
 right?
 I created an object here.
[01:05:37]
 I even put the data type.
 Here's the object with two properties.
 And getting those properties from the account that came in.
 Use JSON string and find a convert the object to a string.
 So I'm going to convert into a string, which I call it here.
 I can call it credentials string.
 So you saw in that string of I this object. Why do I want to string
[01:06:30]
 of I it because you can't store objects in local storage. We can store
 strings in local storage. So we can store strings in local storage.set a with local storage.set
 so local storage.set I am so this will be set item.
 So I'll fix that type over there. Okay, I should do it.
 And it's a function, so you have to know how to use it.
 I have to use mass over it and it accepts the key and the value.
 So the key that it's going to get stored under is credentials.
[01:07:56]
 The value that it's going to store is this one here.
 The conventional string.
 So think of it like this is like the database column and this is the value. So key and value pair or think of it like a the property of an object and then
 the value that we will store in that property. Like this, this is the key, this is the value. This is the key,
 this is the value, this is how we're going to pull the value out with this key.
 Here, I use login here. I'll just change this thing.
 Login string.
[01:08:58]
 To match the practice.
 I'll change this to the log in string. So that's a very cool.
 Yeah.
 Next, the, I don't have to.
 I'm going to call it credentials to show that it doesn't happen.
 It's basically just credentials that I'm getting.
 It's great because this login string will contain an email in password.
[01:09:34]
 When the user logs out.
 So we're an empty string.
 All right, it's to go to the log out part right here.
 This is a sign out model.
 If they log out, it's going to run this handler.
 So I'm just going to add to it at the bottom.
 When the user's log out store an empty string,
[01:10:16]
 with no local store, it's not set item.
 And the same key.
 So local storage. Not set item. The key was credentials.
 Value is empty string. I think I wonder if I do undefined because that's what I've been
 because that's the data type that I use here. Credentials is going to be either undefined or
 or a credentials object. So let's try this undefined.
 Instead of an empty string,
[01:11:18]
 to match the data type. I think if we try to do JSON stream with my great book, let's see.
 Okay so one of those sign in area mounts. So let's look for the sign in area right here.
 So what it mounts, this is component in mount.
 This is the mount right here.
 When the sign in area mounts, get a log in,
 the local source about getItem and the same key. I'll put it underneath for now. Actually, we have a long to do that. I want to put it here because this is where
 we can get an account. So local storage, not get item, which we have to give it a key. So where which key are we storing the account?
[01:12:48]
 We're storing it in the credentials key.
 Then we have to capture that value.
 It's going to return the value.
 So we need to capture it here.
 It's going to come in as a string.
 If it does come in, if it has any credentials, it's going to come in as a string. And let's see.
 Get a login.
[01:13:40]
 So we got the login.
 With the same key.
 So if a login was saved, convert it to a login
 object.
 So if login,
 You're not going to do this start off with a -- and undefined's object. Starting off as undefined.
 So that I can populate it.
[01:14:44]
 If there's a login. So if there's a login then I can start filling in this object.
 So if there's a login what does it say we use do? and work the login object, convert it to an object.
 So json.parse, that's going to convert the login object.
 That's what we want to see in credentials.
 It's going to be this is this login is supposed to contain an object.
 Well, stringified object that has an email and a string password.
 So it's going to turn it from a string to an actual object or it into there.
[01:15:47]
 And we have this one line.
 Use the email and password from the login object to authenticate.
 Signing to authenticate and fortunately, I have a function for that.
 Right, the sign in model, yeah, the sign in button or modal is using that actually not this function
 here. This one. I should get rid of these TypeScript pairs. Let's put any right here.
 Put any right here also.
 Actually that's not what you see if I can just go like this, make this one any. It's kind of ugly like that though.
[01:17:27]
 Other way you can do it.
 This one's a little bit hacky but it's going to work.
 Form equals form dot elements.
 Oh, I can't.
 It's like, oh, I'm just.
 Yeah.
 I've got rid of it, but you know there's a sacrifice there.
[01:18:10]
 Sacrifice we added another line and it's not really clear what's going on here.
 That's how you get rid of it. Another way to get rid of the TypeScript errors. Because TypeScript is saying that this event variable doesn't have a
 elements, doesn't have an elements property.
 And I'm not sure which one has an elements property,
 which event type has an elements property.
 Another way to do it, go like this and then
 add elements to each one of these.
[01:19:19]
 Little bit cleaner, but this part is missing. So, in different ways.
 But the main point is, I have a function here that takes an email in the password and gives
 me an account.
 So let's do that.
 When we focus on here, if the login was saved, convert it to a login object.
 And, Jase on that part, use the email and password.
 Use the email and password from the login object to authenticate
[01:20:12]
 Right here
 So it's a sink already
 Right no, that's not
 Sign in area
 Remember you can't do a sink from it directly from a component in mount. You could call a another function.
 So what I'm going to do is going to create another function here, an inner function,
 all, let's see, that's a good name for this. I'm going to call it persistent login.
[01:21:09]
 Get persistent login.
 So, Chris is asking, can you do a cred and
 FEST and compare the result to the inputs as a weighted and authenticate?
 Yeah, that's what the, that's what this module is doing.
 Or not that one. This one. This is
 one, this is the one that does it.
 It's going to basically call the back end server, back end server does the comparing for us.
[01:21:57]
 We don't do that directly.
 We don't call the database from the front end.
 We call the back end server which connects to the database because
 the back end server can hide the API keys. The front end had the API keys, but the back end
 server can. So the back end server is the one talking to DynamoDB and just giving us the results, giving the front end the results.
 So get persistent login, just going to go like that.
 It's an async function because what do I want to do?
[01:22:48]
 Want to do this stuff right? Actually, let me just finish this and then I'll show you
 why I need to be back to it.
 So the construction here is using the email and password
 from the Loggett object to authenticate.
 So that function I wanted to use is called authentication AWS.
 Authentication.
 That one takes an email.
[01:23:19]
 It says there are user email, right?
 Well, you don't have to match this variable name.
 It just describes what kind of value we want to get in here.
 So, think of it like an alias.
 You don't have to match this variable name.
 The email that I want to send in is credentials.email.
 That's where it is.
[01:23:51]
 I could also, I could also try to,
 actually, I have to, if there's a log in, I need to do these together.
 I need to do these together because I don't want it to try to authenticate.
 If there's no log in information,
 this log in the credentials might be empty because it just depends on if we saved some credentials or not.
 So at least in this part, we know the credentials will not be empty because we pulled out
 the login, which was stored in local storage. So authentication AWS, it takes an email, which is right there.
[01:24:47]
 I mean, I could go like this so that I can go like this and pull the email and the password out of the credentials.
 By destructuring, which will make this look cleaner.
 But I need to await the results because authentication AWS is supposed to return to account.
 I can't do await inside of component did mount. So what I need to do is just pull all this out and put it into a different function that
 can have a sink and a weight. This one is going to return what I need.
 I'm going to change this code. The account, I think I'm going to return the account.
 Yeah, I'm going to return the account instead. And I can just do this confidential, so that's what we expect.
[01:26:39]
 But in this part, I expect I'm going to like end goal is to get an account for not.
 And I want to return that account.
 So account starts off as undefined.
 We're going to pull the credentials data from local storage.
 If there is some credentials in there, we're going to get it.
 And we're going to authenticate it, which gives us an account.
 And then we return that account.
[01:27:31]
 Other scenario is, account is undefined.
 We look in the local storage.
 We don't see an account.
 So it's just going to skip this and return undefined.
 So this function returns a progress and it's going to either return an account or undefined.
 And I'm going to call it from here. I just cut this whole section out.
 this whole section out. Get persistent login.
[01:28:15]
 Actually, I don't want to store, I need to dispatch the action.
 Because if the gradient shows authenticate, I need to log in the user.
 So that was the next step.
 So use the email and password from the login object to authenticate.
 So that's what I did here.
 If the credentials authenticate, login the user.
 And how do we login the user? Login the user
[01:29:08]
 By dispatching an action
 So that's actually there won't be a return value here This one is going to be, I need to use the set object.
 And that's going to set the global count.
 And the value of that is going to be account.
 The count will either be undefined, or it's going to have some authentication.
 It's going to come back being authenticated.
 This one's going to return us a board order or an action which we need to dispatch. Okay, so this part right here logs in the user. The rest will be automatic. Actually, I want to do, I don't want
[01:30:48]
 if, if I keep going on this route here, it's going to, it's going to, you know, it's not,
 we don't see a weight right here, right? So it's just going to go from this line
 right to this one right there. Because one says async so what it's gonna
 get skipped and it's gonna render this even though we didn't finish getting the
 credentials right here I can show you so there's to be a better logic to pull this off.
 Okay, so we come up component just mounted.
 We don't see the sign in the sign out yet.
[01:31:37]
 It's going to get the persistent login.
 So it's going to try to try to run here whatever it can.
 Okay, it's a crash type.
 [BLANK_AUDIO] [no audio] So we've got to log in, wait, it's going to be undefined, I think.
 Or in this case, it's null.
 So it's going to skip that.
 Oh, yeah, it should be undefined.
[01:32:39]
 It doesn't come, it didn't come in properly.
 So I'm going to...
 Okay, now let's find, let's find. didn't come in properly so I'm gonna
 Okay, no that's fine account is gonna come in on time That's good. I was thinking log in was gonna get started here, but it's not log in is is null it's gonna get skipped
 Whoops
 Oops, I didn't have a blue here. There it is.
 I'm gonna create an action.
[01:33:14]
 Wait, did that work properly?
 Whoops, not select.
 That's wrong.
 Well, we'll account.
 Okay, so this once you worked out, I had the wrong property here.
 So it's going to create an action for us or reporter.
 Basically set the global account to undefined because there was nothing saved just that's that action and everything loaded here.
[01:33:57]
 So what I need to do, I'm going to put some break points here.
 As you'll see that this one, these could get loaded.
 These could get rendered before this one even finishes.
 Because that won't take time to finish, right?
 This won't take time to finish.
 So these might actually get rendered before this one even finishes.
 And you see what's going to actually happen here.
[01:34:37]
 Okay, this one is the proper order. This is the proper order because it doesn't even go through this await.
 So it's a proper order, but then it's going to be different if we have a login to save. So let's try it with the login now.
 If the credentials authenticate login the user, okay, so we have something set up like that.
 user. Okay, so we have something set up like that. This is it. If the credentials
 authenticate login the user, this is how you log them in by putting the account.
 Actually, you can just you can actually just put all this in that way doesn't even have to dispatch anything
 that one makes in your sense if there is no login it doesn't dispatch anything [ Pause ]
[01:35:50]
 >> This goes with default value.
 And then if the credentials don't authenticate,
 store an empty string log in with local storage.
 string log in with local storage. So you need to do this if it doesn't authenticate,
 because it's possible that password may have changed
 when the user was in a different browser.
 So this whatever credentials that we saved in local storage, it may or may not be valid
[01:36:27]
 anymore because we're having, we're going to set up a persistent login and the user
 can log in with a browser over here and a browser over here.
 If they log in here and they change their account information like their password,
 this one right here should not be able to have a persistent login because the password just changed.
 So that's what we need to take care of here. So if is the case if it does authenticate login the user.
 And if it doesn't authenticate store an empty string login with local storage. So instead of empty string we're just going to put
 the undefined. But you have to select the key first. The key is credentials
[01:37:39]
 and the value is undefined.
 the value is undefined. I don't need to put a code block there because it's only one line of code.
 If the user changes the password, update the login string in local storage.
 So this one is actually, we can't, we don't have any feature for updating the password yet.
 So we have to come back to this.
 Right.
 We don't have any, all we've done, we feature that we have is to log in and log out.
[01:38:20]
 We don't have any feature to update the password.
 So we're going to have to come back to this. But for now, we're setting have any feature to update the password. So we're gonna have to come back to this,
 but for now we're setting up a persistent login.
 This is the only step that you need.
 If you add that account editing feature,
 right now we don't have that feature.
 So where did this stop?
[01:38:47]
 So what did this stop? Okay, so that should be it. We basically followed all the steps, so let's see if this works.
 I want to see what happens here, though. How does the timing work.
 Okay, so we're starting over it. I'm gonna try to sign in.
 Just followed all those instructions.
 So if anything works, if those instructions were fine, then there should be persistent
 login now. Okay, so if I reset this, I'll refresh the page, there should be persistent login.
 Okay, so it's going to check for persistent login.
[01:40:12]
 and it sees that something was saved there. So it's going to turn that string.
 It's going to turn this string.
 It's a string right there's quotations on the outside.
 It's going to turn that string into an object. Here it is right here.
 The credentials object. Going to use de-structuring to get the email and password out.
 So we got the email and the password out. Going to authenticate email and password or I'm going to check if they match.
 If they match, we will get in account. If they don't match, it will be undefined.
[01:40:56]
 But there's an await here. There's an await.
 So what I think it's going to do is going to jump over here instead of jumping to this
 if statement.
 Yeah, so it's going to render these and it's going to render the sign in, it's going
 to render the sign in model right now.
 Okay, we see here there's sine it, but we actually have a persistent login right now.
 We're still in the middle of checking the persistent login.
[01:41:36]
 So this one is going to like flash sine it and then it's going to switch the sine out.
 We don't want it to do that. We wanted to render the correct button in the first time.
 Right now, it should not be signed in because we're still
 in the process of checking the persistent login.
 It shouldn't be rendering nothing right now.
 So let's see. Did we get into account back?
 Yes, we did.
[01:42:08]
 We got into account back.
 So, it's going to go in here and log in that account by dispatching, you know, saving
 that account into state variables and this, this batching the action.
 Should say sign out now.
 I forgot to put a
 debugger here so we can watch it.
 So it quickly shows the sign in model. And then it shows sign out because we're already
[01:42:49]
 signed in.
 So what I want to do is actually I don't want to display this process right here.
 When it finishes that process, then we can do this.
 Actually, it needs account information. So right there.
 Right, because this is if there's an account, then.
 Excellent. See here.
 Oh, no, we can put the account at the bottom. Yeah, we can put the account at the bottom because we're setting the value there.
[01:43:49]
 It starts off as undefined, but if there's a login, it gets an actual object, so we can take this out.
 Basically at the end of these conditions, we either have an account or we don't.
 So we can use that account to determine if we are going to--
 so this component or this component.
 All right, so I'll restart this here. so it has it mounted yet there's no
 button there but we expect this to go through the whole login process
 after it goes through the login process that's when we want to render the button.
[01:44:47]
 We don't want to render it before.
 Otherwise, it'll see it flash.
 The wrong button that's going to flash the correct button.
 So here, it's going to, it's just got an account. Going to dispatch an action, but we still have an account, right?
 We have this account object,
 which this one has access to,
 because we have it declared up here.
[01:45:15]
 So they're in the same scope,
 right there, this one can still access it from here.
 Okay, so now it from here. So now I've finished this batching.
 And since we have an account, we can choose the correct button to render.
 We don't see any button yet, but now we know which ones to render.
 We want to render this sign up.
 We see it right there. We didn't flash the sign in first, right?
[01:45:57]
 It went straight to the correct button.
 That's what we want.
 And it's-- here's the update phase, it's just double checking,
 which is much since you render, and since we have an account,
 it's gonna render this again, but it's already that
 the moment anyways.
 So we have a persistent login.
[01:46:27]
 So let's clear this and watch it happen.
 These are all concept that you already know.
 You know how to create a function, and if you need to use async and await while you're
 in the component did not, you need to take it out into a different function. That's where in that function you can use async and await.
 You know math data types here, you can cast the data
 around, you can assert a data type, you know about local storage,
 how to get an item from the local storage.
[01:47:22]
 You know how to turn a string into an object with
 parse. You should know how to do structure. You should already have a
 function that does this. This is a NIF condition. This is, um,
 Redux have to save values into Redux variable.
 So you know all this stuff.
 You just need to know how to put the pieces together.
 If you don't know how to put the pieces together, you're going to have a hard time programming.
[01:48:07]
 So see, I'm refreshed it, I'm still signed in.
 I can sign out.
 Right here.
 I already did the steps I needed to do for signing out in the local storage. When I signed up, it's supposed to store an empty
 string. I did that already. We got up to the step and completed everything up to that step.
 So if I refresh, it's just still, so there's a bug somewhere here undefined.
 We have to find out.
[01:48:47]
 Oh, the string undefined.
 So undefined got stored as a string.
 So I can't store undefined in local storage.
 So I'll sign out and sign up and that's where we store undefined, but it gets stored as a
 string.
 So, that's why we need to store an empty value here instead of undefined.
 I mean an empty string.
[01:49:20]
 It only stores strings.
 If you put undefined here, you're going to get the error that I got where it's an undefined as a string.
 We'll contain something relevant.
 So, we'll just put it empty string there and it's basically mean it's undefined.
 Or, the other choice you have is clear in the local scoring.
 That's a different method, not the set item method.
 And then it will really be undefined.
[01:49:54]
 So the point.
 Here else, I'll just say, "The end of this"
 and then it's kind of down.
 Oh, in the component of the mouth.
 So I will put the count as starting off.
 Oh no, right there.
 Let's go on to find the local storage and it's the undefined string.
[01:51:07]
 See, the fine string, it's stuck in there.
 And then every time I try to parse it, it breaks.
 So I'm going to just manually clear this. [BLANK_AUDIO]
 >> [INAUDIBLE]
 >> Our set item.
 [BLANK_AUDIO]
 >> The mention is,
[01:51:38]
 we're gonna hear it properly,
 instead of sorting on the file.
 And store the empty string. So it should work now.
 I just basically intercepted it and changed the value. I'm going to refresh this.
 So we should see that this credentials key stores the empty string.
 that this credential is key stores that empty string and it is an empty string so this is this is gonna check is there a login no empty string is Okay, it's just jumping all around because of the pink right there.
 I think I can just skip all these.
[01:52:34]
 It's gonna work.
 I think it's gonna work now.
 And so you press this. I can sign it.
 Okay, so sign out.
 Let's see if I can sign out properly.
 Yes, I can sign out properly.
 I can see if I can sign back in.
[01:53:01]
 I sign back in.
 By refreshing, do I stay signed in?
 Yes, I do.
 So we have persistent login now.
 But this login will stay forever until the cookies are cleared.
 We're going to change that tomorrow when I walk through an exploration persistence exploration practice.
 So now we're going to go into the break. [BLANK_AUDIO]
[01:53:50]
 Start that over.
 I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break and now it's the third hour of class. So in this hour, you have time to work on the assignment
 or your past assignments.
 That's the capstone finale,
 which is at artificial intelligence and finishing touches to your CAFZone project.
 I can also do many evaluations, corrections,
 answer any questions you do have if you got stuck on anything.
[02:04:36]
 I'm going to start the breakout rooms.
 And as usual, one room for collaboration, one room for silence, and then one for many evaluations. Going to be open for 30, 45 minutes.
 46 minutes.
 I'm going to be here. Just raise your hand if you have any questions.
 But since the many evaluation for this week is not due yet.
 I won't be calling any names, but you guys can volunteer for corrections.
 Or ask any questions in the chat and then raise your hand.
[02:05:58]
 Let me know if you're stuck on anything. [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Music ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ [ [ [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [ [ Writing on Board ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [BLANK_AUDIO] >> Yes. >> Yes. >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
[02:23:34]
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
[02:23:41]
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes. >> Yes. >> Yes. >> Yes. >> Yes. Chris, you have a question? Yeah, I'm just wondering, did Raylon leave the class?
 Yeah, she's decided that she's going to redo this level.
 Oh, okay, gotcha. Okay, thanks. >> Question.
 I like Sandra.
[02:24:14]
 >> Yeah, I'm having a weird branching issue.
 I've tried poll push fetch everything and this branch will not get updated files that are in
 Maine.
 And the previous six branches were
 fine, so I just have this one stubborn branch or no grant or even. Okay, so
 as you share the screen.
 Is it visible or do I need to make it bigger? I can make it look little bit. - I see it. So you're in the branch called front read.
[02:24:48]
 - Oh my god, this thing.
 Front read comp.
 And so in Maine, there's a whole new folder
 under views that contains the new views for this.
 And it doesn't want them.
 It's, I've tried people trying to pull, you know,
 but I need, I want you need to merge main and do get merge main.
[02:25:15]
 I have tried it.
 There, do you see him now?
 >> There. Do you see him now?
 >> Yes.
 Okay.
 I think I've used various different things because some of the branches were stubborn.
 But yeah, I don't want to get confused about what I've already done.
[02:25:35]
 So every new branch I'm just pulling back, emerging, I'm pulling back into the, because
 I created all the branches first this time, which I don't like to do, but
 Yeah, you said, you shouldn't, you shouldn't do that. You should only create a branch. If you're ready to work, because
 I needed to see how it was all going to get organized in this particular case. So it's not been too bad. I haven't made too many mistakes.
 Yeah, because the problem with creating your branches ahead of time is just like what you did now. You just merged it in.
 You merged it in and it's not my preferred way to do it, but it was the only way I could keep track of this front end stuff and not lose what I was doing.
 Yeah. So then I would have forgotten. lose what I was doing. Yeah, so what if we forgot.
[02:26:35]
 Yeah, because, well, basically, she just be working on one branch at a time, like, you know, like a checklist
 without creating the branches in advance.
 I know. That's not what I normally do.
 Normally I create one branch at a time and I go through them, but I'm in a rush to catch them up. So I thought this way might be faster.
 Okay, so I'm getting close finished with these capstone front ends. Well, I am drafting capstone front end stuff. I wouldn't call it finished, but if you're gonna draft things
 that may be drafted on paper or separate,
 but not with your branches.
[02:27:14]
 - Noah, I'm writing the code.
 That's when I say draft, these are code drafts.
 - Yeah.
 - Okay.
 - Because it's only--
 - Well, you see, we got-- - Yes. - Or I will be with Raylon and have to retake the level. It's the only way I can finish
 Okay, so at least you got your files into that branch
[02:27:36]
 Yeah, I'll answer your question
 Yep, thank you. I don't know why I didn't had to merge it. I didn't have to merge the other ones. It was weird.
 Yeah, you don't have to, it was behind. The branch didn't have the files that you needed. So we needed to get those files into there.
 Usually, yeah, but I was able to pull, I was able to pull or fetch on the other branches. I didn't have to merge.
 That was the weird part.
 Yeah, well, usually you just merge it.
 But when you create a branch, you should create a branch
[02:28:15]
 when you're ready to work on it.
 And that way, it will have all the files you need.
 Because when you branch off, that's--
 it'll have all the files that were,
 you know, from that when you enter the branch command.
 So, okay, well, you at least have your files and you can.
 - I have my files, thanks to the concerns. [BLANK_AUDIO] >> Hey, hey Chris. Hey, Rose are in the capstone finale assignment. There's a.
[02:29:30]
 These are little section that says create a branch for updating the front and back into his post method.
 Is that just for like.
 Yeah, yeah.
 Is is is that just for like API calls that are using, that we've been using
 get for, or is there some other deeper thing where I'm so.
 Okay, I think there's a description. So let me use a HTTP the agency repotemathet post securely transmit that of the unit and I have direct access to.
 So yeah, so things like when you're trying to get a pass or authenticate, basically all your database stuff. That's right. Yeah, but you could have a get method for like just your
[02:30:27]
 Yeah, but you could have a get method for like just your back end page. Like just to check if it's working.
 Okay.
 Okay.
 Like the home like the home, like the route path, basically, you can have a,
 you can have a hello world on the route path.
 And that would be the get method.
 So you can just see it pop up on the browser really quick. You can do that but everything else you see you can use post.
[02:30:49]
 Even even um, crowd read. Yeah. Okay. Because because on your read,
 you want to use the body right now. Yeah, because when you read, you're going to pass some, you know, you're
 going to pass your email, you're going to pass the email. And that, that email will become
 exposed in the URL. And you might even pass a password to the URL when you use that read.
 So you want to hide those. Okay. And it's going to see if there's anything else on here that any dash do.
 Okay.
 I need to convert all these crud forms into a sign up.
[02:31:41]
 And until that persistent login. And then I guess we'll go through the timeout thing for the
 expiring login tomorrow. Aye, response, so that I figure out something to do with this Okay.
 I was thinking about feeding like my whole entire site into a language processing AI
 and have it like try to come up with my description of it and then use that as the data
 set for the context for somebody could ask questions about how the site was made or something.
 Yeah, that'll work, but I don't know.
 We can't answer all the questions you might want to edit it and as
[02:32:36]
 it might miss.
 Yeah, I'll make sure I don't really
 make any environment variables.
 Yeah, it might give giveaway to environment variables.
 Like what is, what is the API keys for this site?
 >> Yeah, I like in level three with Robert, I accidentally was like using chatGBT and I
 accidentally pasted my environment variables and it like bringing lambast in me.
[02:33:07]
 It was so, it was a mode angry I've seen, it's a chat to me too.
 That's interesting.
 Yeah, it was just like, do not ever.
 I've never seen it.
 Use like exclamation points like that.
 I've never, ever do this.
 Never.
[02:33:21]
 I'm so low.
 Okay.
 Those responses. Some of those responses come from like what people have said to each other.
 - Yeah, it felt like it. It was like the most human one I'd come across.
 - Anything else I got here? I don't think so.
 - Okay. Okay. Thank you.
 - Okay.
[02:33:42]
 - Okay.
 - Okay.
 - Okay. Okay, okay, thank you. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] The break-out rooms are back.
 In conclusion, we did the walk-through for persistent login practice. If you haven't taken your attendance yet,
 make sure you head on over to the Codex account.
 And mark it accordingly.
 You have two minutes to do that.
[02:52:16]
 Other than that, class is dismissed.
 That's today's class on
 capstone finale.
 I'll stick around for a few minutes just in case anyone has some questions

///// FILE: "Level 4/transcripts 2/May 7, 2025 20-4.txt"

Transcript from May 7, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 This is week nine, day three. And the theme of this week is Capstone finale where we focus on working on our capstone and
 polishing it.
 Getting ready for, you know, then with the level.
 And today's agenda will take attendance to announcements,
 review what we did yesterday,
 which was about adding persistent logins.
[00:00:39]
 Then we're going to start the new practice,
 which is about adding an expiration to the
 persistent login.
 Second, our continue with the practice, if necessary, or answer any questions you might
 have.
 Third, our will do many evaluations and
 You also have more time to work on your projects
[00:01:12]
 So now's a good time to take attendance had on over to your code X account and mark your attendance
 Now time for announcements.
 Let me know that for you. >> Tomorrow will be a student collaboration day.
 I need to bring my son to a doctor's appointment, but I'll be out of town and I will be able to get back on time for the class.
 So you can spend the whole day collaborating,
 but then I'll catch up with whatever else I need to teach,
 you know, the days following.
[00:02:19]
 Or any, like, any walkthroughs and things like that.
 And so these are gonna be the final weeks of class,
 capsule and finale, evaluations and presentations.
 Survey is still available in the July
 cohort.
 Did everyone finish that?
 Anyone did not do that yet? So David and you key did it.
[00:03:08]
 Okay, so yeah, if you haven't done it yet, make sure you fill it in.
 Many evaluations, remember there's 60 minutes each.
 So just put your notes in order.
 We can see the evaluation, the mini evaluation for this week.
 This one is based on past assignments like it's pretty old now.
 Like TDD, that's pretty old by now. Redux, that's pretty old. We TDD that's pretty old by now Redux that's pretty old
 we talked about that we talked about Redux in week six right now it's week nine
[00:03:58]
 Google App Engine so it doesn't at this point it doesn't for this mini evaluation, it doesn't have to have the AI yet,
 it just needs to be connected.
 Google Cloud, that's one.
 Google Cloud and App Engine.
 So just the App Engine.
 We talked about that on week six.
 But we talked about AI.
[00:04:40]
 But this one is not about--
 this part right here is not about programming the AI.
 It's just about the website.
 So week seven is when we talked about AI.
 Actually, we talked about, we talked about it for two weeks.
 So a week eight was more about the programming.
 Week seven was more about concepts and setting up.
[00:05:11]
 So this one is so this one right here is more about more about concepts from week seven.
 So these are all topics. So you should be familiar with it. As long as,
 you know, there are two weeks back. So you should be familiar with it.
 Two weeks or more back.
 Remember to add us and your mini evaluations to mission.
 We could get on the waiting list and get the on time point.
 I can do corrections for week eight until Saturday.
[00:05:59]
 And then I can do the mini evaluations for this week. And the on time point, you would have needed to submit
 this, clicked on that, add submission button before a class. Okay, next, these are the assignments.
 This week, they're going to all get graded.
 So, I hope you're getting further along here.
 Each assignment here was like one week,
 one, two, three, four, five, six, seven, eight. and this one right here was really easy, the app engine one.
 Okay, so if anything closed on you contact the student success team let them know what's going on and ask them if you can submit some points.
[00:07:10]
 Get more points on these.
 Practice problems if you didn't get a copy of them. They're all here on the on the side.
 Let's see. I think I saw something pop up in the July cohort, or maybe not. Oh, here.
 Okay, so, you could, it was took a different approach there.
 Or passing a value from a handler.
 And notebook LM, oh, no, help seeker. So Herman is available for mentor meetings again.
 But if you need help, send me a message and, you know, I'll probably
[00:08:29]
 do a better job than these mentors because I know the material better. I can save
 you time. I'm supposed to, you know, help you pass this class and I have more time, you
 know, the following week.
 So I just send the message and I might even be available short notice.
 Today I, you know, Alexandra sent me a message and then,
 20 minutes later, we were in the online classroom and I was helping her out with some TDD.
 Yes, we, driven development.
[00:09:06]
 So, yeah, I'll send me a message
 and I might be available short notice.
 But don't get stuck for more than 15 minutes,
 otherwise you're just wasting your time.
 If you get stuck for 15 minutes or more,
 post your problem or question in July cohort. Next is notebook LM. Use it to your
 advantage so you can find your notes and your code. And we're in the, we're in in what day and what time I said something in class by giving notebook
[00:09:47]
 Lm the transcripts. So transcripts are available up to day one. I can add day two today.
 Maybe during the break, I'll add day two transcript.
 I'll add the to transcript.
 Okay, so as usual, go through the recordings in order.
 And, but remember, these recordings are only based on the sandbox.
 Okay, and this week, we are working on the capstone.
 So don't get, I mean, use the recordings, but you have to know that you need to be applying the principles to your capstone.
[00:10:42]
 Okay, so now we're going to review. If I say anything new, make sure you put it in your notes.
 Or if you, if I say anything that you might have missed, put it in your notes, I'm going to review the walkthrough from yesterday.
 Also have your microphones ready. Just in case you have questions or I'll be calling names for the mini evaluation today for the third hour.
 Okay, so now time for the review.
 Persistent login practice.
 So this is what I showed you yesterday.
 So let me get that loaded up here.
[00:11:56]
 Let me see if we can get the sand box loaded. And it's worked that we did in the front end. and but it needed help from the DynamoDB backend because there's logins necessary for that
 and DynamoDB contains our logins.
 Okay so I'm loaded up here.
 Okay so the front end persisted login practice where we
 Were able to keep the login status persistent so it stays even when the page is refreshed
 Going to start the front end server
 And we can start
[00:13:17]
 Start the back end server. For the back end server there's two starts and then start two.
 One is the server and then one is the builder.
 This one serves on local hosts.
 This one updates the code whenever we make changes. So in the front end when users authenticate store their email and password in an object.
 Okay, let's look at the files that we need.
 Front end where did they authenticate so that we could look at the
 sign in area. Sign in area renders the sign out model or-in model. The one where they authenticate is the sign-in model.
[00:14:27]
 So if they click on sign-in, they provide the email and password, it's going to go to
 handle sign-in attempts. If everything works out fine and they sign in, we're going to get their account information.
 Okay, so the instructions here says if the front end, when the user's authenticates, or their email and password. So that means if we get their account information,
 that means we also have their email and password.
 password. This is the store their email and password in an object. So here's it, here we're creating an object, storing their email and their password. I made a new data type here just for credentials only, email and
 password. credentials file is just the data type is in modules right here.
 Right there, this is the describes. This is just the data type.
[00:15:51]
 data type. Actually, data types, if you're just going to have files that store data types like these, they're usually stored in a folder called models. Like this.
 like this. Use it called models.
 So, this is new.
 You don't have to do this, but this is, I want to, just, you know, I usually, I usually
 do this.
 I usually put it in the models folder.
 But it's optional for you guys.
[00:16:22]
 So account is a data type file. I'm going to put that in the models
 folder. And also credentials is a data type file. I'm going to put that in the models
 folder.
 It's called models because it's just like modeling the shape of an object.
 It's just what it's called.
 Maybe it's just to
 in some databases, some databases. A data type is called a model.
[00:17:07]
 So that's why it's called models.
 I mean, for us, it makes more sense to just call it the types folder.
 But if you want to, you know, just follow the convention. And if you want to, if you're going to look at other code,
 you won't be like too confused when you see the models folder.
 Because that's what you might start doing. You might be helping other people with their code or
 working for a company. You're going to see the models folder. And at least this is just a heads up where you can have
 data types in there.
[00:17:50]
 Data types and also classes.
 So classes are also data types, right?
 They're custom data types.
 With the custom data type, I like to use
 the keyword type.
 Especially because this one. It helps create a serializable object, which is compatible with
 Redux.
[00:18:21]
 But if you use a class.
 You can use a class to make a custom data type. But if you
 use that, then Redux won't be able to store it. It classes, objects made from classes,
 are non-serializable. Well, they are serializable if you don't have any methods in them.
 Basically, if you just make your class look like this without any methods,
 I think they can be serializable.
 Let's see what else.
[00:19:07]
 the models folder. When you're having any other classes.
 There's a car class right here.
 It moves like data types.
 Yeah, it would make sense to move these into the models folder.
 I think that's it for now.
 Okay, going back to this, we created an object to store an email in password.
 Right here.
[00:19:53]
 And then the next step.
 Use JSON stringify to convert the object to a string.
 Here it is. We're using JSON stringify.
 Here it is. We're using JSON's stringify, taking that object right here, which contains an email
 and password, turning it into a string, taking it into that variable.
 We're going to store the string with local storage.setItem.
 So here's localsORI and it's not set item.
[00:20:27]
 You provide the key, I think of it like a variable name.
 So in this variable name, we are going to store the login string.
 So this is a variable name, right?
 But the local SORI doesn't know that. This is a variable name, right? But it--
 the local storage doesn't know that. So you have to provide a variable for--
 this is also known as a key for this value inside of a key.
 Just like this, this is like a key,
[00:21:00]
 and then this is like a value.
 So it's going to look like that in the in the browser. This is local storage is this
 storage inside of a browser. The browser will sort of have like a
 key and then it will have a property for a value.
 And then next step.
 And then next step. When users log out, store an empty string.
 So the part where users log out, that happens in the sign out
[00:21:36]
 model.
 Here's the sign out model.
 If they want to sign out, it's going to get to the handle submit.
 So this is the sign out part, because I'll click on the sign out button.
 So actually let me, let me love the website. This is, which I'm signed in already, signed up.
 The persistent login was still working.
 All right, signed in, if I give it a email and password, I'm going to be signed in.
[00:22:23]
 Okay, that was all handled with the handler.
 The sign in the handler right here, handles the mid.
 But now for the sign out, it pops this up and I need to click on sign out.
 So when I do that, it activates this handler.
 And so this is the sign out phase.
 When the user's logout stored empty string with local storage set item.
 Local storage set item. So we're going to set this key.
[00:23:03]
 Or get set the value of this key to an empty string.
 Basically we're clearing out the value of this key.
 Okay, so now we want to check.
 I'm going to sign out here.
 So when the page reloads, like, or when it loads for the first time, we wanted to check
 if someone is signed in or not.
 Right now, nobody is signed in.
[00:23:47]
 But if someone were signed in, we wanted to check if they were signed in.
 But you don't want to render this button yet.
 You want to check if they're signed in before you render that button. So,
 when the sign in area mounts,
 so this is actually the sign in area,
 it think of the sign in areas like a blank box,
 and then the sign in area will decide which button to render.
[00:24:24]
 But in this case, we don't render anything right away in the Mount phase.
 First, we just get the persistent login.
 We check if it's there anywhere.
 We had to bring this out to a separate function because we wanted to use a sync.
 Because you can't use a sync on component-in-mount.
 The reason is because if you're going to use component-in-mount,
 it expects, if you're going to return something, it expects for it to be a function, which will be the
[00:25:07]
 component in Unmount function. But if you put a sync in front of here, it's going to
 think you're returning a promise, which is not compatible with component did not melt. So we're going out to a different function
 so that we can use async.
 We're going to check on the login.
 This is an inner function because we need access
 to set button here.
 This button gets rendered right there.
[00:25:53]
 Okay, so,
 when decided area mounts,
 get a login with local stories that get item.
 So here it is. When the component mounts, we're going to go here and check if there's a login. See what value is here in the credentials key. If there's a value, we're going to store it in here in this login.
 So right now there is no login information.
 Right, I just signed out of my login.
 So it's going to skip this code block.
[00:26:39]
 So this only works if there's a login.
 I'm going to skip that code block.
 And then it's going to go here the account.
 Well since it's started off as undefined,
 it's going to also skip this because there's no account.
 Therefore it's going to set the button to sign in model.
 Sign in model.
[00:27:05]
 Sign in model gets, will get rendered right here,
 which you see right there.
 I'm going to put during the mouth face.
 It's something that it stopped. And then stop. And stop on the debugger.
 We refresh that.
 There it is.
 Okay, so there's the mount phase.
[00:27:56]
 I just refresh the page.
 You don't see the sign in.
 Before it displays the sign in,
 it's going to check for a persistent login.
 Here it is.
 So we're starting the account variable as undefined, because we don't have an account yet.
 It's going to check if there's anything saved in the local storage.
[00:28:27]
 And there should be a string.
 There it is.
 This is a JSON string.
 It looks like an object, but it's just a string.
 You see quotations on both ends. So there's a login.
 Going to convert that login with JSON.parse right there.
 So if a login was saved, convert it to a login object with JSON.parse.
[00:28:59]
 And we're going to convert that string to an object.
 So now it is this object here.
 Actual object within email and password.
 Instead of a string here, see they look different.
 This one's just like on one line.
 This one here shows the properties on separate lines and you also see object right there.
 on separate lines. And you also see object right there.
[00:29:34]
 And we're going to use the email and password from the login object to authenticate.
 So we have a login object here. We're going to extract the email and password from it.
 So it's extracted.
 I'm going to try to authenticate.
 And we don't see the button rendered yet.
 So is there an account? Yes, there is.
 We see an account that came in.
[00:30:09]
 We have an authentication works.
 Because if it authenticates, we get an account.
 If it doesn't authenticate, meaning
 if the email and password, they don't correspond.
 We will get undefined here.
 But since we have an account, it's going to go into here.
 Basically, it's going to save that account information with Redux.
[00:30:41]
 And then it's going to see that there's an account, and then it's going to put the sign-out
 model.
 And so we see here the sign-out model.
 So if the login, if the credentials authenticate, login the user.
 So that's what happened here.
 So we checked if it authenticated.
 We got an account that means it authenticated.
[00:31:13]
 So the way we login is basically just tell Redux that somebody logged in and we provide the account information.
 account information. If the credentials don't authenticate store an empty string login with local storage. So this is the part where if it authenticates
 do this, but if it doesn't authenticate, do this. So this is where we're starting that empty string just making sure it's
 cleared.
 Now, wait, we're not storing any login information.
 If the user changes their password, we haven't done this yet because we didn't activate the feature and add account editing yet.
 Okay, so we only got up to step nine. And now everything works.
[00:32:20]
 I'll press play here. Okay, it already ready started.
 So I'm signed in because you see a sign out button there.
 Now I can refresh.
 Oops, the debugger is on.
 Okay.
 Press play here. Okay.
 Press play here. I refresh the page and I'm still signed in. Refresh and I'm still signed in. I can go to a different page.
[00:32:57]
 Refresh. I'm still signed in.
 So that's a persistent login. That's what users expect.
 When they're signed into a logout,
 I mean, when they're signed into a web page,
 they don't expect to be logged out,
 if they refresh their page,
 or switch to different page.
[00:33:18]
 Okay, so now that's it for the review.
 Would cons once be moved as well?
 Let's see, what's that question?
 U.K., I missed that. with question we're asking
 if you can use the microphone
 if it takes you long the time to a movie custom export funds and models folder.
 That's not a data type. If it's a constant, it's an actual object.
[00:34:28]
 That's more of a module.
 Unless somehow it is a data type.
 But usually those of the modules. So, usually classes and data types go in the models folder.
 Again, this is optional, but I just be aware that this is a widely adopted convention to put data types in the models folder.
 Okay, so that's it for the review session.
 Okay, there's another question.
 Do classes that are filled out?
[00:35:22]
 and do classes that are filled out.
 No, those will go in your modules if you make pre,
 if you use your models to, like you have classes here, so you have a link card class.
 Those will go in here, but then your modules, you would have your actual instances.
 But it's up to you. If you want to put your your instances in there,
 I guess you can put it there, but it's more like a data kind of thing.
 So there, you might want to put a, if you want to sort it out, you might have like a data folder.
[00:36:25]
 With technically all those things can be put inside of the modules folder, but if you want to spread it out and put it into a data folder, folder, you can do that.
 The, technically, those instantiated classes, like pre instantiated, there was our, uh, you can think of them as data.
 Otherwise, just keep them in the modules folder.
 is keep them in the modules folder. Let's see, okay, yeah, I was in sharing my screen there. Sorry.
 Okay, now time for the practice.
 And this one is about expiring the persistence.
 Expiring the persistent login.
[00:37:47]
 So I'm just copying this page. I'm going to put it in the notes. In the practice section here, let's see which ones are the keywords and I'll look for the the type of is here. Okay, so here are the keywords date.now.
 It's a function or method.
 Email. email password these are keywords these are properties for an object
 this is the name of the practice
 I'm just going to not that one. It's like that.
 Let's see here current timestamp. I think I'm going to put here, make it one word. understandable and it doesn't conflict with this timestamp.
 Okay, so that's getting get long and info. This one is a log n will save convert.
[00:39:32]
 So log n object.
 So that one sort of comes from login practice.
 So track the current timestamp.
 So I'll go over these.
 Let me just.
 And the timestamp from the login object.
 Check if the difference is greater than.
[00:40:07]
 This is a number that's milliseconds.
 Empty string.
 Empty string indicates an expired login. And we'll require users to reauthenticate. Okay, so we're good.
 Now let's walk through this practice here.
 Expiring persistence practice, after a set about a time,
 expiry persistent login,
 so users must re-enter their credentials.
[00:40:42]
 So this one only,
 this one will only expire their login when they reload the page.
 If they just stayed logged in to your website and they don't reload anything, they will
 stay logged in.
 And this is a simple mechanism that works
 when the page mounts on a reload or a refresh.
 So now what we want to do in the front end,
[00:41:22]
 when users authenticate, get a timestamp.
 And he put a
 when you highlight that there.
 So when they authenticate.
 So which part do they authenticate?
 They authenticate somewhere here in here.
 Okay, so this is where
[00:42:01]
 sign in mode.
 There's an account
 Get us if they authenticate get a timestamp so let's see which parts that I put it
 Gonna do it after this this this batch
 So the timestamp is going to be date dot now. That's when they logged in.
 Okay, that's how you get the timestamp.
 Let's see what that looks like.
[00:42:43]
 Put a debugger right here.
 So what does that timestamp look like? It's a big number.
 It's a big number.
 So that's basically milliseconds right there.
 Miloseconds from, I think, I forgot what, like from how long ago.
 Like 20 years ago, I think.
 Starting from 20 years ago, that's how many milliseconds have lapsed.
[00:43:30]
 Something like that. No, more. I think in the 19, like 30 years ago.
 Anyways, that's how many milliseconds have elapsed maybe 30 years ago starting from 30 years ago.
 And then the next step is store the user's email, password, and the timestamp in the password. I want to store that timestamp.
 That's going to be the timestamp here.
 I'm going to just rename this so it doesn't get confused with
 The property right there
 So credentials I need to update it. That's why we see this underlined there. It says
[00:44:40]
 Let me refresh this says
 I mean refresh this says type step does not exist in credentials. Because credentials suppose it only only it's supposed to only have email and password.
 I'm going to edit that and add a timestamp.
 That's a number.
 Okay, so I added the credentials data type, added the timestamp.
 So this basically says all credentials objects should have an email password and a timestamp.
 And the email should be a string. The password should be a string. And the email should be a string, the password should be a string, and the time stamp should be a number.
[00:45:33]
 Okay, and here we set the data type.
 That data type, it helps because if we try to create that object and we're missing some properties.
 Like I'm creating an object, it's telling me I'm missing something. There's a red line there.
 Telling me I'm missing email password and timestamp. So I need to put those in. You can only do that if you put the data type there.
 You need to put the colon and the data type.
 To help, to let TypeScript help you create objects.
 Now we need the store.
[00:46:25]
 So persistent login practice, we just finished that.
 We need to use those instructions to store the login info with local storage.
 So that's basically this right here.
 Take this object, right there, stringify it, save the string right there.
 And then in local storage, we'll use the set item method. Basically it sets this credentials item or key. This credentials key or item will have the value right here, which will be a string.
 So let's take a look at what value this would be.
 We love here. Sign in.
[00:47:36]
 Okay, so this log in string, the value of that is this string right there.
 Okay, so that's what we're going to store in the credentials key.
 I think a bit like a variable in local storage.
 Okay, so that's what's stored in local storage now.
 Let's see here. When the sign in area mouse,
 I have an area right here, one at mouse, so that happens here in component in mount. Get the current timestamp with date.now. I think I want to change this one here with current time stamp to
 avoid confusion when saving it to an object.
[00:49:11]
 So when the sign in area mounts, get the current timestamp. The date path now.
 So here's the sign in area.
 I mean, here's when the component mounts, get the current timestamp. Actually, I could do it out here, but since this
 wouldn't stay concierge of everything, we're gonna do it in there. So where should I
 put it? Well, let's just put it at the top here now the current timestamp.
 So we have the current timestamp, or we will get it.
 Now, use the persistent login practice instructions to get login info from log local storage.
[00:50:08]
 Okay, so it's already doing that.
 This is getting login info from local storage.
 So you can get item.
 It's checking what's stored in the credentials key or I think it's a is variable. This should have, this should return us this string.
 stopping right there.
 Here it is.
 Okay, so it should be giving us a string.
[00:51:09]
 Now log it as a string right now with an email password and time stamp. It's this a string.
 We need to convert it back to an object here.
 When spent by the time, convert it to an object.
 This one extracts the email an password.
 Okay, so we did we're doing this right now. We converted to a login object in JSON.parse.
 Okay, right there.
 Convert it to Enloggin object.
[00:51:50]
 I call it a credential right there.
 Subdracked the current timestamp
 and the timestamp from the login object. Okay, so it wants to do it. Okay, so I should
 be doing it after this. After I actually get the values here, so I'm going to get the
 time stamp from this credentials object. Because I need a comparison.
 So I'm going to move this one down
 to when I need it.
[00:52:31]
 I'll need it down here when I'm going to compare it.
 I'm going to move it down there. Subtract the current timestamp and the timestamp from the log which is coming from the So this one is, so this is elapsed.
 So that is current time stamp minus time stamp. Because I extracted the time stamp, which was saved inside of local storage.
 The current time stamp is now, but whatever was, whatever is in the local storage, that was
 back when I logged in. So we're going to get a elapsed time from there. I'm gonna save this and try this again.
 And I'm gonna get the current time stamp.
 Let's see what the elapsed time is.
[00:54:07]
 Lapse time is...
 Is...
 Is it on you?
 It's not showing one that's your questions.
 Okay, this is how the 400 seconds, basically, 400 to 11 seconds.
 That's the laps time. Basically 400 seconds since I logged in.
 I think I can finish this and then we're going to take a break after I'll finish this.
[00:54:56]
 It's almost done.
 Check if the difference is greater than 86, 86,400,000.
 So I'm going to do it right here. If
 it's expired, I'm going to use a Boolean variable there if it is expired. So what
 does this expire with me? That means that the elapsed time is greater than 86 and maybe $86,400,000.
 $86,000,000.
 $86,400,000.
[00:55:57]
 So if it's expired, what do I want to do?
 If the difference is more than one day
 store an empty string or the login in local storage.
 That means I don't want to have an account right there.
 So I don't want to authenticate if it's expired.
 So if it is expired, local, we're going to put an empty string in local storage.
 We're going to use set item, change the credentials,
[00:56:53]
 and empty string.
 But if it's not expired, then I want to go on with this stuff right here. If it's expired, then there's no point in trying to log in, right?
 So that's why this part is in the L-state.
 I just moved it into there.
 And if it's expired, I want to just figure out the local storage.
 Basically, the empty string indicates an expired login, and will require users to reauthenticate.
 So that's basically it.
[00:57:59]
 Let me just try this.
 All right, so we're going to put this right there. We're going to check, is it expired? The answer is, this is not showing you the value of false. It's not expired. If it's not expired,
 it's going to go ahead and go through here. I'm going to change this number to make
 it a lot smaller so we can watch it expire.
 And I just turn it into one minute. That's
 160 seconds.
 Or 60,000 milliseconds.
[00:59:05]
 Oh, maybe this is going to be 30.
 Actually, it is already expired, because it's 400 seconds
 have been lapsed already.
 So it's going to-- I've just reset it.
 I'm still logged in.
 Now it's going to check if it's expired.
 And it should be because I've been logged in for 30
[00:59:35]
 logged in for
 710 seconds. This one says it will expire my login after 30 seconds.
 Okay, so it should be expired.
 Yeah, so if it's expired, it's going to clear the local storage.
 And then it's going to choose the correct button here. So do we have an account? No, we don't.
 So it's going to put the sign in mode instead. That's what we see, the sign in
 mobile. I'm not signed in anymore. You've got expired. This only checks, it only gets checked during the mount phase.
[01:00:25]
 When the page reloads or refreshes.
 If they never reload or refresh, then they'll stay logged in.
 So we can watch this happen.
 I guess we'll watch it happen after the break.
 Just stick and break. [BLANK_AUDIO]
 See, I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break.
 And just to finish off the practice, we're going to see if it works.
[01:11:30]
 Expiring persistence practice. So we're going to see if it expires my login after 30 seconds.
 I'm going to remove these debuggers here. My login has been expired by now.
 Okay, press refresh. I'm not signed in. I'm going to sign in right now.
 And then I'll sign in.
 I'm going to keep refreshing it.
 So I'm still signed in.
 It'll only expire the login after 30 seconds, because that's what I've said the expiration
[01:12:30]
 for.
 I'm just pressing the refresh to see if I get signed out after 30 seconds.
 It'll sign in.
 Okay, now I'm signed out.
 My login has expired.
 I have no choice but to sign in again.
 Let's see if it still works.
[01:13:01]
 Can I refresh?
 Yep, I can refresh.
 I should be able to sign out and then sign back in
 and that expiration timer should start over.
 I should not continue where it left off.
 So let's see, let's make sure it doesn't cut off my, my persistent login.
 It looks like it's, it looks like it's going for 30 seconds. So, still signed in.
[01:13:56]
 So, it's using the full, it's using the full,
 it's using the full persistence.
 Has it been 30 seconds yet?
 I think it passed already.
 There might be a bug here.
 already there might be a bug here did not step the time out
 think it past 30 seconds so there is a bug somewhere
[01:14:40]
 forgetting something
 for getting something.
 Yep, there has to be a bug. It should have been signed out by now.
 So let's see what the expiration is.
 Let's watch it go through this process here. Okay, so there should be a login.
 Oh, it's empty.
 The login is empty.
[01:15:38]
 Oh, let's see here.
 Account. here account. Login is empty. So it's going to skip this part.
 [BLANK_AUDIO] Oh, did I match?
 Okay, I was looking at the wrong thing.
 I was not saying that at all, that's why.
 Check that one more time. I'm signed in. I'm going to sign out. I'm signed in.
 I'm going to sign out.
[01:16:51]
 I'm going to sign back in.
 Okay.
 It says sign up.
 All right.
 I guess I just got confused.
 And when I thought, I think when it said signed in,
 I thought that when it said signed in,
[01:17:08]
 I thought I was signed in.
 So right now it says sign out,
 because that means I'm signed in.
 And I have the option to sign out.
 So if it expires my login,
 it should say sign in pretty soon.
 Okay, there.
[01:17:29]
 All right, so again, sorry about that.
 It's working properly.
 I just got confused about what that was about.
 Okay, so it's not going to be 30 seconds for expiration.
 That was just for test.
 Now it's going to be a day for expiration.
 I'm going to be unable this night.
[01:17:49]
 Okay, everything's working.
 We have this whole hour to, you guys can practice this,
 or if you guys have any questions or need help on your assignments or your capstone,
 I'm available to ask questions.
 If you want to do your mini evaluation now, we can do that too.
 Or corrections.
 Or if you have any questions about, like your recent assignment, that was graded.
[01:18:31]
 And you're not sure about the comment. I can answer questions about that too. I'll start the breakout room for 36 minutes.
 So you can choose what you want to do.
 If you want to collaborate,
 or just work in silence, or if you want to do mini evaluation.
 In the meantime, I'm going to start converting the sandbox to use Redux. In a chance, all my state variables to use Redux.
 But you can interrupt me any time if you have any questions.
 But I'm going to share my screen and convert everything to Redux for the sandbox.
[01:20:03]
 Okay, so how do you convert everything to Redux?
 I guess we can start with a sign in the area.
 So we have a button right here. These are not redux.
 And we also have a did not out, which is also not really.
 So I think I can convert that easily.
 I'll convert the didn't out.
 And you convert it.
[01:20:40]
 First start with state variables.
 If you're looking at the
 Redux mumps here.
 And you look at the diagram.
 I'm going to start at the top basically. Start at the top.
 The store.
 Well, the state variables are part of the green. Start at the top, the store. Well, the state variables are part of the store.
[01:21:07]
 So, I'm going to start with that state variables. Which one I'm going to add, I'm going
 to add the did mount of the side and side in area. I'm going to make a new case. I'm going to make a new category here.
 Sign in area.
 Did mount.
 It's going to start as false. So that's pretty much it for the state variables file.
 The next one, select here.
 So the selector for that one, I'm going to create one here.
[01:22:35]
 Select Sign in Area, did not. So I need to select that from here.
 Sign in Area, did not.
 I can see it there. Sign in Area, did not. I can see it there. Sign in area did not. That's it for that.
 That's the selector. I just basically copied and pasted one and changed some names around.
 This one's called select sign in area did not because that's because I want to select sign in area new mount.
 Next one is, okay, so I'm going to go down here.
 I'm going to change it now.
[01:23:18]
 I'm going to go to the view component and select that.
 So here it is. This is the sign in area. I'm not going to use did melt anymore.
 And instead I am going to
 select this use the selector to get it
 select
 sign in the mount
 sign in area did not
[01:24:02]
 okay that's pretty much it for that.
 Now TypeScript is telling you where the error is.
 So there's only one right there.
 I need to convert this.
 We're going through this diagram.
 I've selected it.
 I use the selectors to select it in the view.
[01:24:26]
 Now I need to create the action.
 Right here, the action is, I don't need, I'll leave that one there for now. I need to convert this.
 So I need to get an action. And what provides the action, that's the set. That's the set object. I need and
 what do I want to set? I want to set sign in the mouse. Sign in area This one is missing the automatic
 intelligence. We didn't make this object so that's up to Redux.
 There might be a way to get it to pop up, but the way it is right now it's not popping up for us.
 So what we wanted to, we wanted to set the sine and area didn't melt.
[01:25:33]
 True.
 So now we have the action.
 Now we need to dispatch it.
 Now we need to dispatch it, but I need to dispatch it to do that, Now I can comment this out.
 This part right here, I didn't work on this yet, so I need to finish that and we have an error here.
 Because I didn't do this part, this is the set state setters. It takes care of their producers state setters
 I need a set create a state setter for sign in area in the mouth.
[01:26:47]
 Sign in area in the mouth.
 And I just need to update this one.
 Sign in area of the mount. This one, I'm going to update this to is that
 action credential is action boolean. Because the mount is a boolean. Action boolean is a
 data type I made down here that says that the payload is going to be a boolean.
 says that the payload is going to be a Boolean.
 Because it did not start even through our pulse. So this payload is going to be a Boolean.
[01:27:32]
 And that's what's going to get stored in the signing area
 that did not.
 OK, so it worked.
 There's no more error.
 I should be able to-- if everything works right, Okay, so it worked. There's no more error.
 I should be able to, if everything works right,
 I should be able to log in here.
[01:27:49]
 Okay, and I should be able to log out.
 Actually, I should be able to refresh.
 Then we go to persistent login.
 Okay, the did not has been successfully converted.
 I can remove that.
 So it's using Redux now.
 Let's move this up here. Next, the button. This one I need to use a
[01:28:31]
 place holder. Why is it because there's JSX or HTML. Basically we're going to
 store component or HTML or JSX and those are non serializable. If I try to store it
 in Redux, it's going to have a, there's going to be a problem.
 So I guess I'll show you that problem.
 Let's see what happens if I try to store a React component or JSX in a Redux state
 variable.
 So I'm going to start from the top again.
[01:29:24]
 Start from the top again, start from the store, and what takes care
 with which file is involved with the store.
 That's the state variables.
 This is the sign in button or the, what I call it, basically the button in the sign-in area.
 So I'm going to categorize it right here under sign-in area,
 but, if I try to start it with a empty tag,
 I'm going to have to change this into a TSX file.
[01:30:08]
 I don't want to do that, but that's the only way to show you
 the non serializable type. And if you have JSX, you should also import React because and UJ-SX into JavaScript using this React object.
 Next one is the selector.
 Copy this one, make a selector for the button.
 Sign in area button right here.
 Change this one to button. And that's it for that.
 Next go to the component where I'm using comment this out now.
[01:31:47]
 I want to have that button.
 Once the button equals the select there.
 I want to select the sign in the area of button.
 So we have a button now.
 Okay, we're gonna change the setter. place it with an action and this set it to any, and then we'll replace this with set. What am I going to set? I'm going to set the sign in area button to that sign-out mode.
 to that signout model. So if there's an account, I'm creating a work order, it changes the sign, the sign an area button to the signout model. Otherwise, I want to create a different work order for action where I want to set the
 sign in area of button to the sign in mode. And then after that, that's where I want to dispatch the action.
[01:34:21]
 So you see here, action is empty at first. This is what determines what goes into the action or work order that the dispatcher is going to hand off to the reducer.
 This is the dispatcher that's going to hand off the work to the reducer.
 Going to give the work order to the reducer. Your reducer does the actual over. Okay there's another area here that needs to
 update. I'm gonna do the same strategy let's action. I'm just gonna put any so because I'm just going to put any, because I'm not really going to check the properties of it.
 So just put any, you could put the exact data type there, but it's only really necessary
 if you're going to check the, if you're going to do like the documentation and check
 what properties are inside of the object. But since I'm not checking anything in that object,
[01:35:32]
 I'm just going to use it,
 I'm just going to use it and hand it off to the,
 I'm actually I'm just going to use it to store
 an object that
 comes from this method.
 So I'm not really using that notation on that action
 object.
[01:36:04]
 You need to remember it to dispatch that action.
 And that should be it.
 Let's refresh this.
 Okay, oh no. I didn't do the, so I do the dispatch.
 Now I need to fix the reducer.
 That state setters.
 I don't have a setter for it yet.
[01:36:44]
 Sign in area of button.
 This one's not a boolean.
 I'm just going to put action regular action for any.
 Is this one for any?
 Yeah. Yeah, because it's an object.
 And the payload right now it's any because that one's also an object.
 Like a react elements.
[01:37:23]
 JSX. I don't think it's going to be an object.
 I'm just going to put any, so just to make it easier.
 This one should take care of it. Okay, let's show the Okay.
 I'm going to show the,
 I'm going to show this part here.
 We see there's an error.
 Non-sterializable value was detected.
[01:38:19]
 The sign in area button.
 Basically you cannot turn the side in button or that JFX into
 the JSLance string. And if you can put the Redux It's right here.
 It shows that it's storing everything properly, but there's a potential for bugs.
 Because when you make changes to objects, sometimes when you store non-sterilizable objects,
 as a redox state variable, sometimes there'll be situations when redox can't keep track of it.
 That's why redox is recommending to use serializable.
[01:40:05]
 Don't use non serializable.
 Okay, so basically to get rid of that error,
 store a string instead of our store a placeholder.
 Store a placeholder instead of a non serializable item like JFX or react
 components. So placeholder is basically going to be a string. Just going to
 store a string that says sign out model
 I'll replace it right now because I'm pretty much done with I'm going to replace it right here, sign in
[01:41:09]
 modal. That's my placeholder. Same thing over here. Sign out model.
 This one sign in model.
 I'll just string. Okay, so when this tries to render, it's just going to render strings.
 Actually, I think I have a non-zero lines.
 Yeah, this one right here.
 The beginning state.
 This one right here is non-cerealizable. Start it as an empty stream instead, as an empty stream.
[01:42:12]
 There are no more bugs, right? No more error, no more, it doesn't save. It doesn't have the non-sterializable error anymore.
or cannot be JSON-strinified. Redux doesn't like it,
 so we're just gonna put a placeholder
 that Redux can deal with easily.
 You can deal with strings easily.
 We can also deal with strings easily. [no audio] it's just rendering the string instead of an actual button, right? So I need to change that.
 If I put a debugger right there,
[01:43:38]
 then refresh. I will see that the button starts as an empty string right now it's an empty
 string so it's gonna render nothing and now let's see what it is now it says
 sign-in-modal the string so that's why it's gonna say here sign-in-modal the
 string that's not what I want. I want an
 actual button. So I'm just going to replace this. I'm going to put a let
 statement right here so I can change the value of the button for that sign and load.
 I'll put any right here too, because to get rid of that, because it's expecting a string.
[01:45:00]
 And then other one, other cases, if it's a sign-up model, render the sign-up model instead.
 Okay, so now it's refreshed. I'm going to refresh the page. So a button right now is an empty string.
 So it's not going to render anything here. It's not going to render any of these.
 Now, button says the sign in model, the string, it's going to get down here.
 Okay, so button says sign in model, it's going to be replaced by the actual sign in model.
 And then that's what gets rendered down there. And that's what we see.
 Sign in mobile and button.
[01:45:59]
 So recordings are not loading. Let's see.
 That's what I see there is a comment by Yukey saying that recordings are not loading. Let's see if that happens on my side.
 Okay, so this one was from yesterday. Okay, so this one looks like it's working fine.
 Now it was from yesterday.
 I was trying to run for it today. I mean two days ago.
 Now it's fine for me.
 So I've successfully converted the sign in area to use Redux only.
[01:47:45]
 You select or use selector, you select or use dispatch.
 There is no use state anywhere here.
 And notice that there is no condition in the render.
 There's no like an end symbol or anything like that.
 My conditions are outside of the render and
 If I don't want to render anything
 It's it starts off as a empty string as an empty string
[01:48:19]
 So basically if you store an empty string here, it renders nothing. So if there are times when you don't want to render anything, or an empty string,
 do it from outside with a condition that you need to. [BLANK_AUDIO] There's a, there's a, there's a another approach to this called mapping.
 Another question show you guys or just leave it like this for now.
 can show you guys or just leave it like this for now.
 I mean, you know what,
 they'll help you remember
 dynamic properties.
[01:49:44]
 Let's see here. And that will go to work.
 I'm going to try mapping here.
 Since there's no questions, I'm going to try mapping.
 Basically, you start with an object.
 I'm going to put it down here. Let's see.
 All the buttons that I want, they're either going to be sign in area, or it will be either
 sign in model or sign out model, sign in model, or that's going to be something, right?
[01:51:06]
 That's going to be something.
 And the sign out model.
 That's going to be something.
 What do I want those to be?
 I want those to be these right here.
 They're signing mobile. So those are my different buttons.
 Right now it doesn't affect anything.
[01:52:01]
 It's just outside and I'm not using it. So how do I use it?
 I'm going to comment this out.
 I'm going to change that button here.
 I'm going to go that button me.
 It will be, it's going to take that mapping I have of buttons, and it's going to take the string of buttons.
 So, you've seen something like this before, where you have an object object and then you can select a property. You can select the property with a string.
 Bracket notation. Object bracket notation if you remember that.
[01:53:02]
 So let's look at what's gonna happen. Okay so budget right now is
 an empty string. So this one says in this budget's object let's get the property
 which is an empty string. So I don't have an empty string property, all my properties have names.
 You can even think of it like this, like think of these as strings, because properties are basically just strings or
 think of it like a key or like local storage. This is the key and then this is the value.
 Because local storage, you'll have to put it in quotes.
 Pretty much the same thing for objects,
[01:53:48]
 but pretty or we'll take out those
 quotations because it's not necessary,
 but it won't hurt it either.
 So you just think of those as strings.
 And so we're going gonna use the string.
 It's selecting nothing right now.
 We're gonna select members of those properties.
[01:54:10]
 So that's in right now is undefined.
 So let's see what it looks like.
 So it doesn't render anything
 when it's when the value is undefined because there was no
 there was no property that was empty string. But now it's going to look for sign in model.
 So, butchants, this butchants object has a property called sign in model and we're going to
 select that property with a string with this string right here it's going to be sign in
[01:54:55]
 model. As bracket notation you can select properties with a string with bracket notation instead of not notation.
 So what is this one storing? It's storing the actual component that I want. So this button
 here is going to change to the actual component.
 Now it's the React component. It's an object.
 I press play.
 You should see the component here.
 See, if you know mappings, you don't even
[01:55:44]
 have to do conditions like this, because the mapping basically takes care
 of the conditions for you. I can rename it so, uh, watch a map.
 Maybe, maybe I'll make more sense of you guys, watch a map.
 So I'm selecting a button from the button map. [BLANK_AUDIO]
 And this is optional, you don't have to do it like this, but
 it's useful if you want to go on to shorten your code and
 just imagine if you have a lot of buttons to take from.
[01:56:43]
 You're gonna have to do it if statement for all of them
 No, but the mapping is just a wrong minor
 Well, you saw you also have to make this two
 And this was this one's pretty straightforward
 Signing model is that button sign out models this So now, I'll move this way.
 Okay, time after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, we're back from the break.
 And this is the third hour of class and you can work on the upcoming assignment, Capstone
[02:07:55]
 Finality.
 By adding the artificial intelligence and finishing touches to the capstone project.
 I went over, let's see, persist in login and login expiration.
 The next coming days, I'll do a walkthrough for the sign-up feature
 and the other one for the editable account feature.
 I'm going to start the breakout rooms now.
 And they will be open. 41 minutes. Yeah. [BLANK_AUDIO]
[02:09:10]
 Yeah.
 [BLANK_AUDIO] Okay, break our rooms are open.
 Let me check the
 many evaluation
 week eight.
 Not call names or no week nine. Okay.
 So Chris, I'm going to, you're, looks like you're the first one in the, in the waiting list.
[02:10:21]
 So I'll meet you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] I just want to provide an update here. [BLANK_AUDIO] Okay, I'm going to share my screen here.
 I'm going to provide you guys with an update.
 Let me just get to the proper screen. Okay. So here in the announcements.
 Change the due date.
 For the capsule finale is due Thursday the 15th before class.
 So that's due
 next week instead
[02:40:50]
 because i realized that i'm going to
 provide all of the uh assignment corrections this week so it's
 it's going to be pretty tough for you to you know work on the capstone and the corrections at the same time.
 I mean, it's going to just add more stuff because you might have been in the impression
 that your capstone was in good standing.
 But then when you see the corrections, you might feel like it's coming all, it's going to come down on you all like a, like a
 waterfall or an avalanche. So going to relieve you of some of that stress, because the
[02:41:37]
 corrections are going to come in the assignment grades are going to come in this week. So at least if these are going to come in like a
 avalanche or a waterfall or something at least pushing this by one week will soften the blow. If you take a look at it here.
 By making it do next week, it pushes the late credit.
 One week after.
 Okay, so that should soften the blow and give you some relief.
 And hopefully this works out.
 Put you in a good position to manage the workload and to finish level four on the high
[02:42:57]
 note.
 Since there's not much time in the class right now, I'm just going to continue inverting some of the state variables here.
 So I just made an announcement and now I'm going to.
 And the remaining last time.
 Just converting state variables.
 Okay, so this is sign in area all done.
 Let's see, the sign-out modal have any state variables. Nope. About sign-in modal. Oh yeah, it has an error message here. Let's see, do I need that?
[02:44:12]
 Oh, yes, that's going to appear in the TININ model.
 Okay.
 So basically this message is if you try to sign in and it's a wrong password or email,
 you're going to get a error message.
 So that's where that state variable is stored.
 That's what the state variable is storing, that error message.
 So I'm going to look at this as a reference to keep me on track with the store.
[02:44:52]
 What is the store deal with?
 It has to deal with storing the state variables.
 So that's going to be sign sign in modal error message sign in modal error message at an empty string like it is over here.
 Now the selector.
 So I put these in order.
 So I just change the variables. Now I'm going to change the editor selector. error message.
 Sign in the mobile error message. Okay. So that's the selector. Now to go into the component. Make sure it's selected.
[02:46:37]
 So I'm not going to use this anymore. Going to use the selector now.
 Error message.
 That one is going to use the selector.
 And how do I select it?
 Select sign in modal error message.
 OK, so I've got it selected. Now time for the action.
 Right here. So this one's not going to be a one-liner anymore.
[02:47:31]
 I'm going to split it into two lines.
 One for the action and then one for the dispatch. I'm going to dispatch that action. One more thing to do.
 The reducer.
 That's in state centers.
 You can have a question. the
 the
 the
[02:48:58]
 if you're saying something I can't hear it
 if >> Nope, I can't hear you.
 >> How about now?
 >> Yeah.
 >> I hear it.
 >> Oh, I put the question in July cohort.
 It has a picture with it.
[02:49:19]
 >> Okay.
 Let's take a look at it.
 Let me just put a bookmark here.
 So Yuki has a question in July cohort. Let's take a look at it.
 Five minutes until the end of class.
 What does this error mean?
 Get warning in, let me see.
[02:49:57]
 In the working copy of this LFLB replaced by, that has to do with the carriage it's called carriage
 return end of line each like when you press enter and you make a new line, like this is say I'm typing something here, and I press enter, there's a invisible new line character there.
 And there's another invisible new line characters are different for Windows and for Linux.
 So this one is just telling you, because you might have your on a Windows system, so your new line character
 is going to be the Windows new line character.
 It's invisible, you can't see it, but Windows has its own new line character. It's invisible, you can't see it, but Windows has its own new
 line character. This one's telling you that it's going to change to make it fit for
[02:51:21]
 it's going to make it fit for the, uh, maybe for the Linux environment.
 I think CRLF is the Windows one.
 And LF is in the Linux environment.
 I forgot what it stands for, but it has something to do with the new line character.
 But that's okay.
 As long as the code works, it doesn't, we don't really care what they,
 what they use, what the system uses for the new line character.
[02:51:55]
 So, we'll see if we find it. >> Yeah, put the disk folder and ignore, but for some reason,
 the comments still got to watch the commit to happen.
 >> Yeah, so, so main JS, this is the back end and this is in GitHub, right?
 >> Yeah.
 >> Or is it in GitHub?
 >> It's in GitHub. I wanted to do the, the
 remove cache, but it looked like it would just delete my whole disk folder. So I don't want to
[02:52:34]
 do it. So it's not going to delete your whole disk folder. You have to put the cache flag on it.
 And then it won't delete your disk folder. It will still be there. It just won't put it in
 Force control
 Basically, it won't commit it
 Okay, yeah, it came up as in the staged area came up as just a red D on each each one of them
 That what the each one of the files that were in the disk holder.
 So that was deleted.
[02:53:07]
 >> No, that's not going to delete it.
 As long as you put the cached -cache, it should be fine.
 Okay, I'm going to conclude the class here.
 Okay, so the brick out rooms are back.
 And in conclusion, we finished the expiring persistence
 practice.
 And I also started converting the state variables, but you have one minute to mark your
[02:53:35]
 attendance if you haven't done it yet.
 Other than that, class passes dismissed. That's the days lesson on the capstone finale. Remember tomorrow is.
 Student elaboration day.
 I'll stick around for a few minutes just in case there's.
 Any more questions? [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts 2/May 8, 2025 20-32.txt"

Transcript from May 8, 2025

[00:00:00]
 that user account has in there.
 But that doesn't make sense because I'm just reading it
 and I should only, I should be able to read it
 by only sending the email address.
 I should not have to send all the data to read the account.
 Because your read account has the parameter that's coming in
 is it just emailed or?
[00:00:20]
 Yeah, just targeted.
 So, I can't see that.
 It's right here. Target in the string.
 Pulling in the target email.
 Oh, yeah.
 What's the what's it returning?
 Returning user account.
[00:00:34]
 Oh, look, I think.
 Oh, wait.
 Oh, because you're.
 Is that target email?
 In user account.
 OK, so then. So then what you come back is user accounts should be what's coming back
 because it should be returning the entire account here.
[00:00:53]
 >> Target account.
 >> Target email goes to the email.
 >> That's what you're saying.
 >> Because user account hasn't been arranged.
 That's why you can't find it.
 >> But if it freaks out over target email. because user account hasn't been arranged. That's why you can't find it. You're right.
 You're right.
[00:01:06]
 But if we target email, it freaks out over target email.
 Yeah, but as for your sending to re-user account to run it.
 So the user account looks like it's the output
 for the expect area.
 So it wouldn't be--
 So it would be fixed because it doesn't need to have any of the dynamo DB crap in it, either.
 Because that's being pulled from the return.
[00:01:34]
 Dynamo DB client function.
 There's.
 Okay.
 Do you are all.
 I'm going to comment that out.
 Do you know you are all going to comment that out. And right now, I give you back to the return function because I'm called it nice client instead.
 No, it's supposed to be nice client. Okay.
[00:01:57]
 But you still need to activate nice client.
 You need to run your whatever you're, your. it's not you haven't imported it you have
 an assigned that nice client to and I do that in my crate here it is I did it
 this way I'm just copying it I found it I'm just copying it from the create function. Yeah, so there miss is gonna be new client over here
 There
 That's better. Yes, somewhat
 So it's returning to user accounts
[00:02:42]
 Where's it? What does it say if you just mouse over that user account type script area there on your test.
 Cannot find name user account because it should be get user account instead of get requests.
 Perhaps it should be get request.
 No, I have what user account.
 Yeah, it should be get request. No, I have a link to your account. Yeah, it should be kept request because you see your request object there, up top that you're using. Yeah, yeah, it should
 be request. Yeah.
 And how are your password down there? There's nothing that's in the process.
[00:03:23]
 I don't know why that was there.
 Okay so the function is, oh you know it's your table is your
 table named logins or login.
 Logins.
 Oh I'm sorry I thought it was a set table name.
 I forgot we added those.
 Fine, so there's that.
[00:03:41]
 Okay on the other side I think the since I thought your user >> I'm sorry. >> I'm sorry. >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
[00:03:52]
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
[00:03:59]
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry. >> I'm sorry. >> I'm sorry. >> I'm sorry. >> I'm sorry. because it won't, but now it freaks out. - Yeah, no, it's 'cause that target email
 at the top is in the string.
[00:04:06]
 I thought it was an object originally,
 that's why I asked you to do that.
 You just wanna erase that,
 you can do that too, but erase that part.
 And erase that email property.
 - That's better.
 It's not freaking out anymore.
[00:04:36]
 And then
 for the response,
 have property put,
 yeah, put all those, but on the response side, where it says response.email,
 just put response because it's looking
 for that property.
 - We had to talk about that.
[00:04:57]
 - Let's talk that now too.
 Yeah, I wasn't originally looking for the property.
 Originally I was doing a TV.
 I was originally looking for the property originally. I was doing a TV.
 That what what okay so the output is user account on that side.
 Maybe it's user account.
 I don't know why it's right.
[00:05:23]
 What's what's do you know what's coming across in your user account object on the
 function like what what it's returning?
 Maybe put a debugger in there under act under the response, response on that.
 With function. Under your, like, on your, on your re-user account function on the right
 hand side there, where it's like returning the into account. Right here. Yeah, I'm just
 I don't know what it looks like. Remember, the fact this has to come first. So I don't
 know what the function returns. I have no idea. Oh, why is it set to, oh, no, no, no, no.
[00:06:08]
 Give that test.
 Okay, I'll skip all the last later tests.
 I'm only doing the first test.
 I would put a debugger under line 25 on the right side.
 Yeah. And I would put a debugger under line 12 on the left side.
 You're also, you know, you're not passing in a password.
 None of those other tasks.
[00:06:37]
 You have to pass your password to read the code.
 I'll just need to blow you.
 I think the password is inside of the user account, but I don't know if it's,
 I don't know if the password is inside the user account or response on the right side.
 Well, the primary key, the primary key on the table is email. Password should not be required,
 because the authentication is handled by the Dynamo of the BC grantees, so I don't need a password to access the table.
 Well, the, your, your use of password and the test below into
[00:07:14]
 easy.
 Where am I using a password in the chat?
 This test is not active.
 This test has to chip on it.
 Okay, I'm just saying that that password should be the
 password.
 This test is not even ready.
[00:07:26]
 This test has to totally be written. Yeah, I'm doing them one at a time. So something is going on
 here and does not like here. I guess it would just be email, but when I just put email it freaks out too.
 I would run the debugger and then check
 the right side to see what's inside of response and what's inside of user account.
 Yeah. I'm not sure I remember how to do that anymore. I'm not even in the back end. What the hell?
 Um, go to your, I think it's NPX.
 I would go to the package JSON file and put the under.
[00:08:12]
 >> I have to change the task because it's running the create task.
 You're right.
 It's still running the create test.
 >> And I don't think you need to run your server to run the test. >> No, you don't.
 >> But I didn't know that putting in the bug or in would help when running the test.
 I didn't know that was a thing.
 >> Because I was just troubleshooting on.
[00:08:43]
 But the test errors were saying it failed.
 I think it was not JavaScript. JavaScript console, you know, the, not to do that.
 It's called kill this terminal.
 I have never run the test in a debug terminal.
 It only works for me when I run the test in the debug terminal.
 Oh, they always run in the regular terminal for me when I run the test in the debug terminal.
 Oh, they always run in the regular terminal for me.
[00:09:30]
 They stopped.
 That doesn't tell me what the error or what the problem is.
 So it stopped the test.
 It doesn't stop not the debugger.
 Yeah, this is telling me nothing though. This is on the phone. I don't
 understand any of where the test is in this object anonymous thing or in
 probably not in global because global is usually like global variables and stuff.
[00:09:58]
 Maybe you could just try running it how you usually run it but put the I don't know if you use the debugger so the
 Circle's on the side
 Are there a work now check the right side
 What it worked now your debugger I
 Can't see anything
 You don't see that yellow arrow?
 I do, but that doesn't tell me anything.
[00:10:28]
 I'm hovering over and there's just as undefined.
 There's no messages.
 House over the response above it.
 The other one, the response, const response, mouse over that.
 Nothing's happening.
 The const response, can you mount the button?
 Yeah, there it goes. It wasn't happening.
[00:10:53]
 As returning, it's 100.
 Okay, so you want to sense your online 26.
 It says, "Let user account mouse over that.
 The user account. Just hold it for a second
 It give a little data back
 Yeah, for the line 26
 I think you'd want to delete that line 26 or comment it out because
[00:11:19]
 Or actually I don't know because what what it's doing on line 26 is it's only are actually
 no, I think you keep the line 26. I think it's supposed to be working.
 But look, when a hover over here, it does get to have the data down here in the debugger.
 It just doesn't, it just does, now it's got a TypeScript error. Cannot find my user again. Yeah, I think I have to declare it up here.
 Yeah, because that's where it's declaring a zero account.
 Yeah, so it's returning stuff.
 Okay, if I miss, but the test is failing because it says email is not defined.
[00:12:08]
 In the user account is the property actually called email or is it called something else.
 It's called email.
 No, because you know what user account.
 Wait, what?
 I don't know why it's not working. It's close.
 Mind you, it's very close.
 It's just not quite there. I'm not sure.
[00:12:59]
 I did it.
 The way I did it was I had a full account coming in.
 And then I split the account apart in the range.
 And then check properties.
 I had to request a read in the create to validate some stuff.
 So in order to do that, I had the new client send, get command.
 Let me go. [no audio]
[00:13:49]
 Doug gets should work though.
 Yeah, the doc gets should work.
 I mean it is. It's returning it. The task is not getting it. [ Pause ]
 >> Oh, wait.
 No.
 No, that's not it.
 What the heck?
[00:14:35]
 This is my big time now, Jim.
 >> Try putting that part email in, in, in, in, in, in.
 >> In quote. I had it in quote to originally
 have to go to a I don't know why I took the quote to a but I
 go to say the wrong word when I mean quotes I always say
 parentheses. I know I knew what you meant you're good. I always
 confused Mr. Willows I want to I want to say it.
[00:15:02]
 always confuse Mr. World as I want to say it.
 He's not doing it.
 I don't know why he's just about it.
 Stop that. Do it. [no audio]
 Do it.
 [no audio]
 Oh, expected path name received path brackets.
[00:15:35]
 Oh, oh, there's no name in the database for this row, probably.
 [no audio]
 Okay.
 Let me go check that. Close the
 out of it. I close that out of everything because I needed a break.
 Oh, yeah, it shows you the receipt value shows you what's in that.
 The data. Yeah, it's missing. Yeah, it received an
[00:16:02]
 undefined for the for the name, which probably means I don't have a name in that.
 That there's also a property for his active.
 There is a case of thing, but that one usually has true in it because that most of them to true.
 See, I think we'll have the property.
 Those if you're using those. >> I think it's the dynamo DB.
 I think the column is blank for
 name on this email address.
[00:16:38]
 Because that's why you would get.
 >> But are you still looking for it?
 >> It's active.
 >> Yeah, it's coming back. It's true. because that's why you would get. But are you still looking for it? Is active and
 Yeah, it's coming back as true right here.
 It's come back as true.
 I know by intense.
[00:16:51]
 We're not looking for it.
 So I was wondering if you were actually using it or not.
 Yeah, I took out the user ID and the created at date.
 I am trying to use the executive because I don't like to do
 eat people. I like to deactivate them.
 Don't forget the, um,
 let me call it.
[00:17:20]
 Oops.
 I was looking on the other screen.
 Yeah, this one doesn't have a name. That's why it's
 with that.
 With the name with, um,
 um, they have also in the,
 there,
[00:17:36]
 says there's a phone in there as well.
 Yeah, there's a phone. It's come back with the phone. I know I have to angle it.
 I have to go check property for that too.
 No, I had to handle it over here.
 If. [ Pause ]
 Oh man, I'd just check them all for blanks.
 Just sucks.
[00:19:17]
 Okay. So I had to figure out how to write this name. All right, I'm going to use one that has data for this test.
 And then
 I'm going gonna use one.
 I'm gonna make a new test for when something is blank.
 Because, [no audio] Alright, we don't care about this response.
 Anybody want to reduce care about the contents?
 [no audio] Nope, still going.
[00:20:17]
 Why is email on the phone? We know it has an email property, I don't have the test for it. really should not be querying for a password either that's a security flaw.
 Something is not working. [ Pause ]
 The phone is missing