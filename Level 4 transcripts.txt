///// FILE: "Level 4/transcripts/Apr 1, 2025 22-4.txt"

Transcript from Apr 1, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level 4 week 4 day 2 and the theme of this week is AWS
 particularly deploying to AWS Lambda.
 in the first hour of today's agenda. We'll take attendance, do announcements, review what we did yesterday, and then the second hour focus on AWS topics.
 Third hour will do many evaluations. I think in the first hour the review will be
 done soon enough before the break that we can start an AWS topic. We'll see.
 So make sure you take attendance.
 If you hear right now, you can mark yourself as present.
[00:01:10]
 Just head on over to your code X account.
 And now time for you. Okay, and now it's mid-star here. So we have regular schedule this week and remember to submit your many evaluations to be placed in the waiting list.
 So the many evaluation for week two is closed.
 If you need more points for that, you know, who the contact, the student success team,
 the sooner you get it done, basically if you need the extra points here, you should get it done sooner than later.
 The reason why is because you might start to forget the topics or the concepts that were discussed here.
 So it's up to you. If you want to do it later towards the end of the, uh,
[00:02:52]
 towards the end of this level.
 And if, um, if the student success team approves it, then yeah, that's fine.
 But you'll just have to go back and remember the topics,
 or maybe you will be more familiar later on in the course because you're using the
 concepts more often. So you never know, but you have to choose what's best for you. But it's more likely
 that the student success team will approve reopening this assignment for you when you
 requested sooner than later. Okay. So many evaluation for a week three, it closed today before class.
[00:03:49]
 That's for the corrections.
 And the many evaluation for week four was due today before class. So if you were able to submit it
 today or before today,
 or basically before class today,
 you were put on the waiting list
 for the mini evaluation,
 and you qualify for the on-time point.
[00:04:25]
 These mini evaluations, they should be sending, you should be receiving reminders about when these are due.
 You should be receiving notifications. So if you're not
 if you're not receiving notifications,
 this one, this one actually sends notifications to the email.
 So you need to have your email app, you need to enable it to send you notifications if you want to get reminders.
 Otherwise, you just have to manually keep track of this stuff.
 of this stuff.
[00:05:16]
 Many evaluation for week four is here for this week. Right there.
 And these are just topics from last week.
 And you might be familiar with all these, like how to send requests to the back end server,
 how to receive requests and respond with the back end server. And then how to receive the response in the front end
 and use the data in the response.
 So those are like basic express stuff.
 And then this one is about TypeScript.
[00:05:58]
 So that's from the weeks before, so that you don't forget.
 And hopefully you can find a reason
 to use these data types.
 If you're able to find out how to use these data types
 for your capsule project,
 you'll remember them more.
 But I'll see what I can do about creating more practices for these.
[00:06:27]
 Okay, so that's that's week four mini evaluation.
 Let's see. So assignments.
 So assignments are in the process of being graded.
 You will be given an extension to submit corrections if your assignment is graded too close
 or beyond its closed date.
 So, capstone TypeScript is closed, but the grading for this is done.
 And so if you're, if you received your grade too close to the, the closed date, or maybe beyond
[00:07:23]
 the closed date, then you should have received an extension to submit corrections.
 Perhaps on the back end,
 poses on Thursday.
 That's for the corrections. Again, this rule applies if it's graded too close or beyond.
 Then you'll receive an extension.
 Capsulin proxy. This one is not due yet. It's due on Thursday before class.
 before class. I haven't posted it here, but you should see the qualifications or the
[00:08:10]
 requirements for capsule and proxy in one of the notes.
 I introduced it for the first time last week on Thursday.
 I'll post it later on after class. I'll post it later on after class.
 I'll post it here on the side for a
 level in week three when it was introduced.
 The practice problems have been updated. It's been pointed out to me that the descriptions were wrong.
 So I've updated them.
[00:08:54]
 They've been corrected now.
 Back in routes, front in route practice. And that looks good. And TDD query practice.
 Okay, that was good. Just making sure those look right.
 You should be doing these practice problems. They're going to help solidify the knowledge you have.
 Mark and Green after you finish them.
 And remember, practice problems will be part of many evaluations.
 So this week's many evaluations doesn't include any of the practice problems.
[00:09:54]
 But next week, for week five, it will include practice problems.
 Okay, so let's see if anyone needs help in the July cohort here. There's nothing new.
 No new post here.
 Remember, if you get stuck for 15 minutes or more, just post the problem in July cohort.
 And see if you can get a solution faster that way.
 And if you missed any days, or you were unable to focus on some days, remember, go in order. Don't jump from day to day, or else you might get lost. Go in order, take your notes for that day.
 Make sure you understand it and ask your questions.
[00:11:06]
 And after you get your answers to the questions, market green.
 Go in order and then do the same thing for the next day.
 Master that day, market green. Day 3, master that day, market dream. Day 3, Master that Day, Market Dream. Go in order and master it, review
 it, take notes. Don't just look for specific topics. If you didn't fully take notes
 on this day, don't just look for specific topics because you're gonna miss, you're gonna miss some good stuff and some useful information if
 you're just looking for specific topics. You should be taking full notes,
 complete notes for that day.
[00:12:00]
 And you know, part of the notes is not just putting your notes in.md file, but it's also adding
 comments to your code, comments that explain what your code does.
 All right, so now it's time to focus, take some notes, type what I type, and you should also type some things that I say if it's useful information.
 You're not going to be able to type everything that I say, but you know,
 it's just like taking notes in a like back when you were in grade school,
 you write down the notes, you think are important, or that make an impression on you.
 You can always watch the recording during a better time when you can focus and pay attention
[00:13:03]
 to what's going on in class,
 or what's being taught in class.
 So for the many evaluation part,
 have your microphone ready,
 you can post in the chat if you want to volunteer.
 That way you can secure your spot.
 In the, you know, you can jump the line and secure your points.
[00:13:29]
 Otherwise, I just go in order.
 By when, when you guys submitted it, your mini evaluation.
 Okay, so that's enough for announcements.
 Now time for the review.
 Okay, so we learned about environment variables.
 Okay, also, if anyone that has been watching the recordings, have you noticed anything? Any problems with the sound recordings?
 I was looking at the recording for today.
[00:14:31]
 I just looked at some parts.
 Sounds like the sound recordings were fine,
 like the sound quality.
 But if you notice any, if you have a different experience,
 let me know.
 Yeah, so if you're if some parts fade in and out and they're not So clarify them.
 Let's see, I'm going to just share the notes here.
[00:15:23]
 Environment.
 Very cool. So we were storing these in, I think, AWS.
 Environment variables are not necessarily just AWS, but we're going to start using them in response to being taught this new topic about AWS.
 So the environment variables, those are variables that are outside of your app. You don't even import them.
 You don't import them, so it doesn't even look like part of your app.
 They are outside of your app.
 They're part of like Node.js, you can say, because your app is running in Node.js. So Node.js is like your environment.
[00:16:30]
 And then your app runs inside of it. So think of Node.js as like your terminal or something.
 But it's more like Node.js is more like the command.
 The Node command.
 command, the node command. But we're using node mod, which is, you know, just add some extra features to node, particularly just restarting your server
 whenever you make changes, but it's still using the node command. So, so
 there's node and your server is running inside of node. So those environment variables are in node.
 And they can be accessed through the process object.
[00:17:19]
 There's an object called process which comes from node.
 an object called process which comes from node. It's not available to the browser because the browser doesn't run in your terminal. It runs in your browser and your browser has
 different objects like the window object and the document object. But node, it has the process object,
 but it does not have the window object and the document object. So there's a, they're both
 JavaScript, but they are, like, they have different objects that have, they have access to.
 or they have different objects that they have access to.
 And we learned about this because AWS can be configured to run apps in Node.
[00:18:14]
 Oops, this is a typo right there and then you fix that.
 In Node.js.
 So we started seeing that yesterday, we were running our Node.js app in AWS.
 And here, a file called.env. We created that file and we use it to declare or change environment variables.
 Well, in this case, we use it to declare environment variables.
 And then we created a route to show us an environment variable. Okay, so the way we set that up was in the back end.
 I'm going to open this in a separate folder or a separate VS code. you. So we created a dot in the file here in the root folder.
[00:20:10]
 And we simply just create an environment variable.
 You just put the name of the variable there, equal sign, and then you put the value.
 These are all strings.
 Environment variables are all strings.
 You don't need to put quotations in them.
 And you don't need to put semicolons because you can add more just on the next line.
 Just make a new line and that's how you add more.
[00:20:59]
 You need to add.env to get ignore because we don't want to expose our environment variables. Those are hidden.
 So, and get ignore here, we will all you have to do is put.env and it will ignore any file name
 that has.env in it.
 And then, yeah, so you saw this already, Modie equals development. And we created a dot in the,
 I mean, we added an in V route.
 Right here in index, there's the in V route.
 And the in V route handler.
[00:21:39]
 I can right click on it.
 Look at the definition.
 And what we see here is, well, let me just go to the next step first.
 Install.env.
 We installed it and then we imported it and initialized it.
 And then we imported it and initialized it.
 So here we imported it with a default import. Notice there's no curly braces.
[00:22:16]
 Then we initialized dot EMB.
 You need to initialize it.
 Otherwise you won't see your environment
 variable in it.env. What it does when you initialize it it looks at your.env file and
 adds it to the process object right here. See so this it attaches the variables in.env through the process object.
 So it's attaching this variable and value to this process object through the ENV property.
 Then you just provide the name of your variable there.
[00:23:16]
 If you run it. So I'm going to put npm start here and then it's going to tell me to
 the time npm run build in another terminal. And now I can view the results right here.
 Find type slash env that's, remember that's the routes are the path that was created.
 Show me that mode equals development.
 If you look at the code here, this route is sending data and that
 data is an object where the mode is taken from the process object and object. And also notice there's quotations here, even though I didn't add
 quotations here. So it tells you that this is a string or or JSON string. It's a
[00:24:41]
 string that looks like an object, but it's just a string. You can't really access the mode variable because there is no variable.
 It's a string. This whole thing is a string.
 That's how servers respond. They respond with a string. Okay, so, and then if you wanted to change that, and maybe you wanted the mode to be
 production or testing, we'll just put testing right here.
 This is, remember, this is outside of our app. So node mod does not detect that we've made changes here.
 And because it doesn't detect it, it's not refreshing the browser.
 I mean, it's not restarting the server.
[00:25:42]
 So if I restart this, I don't see any changes.
 But if I, you know, just manually restart the server and then it loads the
 changes. It loads the new environment variable, and then it will display it here.
 So I'm going to change my server to accept these changes that came outside of it.
 So you notice these environment variables are outside of my server, so my server does not automatically refresh with it. And that's similar to your front end. And your back end, their separate.
 The back end is separate from your front end of your app.
 So that's why you have to refresh your front end to see the changes that happened in the back end.
[00:26:56]
 Because they're separate.
 They are different.
 They don't have access to each other.
 I mean, no automatic access unless you program it.
 Can you see what else is in the notes here?
 Okay, so after you learned how to access environment variables,
 we started talking about AWS Lambda.
[00:27:34]
 Right here.
 So remember, it's a service that can be used to deploy your backend server.
 But your backend server will not actually do the listening. So,
 AWS Lambda is not the traditional way to deploy the backend server. But we're using it because
 it's from AWS, which is a partner of Codex Academy. And we want to use AWS Lambda because it's going to be free.
 If we try to use the traditional way of deploying our backend,
 it's going to cost something.
[00:28:23]
 Let's see.
 So AWS Lambda will receive requests.
 So Lambda will be the one receiving their request.
 And it runs them through your route handlers.
 AWS Lambda is called serverless service because it runs more like a function. It's just like a function is not listening for things to call it.
 The function just runs when it's called.
 So that's AWS Lambda.
[00:28:55]
 That's why it has things like the things that you can add to it are functions.
 You call it AWS Lambda functions,
 because they run only when they're called.
 And then when they're done,
 after they send a response,
 it's like the function just ended and it's gone again.
 So just like a function, when you call a function,
[00:29:26]
 it's not always running.
 As soon as it reaches the end of the function,
 then the function is gone, all the variables are gone.
 It just restarts.
 The next time you call the function, it goes and runs in,
 but all the variables are inside of it,
 just reset.
[00:29:44]
 all the variables are inside of it, just reset.
 So AWS Lambda, your AWS Lambda functions, they run only one called, and it only uses your handler functions,
 not to express listener.
 And then we start creating a WS lambda function
 from the AWS lambda dashboard. We clicked on create function.
 Let me see if I can load that up here.
 So if you log in for the first time, you can search for lambda, or if you use it recently,, or this button right here.
[00:31:17]
 We entered the function name, like for example sandbox level four because we're just using it for our sandbox
 And then we created the function
 So in our list or at least in my list it looks like
 Like this here sandbox level four Okay, so it just looks like this here sandbox level four.
 So it just looks like this.
 And then the way we added code to it was uploading a zip file. Basically, we zipped up our disk folder.
 We put it in the zip file and uploaded it to AWS Namba. AWS lambda. Like this. So if this is sandbox level four, AWS lambda function.
[00:32:35]
 In the code tab, click upload zip file. So this is after we've zipped up our code. In the back end, it's going to be in our and then by uploading it through that button, you see the code up here over here.
 Whatever was in that zip file, it goes over here and you can see it.
 It goes over here and you can see it.
 It's mangled code. It really read it.
 It's not the same as the code that you wrote because it's bundled code.
 Everything.
 Like all the Express server code.
[00:33:41]
 The cores code.
 It's in here and your code is in here, all bundled together. And then we can use the test button to run the function, the AWS name, the function,
 or basically to run the code that we uploaded.
 And then it gives us some details, some results. By the end of yesterday, we were able to test our code and it was able to run.
 Actually, no, it wasn't able to run. I mean, it had some errors still.
 And some errors, and then we fixed these errors one at a time.
 So one of the errors was cannot find module index.
[00:35:10]
 So I'm going to add this to the notes here.
 And not find module index.
 I'm going to add that to the notes as like a code sample.
 The code sample here is, let me see what that looks like again. not find module index. So I'm making a code sample here so me how to fix that error. So this error tells us that AWS Lambda requires our JavaScript file to be called index. And we configured Webpack to change the bundle
 file name from mainjs.
 You indexjs.
 The way we did that was just simply by editing the Webpack
[00:37:01]
 config.
 or editing the webpack config.
 And we added the output property, which is an object that has a property called file name.
 And we set that to index.js.
 So that became the name of our bundle.
 bundle. And we also had to update the npm scripts, the npm scripts. Instead of using mainjs, we let them run index.js.
 And then we reuploaded the code and tested it, looked at the docs. And then after we change the file name after we change the
[00:38:06]
 file name the error went away. This error went away when we started using a
 correct file name. This was the new error though. We saw this error.
 I'm going to put this in the notes as a code sample. So it says something like index dot handler is undefined or not exported. So that just means AWS lambda requires a function called handler to be exported from
 the index file.
 So that's what we did. went in and created a blank function called the handler and exported it. And then we re-uploaded
 it to AWS, but it still said the same error. And then in the next slide, we learned the reason was because
 of webpack tree shaking. Webpack removes all the unnecessary code, unused code,
[00:40:14]
 code. And one of the unused code in our bundle is that handler file. Because we're exporting a handler, but nothing is ever using it. So Webpack said, okay, I guess you
 don't need that. I'm going to discard it and not make it part of the bundle. So that's tree shaking,
 just basically not including code that was not used by your app.
 And we saw how efficient it was. If you take a look at your node modules folder and you compare
 it to the size of your bundle,
 there's a big difference. So the node modules was about like almost 70 megabytes,
 but the bundle size was just one megabyte.
[00:41:05]
 If you didn't use Webpack and you're able to just run your program without bundling,
 then your program would be like 70 megabytes large.
 And that's inefficient. If you can write a program, just one megabyte,
 and it does everything you need, that's even more efficient.
 So that's what Webpack is doing when it bundles our files with tree shaking.
 So we had to do something because Webpack did not include our handler
 function in the bundle. That's when library files were introduced.
[00:41:45]
 Library files contain unused code that are meant to be used by other files.
 So, like, the package is that you install.
 Like the Express package or React or Express.
 Those are library files because your app uses Express, but Express doesn't use Express.
 If you know what I'm saying, like the Express app doesn't use the Express object. It's meant to be used.
 That Express object is meant to be used by other apps. So we just think of library files as packages, I guess.
 And what we had to do was configure webpack to export handler functions
[00:42:37]
 or to include the handler function. So that AWS lambda can use it.
 So all we did to do that was edit the config file and added library type equals common.
 So notice that that's still using the output property there.
 Here it is, the output property. It's saying that this bundle that we have
 by the new name of index.js is a library.
 It's exporting something that's
 meant to be used by other apps.
[00:43:28]
 So we're exporting this handler so that AWS Lambda can use it.
 We had to add the library property which is an object that has the property of type,
 which has a value of common JS.
 Basically it's just going to use common or it's going to use a regular JavaScript, like
 the old style JavaScript to export this handler function because right now we are using
 the new export syntax. There is a older export syntax which is common JS or the old way of exporting or writing JavaScript.
 So you should have a comment next to these right here and right here talking about which
[00:44:41]
 option does which feature.
 And that's as far as we got.
 And the result of that is is this right here.
 It says it timed out after 3 seconds.
 And we can even see that our server was listening right here. Says here, the duration was three seconds or 3,000 milliseconds.
 It says here, "Build."
 Build duration is 3, 3000 milliseconds. So your AWS Lambda,
[00:45:51]
 it is getting billed for each millisecond that it's running.
 And in this case, it ran for 3000 milliseconds,
 but you need to be running it for a long time
 to even get charged 1 cent.
 And I think it's about like 28,000 seconds.
 The phi is a calculator here.
 28,000 seconds divided by 60. That tells us how many minutes. So that's 60 equals basically your your lambda function needs to be running for seven hours straight
[00:46:57]
 to be charged even one cent.
 And in this case, whenever we run it, our lambda function, it should finish within three seconds or less.
 So that's why I say it's gonna be free.
 We're not going to exhaust this unless you have so many
 people visiting your site and making requests to your
 your back end server. Okay so it looks like we can take a break here.
 Good time to take a break. Let me just make sure
[00:47:35]
 that what the next slide is coming up.
 Okay, that looks well be good. Yeah, let's, after 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 Now, we're going to continue with new AWS topics, particularly about finishing the deployment
 to AWS Lambda.
 So we saw a, we saw an error that said test timed out after three seconds.
 Let's take a look at that error again.
 Right here, it's timed out after 3 seconds, which matches with the 3000 milliseconds here And the build duration, build duration is 3,000 milliseconds. The reason is because our handler is just an empty function and it's not doing what AWS Lambda expects us to do, which is
[01:00:09]
 to send a response. But it's not just any response. It's a specific kind of response.
 It's a response formed in a serverless way. And the way we're going to solve that problem
 is with a package called serverless HTTP.
 And that will help us convert the Express app
 into a serverless app compatible with AWS Lambda.
 Because right now, it's not really compatible with AWS Lambda.
 You need to run it through this serverless HTTP package, which
[01:01:01]
 will convert it to, you know, like just like Babel converts your TypeScript, the JavaScript,
 do like the old JavaScript. So serverless ACTP will convert your express into something that
 AWS Lambda can use, which is basically your handlers, your route handlers.
 is basically your handlers, your route handlers, but in a specific way. Because the route handlers in AWS Lambda are different than the route handlers in express, So copy this here.
 And so I mean, I'll share my screen now. Save this to the notes, AWS notes. And I put in the code block here, the error message that we saw, which was task timed time out after three seconds.
 It'll look like this.
 We're going to highlight this because this is the package.
[01:02:59]
 And I highlight this because this is code.
 this because this is code. And so it should look like this. So the test sends a request. So when we test it, right here, when we click on test,
 when we click on test, it sends a request to the handler,
 it sends a request and it expects a response
 within the short amount of time.
 So the handler, since it does nothing, it timed out.
 And we're going to fix that.
[01:03:52]
 So we'll install serverless HTP in the back end.
 I'll just start a new terminal here.
 PNPM install.
 This one will go in the dependencies because we're going
 to import it directly into our app.
 OK, so there's the first part.
 Second part.
[01:04:26]
 We're going to export const handler.
 So we're going to turn it into a object instead.
 Instead of a function.
 Because right now it's a function.
 Right now it's a function.
 We're going to convert it to a const because like I told you before,
 functions are also objects and you can use
[01:04:55]
 fonts for that.
 And you can still return a function with a const.
 You can still return a function with a const.
 So what is this going to be? It's going to be-- well, first, we need to import it.
 I didn't put it in here.
 I'll just put it in here in the code. Import serverless serverless HTTP. So we're doing a default import right there.
 And if you just start typing it, it won't pop up here.
[01:06:02]
 I mean, this is not the right one. We're looking for it. It's the capital S.
 This happens because
 it's a default import.
 It's named imports that you can get the pop up for.
 You know, named imports are the ones with these curly braces.
 You get the pop up for those. But you don't get the pop-up for default imports.
 One thing you notice, there's no three dots.
[01:06:39]
 That means it already has TypeScript support.
 Even though it has TypeScript support, it doesn't pop
 up when we start typing serverless. That's because it's a default import. When it's
 a default import, you can name it whatever you want. So it doesn't really know what you want.
 So it can't really pop up anything, any choices.
 When we're calling it serverless, you can call the default imports.
 You can call them anything.
[01:07:13]
 It doesn't have to be called serverless.
 You can call them whatever you want.
 But I'm just calling serverless. I mean, if you want to make this more semantic, you could go like a rename this to convert
 to serverless.
 And then it's going to look like this. Handler is convert to serverless app.
 I'm going to just use serverless.
 And then I'm going to put a comment here that says convert
[01:08:00]
 Express app into a serverless app compatible with AWS Lambda.
 Now we just rebuild, zip it up, upload it to Lambda, test it, and then view the logs. I'm going to go back to the back end. I'm going to stop this.
 Well, this is fine right here.
 So it rebuilds.
 One pack is watching, so it's rebuilding every time.
 And rebuild this because it's a source file,
 so one pack can detect the changes in index TS. So that one got rebuilt.
[01:09:07]
 Now we just need to zip it up.
 So I'm going to do this from file explorer. This is the old zip file. I don't need this one. And to
 delete that, because it doesn't have the new handler. But're going to right click here. Compress to a zip file. Just go with
 whatever name it gives me. The name doesn't matter. Next, upload it to your AWS Lambda function.
 Upload from a zip file.
 Click on upload.
 Find the filing here.
[01:10:28]
 It's in Sandbox backend in the Disk folder.
 Okay, so it's uploaded now.
 Now I can test it.
 Click on test.
 See what happens.
 Look, it's green.
 Let's look at the details here. So we've got this right here. See it says express template. Welcome to the
[01:11:13]
 back end page. So this is a responsive guide right here. It got this response. It's like an HTML string.
 Okay.
 That's now going to AWS Lambda.
 And now I'll show you how to even access it.
 So just copy this.
 It's deployed.
 So now you can access it on your browser.
[01:12:09]
 Copy this for your notes because it shows you how to paste it here in the notes. Okay, so let's see what are the keywords here.
 Maybe I'll make this a highlight right here.
 Maybe I'll highlight function overview and function URL. Okay. So in the function overview section, so this is the function overview section.
 Go to the function URL and click the link.
 Oh, I forgot to teach you how to, let's edit that.
 I forgot to add in here. Okay. That's fine.
 You can go to configuration, function URL.
[01:13:51]
 Okay.
 Let's add that to the notes here.
 Before we even go to the function overview, go to the configuration bar.
 And then create function URL button.
 Create function URL button. You see which one is supposed to be here.
 I'm choosing all type, supposed to be public animal perform. this one here pick none. off type none.
 off type none. And then save.
[01:16:02]
 Okay.
 All right, so we click on the configuration tab, then the function URL in the sidebar.
 Right here.
 And then we created a function URL.
 We had to make sure that the auth type was none. And then click the save button. So the auth type none basically makes it publicly accessible. Otherwise,
 you have to get permission to access it. And there it is right here. Function URL, which is in the function overview section.
 Function URL.
[01:16:49]
 If I click on this, it opens a new tab.
 And this is my, this is my back end.
 It's running in the internet.
 I can even do actually the training there.
 I'm going to let me just look at the notes here.
 Do the server, OK, so we're viewing the server page now.
 That's the path of the server page. And then view the ENV route for environment variables.
[01:17:31]
 EMD.
 And look, it doesn't say mode development.
 It just has an empty object.
 development is just has an empty object.
 Okay, so this one is an environment in AWS NANDA. It doesn't have a copy of our ENB file.
 Our ENB file is local.
 This is our local backend. Here's our in B file right here. We never sent that. We
[01:18:11]
 never imported it. We never sent it. We never bundled it. So AWS doesn't know about it, which is
 fine because we wanted to be a secret. There's ways that were able to put.
 There's ways that were able to add.
 Environment variables to AWS Lambda.
 Let me see if that's in the next page here.
 Which is not.
 which it is not. But it's right here.
[01:18:52]
 Environment variables.
 If you click on that, I think I have to make another page here. We made it make a new set of notes that I don't have in the slides.
 AWS and Byron AWS Lambda.
 environment variables. So that would be in the configuration tab and environment variables in the sidebar.
 And then the edit button And then add Environment Variable button Then you add a key and the value, so the key is mode and the value this time is going
 to be production.
 Because this is our live server.
[01:20:44]
 I mean, it's deployed. It's live. So this is our live server. I mean, it's deployed.
 It's live.
 So this is production, not development anymore.
 So I'm going to put enter a key and value, and then click on the Save button.
 So if you want to see how it looks, I'm going to put this slide in tomorrow's review.
 I just don't have this slide with me.
 I didn't set it up.
[01:21:18]
 So I'm just adding it here.
 So how to add AWS lambda environment variables variables that's in the configuration tab.
 There's an environment variables in the sidebar.
 Click on the Edit button.
 And then you click on Add Environment variable.
 Then you enter a key in value.
 Then you click the Save button.
[01:21:50]
 The moment you save it,
 since it's all integrated, all I have to do is refresh this.
 And now I can see that environment variable here.
 Mode is production.
 I can even change it again. I go to environment variables.
 Right now I see the list right here.
 There's mode and production.
[01:22:22]
 I can even edit it.
 And I can put hello world
 click on save so it says successfully updated the function so it updated it with
 the new environment variable and I should see here a hello world.
 Remember my handler, my handler for this ENV route,
 all it's doing is just displaying the mode environment variable.
 I'm just going to change this back to production.
[01:23:07]
 Save it.
 It says it's updating.
 Okay, now it's updated and it should be, if I refresh this, it'll be back to production.
 Okay, so we have a server that's live.
 It's on a public URL.
 It has that ENV route.
 The other routes will work for it also.
[01:23:44]
 Whatever routes we made for it also.
 Whatever routes we made, it'll work.
 It's public now.
 Before we go further with that.
 Oh, wait, I did have it.
 I did have this slide.
 I didn't see it.
[01:24:14]
 I'm just going to update my notes with these exact notes.
 I thought it was the different set of slides.
 So let me just make sure I'm just going to get the difference here. [ Pause ] Okay, so I did the, I didn't see it.
 So configuration tab, environment variables in the sidebar.
 Edit button.
 Okay, so this is the I did pre did provide provide instructions on how to add key and the value here. Say a button.
 Okay, so I'm going to show you what this looks like.
[01:25:58]
 I'm going to delete this here. Okay, so this is from this slide where I gave specific instructions to add
 the key and the value, setting the key to mode and the value is production and giving
 the extra instructions to visit the ENV path.
 So we see here AWS Lambda is a separate environment
 from your local environment.
 If I run my back end locally,
 I run this one locally. It's going to show mode equals development. I might as well show you, right? So this is my local, it's running on
[01:26:56]
 local host 8000, which is here, which I'll put it right next to.
 So this is the AWS Lambda link that URL right there.
 This is my local one.
 There, I just refresh it.
 It says development.
 So there are totally separate environments.
 There's a node, J.S. environment in my local computer with its own environment variables.
[01:27:34]
 And then there's a node, J.S. environment in AWS Lambda with its own environment variables.
 And I'm able to, you know, they're different. Different environments, different
 variables, I set it up the way I want to.
 Okay, what we're going to do here is disable that listener.
 As we don't need it, remember like I said that AWS Lambda doesn't use your listener,
 or doesn't use Express listener.
 So we're going to disable it right here.
[01:28:27]
 Copy this.
 This is how you disable your listener when it is on.
 When your server is on.
 Is in AWS lambda. If all works well, and we disable the listener, lambda should still work.
 If lambda doesn't use the listener. Okay.
 All right, so this is what the code or the notes look like.
 Okay, so we observed that the express list there that there is an express list there in AWS and the test
[01:29:53]
 details. Okay so if we run the test here and we look at the details. We see that the lister is in there.
 Listening on local hosts 8000.
 So in index dot t s.
 Let's import and initialize.enb.
 Because that's where our listener is. Our listener is here.
 Right here, we wanted to disable it.
 When it's in AWS Lambda, but we want to use it when we're here locally.
[01:30:41]
 Otherwise, it doesn't run.
 We need this listener locally, but we don't need it in
 AWS Lambda. So I'm in index.ts. I'm going to use.env here. So let's import.env.
 And initialize it. Remember how to initialize it.
.env.config.
 You can put a note here what it does.
 Remember what it does.
[01:31:18]
 It adds the variables in the.env file to the process object. Next, if the environment variable mode, if the start the Express Listener.
 So how would you do that?
 I would put a if-condition. Actually, that's, I'm going to put,
 I'm going to create a variable called is local.
 variable called is is local or is running locally there that makes more sense. So how do we know if it's running locally when process.env.mode equals development. That's how we know that it's running locally.
 Our environment variable is in the process object.
 And when it's local, the value is development.
[01:32:44]
 So if it is running locally, then I want to listen right here.
 Otherwise it's not going to listen, it's not you have to do.
 Rebuild the zip upload to AWS.
 Test and view the logs.
 So it's already rebuilt because I have Webpack watching it.
 This is going to delete this one here.
 This is the old one.
[01:33:27]
 I'm going to zip this up.
 Just go with whatever name it gives me.
 I'm going to go to the code tab here.
 Upload my zip file.
 Does that has the new code in it?
 Save it.
 And then wait for its update.
[01:33:59]
 Okay, it's updated.
 Now I can test it.
 Click on the test button.
 Okay, now it the test button.
 Okay, now it's testing it.
 I think it worked.
 All right, let's see here.
[01:34:19]
 Yeah, I don't see the list there anywhere here.
 I don't see the list there anywhere here, but I do see Express Template. I should probably change that.
 It's not Express Template anymore.
 It's Sandbox backend.
 Change that.
 So, it's working without the listener.
 How do I know? It's because the test is here.
[01:34:47]
 It's successful.
 And I still have access to this link if I change any environment variable here.
 And you know, I just put testing, maybe, save it.
 And then I reload this.
 It says testing.
 If I change it to development, what I expect to see is the listener. So if I test this again, right now the mode is testing.
 If I test this again, I look at the details.
[01:35:34]
 I don't see the listener here.
 But if I change the environment variable to development.
 I changed it to development. Remember my if statement was checking it. The mode was development.
 So I can trick it and make it think it's running locally.
 So it's updated now. If I refresh this, it says development.
 If I run the test, I'll click on test here.
 Okay, but it ran really fast.
[01:36:28]
 We still got that expressed template right there.
 Oh, what happens? It's not running the, I don't see the, I don't see the listener here.
 Let me reach, let me reach, try that. Let's see, build duration. Let's look at that.
 12 milliseconds.
 If your code is running fine, 12 milliseconds only, it runs in a very small amount
 of time.
 So that's not going to even get posted one cent anytime soon.
[01:37:01]
 It's not going to charge these one cent anytime soon. Not going to charge these one cent, any time soon.
 Okay, so for some did I miss spell development?
 The development that looks right, place color right over here. Get the element, okay that's right.
 It shouldn't be checking it to start the list there, but I don't know why I didn't trigger. Let me test them one more time.
 Details.
 Nope, I don't see it.
 Well, that's okay.
[01:37:58]
 As long as my lister's not running there, it's fine. I'm going to change the
 the mode back to
 running there it's fine I'm going to change the mode back to production on sure why it's not.
 My left is that right.
 I wonder if maybe if it's not going to run properly here.
 If I try to do it, if I try to run it locally, it will still run the listener.
 It looks like it.
[01:38:38]
 Maybe it knows I'm just trying to treat. So it's still running here.
 Well, I don't know what's going on, but it was running the listener.
 There must be something.
 Maybe it's a process is different. I need to double check that. Okay, I thought it would have the same
 process variable, but there's a possibility it won't be. But I know it has mode development.
 it. Well, it's working. I'm not going to worry about it right now. You get like that. So I'm going to take it early break. Because that's what you need to know for now.
 Tomorrow, I'll teach you how to automate this process.
[01:39:53]
 But we'll take a break.
 But before we take a break, I'll show you the next slide. So here's a new practice and this one is designed to hide your access keys.
 You know how your access keys are exposed in GitHub?
 Well, this is how you're going to hide them they're not gonna be in GitHub anymore You're not gonna get any
 Warning emails GitHub is not gonna prevent you from
 uploading their code
 because we're gonna hide our access keys and
[01:40:37]
 These are the steps to do it so
 I think you have all the knowledge you need.
 You do have all the knowledge you need to do all these steps.
 These steps will help you secure your AWS account with a CLI user.
 And it'll help you secure your account by hiding access keys in the environment.
 So basically you log into your AWS account with your admin account, not your root account.
 Remember, you should be using your admin account. Because if you use your account for everything or everything,
[01:41:28]
 and you accidentally use it on a public computer,
 or maybe you're using it in a computer with other people in the room,
 someone would be able to access your account and mess things up.
 But if you just constantly using your admin account,
 there's less chances of anyone, you know, like hacking your,
 hacking your system. And then with IAM, that's identity access management that's that IAM section in
 your AWS console. That's how you made new users. So remember yesterday I introduced to you or we reviewed the practice, that one practice, the IAM
[01:42:32]
 practice. So there's IAM section there. That's where you would create a CLI user.
 You can call it lambda because it's for our lambda functions.
 So I call it a CLI user because it has, you don't want it to have any access to the AWS
 management console. to the AWS Management Console.
 This right here, this is the AWS Management Console. Basically, the thing that you log into online
 and it has this graphics user interface.
 This is the IAM console.
[01:43:19]
 That lambda user that you'll be creating will not have access to that. So just have
 access to command line. And you should do this before tomorrow or at least
 just make this user before tomorrow's class because we're going to need this user or tomorrow to automate this deployment process.
 And then when you create the lambda, this lambda user attacks two policies, full access
 to AWS lambda and full access to DynamoDB because those are the two products that we're using in AWS right now.
 And in the security credentials tab, this is the one where you create a new access key and download
 the.csv file. And then in the backend, in your local backend, you save your access keys in the
[01:44:28]
.env file and add the.env file to get ignored. You use the.env package and the process object to get access to the keys. That's here in
 your environment tab, variable. And then you will see, you will see, when you
 try this. So let me see.
 I haven't, you see, I haven't actually made the key.
 I just made the user.
 I think, oh, yeah, I did put it in here or did I use connect the dynamo, create a new
 access key and download it. Okay, let me see what I did put here.
[01:45:28]
 Yeah, that's right.
 I think I didn't specify. command line interface.
 Command line interface. So, yeah, I can't change it in this slide right now. Command
 line interface because that's where we'll be using it for command line interface.
 Let's see. Use the access keys to connect the DynamoDB and authenticate users.
 So your access keys will be hidden in the environment variables.
 Okay, it's not going to be in your code anymore.
[01:46:39]
 And then add the access keys to the AWS Lambda environment variables for the back end server.
 And then you want to remove the access key imports because remember, we are importing the access keys from a credentials file.
 You want to remove those imports from the front end,
 and from any back end apps where you might be doing those imports.
 And then you want to deactivate for and delete those old and exposed access keys.
 So this, you should try to get this done. At least some of it.
 If you're not able to do the authentication yet,
[01:47:30]
 at least get your user and your access keys,
 because you're going to need them for the CLI that I'll teach you tomorrow.
 Now we can start a break.
 That was going to be early break, but it looks like it's on time.
 And remember, if you want to, in the third hour, we're going to do many evaluations so you can volunteer in the chat.
 I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break and we'll have time to work on the assignment or that practice problem.
 Here's the upcoming assignment.
[01:58:39]
 Before I talk about that or before I do the many evaluations, I just wanted to share with you
 that I was able to get the,
 I was able to trick AWS that it was in
 development mode.
 I'm not really sure why it wasn't working the first time.
 why it wasn't working the first time.
 So I just changed the code here. Here's the index.ts file.
[01:59:14]
 And basically, I just saved the variable.
 I mean, I saved the mode.
 I mean, I saved the environment variable
 into the variable mode.
 And I just use it right here to check if it's running locally.
 And then I have it doing a console log of what the mode is.
 And if it's running locally. Then I uploaded it to AWS.
[01:59:48]
 And I tested it.
 These are the test results.
 Right here. This is the part where console logging development is true.
 The mode is development is running locally.
 It's set to true and we see that I have a listener going right here.
 If I change it back to production. Where is the environment variables right here. And it
 changed it back to production.
[02:00:42]
 Save that
 Now it's updating
 If I test it
 Click on test right here
 Look at the results
 This is the part where it says the mode is production is running locally, is false, so we don't see the listener here. I didn't really do anything different except the console log
 this and save it in a variable like one step just in one extra step here but
[02:01:24]
 I don't know what really happened there, but now it's working. I can trick it, but that's just a short example that you have your environment work variables should work the same and AWS as they work in your local machine.
 in your local machine.
 Okay, so now you have time to work on that practice that was posted in the previous hour
 or your TAF stone proxy assignment.
 If you're gonna start adding the secret keys
 like from the environment variables,
 if you're going to start doing that with your capsule project,
[02:02:10]
 make sure you make a branch for it.
 Like our branch says, use secret keys or something like that.
 Make a branch for it. or something like that.
 Make a branch for it. Otherwise, just experiment with it in your sandbox.
 And start the breakout rooms.
 And they'll be open for, let's see here, 45, 46 minutes. [ Writing on Board ] the evaluations.
 Anyone want to volunteer to do any corrections or
[02:03:49]
 Many evaluate or the new mini evaluation for this week
 Otherwise, I'm just gonna call on the first person that submitted it. [ Pause ] Okay, so it looks like going to be Ray-Lime. We will not meet you in the evaluation. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so the, the breakout rooms are back. I still need to finish the mini evaluation with Raylon.
 I don't see her here.
 What happened? Okay, I guess you just, I need to finish the evaluation with Ray-Lon.
 But in conclusion, we learned how to make a serverless app.
 Basically, we use serverless HTTP package to do that.
 And we successfully deployed the backend to AWS Lambda.
[02:50:38]
 The AWS Lambda environment variables.
 We could edit them from the configuration tab.
 And we were introduced to the secure keys,
 practice.
 And it's good to get some of the steps done in secure keys practice.
 You'll need it for tomorrow.
 If you want to be able to follow along and automate that
[02:51:13]
 whole zipping and uploading things like that,
 if you want to be able to automate that,
 you should have your Secure Keys practice at least
 some of the steps done, at least the user created, the lambda user and access keys. So you have two minutes to take
 attendance, mark your attendance accordingly in the code X account. Other than that class is dismissed, that is today's lesson on AWS,
 but I'll be continuing the mini evaluation with Raylog.
 Okay, so the breakout rooms are open again. And Raylotte, I'll meet you in there. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Apr 10, 2025 22-31.txt"

Transcript from Apr 10, 2025

[00:00:00]
 Good evening class. Welcome to Code X Academy level four week five day four and the theme for this week is Redux.
 Today's agenda in the first hour. Take attendance, do announcements, review yesterday's topics, then hopefully we'll have time for new
 Redux topics. And then in the second hour, more Redux topics. And then the evaluations and time to work on assignments.
 Right now, you can take attendance. If you're here, mark yourself as present, head on over to your code X account and mark yourself as present. And now time for announcements.
 Okay, so remember, for many valuations, you need to click on add submission to be placed in the
 waiting list for the mini evaluation and to also qualify for the on time
 point and the mini evaluation for week five. It closes for corrections Tuesday next week before class. As a reminder
[00:01:49]
 here is many evaluation week five right here under Redux and remember to click that Add Submission button.
 And the topics for week five mini evaluation, most of them are taken from two weeks ago.
 So you should be pretty comfortable with them. The one that was taken from last week is Environment Variables, which I think is a pretty easy concept to grasp.
 This one was from two weeks ago, GDD Query Practice.
 And there's a link to it. Declaration file, that was from two weeks ago.
 I think that's a pretty easy concept to grasp.
 And deploying a repository folder in GitHub.
[00:03:03]
 This is not the same as pushing to GitHub. By the
 ploy, I mean like get your front and website to appear. That's what the ploy means.
 So that was the mini evaluation for week five. I'm also doing corrections for mini evaluation week four.
 If you haven't submitted this yet, it's closed.
 So if anyone is going to do corrections, I'm just going to pull from the list here, whoever
 who already submitted it before the closed date. And then assignments. So corrections for capsule process proxy
 closes actually today.
[00:04:14]
 If your capsule proxy hasn't been graded,
 you'll be given an extension to submit corrections.
 So,
 I have some back end accounts that's due today before class.
 It's important to turn this in on time because turning it on, turning it in on time, turning your assignments in on time,
 gives you the most points. It's worth the most points, so capstone back in the counts,
 that's the newest assignment here. I fix the typos. Well, I think I forgot to
[00:05:07]
 I think I forgot to put forgot the changes this one is supposed to be your Lambda live site link AWS Lambda live site link because the back end gets
 deployed to AWS Lambda it doesn doesn't get deployed to GitHub.
 GitHub will include the code, which I need to see.
 But when it's in Lambda, I cannot see the code,
 but at least it will run in Lambda.
 So this part is supposed to be the live link in Lambda.
 I haven't, I forgot to update that,
[00:05:41]
 but I did update the typos here.
 So this assignment, the three points for submitting it on time.
 All other sections here are one point.
 So he get the most points for turning it in on time.
 most points for turning it in on time. Make sure the project renders without errors.
 Basically if there's the way to check if a back end has errors is if it doesn't provide
 the response that I'm expecting or maybe it doesn't provide a response at all.
[00:06:25]
 Because if there's any errors it'll crash or it'll provide a wrong response.
 That's for a back end.
 But this also includes
 actually, let's see here.
 Yeah, I will only grade the back end, the capstone back end.
 So, when I'm grading this, I'm not going to check if your capsule in front end has any errors.
 But your other assignments are for the front end, so I'll be checking for errors for that
[00:07:13]
 in the front end.
 But for this one, just back end errors.
 So you need a branch for coding a function that returns a DynamoDB client.
 Another branch for defining a custom data type for user accounts.
 I went over this yesterday how to do that.
 Well, not about the branch, but how to define a custom data type for user accounts.
 I put an S here because you might want to create more than one data type.
[00:07:58]
 You'll discover if you need it or not.
 if you need it or not.
 Probably create and use a branch for TDD to test a function that creates accounts.
 And route handler for account creation.
 And TDD for a function that retrieves accounts.
 And a route for retrieving a route handler for the account retrieval function.
 DDD for a function that updates accounts.
[00:08:55]
 And around handler for that account update function.
 And there's TDD for a function that deletes accounts.
 And around handler for the account for that account deletion function.
 Once you get familiar with one, the rest almost becomes like, or maybe if you do too, the rest becomes just like almost like copy and paste and change some values.
 So it might seem like a lot, but then it becomes repetitive enough and it becomes like practice basically.
 And as usual contact the student success team, if you need more points on an assignment that has already been closed.
 And in your -- in the side panel, there's practice problems.
[00:10:16]
 So like I said here, like it says here, practice problems will be part of many evaluations. Let's see, whenever you get stuck on something for 15 minutes or more, post it in July cohort. So let's see if there's any new post there.
 I haven't had a chance to check it.
 So let me load it here.
 Okay, so it looks like there's nothing new.
 So I guess either you're clear on what the assignment is looking for,
 or maybe you're just totally lost.
 So it's either one of those.
[00:11:15]
 But, just ask questions. If you don't know what something means,
 ask the question, a clarifying question.
 Okay, mark your days in order.
 Only Mark and Green.
 After you've taken notes and ask all your questions regarding that day.
 And then.
 Focus. focus. We're going to do a review. So you should just absorb what I go over or
[00:11:50]
 what I review from yesterday because you should already have the notes for
 that. But make sure you type in anything that you missed or maybe if I say
 something new during the review session which I will. I will say something new in the review session,
 so get your notes ready for that.
 Also have your microphone ready for many evaluations.
 So that's enough for announcements.
 You ask the question. I didn't see that there.
[00:12:33]
 And do I close or?
 Oh, you deleted.
 Okay. Okay, yeah, so yeah, put the lambda link.
 I just forgot to specify in the back end the counter assignment.
 Anyways, if you forget to include it, I can just send you a message and make sure it's in there before I grade it.
 Or you can add it in the comments.
 If you already submitted it and you can't make any changes.
[00:13:29]
 Alright so time for review.
 Yesterday I finished the walkthrough for this TDD read practice. And let me just get it loaded up here.
 Level 4, TDD was in the DynamoDB notes.
 TDD practice is right there, DynamoDB notes.
 And let's see here. We finished writing the tests and started implementing it.
 So this was all in the back end.
 So let me move the back in here.
[00:14:57]
 The tests.
 Let's go over the test first and the test in the input will check.
 In the module folder you'd need to test the function read account.
 Okay, so the module folder, read account.
 So there's test there,
 one, two, three, four. Four tests.
 There's an update I want to make here.
[00:15:51]
 So one of the things here is that if I contact this back end server, let me just start
 it first, or this route, the read account route or the actually here's the route right here
 index back, yes
 the route is read
 I need to start the service. And we'll start it from the people here for now.
 It's in case.
 And I'll start the bill. [BLANK_AUDIO]
[00:16:50]
 And the regular one, you can't read bug web pack, so
 you should start to build in a regular terminal.
 But if you want to debug your Mac in, we need to start inside, start the server, the express server,
 that's the one that's the available express server.
 And here is a pop up, or here's the back end.
 It's rendered on on local host 8000. If I go to the read path here and because expecting something. One of the tests I should have included is with
 notice what is no email is provided.
[00:18:16]
 So that's what I'm going to just hand right here.
 I'll be this, basically, right here,
 and change it.
 Does it return to result?
 If no email is provided.
 So the email, I've just said it as undefined.
 That means it's nothing. So There's an email being sent in.
[00:18:47]
 So if this test works fine, everything should pass.
 I'm going to run that test here.
 I think it's an already in the script, npm test.
 So we read account, we have this read account.
 Okay, so it says one fail.
 One fail.
 That's the last one.
[00:19:23]
 The failed.
 When there's the last one. It failed when there's no
 female provided. So let me see what's going on there. It's gonna go into here and
 then this was basically gonna be empty. So I guess I'm just going to do this. So if it's an object, you turn on the
 find. If there's so there's different ways you can do this. You can you or target email is undefined, then return undefined.
 But you can make this, you can join this because an empty string and undefined, these are both policy values.
 So when you have policy values, you can just put in here,
[00:20:42]
 you can put in here the opposite truthy values.
 So if target email is a truthy value, that means it's a string with some letters in it
 or it's basically defined, this is a truthy value.
 Well, I don't want to check for truthy values.
 I want to check for the opposite, which are
 policy values.
 I just put the opposite, which is the exclamation mark,
[00:21:09]
 which means not.
 Or I can just do this to make more sense. And the other side is the And then we can go to the left. And then we can go to the left.
 And then we can go to the left.
 And then we can go to the left.
 And then we can go to the left.
 And then we can go to the left. So you're using code instead of comments to signify what's going on.
 So if this email policy, then we turn them to find.
[00:22:20]
 Or is email not provided.
 So whichever makes sense to you, this one covers it.
 But you can also do the long way and say, if the email is empty streaming, or if it's undefined, then we turn it into time.
 So this test to have re-wrapped and everything passes now. Now that everything passes, I should be able to reload this and basically get nothing
 back.
 This is crashed.
 It's basically nothing.
[00:23:03]
 You've got nothing back. And that's what we expect if we'll provide an email.
 Console.
 We don't see any errors there.
 OK, so if you do provide an email,
 I'm going to do it with a query string here.
 Email equals AAA and AAA. com. There's a problem here, and the problem is you even get their password.
 All you have to do is provide someone's email and you get their password.
[00:23:36]
 So there's a security risk here.
 So what I should be doing is I should only get the account information.
 I mean, like, I should only get their name and their phone number and other things like
 that.
 They have to be provide a matching email and password. So we need to go back in here and fix the test.
 If it turns an email, password name and phone, when given an existing matching email and password.
 So it makes a sense. It makes sense because the only way you're going to get some of the account information is there in there allowed to get and
[00:24:46]
 they're only allowed to get it if they're able to log in.
 So read account should take in an email and a password.
 So I'm gonna try to implement this right now.
 Well, I can do all the tests.
 Awesome.
 Deterrence a result with the matching female.
 So I'm just going to swing that.
[00:25:27]
 It's going to get a pass over here.
 This one is going to be correct.
 It returns every thought that as a national email.
 Assume the password is correct.
 And the password is correct.
 Basically, I just want to provide the password for each case.
 That's how I'll get the full account information.
[00:26:14]
 If they provide you there, basically, able to obtain the case. [no audio]
 Actually, let me return the result with a matching email and password.
 If they are correct.
 When they are correct. And when the error correct.
 Okay, so that means I need to not just check the if the email is not in the list.
 So it doesn't basically matter what the password is.
 But you could create a separate test with passwords.
[00:27:29]
 There are different password combinations.
 Doesn't return to result, if you have any other to result. It doesn't get turned to result.
 So I can basically put the same path in here.
 And it doesn't get turned to result.
 If no email provided.
 Unless you say pass the code. Okay, so now, we can start implementing this.
 So, we see here, there's a red line here that means my account,
[00:28:21]
 my read account function is not accepting password right now so
 I'm gonna change that. I'm gonna let it accept a target email and a target
 password just to make a match which is a string. So I want to request what is my request going to be. e is that helpful.
 I have time, and I have a application.
 I wonder if I can do this. She needs an email and asking if it's a target pass.
 Give that a try. And then test. You can just fail. You can just pass.
 You can start to see. You can just pass.
[00:30:17]
 You can just pull through.
 You can pull through.
 Okay, so we can't put this password here. when I was going to press object 8, get command input.
 So this one is a really nice idea. [ Inaudible ] just close the deep button here to pop up the other.
 Control space, it pops up the attributes again. I guess I'm going to get this.
 It's okay, I can get the target email. And then when I get a response, if I'm going to get
 it account, if the account dot password equals the default, if I'm going to get an account, if the account.password equals the target password that was sent in, and then enter the account.
[00:32:48]
 Oh, actually.
 What I'm going to do here is going to be a policy.
 If it doesn't match,
 then I'm going to set the account back to undefined.
 I just want to set this up to return account.
 I'm going to set the account to undefined.
 Instead of being a constant, I'll let it change right here. So I'm gonna get the account
[00:33:41]
 Let's see that blocks the test.
 In one field.
 This is return result that you know is not in this. So that means it's coming in here and the account is empty.
 Okay, so.
 If there is an account, so if there's an account, and the account password is not equal to target password, Then I should set it on the line.
 I have to check if it exists because if the reason why it passed here is because there
 was a situation when the account doesn't exist.
[00:34:39]
 So it doesn't return a result if the meat email is not in the list.
 So if the email is not in the list, then this account right here will be undefined. And
 then if we check if undefined has a password property, it crashes. So we
 don't want if it's we want to make sure that it is not in the plane.
 So when you do it like this, you're saying, okay, if we actually get the
 account, then check if there's a password and that password matches the target
 password.
[00:35:19]
 It's not enough.
 So I think this will fix it. And it does it fix it everything.
 And you see it does it in easier way to think about this. I know it makes sense to me, but um, it might, I mean, are you guys clear
 on this or should I make it a little bit clearer on what's going on here? If there is an account
 and there's kind of password doesn't match the incentive account accounts in the client. So that's what the basic
 moment.
 So even if I provide a, so I've changed it now, I've
[00:36:20]
 changed the function to require a password.
 So if I do this and I try to send it just an email without a password, it gives me nothing,
 which is the proper behavior because we just don't want to give someone's account information
 just because someone provides an email.
 We want them to-- we want to get the account information
 if someone has truly has access to that account information.
 And how do you know if they have access to that?
[00:37:01]
 If they provide a password, so I'm just
 going to provide their password here, the correct password.
 I'm going to provide the correct password here. the handler. We need to take in an email.
 You check this.
 Needs to check, take in the email and also take in the password.
 So it's going to come.
 You're going to get the password from the stored in the query object of the
[00:38:07]
 request object and it's under the password property that's going to be a
 string. If I don't put that, if I don't put this string here and then the
 type of script is going to say, "Hey, you
 might not get a string," because this query can be anything.
 So you can be, it might be a string, it might be this, it might be a function.
 So I'm just going to say, "I don't worry about, don't worry about TypeScript.
 It's going to be a screen.
[00:38:52]
 So I just fixed the handler.
 So now it should be able to take in this password. I've fixed the handler to extract the password
 and to pass it into the read account function
 which requires an email and a pass
 with it. So check this now. Okay, everything matches. So the email and the password
 match. So I'm entitled to receive the account information. But if the email and the
 password didn't match, I'm going to use a different password here.
[00:39:28]
 Then I get nothing, because I'm not entitled to that account information.
 So it works very, it works as expected now.
 With security features.
 Okay. So. Okay, so that was just a review and also an added something to TDD read practice. And then this part was about Redux.
 Slice reducers as it said.
 So remember a slice is like a piece of your app.
 Your app is like a pie.
[00:40:19]
 Think of it like a pie graph.
 It has each slice of that pie paragraph represents something about your app.
 So like a slice is like one slice could be about modules and other slices about
 assets and other slices about state variables.
 So that's why it's called the slice and
 reducers are functions that take something in a
 lot of things in and then and then produces one kind of output
[00:41:07]
 and so these functions are going to be, we're going to use them as setters.
 They will take in a state object and an action object.
 And they will be used to set
 the state variable on the left.
 And they're also the same name as the state variable. So this is actually not a state variable on the left. And they're also the same name as the state variable.
 So this is actually not a state variable. It's the name of the function. Instead of putting it in between here,
 it's inside of an object. So let's, let me just show you how that looks.
[00:41:39]
 That would be in the front end so I'll get that little feed
 Think there's a front end and we see each one has been here. Three dots right now, that's okay.
 But that slide was basically saying that we would use these functions to set the values
 of our state variables and that they have these functions have the same name as our state variable.
 So that one is about redox.
 Let me just let me know it's here redox.
 And last thing you talked about this here. State setters.ts, that's what contains.
[00:42:47]
 This is the state setters.ts.
 Setters remember setters, they set the value of state variables.
 We created properties that match our state variables and we set them to anonymous functions.
 Notice that there's no name here.
 It's not necessary because I've already assigned them to a property.
 And these anonymous functions take into state an action jack will figure out what this means later on.
 But we're just getting things set up.
[00:43:30]
 See, we've been spending the past few days just saying up three to eight. So hopefully it's all worth it.
 All this set up and remember react react was also a lot of set up too. But then, you know, with a lot of setup,
 comes a lot of, you know, great features. And we've come to, you know, appreciate the power of React
 even though the setup is, you know, much longer than setting up the right word multi-page website.
 So, let's see, we can go into the next slide, which is already the new topic of Redux.
 the new topic of Redux. So we have a few minutes in this first hour.
 And this is what we're going to do. So we have these
[00:44:39]
 reducers as setters. We are going to use them as setters.
 Later we will observe how they work and how to program them. That's this copy of this part right here.
 So we're empty for now.
 Because we'll have a better understanding of how they work later on.
 I'm going to show the hince here and follow the step by step.
 Add a debugger to each function for now. So these functions will be activated later by components and read us.
 So we'll just add the brothers to those functions.
[00:46:18]
 Just go to this at the back end. Then we'll just email the other one. on the floor.
 I shut down there, everything in the back end. And then I'll be put in the window.
 And then I can now,
 gonna add the buggers to these,
 these states that are, we don't know how to implement them yet
 but we're going to figure it out
 today
[00:46:54]
 definitely by
 and tomorrow
 thanks so he's put debuggers in there
 figure it out later.
 Okay, next one.
 Okay, so this one's a very interesting one.
 State custom type.
[00:47:22]
 So remember we made a list of state variables, or maybe we'll call it a set
 of state variables, and we want to use their type. And let's see what does that mean?
 That's copy this and the basis into the notes.
 There's going to be a, I think we'll use paper that's already here. In state variables.ts create a custom type of state variables,
 the capital S, and here's the code.
 Explore the custom type, and then sort the custom type.
 So I'm going to go through this step by step.
[00:48:46]
 So in state variables dot t s, let's call that up, state variable dot t s.
 So we have some state variable, the did now.
 We're going to say that it's a false, it's a pick count.
 I mean, time somebody clicked starting at zero?
 We have a message that's starting with the low world.
 Create a custom type, call, state variable.
 You create a custom type.
[00:49:23]
 I think the easiest and this way to do that is with a type
 keyword and then state variables. We want to create a custom type called state variables,
 so that's how you get it started. From type state variables equals type of state variables.
 This type of this one here.
 State variables.
 Now, why do we want to do that?
 Look, look what happens when I mouse over this.
[00:50:11]
 State variables.
 This type right here, it's basically looking for an object where
 did mount is blue in, quick count is a number, and
 message is a string. Okay, so let's see, what would,
 if I was going to do this manually, how would I look,
 like so state variables, if I was going to make a custom type called state variables,
 I basically wanted to look like this.
[00:50:44]
 So I would manually just say, okay,
 state variables, they sort of look like that. State variables is an object that has a did-mount,
 did-mount property, which is a Boolean. And it has a quick count property, which is a number.
 property which is a number and it has a message property which is a string.
 Right? Well I don't have to do that because this one takes care of it for me. Type bug state variables and it's the same exactly. Instead of manually typing it and just repeating almost, basically almost repeating
 or duplicating this object, but instead using types.
 Type of using the word "achiever" type of using the word the keyword type of. Basically extracts or it causes type scripts in for.
[00:51:50]
 Data type.
 I'll put in here.
 Not necessary to manually.
 necessary to manually the custom type. How do you do that? Just put export in front of it. There it's going to export that custom type.
 the custom type to state objects in slice producers. Where are our slice producers?
 They are here in our state setters.
 So we remember where in the previous state setters. Slice reducers as state setters.
[00:53:07]
 So they are in our--
 so here, the slice reducers.
 Assert the custom type to state objects in slice with the scissors.
 And you can output here AKA, output AKA also known as state just to make it more clear.
 So the state object, we know, now we know the type.
 What is the type?
 It's saying here we should assert the custom type to the state context.
[00:54:02]
 What is that custom type?
 That we just made, it's called state objects. When was that custom type that we just made? It's called state variables.
 So this object right here will look like state variable.
 It's not a string.
 It's not a number.
 It's not an array.
 It's an object that looks like state variables.
[00:54:29]
 And how does state variables looks like? It looks like this. It's not this big count, it's message,
 and it's not as a Boolean, the count is the number of message of the string.
 These are just types. Remember there's no values here. These are types like a new print.
 When you have a loop at the house, you don't actually have a house until you build a house.
 So this is like a loop print of an object without having the object yet.
 Just saying how that object should look. Just like a blue print should say how a house looks.
 And so now with that we can go into a break.
[00:55:19]
 We can get the break timer going.
 And also here on screen.
 Okay, see you in 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And back to new readoxomics, new read-ups topics. And one of the things that we have not filled in yet was the
 reducer. So let's copy this first. The the read-ups store has a reducer property. We have not yet filled in. And the way we will fill it in is with
 the reducer that is provided from this LICE object. And this reducer right here, you see it's going to be color yellow.
 It activates a state setter when a component wants to set a state.
[01:07:12]
 So, you know, just sort of absorb what I'm saying here because it's hard to conceptualize it right now.
 And it'll become easier as you get more familiar with Redux.
 So remember, I said that reducers,
 we will use them as setters, like state setters.
 So whenever you see the word reducer,
 just think of state setter.
 or just think of state center.
[01:07:50]
 Okay, going back to notes. I'm going to paste this in. And there's this code-slap sample here.
 I'm going to put in. So slice is actually a variable for object that we're using.
 And reducer is a property in the store.
 So let me show you.
 Let me just finish highlighting these first for that PS store options is a object that slides producer and producer here.
 So it should look like this.
 I'm going to put a code sample in here.
[01:09:24]
 So what is incomplete? Let's go back to the store.ts and here it is actually
 right here. It's empty. Actually, could we, oh, could I forget to put this in here?
 Let me see the next slide.
 Oh, yeah.
 Okay, well, that's simple too.
 We can fix this along.
 We can fill that fill that needs reducers so
[01:10:10]
 going to fill this one in first so this slice will be complete because this is
 slice options so reducers right here what What should it be? It should be this one here in the state
 setters. This one's exporting this right? State setters. All we need to do is plug them into here.
 all we need to do is plug them into here. State centers like that. Where is that in the notes here? Here's the type of.
 I'm going to update this part right here where it's lights,
 reducers as setters.
 This is where we added the bug or to each function. And I'm going to add to it right here.
[01:11:34]
 In slice options.
 In store dot t s slice options.
 Set. This is this part right here.
 We are in 4TS.
 Here's slice options.
 Set reducers to state setters because we are saying that slice reducers are setters.
 They will set the state.
[01:12:42]
 Our state variables. Remember, producers are functions that take in a lot of things
 and have wood output. So it's going to basically, these producers are going to take in
 here. These are the producers. It's a function that takes in a lot of things. It's going to take in all the
 states. The state variables here, all the states, it's taking in all the
 states and also an action. And then what's going to come out of this is just
 basically setting one state. So this one right here, this did melt setter, it'll take in all
 of the state variables, but did not count message. It's going to take them all in, including
[01:13:38]
 an action. Somehow it will just set the state for did mount. So it just takes it on all those things, but only outputs one thing, which is
 It just changed the variable for did mount. I mean it changed the value for did mount. Same thing for click-count
 It takes the function or this reducer takes in it everything, takes in all the state variables, and some kind of action.
 And then what comes out is just click "count" and the value for that gets updated.
 One thing happens, or one thing comes out.
 So that's the reducers are our state centers are the reducers.
 You could even put here slice your reducers as state centers.
[01:14:41]
 Feel free to put as much comments as you need to and here this part that we just added. I have to reduce our method.
 I'm going to go to the part that we just added.
 I have toreducer method.
 Right here. This is going to be a method.
 What am I going to replace this with?
 Let's see. So, "install.ts.updatestore options.
 Let this reducer be slice.reducer."
[01:15:34]
 So, here's the slice right here.
 It has a reducer in it, and it's yellow.
 So it must be some kind of method, or some kind of callback, at least.
 It should be some kind of callback.
 So the slice object will have a reducer property.
 So this slice object has a reducer property. So this nice object has a reducer property.
 The reducer, this reducer right here activates a state settered when a component
[01:16:16]
 wants to set a state. So this is in the store, which stores all your, which will hold all your state variables.
 And the reducer, which is part of the options, will be used to change the state variables.
 But it needs, it needs, it needs the reducers from the slice.
 And these are the reducers from the slice and these are the reducers in the slice. These
 reducers change the values of state variables that have the same name. So this is
 complete for the most part.
 A lot of setup and want you to try your best to understand what's going on in this setup. What I'm going to do is copy this line and make it, maybe even with 19.
[01:17:27]
 But it as part of the sample code right there.
 But I'm just going to take the tight script to mount so it's easier to read it. Okay, like that. added more for the code example.
 It's fine. I'm getting going back. Alright, so now however all these parts parts supposed to work together.
 So there's something called the flux philosophy, which
 was actually invented by Facebook.
 Because Facebook is like a huge app or program.
 And they had problems managing state variables. They were using
[01:18:49]
 React, actually Facebook made React. And Facebook came up with this flux philosophy.
 So that you can manage state variables when you have a huge app. When you have a small app it's you
 don't even need Redux, but you will be working with large apps when you get
 hired by large companies, or maybe you're gonna create a project that just
 gets larger and larger and it just gets harder to manage or state variables
 when it gets that large.
 So Facebook came up with the Fox philosophy.
[01:19:36]
 That describes how data should flow in a single direction.
 That's copy this.
 Then add it to the notes.
 We're going to share my screen now. [BLANK_AUDIO] It looks for loss of you.
 [BLANK_AUDIO]
 You don't need to know that it's made by Facebook, but that's good to know.
 I just don't want to, it's already a lot of stuff to know.
[01:20:24]
 But what you really need to know, but which you really
 need to know is that it describes, it's a philosophy that describes how data should flow
 in a single direction.
 So, it would be good to have a picture of that diagram.
 So, I'm going to show it again.
 And you can show it again.
 And you can paste it in.
[01:20:47]
 I'm going to copy it to from the slide just like you guys are doing.
 And I'm just going to press Ctrl+V right here.
 It should render it right there. Okay, right there, nice and big.
 All right, so what does the flux, the flux, if you say about data flowing in one direction?
 So we see here there's store at the top. There's arrow going here to state selector.
 At the top, there's arrow going here to state selector. Another one going here to view or component.
 Another one going here to action.
[01:21:51]
 Another one here going to dispatcher.
 Another one here going to reduce her,
 then back to the start.
 Data should flow in one direction.
 And so we need to know what these stopping points mean.
 It's going to stop at each one of these rectangles.
 Now we're going to start here at the component.
[01:22:19]
 The component should tell the dispatcher which actions are performed.
 So here's a component, they call it view and we also put our components in the view folder.
 So the component or the view is going to tell the dispatcher or it's going to give an action to the dispatcher.
 or it's going to give an action to the dispatcher. What is this action?
 Well, let's just say, for example, it wants to set
 the did mount to true.
 Okay, so there's going to be some kind of action that describes
[01:22:58]
 set did mount to true.
 We're going to give that to the dispatcher.
 Then the dispatcher uses the correct reducer to perform the action.
 So the dispatcher has the action.
 The dispatcher triggers the reducer.
 The reducer also receives the action. And that's the one that does the actual
 setting of the variable. This is where the amount will be set to true. The reducer is the
[01:23:35]
 guy that does the work. Just like here are reducers for state setters, this one will be doing the work and we'll somehow code this to set the amount to treat, or we'll use it to increment the count, or we'll use it to increment, or to change the message.
 These are our reducers.
 These are our producers. And then the results of changing state variables are saved in the store.
 So reduce their change the results on the state variables. Then it gets saved in the store.
 State variables are all stored in the store. That's why it's called the store.
 It's not like a shopping store, but it's a storage place for your state variables.
 variables. Components can select and use state variables from the store. So here there's a state selector. The component wants a state variable from the store, it needs to use a state selector.
[01:25:11]
 This one basically will look self-explanatory.
 State selector selects one of the state variables inside of the store. And then the process continues like so it sets now that
 let's just say that did mount this change did mount the true it's going to get
 stored in the store and now the state selector can be used so now the state selector can be used.
 So now the U component selects the did mouth.
 A variable with the state selector and this component will now see that the And that's basically the flow of data.
 And here we're going to describe how redox implements the flux velocity.
[01:26:27]
 So flux is just a description of, or like the blueprint, or the template of how states
 should be managed.
 So, if it's just a blueprint, then it's just like an idea.
 So flux is just like an idea or a philosophy.
 Redux implemented.
 Actually turns it into code that you can use.
 So how does it do that?
[01:26:58]
 How does Redux implement it?
 Copy this so we can figure it out. and then share my screen now.
 Paste it into the notes. I'm going to take a look at the and highlight some things.
 As you select here, that's code.
 That's the hook.
 And as you just add that's code.
 It's nice actions, that's code.
[01:28:21]
 And provider, that is code.
 Okay, so let's look at it.
 So how does flux, I mean, how does Redux implement the flux philosophy?
 Remember, flux philosophy said, data should flow in one direction like this.
 So Redux says, OK, I'll implement that.
 And the way I'll do it is I'll have a hook, I'll view selector.
 A React hook for accessing a state variable in the store.
[01:29:04]
 So you select that basically
 implements this part right here. To access a state variable that's in the store.
 Use dispatch. That's a react hook that gives components access to the dispatcher.
 So we did use dispatch.
 I probably put it in the wrong one right here.
 And let me change the over here, size actions. Then we put this up over here in front of this patch.
 I'll put a little bit more in quarter.
[01:29:57]
 So let's start over.
 There's a new selector.
 That includes this part.
 Selecting variables from the score.
 Slice actions as an object that contains actions
 that the dispatcher can perform.
 So here, slice dot actions.
[01:30:24]
 So that slice that we have, it also has an actions property.
 Use dispatch. That's a react that gives components access to the dispatcher.
 So somehow a component needs to be able to give an action to the dispatcher. So somehow a component needs to be able to give an action to the
 dispatcher. So we need to use dispatch to access this dispatcher.
 Provider, that's a React component that gives child components access to the Redux store.
 So this store right here needs to be accessed by components.
 So the provider gives access to that store.
[01:31:18]
 But the components need to be a child of that provider.
 So think of the provider as like the parent component
 that's holding all the state variables.
 And you only have access to those state variables
 that you are one of the child components
 of that provider component.
 So we know how this is implemented already provider component. Okay.
[01:31:52]
 So we know how this is implemented already with React components. Redeemers, these are implemented by those functions that we have.
 So I just described here the, you know, new things that I have not yet described.
 So hopefully it's starting to come together in your mind.
 But it's going to get a better understanding of it.
 Now we're going to start going to make sure some things start using the implementation.
 Here's a provider component.
 So the provider component gives components access to the readut start and the hooks.
[01:32:52]
 Without this provider, the hooks won't even work.
 So copy this. And I guess there's going to be a code sample to.
 Now I'm going to share my screen.
 I see that itins in here.
 And before I forget, I'm going to put a simple here.
 Just in right here, it's going to put a blue point.
 We're going to highlight the which is here. React Redux is a package in next TS that's a store.
[01:34:10]
 There's a provider from color and again.
 Store attribute of the provider.
 And we got store. So it should look like this. And I'm going to put the code
 sample in here after we use this. First install react Redux, which provides react utilities that would be at, I mean, would readux.
 So we do that from the front end,
 PN, PN install,
 React Redux should be a dependency because we will import this
[01:35:05]
 directly into our app.
 So there's that it's installed.
 Then index.ts.
 That's our index file. So let me get that ready. [BLANK_AUDIO]
 We'll actually index.chx.
 And you can see here index.chx for this is React.
 [BLANK_AUDIO] So this is React. Import the provider component and the Redux store.
[01:35:52]
 So here's index TSX.
 Import the provider component.
 Here it is.
 You need the one from React Redux.
 Today's the long end, it's up to at least two different providers.
 You need the one from React Redux. And what else do you need to import the Redux store?
 I think we didn't export it yet.
[01:36:32]
 So I'm going to head on over to store TS.
 There's the Redux store right here.
 We didn't export it yet.
 So make sure you export that it's exported
 now we can import it here import the store from here it's's modules Redux folder store.ts. It's so important the provider and the store are important.
 Place components as children of provider if they need access to Redux state variables. So which one of these children need access to the Redux state variables?
 Basically, you would make them, I mean, which one of these components need access to the state variables.
[01:37:47]
 Well, to be on the safe side, I'll just put everything inside the provider.
 My way, any of wherever somebody or whatever a component needs access to the state variable,
 I know all of them are covered.
 You can start bringing in this provider when you know for sure which ones don't need it and which ones do.
 Otherwise, putting it on the very outside, it truly
 makes it global.
 Like it is a global state variable that all the components
[01:38:33]
 have access to the store, when you put it on the top level.
 So here's provider.
 Every is a parent component for all of these components.
 Of the home component contact about everything in here is part of the, I mean is a child of the provider component.
 Let the store attribute of the provider. So this provider has a store attribute.
 It says right there.
 So let the store attribute of the provider component be the redox store.
[01:39:23]
 So that's this one right here.
 So this means that all the components that our children and provider will have access to the redox store.
 Or just all the state variables.
 They will have access to state variables. We'll have access to state variables.
 Okay, so that's it for that.
 Use Selector. So this is the part where your components can now actually select a state variable from the store.
 So use Selector. This use Selector hook selects a state variable in the Redux part.
[01:40:21]
 So the Redux source is containing state variables.
 We need our components to access those state variables.
 The way to do it is with this hook.
 Let's copy this down and start using this USelective hook.
 this new selected hook.
 I'm just sharing my screen now.
 Nice to see. I think I forgot to put the code sample here for the provider. Just going to get this thing here. this is part
[01:41:31]
 stick in here and sit
 see how it looks
 it just looks like a fact to me So we can put a maybe a code sample here. This is the selected code.
 Select a state variable and the redox store and then we're going to import it from React Redux.
 We're going to add the new selector to the component.
 Over the return value
 in variable that matches the state variable to be selected.
[01:42:43]
 And then that use selector except they call back function.
 Okay, so I'll walk through this.
 Use select here. So let's import this into a component. So nothing connects. We have So, not in connects, we are going to use it in the home and home it. Here's my help component. I'll open port.. There it is.
 From React readups. Next, I'll add the USelector Hook to a component.
 So, I'm already here in the home.
 I have a state variable in here already.
 Eventually, I'll phase this out, but I'll leave it there for now.
[01:44:25]
 Gonna use looks like this was
 customized this would not be customized.
 So give a note please.
 Use selector. Stick it in there.
 And it's a hook. So the hook's are functions.
 So some kind of function.
 And it's going to have a return.
[01:44:57]
 It has a return value.
 So store the return value in a variable that matches the state
 variable to be selected.
 So this selector is going that matches the state variable to be selected.
 So this selector is going to select the state variable for us, which one do I want to select.
 These are the state variables that I have right here in my modules.
 The state variables that I have are right here,
[01:45:25]
 did now click and message.
 Let's go with did now.
 So, use selector will have a return value,
 store the return value in a variable that matches the state variable to be selected.
 So, the state variable that be selected. So the state
 variable that we are going to select is did now. So we're just going to score, we're
 going to create a variable for the same name here. The return value of this will be scored in here. Same name. Then let
[01:46:08]
 you select there except they call back function.
 Okay, so I'm just going to put a, I'm just going to put callback function in here.
 Call back. Because we don't know how that should look yet. But I'm going to copy this as my code sample.
 And paste the linseed here.
 It looks like that.
 It's a hook and hooks our functions.
 So you need to activate them with parentheses.
[01:47:00]
 And you usually, this one will have a return value, so we're capturing it on the left side of the equal sign.
 When it's the return value going to be, it's going to be a state variable.
 So we should let the variable here match the same name as the state variable.
 It needs to have a callback code, and that's what we're going to figure out what kind of callback it needs.
 And here it is. It's a selector function that we need.
 So a their function.
 The callback function is called the selector.
[01:47:52]
 And the selector receives all the state variables from Redux.
 So here, here this is the selector function.
 It's going to receive all the state variables from readups
 And then it's going to return a state variable
 So it's almost it's like a reducer
 And then the naming convention is to start with select right here so that's the select.
 Then camel case the state variables to select.
[01:48:30]
 So did not if we were going to select.
 So we're going to start. function. Copy this. I'm gonna share my screen.
 and paste it into the nose.
 Put it into the code sample to make some space here. and
 and state is the
 key word here is a keyword here.
 Can you select the keyword here? I selected the keywords and I highlighted that.
[01:49:56]
 So we're going to go and do this now.
 Create an empty selector function.
 Okay, so this selector function should be here.
 We can actually make it outside of the component.
 I made it outside. I'm making it outside of the home component.
 You should make your extra functions outside until you realize that you need to access something in here, then you can start bringing it in.
 But make it outside first.
[01:50:34]
 So I'm going to create an empty selector function first.
 Here's an empty function, with name should it have. It should start with the word select.
 And then, camel case, the state variable that it's selecting,
 is going to select the did mount state variable.
 It should accept a state object.
 What will be the type of this?
 We already made a custom type.
[01:51:13]
 It's this one here, state variables.
 That state object will be the state variables.
 Just like we had state objects right here, same thing. We asserted it to state variables.
 So we are going to assert this one to state variables. So when it comes in, we know how it looks. that has did melt the count message.
 What else? That this selector function be the callback or use the selector hook.
 And so this callback that was up here.
 Now I know what it should be.
[01:52:10]
 It should be that select your function.
 Select, wait, no.
 We've all the red stuff is here.
 But even so, it's still not ready. So Chris is asking, does the certain state variable type disregard the values when
 deserted?
 I'm not sure what that, what you're asking there.
 We're just saying that this type right here, which says it's a blueprint that says an object that has a
[01:53:09]
 big mount, property, a click mount, property and message property. And that
 this state object will take the shape of this. Basically the state object will have a did not click count and message.
 So nothing is being disregarded.
 This selector though, it will just select one of the states.
 So it's just going to select did mount.
 We're getting all the states.
 All the states are coming in here.
[01:53:47]
 But we're just going to pick the mount.
 So, that's, yeah, that's basically it, right there.
 That's what you mean by disreverting.
 Yeah, we're not going to pick everything here.
 We're just going to select one of the states from the store.
 And so, okay, so,
 okay, so what you're asking here is here, type of.
[01:54:22]
 So this is creating a type from an object. So we have an actual object. So
 think of it like there's there's an architect and he said, I see a house. And then I think I'm going to reverse engineer and make the blueprints.
 That's what type of here does. It says, "Okay, I see an object.
 Okay, I'm going to reverse engineer it and make a blueprint right here."
 So this is the blueprint of this object right here.
 Any other questions?
 Yes, no. My hand keeps raising. I don't. I don't. I didn't know. It's all my hand keeps raising. I don't.
[01:55:25]
 I didn't know what time I am raising.
 I was just so I'm just trying to figure out for future reference here.
 So I don't have to create like a tight template.
 I can use a already created object and use that as like a type of type of that.
 And it'll just bring across the framework or the without the Yeah, okay, that's our honor. Thank you. Yeah, if you have a if you are if you have an active object
 Yeah, you can use type of to to
 You know to create the template of it. Okay, right. Thank you
[01:55:57]
 But if you don't have an act, but if you have a situation where you don't create an object then you should
 You know type it all out like that. Okay, thanks. But in this situation, we do have an actual object.
 Okay, so that should be enough for today. We're gonna finish the rest of Redux on Saturday.
 We'll just see what's coming up next here.
 We're very close to selecting a variable.
 Maybe let's see here. can we select this right now? Yeah, we can select it with the next slide.
 But it's going to take 10 minutes or 5 to 10 minutes and cut into the break time.
[01:57:14]
 So let's just go into the break time. And then I'll talk about how to actually select on Saturday morning. See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break into the third hour.
 Time to work on the assignment. And there's a new assignment. It's already been
 one week since the previous assignment. That should have been enough time. This is the new assignment.
 Capstone front end accounts. So last week you worked on back end accounts. Now you're gonna work on front end accounts.
 So basically you use the capstone front end to perform credit operations.
 Remember credit means create, read, update, delete data.
 Credit operations will be--
[02:09:07]
 the front end will perform CRUD operations with the capsule
 in the back end.
 They're going to start communicating and working together now.
 So create a branch for defining a custom data type
 for user accounts.
 This should be easy because you should already
 have some data types for your backend.
[02:09:27]
 But since your backend is like a separate thing,
 has its own workspace,
 you'll just have to copy over your custom data type
 into your front end.
 Just do that for now, that's the easiest way to do it. There's ways to share
 like there's ways to share similar code, but it just gets a little bit complicated
 because it starts reaching outside of your workspace,
[02:10:06]
 outside of the root of your workspace.
 And I'm not sure how that will affect your project.
 So we'll just keep it, you know,
 a copy in your backend and a copy of the data type
 in your front end.
 For the branch, we're using TDD to test a function.
 So this function will actually be the same name as in your backend.
[02:10:30]
 So the function in the backend, it was called create account.
 The function in the front end will also be called create account.
 But the implementation or the code will be different. Right at least five tests for the function,
 the connect to the backend and create accounts.
 So this function here, create account,
 will connect to the backend and create an account that way.
 That's your basically the backend that's doing the work, your front end just needs to tell
[02:11:09]
 it what to do and provide the information. So if you're going to create an account,
 you need to provide an email in the password at least. So your front end needs to provide that information to the backend.
 And then code the function according to the test specifications and the custom data
 type.
 So your custom data type here, use it. Also specify your return types if you're going to return something.
 This one, create a branch for using the function and a component and rendering the results.
 and rendering the results. So here is, you know, the create account function.
[02:12:07]
 You should be using it in a component somehow.
 Maybe if after someone submits a form,
 or if they click on something,
 or maybe it was just hard coded to run for now,
 maybe on the mount or whatever.
 Just figure out how to do that. maybe on the mount or whatever.
 Just figure out how to do that.
[02:12:34]
 The easiest way to do it would just be on the mount component did mount, but then that's not practical. Eventually the how you're supposed to do it is from like a form submission.
 a form submission.
 But basically use it somehow in your function and render the results.
 So this create account function is going to create an account
 and it's going to have some results.
 And you should be rendering those results.
 I don't know what those results will be. You decide what it will be.
[02:13:10]
 Whatever makes sense.
 But you should render the results so that they make
 sense to users.
 Don't just render a JSON string.
 That doesn't make sense to users.
 Make it make sense. Like, use the output in a way that make sense to users. Make it make sense.
 Like use the output in a way that makes sense to users.
[02:13:29]
 Not just the JSON string, but actually use the data
 in a JSON string.
 That's what you're going to get back.
 Render the results so they make sense to users
 and match the design of your front end.
 So basically, it's going to look like results.
 It'll look like results you expect on a website, not just like some code that you're not expecting users to see. It's not at not like test code.
[02:14:07]
 It will look like actual production-ready website.
 Sort of.
 It doesn't have to be perfect.
 It just should make sense and follow the design of a front end.
 And then you're going to repeat this process for retrieving, updating,
 and deleting user accounts.
 You might not have to repeat number one.
[02:14:33]
 You probably just need to do number one once, only once.
 But then for sure, number two, to six,
 you should be repeating for these other current operations.
 Create a branch to establish communication between the deployed front and and back end.
 So your front end is deployed on GitHub.
 deployed on GitHub for on S3 Cloud Front, whichever it's deployed. And your backend is going to be deployed in AWS Lambda. Somehow they need to be communicating with those URLs, those deployed URLs. But before
 you do that, before you do step number eight, you should be testing everything locally.
[02:15:35]
 Make sure everything works locally. And then you can create a branch to establish communication when they're deployed.
 And I hint here, how do you get your program to know if it's deployed or not?
 It's the same way when you got your program to recognize when it was deployed in GitHub or
 when it was local. You use root path or you use the domain.
 That's for the front end. So basically use the domain to figure out which
 URL you should be communicating with. So if you're local, you should be
 communicating with the front end should be communicating with the front end, should be communicating with local host backend.
[02:16:27]
 But if your front end is deployed live,
 it should be communicating with the AWS Lambda URL backend.
 And your backend,
 you can use environment variables. If it needs certain URLs, if it needs a local URL,
 then you can have a, you know,
 mode equals development.
 If it sees that the environment variable is development,
[02:17:01]
 then your backend will know that it should be using local URLs, local host.
 But if your backend sees that mode is production, then your backend should know that,
 hey, you should be using actual live URLs.
 Then as usual, merge the branch to main whenever the branch is done and then push main in the branches to get help.
 Also, I should also add here push them to AWS Lambda and S3.
 Cloud front.
 We're going to start the breakout rooms and they'll be up for the 31 minutes this time. And as usual, there will be a room for collaboration. One for silence and one for many evaluations.
[02:18:20]
 And I'll just put your guys in a room so that you can see the rooms,
 but you don't have to go in them.
 Okay, breakout rooms are started.
 Anyone want to volunteer for any corrections?
 For many evaluations.
 Otherwise, I'm just going to check the list. [BLANK_AUDIO] And you volunteer.
 This is you're going to run out of time and you're going to miss some points if you can't get your...
[02:20:09]
 If you can't meet the deadline for the points.
 And you're going to have to contact the student success team and explain to them why you fell behind. I see here a corrections submission. or Alexandra, you want to take care of that today? You could talk to me that he's going to volunteered for Saturday.
 Okay.
 So on Saturday, I only have time to do corrections during class.
 I won't have time to do corrections after class.
 Okay, so, realign will, okay, I'll meet you in the
 many values. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so the breakout rooms are back. I'm about maybe halfway through the mini evaluation for Raylon.
[02:50:53]
 But in conclusion, we learned about device reducers as setters.
 So I want you to get used to this term here reducers, even though they are functions.
 You just need to know that we are using them like setters or we will be using them like setters. When our setters, they are functions that set the value of a state variable for some kind of variable.
 So we know that reducers are set, our functions,
 and we're going to use them as setters.
 Custom type, we learn how to use type of to make us
 custom type for our state variables. We learned about the flux
[02:51:47]
 philosophy and how it had like one, two, three, four, five, six steps for managing state variables
 and that we, uh, Redux implements the flux philosophy. We learned about provider,
 the provider component that takes care of like the store accessing the Redux store.
 The components will have access to the Redux store if you provide the,
 if you have the provider component.
 And there's the use selector hook that we started using.
 We are gonna use it to select environment variables
[02:52:36]
 from the store from the Redux store.
 So make sure you take attendance.
 You have one minute to make take attendance.
 Other than that class is dismissed.
 That's today's lesson on Redux.
 We'll try to finish Redux Saturday morning.
 I need to finish Raylon's mini interview if
[02:53:00]
 Alex Sanders is still here when Raylon finishes her mini evaluation, I mean,
 then I'll work on Alex Sanders' corrections.
 So I'll reopen this. Okay, break our rooms are open.
 I'll see you in there, Raylinekay, Alex and dryerize here still here. So, as promised, I'll
 be able to try that.
 Right, right, right, right, right, right, right, right, right, right, right, right, right,
 right, right, right, right, right, right, right, right, right, right, right, right,
[03:54:04]
 right, right here.
 You're not going to be right heree'll just continue out here.
 There's no one here.

///// FILE: "Level 4/transcripts/Apr 12, 2025 11-39.txt"

Transcript from Apr 12, 2025

[00:00:00]
 Good morning class. Welcome to Codex Academy level four.
 It's week five, day five.
 And this is the last day of our theme, Redux.
 In the first hour, we'll take attendance. Do announcements, review what was taught on Thursday.
 And if there's time, start some Redux topics.
[00:00:36]
 Deconour, all brand new Redux topics.
 Third hour, time to do many evaluations and work on the assignment.
 If you're here right now and you have in Mark your attendance, you can head on over to your code x academy account.
 Mark yourself as present.
 Mark yourself as present. Now it's time for announcements.
[00:01:13]
 Let me load those. Okay, I'm sharing my screen. Okay.
 So remember to click on that add submission button for your mini evaluations.
 It'll put you on the waiting list for the mini evaluation.
 And it'll also let you qualify for the on time point.
 Remember, just because you click on add submission, it doesn't mean that you're gonna do the mini evaluation right away.
[00:02:32]
 And you have two chances. So, yeah, just you should, you know, to make this easier for yourself.
 You should get the on time point by submitting it in on time, making the submission on time.
 And then do the mini evaluation, whether or not you're ready,
 so that you will know what you will know what you know and you'll know what you don't know.
 And the mini evaluations are taking content from two weeks before and maybe just one thing from the week prior.
[00:03:33]
 So if you're keeping up with your assignments. The mini evaluation should be pretty easy.
 The hardest part about the mini evaluation should be the thing from the week before.
 But the questions that are based on content from two weeks before,
 you should have had enough time to practice these and just naturally have become familiar with them.
 Like for this one is "Minute Evaluation for Week 5" or "This Week".
[00:04:17]
 We learned about Environment Variables last week.
 So maybe this might have been the newest topic in these set of questions.
 We learned that we did this one two weeks ago.
 We did so that's TDD query practice.
 We did declaration files two weeks ago,
[00:04:45]
 and deploying from a repository folder in GitHub,
 that was two weeks ago.
 So this one should be the hardest thing here,
 because it's the newest topic.
 But these two, you would have had two weeks to know these,
[00:05:08]
 become familiar with these.
 So this, a mini valuation like this,
 did not be so difficult to attempt because most of it
 is review of stuff you should already know or
 old content.
[00:05:39]
 the mini evaluation for week five it closes on Tuesday before class.
 That means submit corrections.
 To make the corrections submission before Tuesday.
 Before Tuesday's class.
 Otherwise, you're going to have to go through the student success team to reopen anything
[00:06:06]
 that you need points on.
 And you're going to have to tell them which assignment needs to be, I mean, which assignment
 you want to request to be reopened for you and why you have fallen behind. There are other assignments that you might want to contact them about,
 because capsule and TypeScript disclose.
 This is closed.
[00:06:34]
 Proxy is closed.
 Okay, so this capsule back in account.
 This one will close Thursday before class. Actually, yeah, this will close Thursday before class.
 There's a new one that was assigned on Thursday.
 That's Capstone back in Capstone front end accounts.
[00:07:00]
 Capstone front end accounts that will be due on Thursday, but this one will close on Thursday.
 And as usual, practice problems are listed here. If you're having a hard time doing an assignment, like back end accounts, right here,
 then you should try the practice, the practices there, because they'll help you with your assignment.
 Let's see if there's any new questions in Slack.
 Basically, if you get stuck for 15 minutes or more, you should post a question and
[00:08:06]
 slack right away, so that you get answers and spend more time progressing instead
 of spending a lot of time being stuck and getting nowhere. So there's nothing new here.
 So I expect everything is clear to you guys.
 If you're not asking any questions,
 then all I can do is move forward.
[00:08:43]
 And assume that everything is, you know what the assignments are looking for and you understand them.
 If you are behind, if you're behind, don't be ashamed to post any old questions here in July cohort,
 because you're not the only one who's behind.
 And if you are behind and you post your question here, somebody who is caught up will at least be able to answer your question.
 So by posting your question here and getting an answer.
[00:09:39]
 That's a win situation for you. And if it was a classmate who answered it for you,
 that's a win situation for them.
 Also, because at least they got to practice some of their knowledge and use it to help a fellow student.
 So if you are behind, think of yourself as a, I mean, think of yourself as an opportunity,
 you're giving yourself an opportunity to catch up by posting here and you're giving your classmates an opportunity to, you know, build their knowledge by practicing their knowledge.
[00:10:40]
 As usual, mark your days in order when you've taken notes on a day.
 You've asked all your questions for that day and got your answers mark that day green. Otherwise, do not mark it green.
 These days are your checklist to see how you're progressing.
 And now it's time to focus.
 We're going to review so try to absorb the review.
[00:11:14]
 You should already have the notes for it.
 But if you missed anything, you should type in anything that's new to you during the review. And then during the
 the new topics, Mac, but I type and also some things that I type, some things that I don't type,
 or type some things that I say if it's going to be useful for you or if you might forget it.
 If it's going to be useful for you or if you might forget it
[00:11:49]
 phone ready
 For the Wation
 towards end of class
 Okay, so now it's
 For review Okay, so now it's for review. So the things that we went over on Thursday.
[00:12:19]
 Okay, so slice reducers as setters. So, again, reducers are functions that take a lot of things in, and one thing comes out.
 They reduce things.
 And what we have here are a set of reducers, but the format is different.
 Instead of putting the name of the function in here in between the keyword and the parentheses.
 Instead of putting the name there, we put the name over here.
[00:13:00]
 Why is that?
 It's because it's inside of an object and this is this is an easy way to do it
 At least you're familiar with it
 It highlights the it highlights the name of the function on the left side
 And then we're using an anonymous function on the right side. This is part of an object
[00:13:27]
 So there's no equal sign.
 When you're inside of an object, you use colon to assign a value to a property. So let me pull up the actual code here. Okay, so it's going to look like this. inside of an object.
 On the side it was just a zoomed in, it's zoomed in on the reducers are functions, then we'll take into state and
 this state object is actually all your state variables. All your state variables are going to come in here.
 Redux is just going to give you a copy or it's going to give, Redux is going to give a copy to this function.
[00:14:55]
 I mean, it's going to give it a copy of all the state variables.
 And it's up to this function to say, okay, which one of these state variables in here needs to change and how should I change it?
 Then it's so obviously variables come in, one thing changes out of those state variables.
 So in this case, the did mount, paid variable will change.
 That's why we call it did mount.
[00:15:30]
 This function is called did mount, because it will change the did mount state variable.
 This function is called clickout because we wanted to match the state variable that it will change.
 This one too, it's called message because there's a state variable called message and we want this, these reducer functions, the match,
 they're staying variable. And what do these reducer functions do? They'll
 just basically set. These are basically you're using them as setters. We will And where's the, okay, I was looking at the wrong spot there.
[00:16:32]
 Okay, so line number three here is something I forgot to add on Thursday.
 And store.ts
 class options.
 So, let me show that. [ Pause ]
 >> It's door.ts.
[00:17:18]
 [ Pause ]
 >> Close options. Right here.
 Right here.
 Right here.
 That reducers to state setters.
[00:17:41]
 Here it is set reducers to state setters.
 State setters is coming from that file where we put the reducers.
 Those are our state setters.
 And we put the buggers in each one of them because I haven't taught you what to put in them yet,
 but we wanted the bugger to go in there.
[00:18:15]
 We wanna go in there and stop in the code
 so that we can see what the state variable looks like
 and what the action variable looks like
 or the action parameter. We also added this
 date custom data type.
[00:18:34]
 It reminds us that the state right here, the state object is just going to basically look
 like our set of state variables.
 That's the type right there. That's the custom type and we created it pretty easily.
 All we had to do was just going to right click here and see how we did it.
 We just have to use a word type of and then give it the object that will automatically
[00:19:16]
 create a type of.
 So it's going to make a data type out of this object.
 And whereas this object is right here,
 we can see there's an actual object here.
 Eventually, it makes a template of an object.
[00:19:37]
 We see here, if I mouse over it, here's
 a template of that object.
 It's not an actual object.
 It's a template that's saying that did not,
 we expect it to be a Boolean.
[00:19:48]
 Click Count, we expect that to be a number.
 Message, we expect that to be a string.
 Here is the actual object with actual values.
 Here's did not false click count zero.
 Message is a low world.
[00:20:04]
 TypeScript was able to figure out the data type of
 this by using the type of keyword. Use type of, give it a
 nomjec, then TypeScript figures out the data type. This is the easy way to do it. The hard way to do it is just
 basically just repeat. Basically almost just copy this but then put it in
 TypeScript mode by putting type here. So think of it like this. When you put
[00:20:37]
 const, you're putting it in object mode. That's where you have an actual object with actual values. But when you put type, when you use type right there,
 when you use type, you put it in TypeScript mode,
 where it looks like an object, but you're actually just
 specifying types.
 So object mode is class. TypeScript mode is const.
[00:21:06]
 TypeScript mode is type.
 In const, you specify values.
 In TypeScript mode, you specify types. So those are, that is the data type or the, that is the custom type of our state variables. And we assurge it into state centers right there. That's what you're
 gonna get. Redux is gonna give you a copy of all the state variables. And then
 you you pick which one you want to change and then you change it from inside of
[00:22:02]
 here.
 Let's see what else.
 Switch slides. Slice reducer method.
 So the slice that we created in store.ts.
 So this slice right here, remember slices like a piece of your app.
[00:22:42]
 Think of it just like a piece of your app. Think of it just like a piece of your app and this
 Slice of your app is about state variables
 Well this object right here. It has a reducer
 Property
 That's the one we need to pass to
[00:23:03]
 The store the the Redux store.
 We look at our notes here.
 You see, you set the store options and where you put, where you set the reducer, where you access the reducer
 property of the slice and then assign it to the reducer of the store options and then
 pass the sentence here so it can properly create a Redux store.
[00:23:53]
 Then we talked about the flux philosophy.
 Flux is a philosophy. It sounds like a full word for a philosophy, but just remember it's just a philosophy. It's not a, it's not an app. It's not a package.
 Just a philosophy. It describes this is a description of how to manage data flowing in one direction.
 how to manage data flowing in one direction.
 And it doesn't say in here, but it was Facebook that came up with flux philosophy.
[00:24:33]
 And that was because Facebook
 was having a hard time managing react.
 Facebook also invented react,
 which we use now.
 So React was getting big and it was getting hard to manage the state variables in that app.
[00:24:58]
 Facebook invented flux philosophy that said you should have a
 you should have a central place to store your
 state
 and you should have a selector
 for something like a function to
[00:25:28]
 select the state variable from the store. And your components will have access to that selector,
 which gives them a state variable from the store.
 Then your components here,
 they can send an action to a dispatcher.
 So what is this action?
[00:25:45]
 It's like it's basically like an instruction.
 I want to change the amount to true.
 So this component will create an action.
 That says something like change the amount to true.
 Give that to this catcher.
[00:26:04]
 This catcher puts the information together. Change did not to true. Give that to this batcher.
 This batcher puts the information together.
 Gives it to the reducer.
 The reducer is, remember it's those functions that I showed you.
 We just had debuggers in them,
[00:26:19]
 'cause we don't know how to code them yet.
 Gives it to the reducer.
 them yet. It gives it to the reducer.
 Reducer is the one that actually changes the state. So, if back here, you said, change did not to true. This batch of takes that, gives it to the
 reducer. Reducer actually does the changing.
[00:26:46]
 It changes did not the true.
 And then did not is true in the redox store.
 That's the cycle.
 It's just going to repeat. So the restructure has the new value.
 A component is going to use a selector to pick.
[00:27:15]
 Or going to see that new value.
 That selector can give the.
 Did mount it can give did not to this component here.
 This component will see okay. It says to now. the did mount, it can give the did mount to this component here.
 This component will see, okay, it says to now.
[00:27:29]
 And if it says to, then maybe it wants to do another action,
 maybe it wants to, maybe it's wants to change the greeting.
 So it says it might say something like change the greeting
 to have a nice day.
 So that's the action.
[00:27:46]
 It gives that action to the dispatcher,
 puts the information together,
 gives it to the reducer,
 and then the reducer actually changes
 the message to have a nice day and have a nice day is updated here in the state variables that store it in the Redux store. And then how does Redux implement this flux philosophy?
[00:28:31]
 So flux is the philosophy.
 Redux is the code that implements it. Almost like TDD.
 When you have TDD test-driven development,
 you're just making a design first.
 That you know that is separate from your actual app.
[00:28:57]
 So if you have a--
 you have TDD for a function, that's
 separate from your actual function.
 So flux is separate from Redux.
 Flux is the design Redux is actual code.
[00:29:12]
 So Redux
 for this part right here, but actually let's start from the top.
 Redux, well, it's creating a store. We know that we use a function called Configure Store.
 This one here, use Selector.
 That's a hook that we're going to use.
[00:29:33]
 To implement this part, to select state variables.
 View or component.
 Well, we know how to do that. We know how to make react
 components. This was in the wrong order. I should have done sliced that
 actions. So your slice object will also have an actions property that's here. here, you can access these, perform it action, and then this
[00:30:11]
 this patcher, you can access it with the use this patch hook,
 giving that action to this this batcher.
 And then reducers, we've made those already. We just have debuggers in those functions.
 We didn't implement them yet, but we have reducers.
 I guess I should have put this at the top provider.
[00:30:42]
 Provider makes provider as a component. It makes
 this Redux store and all its state variables available to your components.
 This is the provider component. You just need to pass into it the Redux store.
 You just need to pass into it the Redux store.
 You need to pass it into the store attribute of the provider component.
[00:31:17]
 This provider component is not built in. We had to install React Redux.
 Redux. And we inserted this provider component into index.ts like this. [ Pause ]
 >> T-S-X index.TSX.
 So there's a provider component. Anything inside of it will have access to the Redux store.
 So I basically just put everything inside of it.
[00:32:13]
 And then if I figure out later that, okay, I want it to be more inside.
 Maybe I don't want browser router to have access to it, but for now, put it out here.
 And then once we get it working, you can start bringing it in, bringing it in until you see, until you see like, like where's a good spot for it where the right component has access to the Redux store.
 Okay, so use selector. We started using this hook.
 We put it into a component.
[00:33:10]
 Remember, hooks can only work inside of a component.
 It hooks give components extra features basically because you can make a component without
 hooks.
 Then all that component
 does is render things. But when you add a hook to a component, remember a
[00:33:31]
 hook start with a word use, hooks and features to a component. So a component is
 just basic. When you just make it it all that does is render things.
 When you add a hook, it adds a feature and in this case, this feature is the ability
 to select the state variable from the Redux store.
 This hook comes from React Redux.
[00:34:09]
 The package that we just installed that also includes a provider component.
 And let's see here.
 For the return value. If the this hook will return something.
 What do we expect it to return?
 We expect it to return the state variable that we are selecting from the store.
[00:34:40]
 So we have a variable right here.
 And naturally we'll let it match the state variable
 that we're taking from the store.
 The selector will go in,
 use selector will go in,
[00:34:55]
 get the state variable from the read-out store
 and then put it into this variable right here.
 That selector
 or this hook you selector it takes a callback
 and we were working on what does this callback look like?
[00:35:17]
 It's supposed to look something like this. This is just the anonymous
 anonymous function.
 The anonymous function, actually, no, it's not.
 There's the name here.
 We just didn't define the code here in this slide, but the code is going to be right here.
[00:36:05]
 I did module Redux. Okay, so I didn't, we didn't mix.
 Okay, yeah, I didn't show you how to make a file yet.
 I had to jump in the head.
 You select her.
 Select her function.
[00:36:24]
 I didn't put the code sample there, so I'm going to put that right now.
 And I could get the code sample from the component where we defined that selector.
 That's in the home page or the home.
 You have a selector right here.
 Function.
[00:36:52]
 Select did mount.
 I'm going to put this in the code sample.
 I got to put that in there.
 I'm going to just remove this, so I'm going to remove the TypeScript, so it's a little
 bit easier to read.
[00:37:13]
 But, about State Object, we know that it's going to be a set of all our state variables like this.
 Okay, so we, we created an empty function that accepts a state object and we asserted the type.
 Right here we asserted there's an empty function see it's empty that accepts a state
 object and we assert the type of that state object. The naming convention is to start with select.
 Use the word select.
[00:38:16]
 And then, camel case the state variable that we want to select.
 So here's the state variable that we want to select. So here's the state variable that we want to select.
 So with this function, we want to select the amount from the Redux store.
 We haven't coded it yet. So let's, let's, let's, what the next slide is going to be about.
 Yeah, so we're going to get into Redux now, the new topic Redux.
[00:39:07]
 Okay. Select our function implementation.
 So we're going to implement that selector function that I just
 showed you in the previous slide. It's an empty function right now.
 We're going to implement it or code it. That's what implementation or
 that's what implementation means that means coded. Put the code in there.
[00:39:29]
 Code the selector function to select and return a state variable.
 There's also code sample there.
 That is actually
 That is actually the implementation we want to code the inside of it. You know how our function is empty?
 Well, this is the code that we need.
[00:40:00]
 But I'll show you how it works. Instead of just copying and pasting it.
 We're going to figure it out.
 But I'll copy and paste the notes, though. There's a post CD code sample here.
 So we want to put the debugger in there to view the state object.
 Let's stick a debugger in here so that we can figure out what that state object looks
[00:40:52]
 like.
 It should be pretty easy.
 We can already tell what it's going to destructure the state object.
 Then we're going to return the selected state variable. Okay.
 All right, let's do this first.
[00:41:28]
 Let's get the debugger activated.
 So get the debugger activated.
 You need to start your front end.
 And Pm start.
 That's for me.
[00:41:44]
 I put it in that script already.
 Actually, this is around not in the notes, not here.
 The in my VS code with the front end.
 But for you, if you're doing it all from the same, from one VS code, you need to switch
 to the front end folder.
[00:42:13]
 My npm start script is npm.pyxwebpackserver. Remember the webpack server doesn't build your files
 in the disk folder.
 It just builds it in memory.
 So whatever happens inside of this server just disappears
 when you stop the server. Nope, it doesn't actually build any bug load.
[00:42:38]
 Okay so now the server has started. The way to get this debugger to activate is open the react app in a browser.
 I'm going to use the yes code debugger.
 Okay, so it attempted to load this component right here.
 Let me see if anything loaded here, nothing.
 Nothing yet.
[00:43:14]
 It's because it got to this point.
 Let me put a debugger here and restart this.
 Okay, here.
 So this component is being loaded for the first time,
 this home component.
[00:43:29]
 Come in here, we're on this line right here.
 It says use selector.
 It's supposed to use this function here, select the mount.
 So that we can get the did mount state variable from the B.doc store. I click on this, go into here, and
 this is all a react stuff that's not my good. There, it went into selected now here we're supposed to select the state
[00:44:11]
 variable that we need which one how do we do it well here's the state object
 I mean yeah the state object which contains all our states there's the one we need that now. So let's select that first. So in our
 notes it says you use dot notation or de-structuring to select a state variable from the state So there's two, there's different notations that we can use.
 Like this, we can leave dot notation.
 Here's the state object and it has did not in it.
[00:44:56]
 So here, I just basically captured the did not.
 State variable right here or I can
 structure it. The state object has a
 did not property. So, so that basically
 state is an object and it has a did not
[00:45:22]
 property.
 So this will just extract instead of capturing the state. Like this, if you do this, it basically looks like an object.
 But we want to capture the or the structure one of the properties.
 So we just feel like this.
 So there was there was two different ways to do it.
[00:45:53]
 This is that notation.
 I'm going to do it the restructuring way there.
 And then so we got that, we got the state variable, and now return the selected state
 variable, return it here. And then confirm that the component receives a state variable.
 So let's just refresh this.
[00:46:35]
 Okay, so I started over.
 I'm telling this home, or this home component saying it wants to select it wants to select
 did now and then when it's selected it wants to store it in here.
 Okay so it's gonna go into here and then we're gonna see did mount right now it's false gonna return it
 And you put a debugger here so
[00:47:20]
 You can see it's up. I'm gonna start over again
 Okay, so it goes into here for the first time.
 Component says, "I want to select the bit now from the redox store." And then when I,
 when it's selected, I want to store it in here. But let's go first selected. Right there. Redox store gives a state object with all the all the
 states and then we just pull out did mount from there then return it.
[00:48:00]
 Okay so if it worked properly did mount should have a value here. So it says false
 So that's good. It's selected are variable
 At least we were able to do something now
 We were able to pick a variable
 From the Redux store if we don't do this if we don't return the mount
[00:48:24]
 You'll get nothing.
 Let's try that.
 All right, so I restarted it.
 Coming in here for the first time, and this component is saying I want to select the
 amount from the redox store.
[00:48:41]
 So it's going to go and select it.
 But it never returns it, if you commented it out.
 So what's going to happen?
 The mount is undefined.
 We need to return the thing that we're selecting.
[00:49:00]
 That's the rule here.
 Basically you're going to give this to the selector and then the selector is going to give it to you.
 Or just think of it as a rule. The rule is if you make a selector, a select function, here's a select function. First you select the thing that you want to select, and then you return it.
 It takes different ways to think about it.
 Okay.
[00:49:35]
 So the sample code is here.
 This is the implementation. Actually, I can split the whole function there.
 Maybe it'll help.
 Put the whole function in the middle.
 Put that type script script without this view bugger.
[00:50:07]
 So it's a little bit easier to read. able to select a state variable from the Redux format.
 State selectors.
 We're going to make a set of state selectors.
 We just made one, but we're going to make one for all of them. Create a file to export state selectors so other components have easy access to them.
 So right now the state selector was in the home component.
[00:50:59]
 We were able to select, we have, well that function is in the home component. What if another component wants to know what the node is?
 We have to make that accessible.
 We have to make that selector accessible.
 So this is how we're going to do it.
 So copy this into your notes and then add Explore, export each selector function, and import selector functions wherever they are needed to access state First step, create stateselectors.ts in the meetups folder.
[00:52:27]
 We're going to do that here in the front end.
 Put the meetups folder.
 So you see here, they all start with the word state.
 It basically sorts out with the file contains.
 So we'll this file contain it will contain selectors. state selected. They will select the state, a state variable from the read-ups store.
[00:53:14]
 Add a selector function for each state variable in the report. So we have state variables, right?
 So we have state variables, right?
 We have these state variables right here.
 We want to put the selectors for these in here.
 In here.
[00:53:45]
 So we have a selector for the mouse. So we're going to stick it in here.
 I need to take it out of here.
 There's the selector.
 I'm going to take this one out.
 Put it in here.
[00:53:59]
 So now it's in there.
 We need to export the selected function.
 So it's accessible.
 That's also fixed error.
 This type is good error.
[00:54:23]
 Just basically name type it and
 Then I can just pick it for the list
 And then import it wherever
 Wherever the state variable is needed
 is needed. The wrapper that's selected is needed.
[00:54:46]
 So this home component needs that selector.
 It needs to select the now.
 So I'm just going to import it here.
 I don't need this one anymore.
 I need this one out.
[00:55:06]
 This is the state variables type.
 I don't need this anymore.
 I moved it right here.
 So let's see if it works.
 I'm going to just fix this here, put a debugger, just with this dot.
[00:55:30]
 Let's start over.
 I need to save this also.
 Start over. Let's make sure it works.
 So I'm loading this home component for the first time.
 I'm going to select the did- did did not from the redox store and then
[00:55:48]
 store it into here. So let's go and select it. [inaudible]
 [inaudible]
 It doesn't like that.
 Okay.
 Time to put it down here.
[00:56:18]
 Can I let it get?
 All right.
 We're going to select the amounts.
 How do we select it?
 We get all the state variables here.
[00:56:28]
 We pick the one we want.
 And then we return it.
 Then we capture it right here.
 Now we have did not, which is false right now.
 What if we want the greeting or the message? Because in our state variables we have a message,
[00:57:00]
 right? So how would we do that? Okay, let's do it like this. Const.
 Message.
 Or actually, let's start from the right side.
 We're going to use a selector to select the message.
 Stay variable.
[00:57:24]
 And then we're going to capture it on the left side of the equal sign here into a message
 variable, but we have to declare it here.
 Basically, going from right to left. Now we have to encode this selector here.
 Select message.
 I'm going to put it in here with the rest of the state selectors.
[00:57:57]
 What I can do is I can just copy this.
 And it's going to be called select message because I want it to select the message state variable.
 Now what I do that.
 Well, I'm going to get all the state variables in here.
 I need to pull the one that I want.
[00:58:21]
 That's message.
 So I'm going to pull it from here by dis structuring it, then
 I'm going to return it. I need to save this. Let's see if we can get the message
 properly. I have to also import this select message.
 Now I'll reload it.
[00:58:52]
 Go ahead and for the first time, I want to select the message here.
 I don't need this one here.
 I just want to see the message part.
 Okay, so I want to select the message from state variables.
 It's going to go in here.
[00:59:16]
 Hold the message out from the state.
 From the redox door.
 There it is.
 Hello world.
 I'm going to return it. Then I'm going to capture
[00:59:28]
 it here. There it is, hello world. There's one more I want to try capturing and that's
 the click count. Next we let's do it backwards again or from right to left.
 I want to use a selector to select the click count.
 So I'm going to start with a word select,
 "camel case the variable there."
[01:00:01]
 And then I want to capture it on the left side of the equal sign.
 But this function here is going to return click count. So I need to capture it here.
 But I also need to declare this new variable. I need to make this selector.
 That's going to be pretty easy to make. I just copy this, paste it here, where is the selector called.
 Select click count.
[01:00:33]
 Instead of capturing the message, I want to capture click count.
 I want to extract it out of the state.
 I want to extract it out by de-structuring, then I return it.
 Then it's going to come into here and
 put it into this variable, but I need to import this.
[01:01:06]
 So let me just retype that and import it into this variable, but I need to import this. So let me just retype that and import it.
 Okay.
 Now let's just pay attention to Click-Calp.
 Let's make sure we get it.
 So click-Calp is here.
[01:01:23]
 Let's start over.
 Okay, so we're starting over.
 Home component wants to select, click Count.
 And then capture the value in here.
 So let's go with select Click Count.
[01:01:44]
 Here we are in the function. We're going to extract click count from the set of
 all state variables right here. All of them are there. We just want click count. Then we
 return it. Then we captured it here. so click count is zero.
 Okay, so we successfully captured, or we successfully accessed or selected, remember the word is selected.
 We selected all the state variables.
[01:02:19]
 So now we're overdue for a break, so let's take a break.
 So taking a break before I did this.
 But now, you know how change the state variables with Redux.
 So you see it after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and we are going to continue our topics on Redux.
 We just finished this part right here.
[01:13:30]
 We finished selecting or we finished creating a selector
 for each state variable that we made.
 This is just a code sample for the mount.
 And let me make sure I have that in the notes here.
 Yeah, have it there. And now we're going to learn how to
[01:14:11]
 change the state variables.
 And how that would change it if we, if you remember,
 and that flux velocity, we're supposed to use some kind of,
 we're supposed to use a dispatcher, but we're supposed to give an
 action to a dispatcher, and then this batch is supposed to give that action to the reducer
[01:14:35]
 which changes the state variable. So this is where this one comes in. Use dispatch. That's the hook that it returns a dispatch function.
 See, it's-- well, it's yellow.
 It's a function, which is used to change state variables.
 It's not going to change the state variable,
 but we will use it to change state variables.
[01:15:05]
 the state variable, but we will use it to change the state variables.
 So copy this.
 As the reducer is the one that changes the state variables.
 This one just passes the information to the reducer. So, there's the, there's going to be a code sample here.
 Let me see, am I missing any code samples up here?
[01:15:58]
 No. This hook returns a dispatch function.
 We're going to import use dispatch and add it into a component.
 Then in the mouth phase, we'll use the dispatch function.
 And then we'll let the dispatch function take in an action object.
 Okay. So import use dispatch and add it to a component.
[01:16:47]
 We're going to put it all here.
 So this is the part where I selected things.
 I'm just going to start a section here for dispatch.
 Actually, I could put it, probably put it next to the user
 fact.
[01:17:16]
 I'm going to get a function out.
 Well, let's do it from right to left again.
 Use dispatch.
 If I start typing it, I should be able to import it. There it
 is. Use dispatch. Remember, all hooks are functions. The L have parentheses being
[01:17:41]
 activated. So we know we're gonna activate this somehow.
 And we know that it's going to return a dispatch function.
 So how do we capture it?
 We capture it on the left side of the equal sign
 right here, but we need to declare it
[01:18:01]
 and declare it as const or constant
 because we're not going to change the value of this function.
 Okay, so we added it to the component right here. Actually, I can put this as the code sample now. Okay, so now in the Mount phase, use the dispatch function.
 So we need to have a Mount phase.
 I already have this one set up here, component did Mount.
[01:18:59]
 And I have a Mount phase here.
 This Mount phase is doing some things with a car.
 And car description.
 Not quite using it right now.
 I'm just going to leave all this stuff down here, put a separator.
[01:19:29]
 So, I'll leave it as is, but I'll put my things up here, the new things.
 What do I want to put?
 I want to use a dispatch function.
 Okay, if I'm going to use a dispatch function, here's a dispatch function.
 If I'm going to use it, I need to put parentheses that activated.
[01:19:54]
 That's how you use a function.
 You activate it with parentheses.
 If you don't do that, it just sits there and does nothing.
 You activate it with parentheses. Let the dispatch function take in an object, an action
 object. Okay. We don't know what this is yet or where it comes from, but we're going to find out.
[01:20:26]
 But just remember, this is what this picture was about.
 The component, it's going to provide an action to the dispatcher.
 So that's what we're doing right now.
 We're providing an action, but we don't know where this action is coming from yet,
 so we're gonna figure this out.
[01:20:53]
 Slice actions, so this slice has an actions property.
 So the Redux slice contains actions
 that the dispatcher can accept.
 And actions will be used to set the values of state variables.
 So let's get this copied here. I'm going to show my screen now. Okay, so in store TS we will export so here's the actual code right here
[01:22:12]
 exports to actions we'll use the debugger to view the actions
 And we'll observe the dot notation that would be used to set a state variable. Okay, so, okay. Then you, oh no, next slide we'll talk about importing it.
 All right, so we can do this. So we're just going to observe what happens in the Redux store.
 In store TS, we're going to export the device actions, but we're going to export it and
 call it the set.
[01:23:43]
 We will call it the set.
 Well, we'll just name the variable set.
 Why? Because the actions will be setting the state variables.
 So let's go here.
 We're going to go to store.ts.
[01:24:07]
 There's that slice.
 It had the reducer property here. Let's see.
 Yeah, this exported right below.
 So Slice has a property called actions.
 We wanted to export that, but we need to save into a variable called set, which describes
[01:24:49]
 that these actions will be used to set our state variables.
 We have to declare this, so it's cleared right there. And we want to export it.
 Get access to what these actions to be accessible to components.
 Because the component needs to be able to send an action to the dispatcher.
 So we need these actions to be available.
[01:25:22]
 Okay, so we're going to, I'm going to put a debugger here. So we need these actions to be available.
 Okay, so we're going to, I'm going to put a debugger here.
 So we can see what this looks like.
 And that's what the step is here. Use a debugger to view the actions.
 So I'm going to start this over refresh. All right, so here it's going to store the sliced actions into the set variable.
[01:25:57]
 So let's see what this set variable looks like.
 See the set variable is actually, it's an object we see here.
 There's curly braces, where the properties did mount click count and message.
 But these are functions.
 You see there, there's F. These are functions.
[01:26:24]
 So where did we have
 these properties, but they were also functions. Those were in, those were in
 We had these properties, but they were functions. So if we use a debugger,
 I can just type in here set.
 And I should be able to see that set object.
[01:27:19]
 So I see the set object right here.
 I can just expand it.
 Here's a set object.
 I can expand it. I see the properties here. But can just expand it. Here's a set object. I can expand it. I see the
 properties here. But these properties are functions. So these are actually methods.
[01:27:33]
 So here's did mount. Look at this. Here's did mount. So if I put set dot did mount,
 what does that look like? It looks like here, right?
 But it's just using dot notation.
 That did not, yeah, I wanna set, did not.
 And I wanna set it to true.
[01:27:58]
 How about this one?
 Here's set message.
 Oh yeah, I wanna be able to set the message.
 I want to be able to change it or set it to have a nice date.
 Here's another one, set Click Count.
[01:28:16]
 I want to be able to set the Click Count.
 I want to increment.
 I want to set it to whatever Click Count is right now and then just add one to it.
 So that's the reason why we're calling it the set object is so that it looks like a seter.
 Set click count.
[01:28:38]
 Instead of just using like before, the old way was set click count.
 When we had a setter remember and we used use state.
 Our setters would look like this,
 but Redux our setters look like this.
 Just basically object notation.
[01:29:04]
 Dot notation I mean.
 So we observed that the dot notation, we observed the dot notation,
 we used to set a state variable.
 Okay. All right. We're going to learn to dispatch an action now. So we see here in this code, the action, what is an action that we want to perform. We want to set the did not to true.
 So in components that use the dispatcher,
[01:29:55]
 import set from store the.ts.
 So let's copy this.
 Now we're gonna be able to set some state variables.
 So all that set up that we did for Redux is now starting to
 be actively used.
[01:30:23]
 We were able to select variables and now we're going to start to be able
 to set them or change them.
 There's a code sample here. So we want to import set from store TS. And then use a dispatch function. value for the state variable, and we'll use the debugger to follow
 the dispatcher into the reducer. For this case, state setter. Okay. So in the components that use the dispatcher import set from store.ts.
 So that home component is using the store. So you have to put the path here.
[01:32:47]
 Okay.
 All right, so remember the store is exporting set, which contains our actions.
 Like said, did not set quick count set message.
 We exported there.
 We imported here.
[01:33:10]
 Now we have access to it.
 The next is dispatch function.
 Use dot notation to select a state variable in set. So here's the dispatch function. So next to it,
 select a state variable would set, which one do we want to set? I think I want to set the did mount.
 And let me just double check something here.
[01:34:07]
 Now pass in the new value for the state variable. So what is the new value?
 We value, we want it to be true.
 So we passed it in.
 Then we want to, um,
 I should add here, pass it in new value for the state variable and save it in the action.
[01:34:33]
 Let me it here.
 And save the result or the save the return value.
 Because returning something as the action.
 So we pass in the new value here.
 It's going to have a return.
[01:35:26]
 Going to return something. What is it going to return? It's going to have a return. It's going to return something. What is it going to return?
 It's going to return the action.
 So that's where the action comes from here.
 It's just an action.
 It's an action.
[01:35:36]
 It's not going to actually do it right now.
 We're just telling the dispatcher.
 And this is what we want to be done.
 We can put a debugger here to watch it happen and we need to follow it into our state setters. We're going to go into here. It's not selecting properly there.
 Then you'll request this.
[01:36:14]
 There it is.
 Okay.
 All right, so component's going to mount.
 And then my exit is going to here.
 Just watch it.
[01:36:37]
 Let's watch it now.
 Okay.
 So we're exporting these actions as a set object.
 And now the home component is going to load
 and render and mount.
[01:37:04]
 Okay, so we don't need to see this. It's selecting variables,
 state variables we already saw that. Okay so now the home component has mounted.
 We see it here it rendered. Now I want to set it did mount to true. How do I do
 that? There's a set object and And while we're, it's properties, remember,
 it's the properties match the state variable that we want to change. And then we just put in here
[01:37:36]
 the value that we want to put that we want to set it to. So we want to set it did not to true.
 that we want to set it to. So we want to set did not the true. This one will give us an action. That's the thing that we pass into dispatch.
 The dispatcher takes it.
 And then what happens? It goes into our state centers, our reducers.
 Here we are.
[01:38:08]
 This is the final step.
 We're almost there.
 We're almost into setting, setting did not.
 So here we are.
 Here's the reducer.
[01:38:23]
 We're getting in.
 We're taking in all the state variables
 right there.
 Actually, we can't directly see it,
 because it says here proxy.
[01:38:34]
 But we know it looks like this.
 It's supposed to look like this.
 So good thing we have TypeScript.
 That state object is supposed to look like this.
 So what we're supposed to do here is supposed to change the state
[01:38:52]
 of one of these and we want to change the state of didn't mount
 or we want to change the value of it.
 How do we get it?
 That's pretty easy. It looks like we can get the mount here.
 Using the structure. Let's go.
[01:39:13]
 There's the state object.
 I wanted the structure.
 How do I structure it?
 It looks like an object and then the property that I wanted in these structure is the mount. But I need to declare the mount.
 The variable. So there's actually no.
[01:39:36]
 No, we don jump the head. Use a debugger to follow the dispatcher into the
 reducer. Okay, so I did that already. And let me put this code sample here. This is the code sample here. This is the code sample.
 We have the action and the dispatcher.
 Okay. Now I'm going to go to the next slide. Action payload.
 So this action object, we are able to observe it now.
[01:40:45]
 The action object contains the new value of the state variable.
 In a reducer, set the state variable to the value in the payload.
 So I'll show you how to do this. And it has a code sample. Okay.
 All right. So we're going to check out that action object. Because it's going to contain the new value that we need to set.
 A load is here.
[01:42:02]
 So here's code. This is how you get the value. It's stored in the payload property of the action.
 Okay. So let's try this. So in the reducer, this is our reducer right here, this function.
 Right here, setters are our reducers.
 We have two of them right here.
 We need to set the state variable to the value and the payload. So how do you do that?
[01:42:46]
 First, let's capture that new value.
 So if we look at this action object, it has a type and it has a payload.
 That's where the new value is in the payload.
 Then you erase this part here.
 We're not going to be structured. So, then you erase this part here, an active and de-structured.
[01:43:07]
 So, this action object has a payload property.
 You can see it here.
 This action object has a payload property.
 There's curly braces.
 There's a payload property. There's curly braces. There's a payload property. That payload, we're
[01:43:29]
 going to capture that into a variable called new value. Why is it called new value?
 Because that's the new value we want to use. Or we want to set did now. So that's what we're going to do,
 but we have to do it directly from the state.
 We need to do it directly from the state, not destructuring it.
 So your state, we need to access the now and it's good.
[01:43:58]
 So even though if I mouse over this, it says proxy.
 Even though if I mouse over this, it says proxy. This, this custom type, let's me select the state.
 So I want to, I want the did mount to be that new value.
 What is this new value going to be?
 It's going to be true.
[01:44:25]
 You can see it here in the payload.
 You see that it's true.
 You want to set the did not the true.
 OK, so let's rerun this, box it again.
 I'm starting over.
[01:44:42]
 Use the home component's going to load.
 Right now, the node is false.
 Let me just get to that part.
 We selected it.
 And we selected it from the redox store.
[01:44:56]
 Now, we see that it's false.
 Component has melted.
 And now, we're going to create an action. What is this action? We want to set did not to true. So that gives us an action.
 And we're going to pass that action to the dispatcher.
 So basically, we're going to dispatch this action. And like in the diagram, the dispatcher calls the producer.
[01:45:31]
 I'll show you again, right here.
 The dispatcher takes that action,
 gives it to the producer. That's why we're in the reducer right now
 right here we're in the reducer. Actually that's taken back. So we were in the
 component. They created an action. We passed it to this batter and now the
[01:46:01]
 this batter passed all the information to the reducer,
 we are here in the reducer now.
 And this reducer has all the state variables in it.
 And it has the action.
 But now the action looks a little bit different than how we saw it.
[01:46:24]
 Probably. looks a little bit different than how we saw it. Probably, let's see what does it look like in the previous one.
 Well, let's just continue here while we're here.
 Because this action has a payload.
 That payload is the new value,
 which is going to be this new value is going to be true. We want
[01:46:49]
 the did-nout state variable to be that new value. If we press play, here we are back in home
 Here we are back in home and did melt is now true because we selected it from the Redux store.
 And the Redux store received the new value from the reducer.
 The reducer changed the value, gave it to the store.
 We use the selector.
[01:47:25]
 We use the selector to select the mount.
 And then our component received it. that's now this trend setting the values or the let's try it for the other
 state variables. We need to code and make sure the other reducers work
 properly. So let's see what other values do we want to code and make sure the other reducers work properly.
 So let's see what other values do we want to change.
[01:48:10]
 Let's change the message.
 Actually no, let's do something.
 Let's make it less complicated.
 We can just change the message from component did not.
 Okay, let's change the message. So we're starting with the message of hello world.
[01:48:34]
 Okay, let's change this message.
 I want to reuse that action variable.
 I'll just use the LED.
 Since I want to reuse it, I'm going to make a new action.
 We'll just action-be.
[01:48:58]
 It will be set message.
 And what do I want to cite it to?
 Have a nice day.
 And then we need to pass that action to the dispatcher so it can ignore the mount for now. Okay, so let's see if it weren't properly.
 Actually, it's not going to work properly because we didn't change the reducer yet.
[01:50:00]
 So we wanted to change the message.
 Right now it's hello world.
 This is setter.
 Well, this one's done. Oh, yeah, it's in, it's in this setter because, because we're changing good amounts.
 Now this one here.
[01:50:32]
 We want to change the message to have a nice date. We want to set the message to have a nice date.
 This look at this action object. So yeah, it looks exactly how we saw it in the reducer.
 It has a payload, and it has a type.
 Here's curly braces.
 There's a type.
[01:50:57]
 And here's a payload, which is have a nice day.
 This batch is going to take all this information
 and give it to-- it's going to take
 that action, give it to the reducer, here we are in the reducer, the reducer
 called message, we didn't code it yet, it's going to be like this, we need to take that new value from the payload.
[01:51:28]
 Action.payload has a new value,
 which we are going to save into on the left side of the equal sign new value,
 but we have to declare this.
 Then we're going to have we need to access the state directly right here.
 And what part of the state do we need to access?
[01:51:51]
 We need to access the message.
 And what do we want this message to be?
 We wanted to be that new value. Okay, I'm going to delete this one here and I'm going to put a div over here.
 Make sure this view goes in the right spot.
 So I reset this.
[01:52:28]
 We see that the message that we're starting over.
 We see that the message is hello world.
 Here we are in the component as mounted.
 Now we're going to create a message and action.
 What is this action?
[01:52:43]
 We want to set the message to have a nice date.
 And here's the action object.
 Well, actually, it's not done yet.
 Now here's the action object.
 There's a new value of the kind of nice state in the payload.
[01:53:03]
 We're going to dispatch that action.
 It's going to be given to the reducer. Now here in the right state and the payload. We're gonna dispatch that action. It's gonna be given to the reducer.
 Now here in the reducer,
 but we call this our state center,
 it's gonna set the state of the message
[01:53:17]
 after the new value there,
 which is how to nice day.
 And it's gonna set the message
 The state variable message to that new value
 Everything work fine this new message is gonna say have a nice day instead of hello
[01:53:38]
 There's only one last thing to change that click count
 To be able to change the click count, we should have a
 button that we're clicking. So let's do that really quick. Let's have a Click on click we want to handle the click.
 I didn't need this yet. What do I want to do? I want to click count here. I want to render the click count. I'm gonna just put it in a
 do. So it's on a new line. You could put VR. I selected the click count here already.
[01:54:42]
 So I couldn't display it.
 I should have a handle click here.
 So I'm just going to put it inside here for now, because I need to use this I'll put a debugger in here. Let's reset this.
 Okay, so click count right now is zero.
 And the message is hello world. Did it render yet? No, it didn't.
[01:55:22]
 If I press play,
 we see the component did melt. There it is. It rendered. This is the click count right here. There's a zero right there. There's the button.
 It says have a nice day.
 nice day. If I doesn't say have a nice day, I thought it was for the woman. Probably happened already. Let me see. I did not say have a nice day.
 Let's just try that.
[01:56:10]
 We're just supposed to be a little world.
 Oh, that's why.
 Need to render the message here.
 Okay, so I'm selecting that message and I'm going to render it into the age three.
 Okay, so it didn't mount yet.
[01:56:31]
 I just restarted it didn't mount.
 Message is supposed to be hello world click count is supposed to be zero.
 Now the component did mount. If I look at here, it says hello world and the
 click count is zero. Here we want to set the melt to true and we want to set the
 message and have a nice date. We're going to dispatch those actions.
[01:57:07]
 [BLANK_AUDIO] Okay, yeah, that's good.
 [BLANK_AUDIO]
 And here, this is where it's setting the action,
 part of the message that's going to set the message.
 I think we don't need to see this anymore.
[01:57:23]
 [BLANK_AUDIO] I think we don't need to see this anymore.
 We need to see this either.
 This press play.
 So, now it sees that the message is have a nice day.
 Instead of hello world, click count is still zero.
[01:57:41]
 Press play.
 So, we see here. Now it says have a nice day.
 We want to be able to change that click count.
 How do we change that click count?
 We need to, whatever that button is clicked,
[01:57:55]
 it's going to run this function and we'll click.
 In this function, what do we want to do?
 We want to create an action.
 What is that action? We want to create an action. What is that action? We want
 to set click count. What do we want to set it to? We want to set it to the current click
[01:58:16]
 count right here. We want to set that current click count plus one. So right now it should be zero. You want to do it plus
 add one to it basically. That's going to be our new click count because it would, this would be
 one of the buttons clicked. And then while we have to create an action out of this, this returns us an action.
 We need to save that or declare it. And then we pass it to the dispatch function.
 We're going to dispatch that action.
[01:59:07]
 Okay, so it refreshed. Okay, we don't need to, we're about message anymore.
 Let's just worry about click count right now.
 It's zero.
 My press play.
 Well, the component mounts should be, we can just ignore this stuff for now.
[01:59:27]
 Okay, so click count is zero right here.
 If I press this button, it activates the debugger and you see it's going here.
 I want to set the click count right now click on the zero.
 So I want the set click count to zero plus one.
 And that gives me an action that action has a payload with the new value.
[02:00:02]
 It's going to get dispatched. That action will get dispatched.
 Here it is.
 It's not declared yet, or it's not defined.
 So I'm going to define it.
 I'm just going to copy this pattern.
[02:00:15]
 That's here.
 What is the new value?
 That new value is the action.
 Payload.
 What do I want to change?
[02:00:21]
 I want to change state. Got quick count to the new value.
 And that should be it. Just refresh this and give it another try.
 So I refreshed it starting over, put count to zero, press play.
 You should see a button here if I click on this. Here we are in handle click. It's going to give us an action where we get a new value in the
 payload. The new value should be one. This this batch that action. It goes and see this reducer where we get that new value
[02:01:08]
 that new value is one. And now we're going to set that the click count in our
 state variables is going to be one.
 I press play. Now this component is updating. We see click count here is one. I press play. We will also see it rendered here as one.
 And you remove this debundure. You can watch it one more time.
 Put it a little bit more smoothly.
[02:01:56]
 Quick count is zero.
 You press the button.
 Get into the handler.
 Oh, it should take this new order off to.
 But it's going to set the action and then dispatch that action with the new value.
[02:02:21]
 Just adding one to it every time.
 And here it is. It's going to set the new value, just adding one to it every time. And here it is, it's gonna set the new value to 1.
 Press play. You see that is 1 there. And then let me just start over here. You saw that it was 1. Actually it's starting over at 0.
 Let me just get in here a little bit faster.
 Press play.
[02:02:49]
 We're going to set the new value.
 One, press play.
 There it is.
 If I click it again, it's going to dispatch the next action. The new value is 2.
 If I press play, then we see that it's 2 right there.
[02:03:14]
 Let me take these new buggers off now.
 If I click here, it activates another new bugger
 where it's setting the new value plus one
 So I just took off the debugger. It's now now it works. I click on this. It's just incrementing that number every time
 So what I want to do is I
[02:03:44]
 Think that's good enough for now with time for a break.
 We learned how to set the variables now.
 That basically finishes how to manipulate our state variables.
 That's just the basics and you get the brakes started.
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
[02:14:39]
 And now we have time to work on the assignment. This one was assigned on Thursday about the
 accounts but accessing them from the front end. Use the capstone front end to
 perform CRUD operations with a capstone back end. So, CRUD, create, read, update, delete.
 We're gonna do those to the accounts,
 but from the front end.
[02:15:12]
 But the front end doesn't do it directly.
 It does it with the back end,
 using some communication.
 So, I talked about this in detail on Thursday.
 So, if you wanna check out the details about this,
[02:15:28]
 refer to the Thursday's class.
 If there's any questions about this,
 if you need any clarifications, let me know.
 But basically, you have all the information.
 I gave you all the information that you need to accomplish this. And these should also be deployed live. You should be
[02:15:50]
 testing them locally, making sure it works. When anything works, you can start
 deploying it to live. render it in AWS through S3 and CloudFront.
 That's where your front end and your back end
 is gonna be rendered in AWS Lambda.
 So make sure you have those links
[02:16:20]
 when you turn this one in,
 it's gonna be due on Thursday.
 Yeah, so tried. I haven't posted it yet. So it depends on when I'll get a chance to post it, but just work on it on whatever you think it's supposed what it's asking for.
 Basically, it's based on what I've already taught you, so you just basically apply what
 I taught you.
[02:16:55]
 Yeah, so if you don't start on it until I post it, then you're going to end up falling behind because you have the
 information here. I mean, I taught it in class already. You just start applying those principles.
 And then when I post it, that's when you can see if you were properly applying those principles are not. But I want you to be, you know, don't, if I provide you the instructions
 that might step all the time,
 you're gonna end up depending on it.
[02:17:32]
 I want you to start using your knowledge
 and pulling things from in notes
 and integrating things with your mind,
 basically thinking for yourself as best as possible,
 even though I'm giving you these steps, I want you to integrate everything.
[02:17:49]
 Get those gears turning in your mind and also start using your notes and everything that's
 in them.
 And then when I post it, you will see that where you properly integrating the information
 that you've forgiven.
 And maybe you were, or maybe you were it, but the steps that I've given the details will
[02:18:17]
 sort of fill everything in for you. So basically, when I post the details, it's just going to be like step by step, everything.
 So it's basically just eliminates the need for you to sort of think things through or
 I mean it decreases it and
 that's almost defeating the purpose of what I want you to do is take one
 line of instruction here and make it up and you're make it up in your you
[02:18:57]
 know just use common sense ask yourself okay what is this asking for for
 here look at look at this step, create a branch.
 Okay, so create a branch.
 And then what is that branch for?
 It's for custom data type.
[02:19:12]
 So I'm gonna create a branch called create data type.
 And then I'm gonna go into that branch.
 And what is that data type for?
 It's for creating data types for a user account.
 So I'm going to start typing in there.
[02:19:32]
 I'm going to start creating a custom data type for user
 accounts.
 And what are these user accounts supposed to be?
 Well, they're supposed to have an email, a password,
 a name, and a phone number, or whatever
[02:19:45]
 information you want.
 So you create the type for that.
 So basically look at this, like, maybe one word at a time and then just start using
 your mind and extracting information, even though it's just like one word, two words,
 it contains a lot of information in it, like here.
[02:20:04]
 User accounts. Two words there. It contains a lot of information in it like here user accounts
 two words there
 But what information does it contain it contains?
 name own email password
 It's in dynamo DB you need to use environment variables to access it.
[02:20:25]
 You need to have a DynamoDB client.
 So just two words here has a lot of associations,
 all those associations.
 And when it's just like one line,
 but you have to like sort of like extrapolate it.
[02:20:41]
 It causes you to think more.
 But if you wait for me to start
 feeding you the steps, you're going to fall behind and you're not going to integrate,
 you're basically missing out on the opportunity to integrate these things into your mind.
 like missing out on the opportunity to integrate these things into your mind.
[02:21:09]
 That's what I want you to do. Start thinking for yourself as much as possible because
 when you're out there, no one's going to feed you the answer, no one's going to tell you this is how you do it step by step.
 So this is the last level of this course. So I'm supposed to be training you to be able to think for yourself. I might be able to help you, but it might even give you the wrong steps.
 So you have to be able to understand these things and struggle through it. If you lack familiarity with the terms,
 GDD, test development, you could use that AI notebook LM that I told you about and ask these things
[02:22:08]
 I told you about and ask these things and get some details. It'll basically look through your notes for you and say, "Hey, here it is in your notes." So I'm
 giving you as much tools as possible to help you and you can even use the AI
 that I showed you, notebook LM, to walk you through these steps. But you need to give notebook LM a copy of
 renotes. Not only that, you need to give notebook LM a copy of a code, but you need to convert
 that code into text because it doesn't know how to look at your TypeScript files, but it knows how to look at text files. And I
[02:22:47]
 showed how to do that during the review session of notebook LM. And I'm not
 resisting posting the details for this. It's just that I'm not always able to post it as soon as possible,
 but you have one week, you have one week in advance to work on this, and if you wait until the post,
 you are missing out on those days until I'm able to post the details. So, and you're also
 missing out on the opportunity to integrate the information yourself
[02:23:26]
 instead of waiting for someone to feed you the information.
 So, these assignments are here.
 If you have any questions, ask them.
 If you're not clear on any steps, ask them in July cohort.
 I'll answer them there, or maybe your fellow students who understand the steps here,
[02:23:53]
 maybe they can line it up for you, or maybe you can ask it through notebook LM.
 So there's different ways, don't wait until it's posted as an assignment with all the details.
 Be more active about it and ask the questions directly in July, the cohort.
 If you're not clear on anything here.
 I haven't seen anyone asking questions. asking for clarity on these.
[02:24:27]
 So, it's going to be like that. If no one's asking questions, then I'm going to soon let you know what you're doing.
 And maybe if I know, if I think, you know what you're doing, then it's less of a priority for me to post the details for this assignment.
 The step-by-step details, because again, I want to encourage you to think and extrapolate the steps yourself.
 And do your best with that. If you get stuck extrapolating these steps, expanding upon it, then ask the question
 into like, "Oh, hard."
[02:25:15]
 And also, I think students are following behind.
 So next week, I was supposed to start teaching AI, artificial intelligence, such that
 like when you use artificial intelligence and some of them, they limit you on how much time
 you can use them. Especially if you want to start using artificial issues on your website, like if you want to have a chat
 bot on your website, or you want AI to analyze images,
[02:25:54]
 or generate images, or search for you, or whatever AI can do.
 You can do it on your own website. I mean, you can do it on your own website.
 I mean, you can add it to your website,
 and there's a way so that you can integrate,
 you can interact with that AI.
[02:26:14]
 Like thousands of times when you will not get charged.
 Whereas if you use like the Google AI, Gemini,
 or Chad's EBT, or some other ones.
 I code pilot.
 If you put it in your website, it'll let you use it like 10 times, and then it'll say,
[02:26:36]
 wait until tomorrow until you can use it again, or wait until next week, or wait until
 next month, something like that.
 But I want to teach you how to use AI
 so that you can put it in your website.
 And you can use it thousands of times,
[02:26:49]
 and you're not going to get charged,
 and you can keep using it.
 So it becomes a good demo for your website.
 But I can't teach you that, because I think you guys are--
 or as a class, we're behind.
[02:27:03]
 So next week is going to be mostly just catching up.
 And then after that, I'll start teaching AI.
 But I'm going to start doing many interviews
 or many evaluations now.
 But you know, so I'm giving a heads-up next week
[02:27:22]
 is going to be Katja.
 So use that opportunity to talk to student success team and tell them, hey, I need to submit some corrections.
 Can you help?
 Can you ask?
 Or can you?
[02:27:38]
 Can you see if you can open up this assignment for me?
 So again, next week is catch up.
 Use that.
 Use that to your advantage and use it to catch up
 because we're gonna,
[02:27:54]
 so next week is catch up the week after that,
 we're gonna start moving again.
 But I will teach maybe like one thing per day.
 Just, but it's not gonna be like crucial information,
 but it would be helpful information.
[02:28:11]
 So, and it's not going to be anything like complex,
 I don't think.
 I'm gonna go ahead and start this.
 And I'm gonna be, I'm to have breakout rooms open for 30 minutes.
 And U.P. is going to do the,
[02:28:34]
 the mini evaluation today.
 I don't have time to do any mini evaluations after class.
 And that's that on Thursday. I will, I don't have time to do many evaluations after class today.
 But tomorrow.
 I mean, next week, since we will be more time for corrections and many evaluations
[02:29:14]
 Also, I think by next week
 I'm creating a program that will transcribe our big blue button
 Videos so maybe hopefully that will beribe our big blue button videos so maybe hopefully
 that will be useful to you guys because right now there is no program that
 transcribes big blue button but I'm close to figuring that out
[02:29:40]
 okay so the breakout rooms are open. I'll see you in there, Yuki. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, I think I set the breakout rooms a little bit too long.
 So I'm sorry about that. Just let me conclude the class.
 So the breakout rooms are now closed. I accidentally set them too long.
 But we learned how to select state variables with Redux. And we learned how to set the state
 variables with Redux. And we use these hooks, use selector, and use dispatch.
[02:57:07]
 And we also made a set of actions with slice.actions.
 OK, so attendance is closed now.
 So if you need any corrections for attendance,
 just send me a message about that.
 If you need any corrections for attendance, just send me a message about that. Classes dismissed.
[02:57:31]
 That's this week's lesson on Redux.
 Next week, I'll just, you know, summarize it and conclude Redux.
 I didn't get a chance to properly conclude it this week, but Monday, I will. Now I'm just going to finish the
 mini evaluation with Yukiause ] [

///// FILE: "Level 4/transcripts/Apr 14, 2025 19-52.txt"

Transcript from Apr 14, 2025

[00:00:00]
 Good evening class.
 I'm glad to see that everyone is here for
 a stay of the week.
 Welcome to Codex Academy level four, week six, day one.
 And the topic for this week is Google Cloud.
[00:00:22]
 I know I wasn't going to, I was going to start artificial intelligence.
 But actually, my plan was to talk about artificial intelligence and Google Cloud in all in one week.
 But since we're going to take it slower, I can just talk about one topic, Google Cloud.
 And we're just going to take it slow.
 Maybe you just want two slides or two, one or two topics about Google Cloud.
[00:00:58]
 Today we'll just have one thing about Google Cloud. And today's agenda. In the first hour, take
 attendance, do announcements, review what we did on Saturday, and then Google Cloud,
 one short slide on Google Cloud.
 Second hour, you can work on a new practice problem,
 or use that to catch up, or use it for many evaluations,
[00:01:37]
 corrections.
 Third hour, many evaluations, and time to work on the current assignment that's coming up.
 So you should be able to take attendance, head on over to your code
 X account. Mark yourself present. Everyone here is considered, you know, not late.
 And now time for announcements.
[00:02:34]
 Then we'll go that. Okay, announcements. So regular schedule as usual.
 Remember to add submissions for your mini evaluations. We five is still open for corrections.
 And oh, I forgot to post here the new mini evaluation.
 I think let me just activate that really quick.
 Yeah. Yeah
[00:04:19]
 Give me a second here [ Okay. Okay, so the mini evaluation for week six, I haven't fully flashed out the description, which you can see it. So it's due tomorrow before class.
 Just let me pull up the announcement again here.
 Just remember to get in the.
 Remember to add submission and be placed in the waiting list for the mini evaluation.
 And this one is, again, due tomorrow before class, to get any on-time credit.
[00:04:58]
 To be eligible for the on-time credit.
 And then it closes or late credit until April 22 before class.
 So this was, you know, like two weeks ago, properly explained and demonstrate the solution for secure keys practice. Secure keys practice is here. Oops. Wanted to open that in a new tab.
 Okay, secure keys. So that's where you secure your AWS account with the CLI user.
 secure your AWS account with the CLI user and hiding your access keys in the environment.
[00:06:00]
 So a lot of you should have done that already. Just have to sort of refresh on this. Basically, you should have an admin account for your AWS login with the admin
 account, not the root account. And you should have a CLI user. You can call it lambda
 or you could call it full stack user.
 If you want to make a new one, I just basically recycled a user that we already had.
 The lambda user, but you can create a new one.
[00:06:37]
 That meets the specifications. So lambda and DynamoDB were attached to it.
 Actually, you might have a user that also includes S3 and CloudFront. So that's okay too.
 Security credentials tab.
 Create the access key.
 Download the CSV.
[00:07:20]
 Have an ENV file.
 Make sure to get ignored of that.
 Use dot ENV file. Make sure to get ignore that. Use.ENV and the process object to access the environment variables. Use access keys to access to connect to DynamoDB.
 And authenticate users.
 Use access keys, add access keys to AWS Lambda environment variables for the backend server. So this is in AWS Lambda. You need to add access keys there.
[00:08:10]
 Remove the old access keys.
 I mean, remove the exposed access keys that we used to import.
 Remember, we were importing a credentials file.
 Remember to remove that.
 And deactivate or delete old and exposed access keys.
[00:08:38]
 So you should be pretty comfortable with that by now.
 TDD read practice. You should be comfortable with this one also because I went over it.
 Step by step.
 I went, I took two classes.
 I mean, I went over this in a span of two classes.
[00:09:04]
 We did what happened then the other half.
 So you should be familiar with this one already. Basically, TDD to create a back end route
 that reads account information from DynamoDB. There was something though I added something
 There was something that I added something in one of the classes. I forgot to add the password parameter.
 So in the class after that, I added it.
[00:09:42]
 I'll make sure you look into that.
 Probably explain and demonstrate how to deploy to AWS Lambda.
 I haven't written the full description here, but basically how to deploy using the command line.
 How to set up Webpack for AWS Lambda.
 How to set up your Express Server,
[00:10:11]
 because you have to use serverless.
 You have to make your Express Server serverless.
 And then, and how to, how to disable the listener
 when it's in AWS Lambda.
 So those are just some things I just haven't written in here. out and disable the listener when it's in AWS Lambda.
[00:10:25]
 So those are just some things I just haven't written it here.
 And then the last one properly explained and demonstrated how to perform
 CRUD operations with DynamoDB.
 So for example, what does CRUD stand for?
 And how to, or what methods do you use to perform those crud operations
[00:10:49]
 in DynamoDB. And also what, what's the format for the request object? So these were like
 from two weeks ago, you should be familiar with it. If you are behind, you
 should have hopefully be caught up with this because that was two weeks ago.
 Same with us.
 That's a mini evaluation for this week week six. I can also do the mini evaluations for week five, the corrections for it, or the late credits for it.
[00:11:47]
 Okay, so the assignments, we have closed assignments, back in the counts that closes for
 corrections on Thursday front end accounts. That is due on Thursday.
 Remember, front end accounts is just basically connecting to the back end.
 using the front end to connect to the back end, and the back end does all the work in terms of like talking to DynamoDB and, you know, creating accounts, authenticating accounts, things like that. And remember, contact the student success team.
 If you need to catch up, or you need some points on on these so you can qualify and meet the
[00:13:05]
 minimum requirement for each assignment. Contact them. Melanie is back so you
 can contact her and let her know which assignment you would like reopened and the reason why you've fallen behind.
 The practice problems I talked about are here on the side menu.
 Here they are.
 Secure keys, practice, and TDD read practice. And remember, if you get stuck for 15 minutes or more,
[00:13:52]
 post your questions in July cohort. And it's not just about getting stuck. It's also about,
 of course, I don't post the details yet. Like If you need some explanation on one of the assignment requirements,
 if I didn't post it yet, this is just an example of a capstone back end account.
 Here's a summary right here. If you have any questions about the summary, like you need more details on a particular number here,
 you can ask your questions into like cohort.
[00:14:34]
 You should give it a try,
 'cause when you give it a try,
 then you will know what questions you have.
 Attempt the instructions in the summary,
 give it a try, and then ask your questions if
[00:14:48]
 you get stuck.
 Ask your questions in July cohort.
 And you see if there's anything new.
 Okay, so here there's something new.
 How do you want us to test the front end functions?
[00:15:07]
 I have no idea where to start on this.
 The front end functions.
 So they are TDD, they're functions, and all they do is send a request to the back end
 and receive a response.
 So it's just like testing the backend.
[00:15:32]
 You test the function by giving it some inputs,
 receiving the output, and then checking if that output is what's expected.
 So, that's the answer. I don't know if I should type it here. I'll probably just do a quick type of later on just to make it official.
 An example.
 Okay, so the front end.
[00:16:19]
 I didn't have to pull up the assignment here for the front end.
 Let me just print, let me display it on the screen. Create account.
 Create a function called create account.
 Let me see what I can use here.
 I'm going to similar to that?
[00:17:31]
 Okay, basically my server component is going to jump over to the server component and then maybe you'll have a better idea.
 So I'm just going to go straight to like how it's going to be used. There's a server.
 Let's see here.
 Here's a server.
 I would basically like create a just to test it out. I can create a button here. Create account. Need to have a handler. [no audio]
[00:18:57]
 Okay, so, let's see, there's some automatic, what is this here?
 [no audio] What is this here?
 Anyways,
 I'll use the function
 and the
[00:19:18]
 quick
 It's gonna be somewhere to here. So I'm just going to copy this.
 So we're going to have a function that does this.
 So a function is going to do this.
 So I'm just going to put your response, but a function is going to do this instead.
[00:19:50]
 function is going to do that one.
 Most likely you'll have a form taking it in.
 Most likely you'll have a like create account.
 So basically, maybe I should instead of
 a button, a form would be more appropriate,
[00:20:13]
 more practical.
 But you need to basically have a function that
 extract the values from the form then sends a request.
 But if it's as simple as pressing a button, then you'll already have the values that you need.
 So create account. If I was going to create it, what do you need to create an account? You need at least
[00:20:44]
 What do you need to create an account? You need at least... This is...
 This is...
 Either.
 If you get to create an account, like when you register for an email,
 what do you need? Well, you need an email and a password.
[00:21:07]
 You always, that's the bare minimum that you need.
 So that's what you would pass and probably you would await it.
 So this create account function.
 We'll take these in.
 Actually, no, I would change it.
[00:21:31]
 If I would use a form here, I'll let that function do all the work.
 But you can do it.
 You can just give it the email and password, or you can give it an event, and then it
 will extract the email and password for you.
 It depends on how you have a form handle submit. an email and a password.
[00:22:47]
 and they submit button.
 So instead of handle click, it would be handle submit. It takes in an event.
 I just put it as any. the mint, it takes in an event.
 I just put it as any, or else it's gonna light this up right here.
 Put it ahead.
[00:23:15]
 See it lights it up.
 Just put any here,
 but then I'll give that event over to the create account and let that one sort it out.
 It'll basically extract the email and password and then send a request to create over here, giving it, let's see.
 If this were a template string,
[00:23:59]
 X-Acting to go like this,
 X-Acting to be in here, so let me make a new file here. It would You can pull their fourth.
 Create an account.
 Next board. Function.
 Create an account. It's going to take in an event. But this time I can put the event here.
[00:24:43]
 It won't complain if I pass the
 pass the event variable
 It's an async function
 So this gives you an idea how that account is supposed to look like.
 So I would basically let this, I mean, how the functions should look like.
[00:25:15]
 I would get, I would make this function do all the work. and then just go from there and then it's going to do some things here extract the extract the extract the email and password.
 And then it's going to create some kind of URL
 from a template string and send it as a query.
 Well, this is-- let's start with this
 next link here. This is the base URL. That's the base URL.
[00:26:21]
 that's not the base of the Elvis.
 Base URL.
 And then the path.
 And then the query.
 It's basically gonna be a template string putting together the the path,
[00:27:27]
 and the query, put them together somehow.
 And this is not correct right now.
 Maybe it is, maybe it's not,
 but then I would have to send that over.
 Then it's gonna get a response. Then I'm going to do something, do I want to send that response as is, or do I want to
[00:27:54]
 do something with that response?
 I'm just going to, maybe it's going to be response data.
 You should be able to test this.
 It has an input right here, which is an event.
 And I showed you guys how to construct an event variable or event object. You can extract the email and password here in this area
[00:28:27]
 and then send the request here and it's up to you to decide the kind of
 response you're going to get. Well you should already know the kind of response you're going to get. Well, you should already know the kind of response you'll get
 when you send it to the URL.
 So you can test it.
 Does this answer your question, Chris?
[00:29:11]
 Take it in input. Return return an output and then test it. My body coded it, I just didn't, I didn't do the tests, but I wanted to give you an
 overview of how make it work.
 We so see. Alright, so now I'm going to wait for the days, make sure you mark them and go in order.
 Take your notes and also if anything is not clear, try practicing and experimenting with the code a little bit.
 So that the information sinks in.
[00:30:18]
 I'm going to start the review session now. You should already have the notes for it, but make sure to type
 anything that you missed or type anything if I say anything new, type that. And basically keep
 up with the recordings if you sort of like lost connections during class, go back and watch that part of the class that you lost connection. And now the microphone's
 ready for the mini evaluations.
 So that's it for announcements. And so now time for the review.
[00:31:21]
 Select our function implementation.
 Selector function.
 Let me just go back to the notes here. Okay, select your function implementation. So let's see, maybe have to take it one step back here.
 So the select your function, it's going to receive the state variables from the read.store.
 And the name you can make convention is select.
[00:32:36]
 It starts with select and it ends with the Campbell case State variable name.
 So we got the, this is the function signature and then going back to the
 review we coded the item the code on how to make it work.
 work. Then we load up the sample code here.
 I think I'll let it get in the end.
[00:33:12]
 And a separate BS code. [no audio]
 select there's side here. So here is the full code. We have the state variables
 type that we created and it shows us that this object that comes in, it will have the
 state variables in it. We are using the structuring to extract one of the state variables and then we
 return it. That's what a selected function does. It's very easy just to land the
[00:34:17]
 code. You can actually do it in one line of code.
 Okay, so that's lag here and then you just make sure to cover everything. And once you select the, okay, so once you create that selector function. You can use it to select a "State Variable"
 like this one here. You need to use the "Use Selector" book. that selector function into it. Then somehow you will get the variable, the state variable from it.
 We're going to select this. We're going to confirm the component we see.
 Okay.
[00:35:34]
 Then the next slide.
 We made a separate file.
 Stateselectors.ts
 and then we added selector functions for each of the state variables.
 So here's the selector for the message state variable and here's the selector for the click count state variable.
[00:36:13]
 It's all in here in this file and we just need to import whichever one we're using
 and stick it in the new selector hub.
 So basically just import the selector functions wherever they are needed to access the state variables.
 So, since I needed the message state variable, I needed the selector right there.
 And so I just need to import it from the state select as well.
[00:37:16]
 Okay, so dispatch style is up we need to get access to the dispatch function.
 access to the dispatch function.
 Let's take a look at that.
 So remember,
 there's the dispatcher here, here's our component.
[00:37:53]
 Somehow we need to pass an action to the unit.
 And the dispatch function out of it.
 But we set it up.
 And we can hold a good mouth here.
 We just put it here to take in an action. We didn't take this one yet.
[00:38:32]
 But we did sign up to take in an action, just like that. Then later on, we set up the slice actions, because the slice of your app, remember your
 app is like a paragraph and And your part of your app, a slice of your app is like for
 Handling is for modules and what is for use
 Think of your app is just like a paragraph with all kinds of slices and all kinds of features.
 So, there's, and we'll just say that one of the slices is about
[00:39:27]
 safe variables. So that's why we call it slice. If you look at your app as a
 paragraph, it has a whole bunch of things that it's supposed to do. One of them is
 store-state variables.
 this store state variables. And in that slice options and then this slice has an actions property. We export that as a word set because it's just, it all makes sense later on. Actually, it can, it can observe.
 Use a debugger to view the actions.
[00:40:34]
 I'm sorry that that notation doesn't be used to set the state variable.
 So, if I put a debugger here and I run this front end,
 I can see what this action's object looks like.
 And what are the actions that we want to perform? Remember, we have here. It's nice reducers as setters.
 So what we want to do is set our state variable.
[00:41:31]
 So that's the only action we want to do.
 We want to set them.
 And my calling gets set. If I type set here, I put a dot.
 I can set, I can put setDidMouth.
 Or I can put set with count.
[00:41:58]
 Or I can put set message.
 So that's why we called it set because it has some, it has some, it has the
 registers in here. Actually, it has, we'll just say it has properties in here.
 That when we put it together it becomes
 it looks like a set or set message that's why we call it set.
[00:42:38]
 so that's what we did we observed the dot notation that would be used to set a
 state variable.
 And then dispatch an action.
 So to create an action, create an action. You just use that set object. It will be very bold that you want to set in this case in the mid that dispatcher and the action into the abuser.
 So this batch and the action, when you give the action to this
[00:44:05]
 pattern it gives it hit the link there.
 Actually, it's like not just the view first.
 You can watch it sing the action.
 So it's going to create the action.
 We're going to give it to this patcher. This patcher gives it to the reducer. This is our
[00:44:49]
 reducer to our state setters. Our reducer takes in all the state variables, but then it's
 going to do one thing, which is it's going to basically set the new value for the variable.
 It's the variable which brings us to the next slide.
 The payload.
 So the payload contains the new value, the payload of the action.
[00:45:39]
 So this action object, actually you know the type already.
 We see a quick name.
 We got a type of
 I can figure it out.
 I'm just going to temporarily comment that out so I can play around with this and make my own state cetters and then you can pick up this one or not.
[00:46:38]
 And it's supposed to be a function that takes into state an action. I think in this state and in action, what is this thing that we do? and there's something in it.
 And we all see the type of sphere.
 Okay, so it doesn't provide the type.
 But it doesn't provide the type name, but it does provide the type here.
 So the action is supposed to be an object that has a payload
[00:47:30]
 and a type. So what I could do is this, okay, so I thought it would have a name.
 It doesn't have a custom, it doesn't have a custom, a weighted type so you can create it here.
 I can create a custom, weighted type is down here.
 Type action is an object that contains a payload.
 That's any.
[00:48:03]
 And it has a type, that's any and it has a type that's a string [inaudible]
 There.
 Payload is any.
 The type is stream.
 So I just basically recreated that with made a custom type of it.
[00:48:44]
 You can hear. So I just basically recreated that with made a custom type of it in here.
 So this action type is supposed to be an object that has a payload that can be any value
 and this type has to be a string. with a custom type right here. I'll start it here.
 I'll make it three little three dots.
 So, action has a payload, which is the new value.
[00:49:19]
 And once you get that new value,
 what you want to do is if you want to set something new value. So, in that thing value, what you want to do with it, you want to set something
 you value. So in that state object there's did mount and I want it to
 set to the new value. In this case it's going to be, it's going to be in the room.
 So, let's suppose to set "Did Mount". Right here and then I'm supposed to
[00:50:12]
 get the new value. Did Mount was false.
 I'm going to get the new value there.
 So "Did Mount" lets see what it is now.
 It is now true.
 Because it selected did mount from the read-up store and the read-up store has a new value
[00:50:32]
 of did mount.
 Okay.
 All right.
 So, we can have a little cloud.
 This one's going to be very short so you can spend the rest of the day catching up.
[00:51:02]
 So here it is.
 Google Cloud.
 Just copy this for a next.
 And you can even make a new cloud section in your notes. So Google Cloud is like AWS.
 In offer services for building and deploying your applications.
[00:51:32]
 You know, like how AWS is and we use it to deploy our front end
 website with S3 and cloud front. The Google cloud we're just gonna we're just
 gonna deploy it back end with it.
 We're just going to deploy it back in with it.
 But unlike AWS, Google Cloud can deploy back in servers with traditional way for free.
[00:52:12]
 So in AWS, we had to go the server service route,
 because that's the only way we can deploy a back end server
 for free in AWS.
 But with Google Cloud, we can go to traditional route,
 where we don't have to make our server service.
[00:52:36]
 We can just upload our server as is,
 and it'll just work.
 That's a traditional way.
 So let's start, let's start adding these or notes.
 And I can move seven notes here. [BLANK_AUDIO] [BLANK_AUDIO]
[00:53:38]
 Is the hitting here?
 [BLANK_AUDIO] So there's a free tier in Google Cloud and it's free from personal use.
 But you should know that a server with high traffic made of food channels.
 So you know, just be careful. Make sure you're not putting any infinite loops in your code.
 If you do, you're going to get high traffic to your server and you can start
[00:54:26]
 accruing charges. But for registration, a valid credit card is required. Just
 in case the free tier is exceeded. Again, this free tier is free. Just make sure you don't exceed the limits.
 And you can create a new account at cloud.google.com. So creating account here.
 I'll let you figure that out. You already know how to
 make it an AWS account. That's harder to make than a
[00:55:19]
 Google Cloud account. So I'll let you figure that out
 during the break or after you figure out how to create
 an account. You feel free to look around. The different options there. But now it's
 time for the break. So I'm going to say what? I'm going to put the break time.
 We're going to be using the Google account tomorrow. So make sure you create a Google account.
[00:56:00]
 And Google to account.
 Okay, let's see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back on the break. And for the second hour, we'll just do some practice.
 Or we can, you know, we can also do many evaluations or answer questions.
 But here it is for the practice.
 Redux item practice.
[01:07:06]
 Create a global state variable for an item.
 It's going to be like a shop item.
 And dispatch an action to change its quantities.
 So. So basically you'd add a component called shop, which will be like a online shop.
 And then, you know, start adding an item to it.
[01:07:37]
 We'll just start with one, add one shop item.
 And just to make it look nice, use a bootstrap card with an image and description.
 You can even add a title there if you want.
 That way at least you review bootstrap cards.
 And then add increment and decrement buttons for changing the item quantity.
[01:08:04]
 You can even stick those increment and
 decrement buttons into the bootstrap card. Then add quantity to state variables.ts.
 We're going to basically create a state variable called quantity
 and we're going to set the initial value to zero because the shop item, the quantity will be zero
 at the beginning. And then you can press the increment and decrement buttons to like if you're gonna how many do you want to buy?
[01:08:47]
 That's what these buttons stand for.
 And then we're going to add a selector for that quantity stage variable.
 Add select quantity.
 So that's a function.
 You add it to stateselectors.ts and then code the selector.
[01:09:09]
 So select quantity is a selector function.
 So you would have to code that selector.
 And then back in the shop component,
 select and display the quantity.
 So you would have to use the use selector hook along with this selector function.
[01:09:34]
 So get that state variable, get the quantity state variable from the Redux store and display it. Then you would add quantity to state setters.
 This is where you're gonna code the reducer.
 Code the reducer so that you can set the quantity.
 And the code for it is pretty easy.
 It's just like a pattern. And the code for it is pretty easy.
[01:10:05]
 It's just like a pattern.
 Just copy the other code and then change it to match.
 But also understand what the code does.
 It says two lines of code.
 Then in the back of the shop component,
[01:10:21]
 add the handlers for the increment and decrement button.
 So two different handlers, one for increment, one for decrement, they would basically each handler, you would
 create an action in each handler, one for increment and one
 for decrementing.
 You would basically just change the value for those.
[01:10:47]
 How do you want to change the value?
 Well, in the increment handler, you want to increment the quantity,
 and then in the decrement handler, you want to decrement the quantity.
 You should probably look out for how much you're decrementing,
 because you don't want to go to negative.
[01:11:05]
 Let me make sure you watch out for that.
 Because you can't have a negative one for your quantity.
 So the lowest you want to go is zero.
 And then this batch is the action and confirm proper results.
 So you can try working on this read-ups item practice
[01:11:30]
 or you can work on the upcoming assignment.
 You can prepare for the mini evaluation.
 You can use, he wants to do the week five corrections.
 he wants to do the week five corrections.
 But I can also, you know, there's this hour and second hour for many evaluations.
[01:12:00]
 So anyone else that wants to do corrections for week five, we can take care of that today. I will start the breakout rooms.
 And you guys can pick a room.
 As usual, there's a collaboration room, silence, and many evaluations. I can start the mini evaluation for Uki, the corrections. 40 minutes.
 So use this time to catch up.
 We're going to take it slow this week so I'll be teaching something new in the first
[01:13:29]
 hour and the second hour and third hour will be used for catching up for this week. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so the breakout rooms are back.
 I'm going to go into the second break now. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And for the third hour of class, we can continue working on catching up, but here's the assignment
 that's due on Thursday.
 Perhaps don't front out accounts.
[02:04:48]
 I'm going to start the breakout rooms and I'll see if there's any corrections,
 many evaluations that are need correcting.
 But I'll stay out here just in case anyone has questions on
 assignments or debugging or coding, whatever. As usual, the breakout rooms are
 going to be there and I just need to put you guys in a breakout room so that you'll see them.
[02:05:25]
 But you can choose any breakout room you want to be in.
 I mean, you can choose to be in the collaboration room or the silence room.
 And the breakout rooms will be available for 43 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so I see the brick our rooms are back. I didn't hear any
 I didn't hear any reason of hand so the breakout rooms are back
 conclusion, Google Cloud Introduction and Redux item practice. Make
[02:52:23]
 sure to take attendance you have one minute for that,
 but then that class is dismissed.
 I see that some assignments are lacking,
 so I'm making myself available to answer questions
 if you're stuck on anything.
[02:52:50]
 But if you don't have any questions, and that's it for today's lesson on Google Cloud. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Apr 16, 2025 21-36.txt"

Transcript from Apr 16, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four week six day three and the theme of this week is Google Cloud. I see that there are some technical difficulties in the recording list. So I guess for this review, for today's review,
 I'll take a little bit more time.
 So today's agenda, attendance, announcements, review,
 Redux, Google Cloud for the first hour,
 for the second hour,
[00:00:55]
 you have time to practice and catch up on things
 for the third hour, many evaluations and also assignments.
 If anyone wants to do many evaluations during the second hour,
 you can ball in here.
 Just get it out of the way.
[00:01:12]
 Okay, so Yuki said he wants to try the mini evaluation for the second hour.
 And attendance, make sure you mark your attendance.
 If you're here right now, it looks like the whole class
 is here.
 You can mark yourself present.
[00:01:40]
 Is anyone else having audio problems?
 Chris said he's having audio problems.
 So he said it's just him. Okay. So now time for announcements.
 And we just load that up for you guys.
 Almost there.
[00:02:23]
 Trying to make this quick since I have to go over.
 Yesterday's content.
 Okay, announcements. Remember to and your mini evaluation submission to get on the waiting list and well it's too late to qualify for the on time points.
 Which you can at least submit it to be put on the waiting list.
 So, you know, the sooner you do your mini evaluation, the sooner you'll know what you need to work on.
[00:03:08]
 Then the second time for the corrections, you can get all the points that you're able to get. For the assignments, the capstone front end account is still
 due on Thursday, corrections or back end accounts, closes on Thursday, but if you haven't received
 your grade for this, you'll receive an extension for corrections.
 corrections. And any other assignments that were graded past the closed date, you should have received an extension to submit corrections for those. Just let me know if you have any questions about corrections.
 As usual, the student success team is available.
[00:04:11]
 If you want to get more points and anything that is closed,
 you need to contact the student success team and tell them which assignment
 or which mini evaluation that you need to get more points on and tell them why
 you've fallen behind. Practice problems. I haven't posted them yet for this week,
 but they'll be up soon, maybe today, if I'm not too busy doing evaluations, remember to put,
[00:04:47]
 to post your questions in July cohort, if you need clarification on anything,
 or if you get stuck, let's see if there's anything new. And I see some things here.
 Okay, so Yuki was asking about status codes.
 So if you want to know about status codes, you just do internet search for status codes.
 And then you can see something like this
[00:05:26]
 But successful status codes are usually from range two in the range 200's
 Redirection is also I guess a little bit successful range 300's
 When you get a 400 or 500 somewhere in that range, then those are the error
 codes there. And it says, let's see. And Rayline said that deleting this folders and node modules folders was, she was able to update her GitHub deployment.
 Let's see, you have these questions here.
[00:06:19]
 Global secondary index. What is this?
 Oh, second, no, I know what you mean. No, um,
 well, I haven't taught how to add a secondary index. You just have a primary one.
 I haven't taught how to add a secondary index. You just have a primary one. You have a primary one when you get your when your server pulls in that email because that's
 a primary index. Let your server, I mean, yeah, let your back end server also authenticate,
[00:07:01]
 authenticate it and check if the password is correct.
 So we're just working with one index right now.
 If you start working with a secondary index, it's going to make the request a little bit more complicated.
 So the easiest way is just work with one primary index. That's the email.
 Take in the, take in the account information.
[00:07:39]
 Then match it up with a password.
 Remember, notebook LM can be a very valuable tool.
 Just add your notes to there.
 And your code.
 Remember, you have to convert your code to text files if you
[00:08:06]
 want notebook LM to take a look at it. And then the AI can answer your questions similar to how I
 would answer your questions like coding styles and things like that. Remember to go watch the recordings in order here.
 Because if you jump from day to day, you're gonna get lost.
 And I guess since there's no recordings,
 I'll do the review a little bit slower,
[00:08:44]
 so you have a chance to
 take notes on that. But have your microphone ready for the just in case you have questions or
 for the mini evaluations.
 Okay, so what we worked on yesterday, I introduced Google App Engine. So you can copy this for your notes.
 App Engine is a Google Cloud service for building and deploying server backends.
[00:09:27]
 So it's similar to AWS Lambda, and we can deploy a server back end through it.
 But it's, we can deploy our server the traditional way.
 App Engine supports the traditional backend deployment
 for Node.js apps.
 And, but I'm gonna teach you something
[00:09:56]
 a little bit more efficient than the traditional
 backend deployment because the traditional backend deployment
 is, uh,
 you upload your files, except for no, no modules folder. And then, um, wherever you upload it to,
 it installs the modules there and then starts up your server.
[00:10:24]
 And then starts up your server. I'm going to teach you a way to just instead of installing the node modules up there in that service.
 It'll already be installed.
 It's more efficient. It's faster.
 You use up less data, less CPU.
 Because I showed you yesterday that
[00:10:53]
 the pricing for App Engine
 can change depending on how much your server is used.
 server is used. So traditional back end deployment for Node.js apps. And then unlike AWS, so with AWS, Lambda, we can use the console and upload things there. If it's tested, if it's running.
 But for Google App Engine, you only have CLI commands. And that's for
 deploying a backend server to Google App Engine. And that's not too bad
[00:11:43]
 because you basically just need to know two CLI commands and their short.
 Then the free tier is for personal use. So App Engine has a free tier. It's for personal use. So, if we look at the app engine website, it looks like this. Let me just type it in here.
 Google Cloud.
 Products.
 Suppose the app engine here somewhere.
[00:12:37]
 100 products. This is not how I found it before.
 I think I just type it in here. Oops, not that one.
 Where is it? Well, I guess once you, it's hard to find their products sometimes.
 Can't even find it through here.
 It's one of, they are pushing their, you know, more expensive products, but they're also more user friendly.
[00:13:25]
 They don't really, it's harder to find it here, but you could just do a search for it, Google, App Engine, or you could go through the link that I posted in the slide.
 App Engine is cheaper to use than the other featured products that we saw in the previous page.
 It's just slightly less user friendly, but it shouldn't be, it's not that bad for us since we're programmers. But there's App Engine and we took a look at the pricing.
 Google Cloud Free Tier.
 And there's everyone for App Engine here.
[00:14:19]
 Oh, here.
 Free usage limits.
 And then we're going to look for the ones for App Engine.
 There it is. App Engine 28 Hours per day, F1 instances. So think of this as your CPU.
 The slowest CPU they have. So you can have an app or server running for 20 hours, 28 hours per day,
[00:14:48]
 which basically means you can have two servers, one can run for 24 hours and the one can run for another
 four hours and that would be free. Because this is not just meant for like one server.
 You could have multiple servers running
 as long as they're running for less than 28 hours total in the day.
 Then you won't be charged, but they're not always gonna be running.
[00:15:19]
 If they're idle and no one's visiting your servers,
 it'll automatically shut down or sleep,
 and it will be accruing hours for that. The B1 instances are a little bit faster, but you only get 9 hours per day for that. And you can have 1 gigabyte of outbound data transferred per day.
 So your server can send out one gigabyte of data per day for free.
 And all your servers just doing is just sending out the user account object.
[00:16:02]
 People logging in, it's not really that much data to take in. So you're
 going to be well within these limits per day. And if you exceed this free tier, then this And this is what the pricing looks like.
 Where is it at?
 It's a little bit hard to navigate these.
 So here's the pricing. Here's F1. If you're using the smallest lowest CPU they have.
[00:16:45]
 If you're using the smallest lowest CPU they have,
 if you exceed the free tier, it becomes six cents per hour.
 So that's not that much,
 but let's see six cents per hour,
 times 24 hours. And then times 30 days, like if you have a server running nonstop for 24 hours.
[00:17:19]
 And you multiply that by 30 to represent one month. That's going to be $43.20 per month.
 But we don't expect to exceed those 24 hours per month usage.
 Unless your website is popular, if it's popular and your server is always up.
 Oh, the B1 is also the same price.
 Oh, yeah, it's the same price,
[00:17:47]
 but you only get nine hours free.
 So you could potentially try that out.
 Let's see, what was I saying?
 If your website is popular and your server is, you know, running 24 hours per day, you're probably making a lot more than 43. The cost of one for one month.
 So it cost basically $43 to run a server 24 hours 24/7 for one month. So if it's if it's running that much
[00:18:31]
 and you're getting a lot of traffic, you're making a lot of money by then. For your website is infinite loop. Just constantly pulling your server.
 So that was just the short introduction to Google App Engine and it's pricing.
 Then I summarize the Redux workflow. And the Redux workflow starting from the top here.
 You see the store icon.
 Number one, create a Redux store.
[00:19:23]
 That's where we configure a Redux store.
 Remember, we have a function that
 configures a store, Redux store.
 We also have a provider component.
 That provider component is useful so that the store is accessible accessible to
[00:19:47]
 the components within it. Remember the provider component it's it's like the
 parent of all the other components. So any component that's inside that
 provider component will have access to the Redux store and also access to the hooks right here.
 We also, in the next and the workflow, we add state variables to the store.
 Remember that we store them in state variables dot the store. Remember that we store them in state variables.ts.
[00:20:30]
 And we create a selector for each state variable. So we're heading over into this area right here.
 When we select the state variable,
 We get where there's a function called a selector function. It takes in all your state variables and then it just sends out the variable that you need. So if you have a selector
 function called select did mount, then it just you know it extracts did not from all the state variables and then send it to your component.
 Would you select there, which is still part of this?
[00:21:16]
 Components can select state variables.
 So components are right here.
 So now we're combining these together.
 We're using Use Selector Hook.
 The component is going to use that hook and receive a state variable with it.
[00:21:38]
 Then with Set Object Actions, remember Set.
 We had a set object and it had some actions attached to it.
 So we're heading over here.
 Components can request for state variables to change.
 So, for example, this home component here, we created an action by doing set.didmount and then
[00:22:14]
 put in parentheses through.
 Then when we get that action, we pass it onto the dispatcher here.
 So, we use dispatch, that's a hook that we use in the component,
 gives it access to the dispatcher.
 The dispatcher can send actions to the correct reducers.
[00:22:43]
 So, after this component creates an action,
 gives it to the dispatcher.
 The dispatcher hands it off to the reducer.
 The reducers set the new values of state variables.
 So in here, in the reducer, there are the ones
[00:23:04]
 that set the new values for the state variables.
 So if the action was set did not to true, then the reducer is going to look at all the
 state variables that extract did not and then set it to true, then put it posted here in the store in the
 Redux store.
 So that's the workflow.
[00:23:35]
 This is the summary of what we did with Redux.
 I also introduced the Redux cart practice.
 In this practice, you will create a global state variable for a shopping cart and change the total quantity.
 So imagine a shop online shop. You have a shopping cart and you have some items. If you increment one item
 as if you're buying it, then you should see your shopping cart also increment with items.
[00:24:14]
 If you increment two items
 like what item is, you know, you have two here of this item and then you have one of this item,
 then you should have three showing up on your
 shopping cart. So this is what this is about and it's it's easier to do when you have global
 variables managed by Redux.
[00:24:51]
 by Redux. So you would create a cart component, which would be like an online shopping cart and then they'll render a cart from bootstrap icons.
 Remember bootstrap icons, there's a cart icon there, you can render. And you
 can also render a small bootstrap badge next to the cart.
 They'll basically that badge next to the cart will show how many items are inside of the cart.
 You would add total quantity to statevariables.ts
[00:25:24]
 because we're going to, this is a new state variable total quantity that's
 for the cart. Then set the initial value to zero and select total quantity to state
 selectors. So we need to create a selector.
 And we're going to call it select total quantity.
 And then basically code that selector to extract total quantity and then send it out or return it.
[00:26:08]
 In back in the card component, select and display the total quantity. So you need to use the selector to get the total quantity from the read-off store and then display it in the bootstrap badge.
 edge. Then you're going to have a state center. You're going to call it total quantity because you're going to set the total quantity. So that reducer,
 basically you would pull out, you would extract the total quantity from the read up store,
 set the value, and then update it back into the store.
 Actually, that's automatic.
[00:26:54]
 Basically, just set the value, and then the story will take care of the rest from there, from total quantity in state setters.ts.
 Then increment the shop item from the previous practice.
 So in the previous practice, we created a shop item.
 Intramented. Try incrementing that item by clicking on the
 increment button.
[00:27:28]
 And naturally it will not increment your cart because you did not connect them yet.
 So how do you connect them?
 In the increment and decrement handlers create an action for total quantity.
 So when those handlers you do like set for total quantity. So you would... So in those handlers, you'd do like set dot total quantity.
 And then if you're going to increment it,
[00:27:53]
 then you're going to put total quantity plus one.
 If you're going to decrement it, it would be total quantity minus one.
 But you also need to make sure that you don't exceed minus one,
 because you can't have a negative total quantity.
 So make sure it doesn't go lower than 0.
[00:28:16]
 So we basically will create an action from that,
 and then dispatch the action.
 When you dispatch the action, it should all be working. And when you basically
 by this time, if you increment the shop item, it'll also increment the cart. And when you
 decrement the shop item, it will decrement the cart's total quantity. But that's just
[00:28:42]
 one item. The last step created another item. And properly
 said it's quantity. It's going to have a separate quantity. Not the same as the other
 items quantity. So you have to name it something else. So if this, if your first item was
 a phone, second item was a computer, then you can have, you can change it.
 So like phone quantity, computer quantity, and just increment or decrement those as needed whenever the buttons are pressed.
[00:29:21]
 And you would also adjust the total quantity,
 create an action for it,
 depending if you're
 incrementing and you just increase the total quantity,
 if you're decrementing it,
[00:29:37]
 then decrease the total quantity.
 Now, as's practice.
 And now, I'm going to show you a new feature of Redux, a very good feature.
 So, I'll get your notes ready for this. Redux dev tools. So a browser extension, so
 Redux dev tools, that's a browser extension that shows a history of state
[00:30:15]
 variables and how they changed. So let's get this copied. And I'll show you what this does.
 I'm going to share my screen now. First, I'll put this in the notes. and
 text here
 and I'm going to put a point right here.
 Redux DevTools is the name of the extension.
[00:31:54]
 Okay, that's only the answer highlight there, I think.
 Okay, so for this to work, you should have something running. there I think.
 Okay, so for this to work, you should have something running.
 So I'm gonna get the front end and [BLANK_AUDIO] And, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and I wonder if this will work with the debugger rather.
 I might not because I don't think the debugger has extensions.
[00:33:18]
 You have the debugger.
 The debugger browser doesn't have extensions.
 Yeah, it doesn't have extensions. So I need to use the regular browser.
 to use the regular browser. It's going to copy this. Use the regular browser so you can use ads, you can use Chrome. This is the front end. It's rendered right now locally. Extensions
 already have it installed here. Let me just go to the extension store, go to your extension store and look for Redux
[00:34:09]
 DevTools.
 So in this case, there's two of them. This is the real one. right here redoxedebtools. The one with more stars and more users.
 Greenoxedebtools for debugging applications, state changes. So install this one. If you have Chrome, then it should have something similar with a icon, like Orbit icon.
 After you've installed this, and you have your application running, your front end application which uses Redux.
 Let's see.
[00:35:17]
 Cause state changes to change in your app.
 Or cause states to change in your app. Or cause states to change in your app. So some of the states that I have here
 are like for clicking. There's also did mount. So I just click that right there. So let me show you what states were changing here.
 The states that were changing were did mount.
 The message was changing too.
[00:35:55]
 We used to say hello world, but when it mounted,
 it changed to you have a nice day.
 And then there's click count.
 But that one changed from 0 to 5 by clicking.
 Here's dev tools right here.
[00:36:15]
 And somewhere at the top you can see Redux. the Redux DevTools. It's the only color one there.
 You can see here the state's that changed. So here's the
 did mount. It tells me did mount changed. It showed me which
 function that changed it. It was in component did mount.
 It says it was in the home dot gx gsx component. I mean, yeah, it showed me this is the function and this is the component right here.
[00:36:59]
 Whoops. And even jumps straight to the component.
 So it tells me that the home component
 changed did melt right there. And if I click here the message, it tells me that the home component
 also changed the message. If I click on this, it shows it to me here. This is where it changed the message.
 And that was in component did not. Of the home.psx component. Then it tells me that the
[00:37:42]
 click count was changed right here. If I click on this, click count was changed.
 Or in the handle click function in home.tsx.
 So I can click here and it takes me straight to it.
 It shows me how the click count has been changed. Right here.
 This one becomes very useful because when you have a huge app
[00:38:11]
 and you don't know what component is changing,
 which state variable and when it's changing it,
 you get a list of it all right here.
 And you can follow it.
 You can check, okay, is it changing the states properly,
[00:38:30]
 or is it doing it out of order?
 Let me see here, if I rewind this.
 If I look at this right here, there's a plain button.
 If you look here, we see zero.
 If I press, if I move this thing here, this slider, this was, this one changed to two.
[00:38:59]
 It's basically like telling me like showing me a timeline of how the state has changed and it
 also changes the site based on these state changes. So if I put it back to
 here we see hello world. That was the initial state. Hello world and we see zero right there.
 Yeah, it might show up in your right-click menu. Yeah, it's right there.
 And then after the melt, it changed it.
[00:39:47]
 Well, it changed it melt there and then it changed the message to have a nice day. You see it changed, then it changed the click to one, then the next one changed it to two.
 So I can go through this one at a time and watch the state change.
 You know, find grain or I can just press play and see each change.
 Keep going. So this is a very good way to devote how your state has been
 changing. Because when you have a global state, all your components have access to it. And you don't know which one is accessing
[00:40:28]
 it and what it's doing to the state variables. But with this Redux tools, now you have access
 to that. And you can easily debug your state changes now.
 easily debug your state changes now.
 How is it integrated into my dev tools? It should be up here. I installed it and then it should be like up here and one of these options here. In Chrome, I don't have it in Chrome, but let's see.
 If I can install it here.
[00:41:13]
 Okay, you see it?
 Should be in one of the tabs.
 So that's how you can use read-up dev tools to keep track of your
 states just in case eventually you get to the point where hey what's going on
 here I don't even know how my app is debug or why where the bug is coming from
[00:41:41]
 because it's when you have these state changes and there's actually there is no bug when you're changing values.
 I like you can be changing values. There's no inherent bug with that but one thing, but you will see on your web page a value doesn't look right.
 That's when you would come into here and and look at how the states have been changing and this is how you would check if. If the value is being changed properly,
 like maybe if you go on to click here,
 and it was incrementing by 0.5 instead of by 1,
[00:42:34]
 you can come here and say, hey, why is it incrementing
 by 0.5?
 And then it'll tell you which component
 is the one incrementing it and when that component is in
 community. So Redux dev tools is good for
[00:42:53]
 finding bugs that do not cause any errors. Okay.
 Now Google Cloud.
 All right, so I hope you were able to create a Google App Engine account, or a Google Cloud account.
 Now we're going to create a new App Engine project.
 I will be able to show you everything step-by-step,
[00:43:37]
 because I have some things already established on my end.
 But I'm--
 copy this. I think this part is that by step though.
 Copy this here. Put it in the
 Google Cloud Notes.
[00:44:07]
 I'm gonna share my screen now.
 The cloud.md [BLANK_AUDIO]
 So I introduced App Engine.
 And now I'm going to show you how to create an app project in App Engine. I've been saying since Monday creating Google Cloud account.
 Log into the Google Cloud console and project is a keyword here.
[00:45:09]
 Send mux on the floor.
 Actually, so this is a keyword here.
 This one locks them before this is a keyword.
 These are also keywords here. Keyword here.
 Keyword here.
[00:45:30]
 Keyword key phrase.
 Okay.
 Now we can call this step by step.
 Log into the Google Cloud console.
 So I'm going to try to log it in here.
[00:45:58]
 Google. I'm just going to type Google Cloud.
 So you're going to use different accounts. Let's see if this works.
 So the console will log in, go to the console. And then at the top left click on the project box.
 So here's the project box right here. Actually, we need to correct account.
 Click on that project box and then click on new project. The name set the name and clip down here.
[00:47:27]
 I'm going to just to use a different name here or let
 me see if I can make a try.
 I'm going to try to use a different name.
 So, just put some kind of number next to it. Sandbox,
 double 4, and then just put some kind of you can even put your name after it like
[00:48:28]
 all of us are aberrant that way and I highly doubt anyone will have this
 same project name. So it should be able to create it. Now at the top right at the top right project box select sandbox number 4.
 The new one you just made.
 You have to select it here.
 So whatever you select here that's the project that you're going to be setting up.
[00:49:31]
 Then, you are products.
 So, there's a bunch in here that says, "Do all products." So, you just have to scroll down a little bit.
 "Do all products. This is the product you get to choose for your project. And we want App Engine. So you
 can search for it, scroll through here, there's tons of products to use.
 App engine is right here in the serverless section.
[00:50:12]
 It's not serverless like Lambda is.
 It's just serverless in that that Google Cloud provides all the hardware for you,
 the server hardware. So there's App Engine, you need to pick that one.
 You should be able to create an application. If you can't create an application,
 that means you didn't set up billing.
[00:50:50]
 So select App Engine and then create application,
 but a billing account is required to create an application.
 So I'm going to show you the next few slides and you're going to have to take care of that. You're going to have to take care of the billing.
 If you haven't added your billing information, this is it right here. So these are just general instructions not detailed because my
 billing is already set up so I can't really show you how to set it up. But basically at the top left, click the menu.
[00:51:45]
 Billing, manage billing accounts and billing account.
 So let me, I can show you that part at least.
 So copy this right here. And then paste it into your notes. [no audio] Okay, so I'll try to show you what I can.
 These are keywords here in building,
 the key phrases, and the building accounts,
[00:52:55]
 and the building accounts.
 The rest are not keywords.
 This might be a keyword that's seen. The rest are not keywords.
 This might be a keyword that's seen.
 More key phrases.
[00:53:22]
 Okay, so I'll go through what I can to the beginning.
 Seems I already had set had some building and some verification and activation, this part can take a while.
 And it can be done during the break.
 So these are general instructions at the top left click the menu
 So here is menu
[00:53:59]
 And you should see billing You will have an option to the billing accounts and then add a
 billing account.
 Then provide your billing information, activate your account, to step verification and then set up
 billing alerts so you want to be alerted if you start getting charged so I
 put here actually let me see if I can do that when you're done setting up your billing account and you go back to your console and your
[00:55:17]
 project you should see this set up budget alerts.
 So I have a budget alerts that's this one and then create a budget.
 They're great budget. I see great budget.
 I'm already created it here. Let's see.
 Yeah, set up the name.
[00:55:50]
 The name will, I'm going to call it free because it's the free budget.
 Basically, even though it's just one cent, I just want to be warned that mouth set it to one cent.
 So you'll get in a heart if the mouth gets to one cent.
 So this is a tree and then a mouth somewhere somewhere here.
 Instead of zero, send it to one cent.
[00:56:33]
 And then finish up the building.
 So, so you can see the and building account button. You should be able to, if you click on billing,
 you have to click on manage billing account.
 Or manage billing accounts.
 Then add a billing account.
[00:57:10]
 That's where you add your credit card information.
 Make sure that credit card is stays active for a month.
 Because if it goes inactive or invalid,
 if that credit card is invalid,
 like after a few days,
[00:57:32]
 Google my Suspendure account.
 Remember, you won't get charged unless you get hacked
 or you have a, like into the link running.
 Okay, well, let's you share your screen
 you can.
[00:57:56]
 Did you ever add a building account before?
 Okay, so maybe if you're able to if you are able to create an account, I mean So the part that we left off was right here and then we, we went to all products. [INAUDIBLE]
 You would see all products.
 You could even search for it up here, app engine.
 So either in search bar, click that.
[00:58:57]
 You should be able--
 if you already have a billing account, you
 should be able to create application.
 So as long as you can create
 application, then you're good to go. It might ask you to associate a building
[00:59:12]
 account. If this is great out, then you have to create a building account. But if
 you can click on it, then your building is set up properly.
 then your billing is set up properly.
 Okay, so now it's
 okay, so for you, Yuki, your billing account is is correct. I'm going to go over the next steps tomorrow.
[00:59:48]
 steps tomorrow. You already have a building account. Let's see what realign say. It possibly just screams a car down in this one. Yeah, it's already on your
 account. Okay, so we're gonna take a you can just set up the break here.
 Time range, I'm not sure.
 I just basically just change the things range, that's fine too.
 That budget alert is just for your own reference, customize it to any way you want. Basically, if you set it up the way I show you, you'll get alert if you get charged
[01:01:02]
 one second or...
 Okay, see you after the break. If you get charged one second or.
 Okay, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break. And we have time to work on the practice questions or the practice problems.
 So this was from day one, Redux item practice where you create a shop item and
 use Redux state variables to change the quantity. Second practice was Redux card practice where you create a shopping cart
[01:12:48]
 and you update the total quantity
 using the Redux state variables.
 And the next practice is Redux category practice.
 Separate global state variables into categories that represents which page they're on. So, so far, if you look at the state variables in the front end. Let me share that with you.
 State variables in the front end, there's just one layer.
[01:13:41]
 What if you wanted it?
 So there's only one did mount, but what if I want to put a did mount in the home component, in the about component, and the
 contact component.
 If I want to do that, then I would have to change the names here, or even change the structure
 of this object if I want to categorize it.
[01:14:15]
 So if I want something for the home page, there's different ways I can do that. I can change this to
 there's different ways I can do that. I can change this to home did mount,
 or I could do something like this where I make a home property into there.
 Oops.
 So these all belong to home like that.
[01:14:54]
 And then the other one could be like the about page and I would put the state variables for the about page.
 It might have a did-mount.
 So you can set categories like this, but if you do it like this, then you have to navigate
 the object differently.
 You have to code the selectors differently. You need to code the reducers differently.
[01:15:31]
 So you choose how you want to categorize it.
 Maybe you want to just put home in front of all these.
 Just like this, home, click, and then home.
 And when you do it this way, you don't have to navigate
 any object or
[01:15:47]
 you don't have to navigate deeper into the object. So you pick the way that you
 want to categorize them. I'm okay with the objects and texts. The one where I have the home property and I stick these properties into there.
 That's the one I like.
 What happened here? Oops, I just break my other one.
 Yeah, real'll get here.
[01:16:36]
 So yeah, we're gonna with this practice you know,
 you know create categories for your state variables.
 So in the state variables.ts add a property for a category for each page.
 So in this case, I'm creating a home property about property contact property, add did mount to each category, right so we're going to add
 a did mount for home, add a did mount for about, add a did mount for a contact,
[01:17:19]
 and move the state variables to their proper category.
 For state variables that don't belong to a single page,
 put them in the global category.
 So things like total quantity, right?
 That doesn't belong to a single page.
[01:17:41]
 That's going to be on every page, maybe.
 Like if you have a cart, maybe it's going to be on every page maybe like if you have a cart maybe it's
 going to be on every page so you can have a global category your shop items
 will have like if you have a phone or a laptop item in your online shop, you would
 probably put them under like a shop page for shop category. Next, you would need to update stateselectors.ts with names that match categories. So like home did mount. If you're
[01:18:33]
 going to select up did mount from the home page or about did mount if you want to select the amount for the about page or global total quantity, if you
 want to select the total quantity, I guess you don't have to put it under global. I mean, I think it's cleaner just to put it under global,
 at least it's all categorized.
 But that's up to you.
 Then update the selectors code.
[01:19:16]
 Remember the selectors here, you have to update it.
 To return a categorized state variable
 because you change their names here. So you need to actually, no because you change their names here.
 So you need to actually, no, you change their names up here. So you need to
 update this code here to return the new name of the state variable.
[01:19:45]
 And then you need to use the updated selectors. Since you're updating these selectors, you change their name.
 You need to use the new names.
 To select the state variables.
 Next, you update statesetters.ts.
 With names that match categories.
[01:20:03]
 So like example, it's going to be the same exact home did not.
 It's going to be the same as the selector.
 And then you have to update the code.
 That updates the value of categorize state variables.
 There's the typo there.
[01:20:29]
 And then use the updated, updated set object.
 So remember the set object.
 I forgot to make this blue.
 But the set object, you can select actions from it.
 Those actions come from the setters here.
[01:20:49]
 You have to, you know, change the name. You're gonna change the name here.
 So you're gonna also change it in the set.
 You have to update it here in the set object.
 And then you dispatch the action
 and confirm the proper results.
[01:21:12]
 I'll give you time to work on this for the second hour. I'll start to break our rooms for 32 minutes. [ Pause ] Okay, let me know if you have any questions and then you came.
 Did you want to do your mini evaluation now?
 Okay, I'll meet you in the brick, Irene. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so we're back from the breakout rooms.
 Let's just take a break and then I'll continue the mini evaluation with you key after the break.
 Chris, you have a question? Yeah, just a quick question about those front end tests for the assignment
[01:54:15]
 suits tomorrow. What are we, how are we supposed to
 know if the accounts are we just using the status code to determine if the accounts are being created because maybe we could use a read function, but we can't write the read function until we've written the test for it.
 So, how are we?
 I'm not really sure how to do this aside from the only way to get back information is in status code.
 Yeah, yeah, if you get a good status code,
[01:54:49]
 you can either return that status code,
 or you can just return to or follows,
 or you can return a message that says everything's good.
 If the status code is not good, then you
 just say you can return a message or a string that says
[01:55:04]
 something went wrong.
 So you designed it. You decide what you want to receive what kind of output you want to receive.
 Well, there's some weird scenarios here. If you, if you, for like the update.
 When you try to update a login or any whatever a table
 And there isn't let's say I want to go update
[01:55:31]
 A login and I you and I didn't use and I use the name that wasn't in the table. It would just create the
 Yeah, and that doesn't give a negative status code. So I don't know how to
 Yeah, so that's good.
 So you probably, did you write a test already
 that says it doesn't update if the account doesn't exist?
[01:55:58]
 - I added it into the, you know,
 I just wrote all the components
 and I'm just trying, and I have them on a secondary capstone.
 I'm just like working through the formatting of it
 for the page.
[01:56:10]
 If they're all done and they're all working,
 I just don't know how to test these components.
 That's all.
 - Yeah, you're supposed to write the test first.
 - Yeah, I know, but I haven't been able to even start
[01:56:20]
 'cause I don't know how to start.
 I mean, the assignment isn't even up yet.
 I could use some more details frankly. I'm just't know how to start. I mean, the assignment isn't even up yet. I could use some more details, frankly.
 I'm just confused about what I'm supposed to be using
 to even tell if the data is being,
[01:56:32]
 or if the clients are being created.
 - Yeah, so yeah, the problem is that you coded first.
 - Yeah, but I need to get this assignment done before tomorrow.
 So I'm having to start because I don't know how to start on the tests.
 Yeah, so the test, you just basically, you have a, you create a function.
[01:56:52]
 So like it's the update function, right?
 So update account.
 Yeah.
 It's going to take it.
 What is it going to take in?
[01:56:59]
 It's going to take in a email, a password, and some other information.
 Yeah.
 And so if it were one of the tests would be, uh, if, if the account exists,
 then it, uh, updates the account, you decide, do you want it to just,
 do you want that function to return true if everything turned out fine, or you wanted to return false, or you wanted to return a message that says succeeded, or do you wanted to say a message that said error that's up to you, you decide what kind of return value you're going to get from that.
[01:57:44]
 You could have it return the status code.
 Most of the time is going to be 200,
 because it'll write the it'll update an account,
 even if that account is not there.
 So one of the tests you'll be writing is going to be like,
[01:58:03]
 if a account is not existing,
 then return error, return an error string,
 or return a message that says, "Error, this account doesn't exist."
 So you have to design it first.
 So now you're going to go into when you start coding that test.
[01:58:28]
 So that test said if the account doesn't exist,
 let the update function send a string that says error account doesn't exist.
 So now you're going to write the code for it.
 So how do you check it if an account doesn't exist?
 Well, you have to do a read first.
[01:58:47]
 You have to use the read. I can't use the read function until I've written a test for the
 read function. No, you don't use the read function. You use the read method of the client.
 Okay. Of the dynamo DB client. Okay, okay. Okay, I see your saying.
 Yeah, so, yeah, so you have to sort of reverse engineer that you already made the functions,
 but you have to think from the standpoint of you made the test first and design it.
[01:59:20]
 I do.
 Because I don't want to do that, but it's just because I couldn't.
 >> Yeah.
 >> I didn't want to.
 >> Okay.
[01:59:30]
 >> Does that give you more clarity on that?
 >> Maybe.
 I'll get back out and see if I can.
 >> Okay.
 >> Yeah, basically, you just use that, read the Dynamo client.
[01:59:42]
 I mean, yeah, the client use the read function to assist with the update function.
 I mean, not use the read method of the Dynamo DB client
 to assist with the update function.
 >> I could use that for the create function
 to just to see that was created.
[01:59:58]
 >> Yeah, that's right.
 Yeah.
 >> Okay, thanks.
 >> Yeah, I think you understand it.
 >> I think so, hopefully.
[02:10:53]
 >> All right. All right, so time for a break. I'm gonna get the break when those started here [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break. Going into this third hour, you can continue working on the practice or the assignment, I'll post the assignment here though.
 So this one has been up for a while.
 If there's any other clarifying questions that you guys have,
 just let me know in the meantime,
 I'm going to start the breakout rooms. [ Music ] So, though we open for 38 minutes.
[02:11:54]
 Right.
 Yeah. And I'm going to continue the MIDI evaluation with U-key. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the breakout rooms.
 In conclusion, we learned about getting into that Google Cloud account and setting up
 the Google Cloud billing.
 We also learned about Redux dev tools and how you can use it for finding bugs that don't cause errors,
[02:50:48]
 like they'll cause other kind of errors that don't necessarily show up as an error,
 but they are like something is not rendering properly, or not correct value. You can use Redux Dev Tools for that.
 And we also were introduced to the Redux category practice,
 where you're able to categorize your state variables.
 Or group them.
[02:51:19]
 And now you can take attendance. If you forgot to do that, you have two minutes.
 Other than that, class is dismissed.
 That's today's lesson on Google Cloud,
 and I'm just gonna take a few minutes to finish up
 UQI's mini evaluation.
[02:51:40]
 We should probably take only five minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, I'm all done with UQ's mini evaluation.
 I'll stick around here just in case anyone has questions. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Apr 17, 2025 21-28.txt"

Transcript from Apr 17, 2025

[00:00:00]
 Good evening, class. Welcome to week six day four.
 The, um, am I missing a slide here?
 Yeah, I think I'm missing the.
 Codex Academy. Yeah, welcome to a week six day four where the theme is Google Cloud.
 And today's agenda is for the first hour, take attendance, do announcements, review,
[00:00:40]
 one quick tip on Redux, then get into some Google Cloud topics.
 Second hour practice, third hour, many evaluations.
 If you want, you can do many evaluations during the second hour.
 We can get some volunteers. We only have two days for this week. So make sure you, uh,
 okay, so Chris will do his,
[00:01:16]
 okay, make sure you take attendance. If you're here right now, you're, you can mark
 yourself as present in the attendance.
 Now time for announcements, there are a few new things there. So let me get that loaded. Okay, so this week is regular schedule.
 Next week is also regular schedule,
 but Monday, April 21 will be a student collaboration day.
[00:02:12]
 Basically, you'll have the whole day to work together.
 Attendance will still be taken.
 But I won't be available to teach any new content that day. I'll be at a doctor's appointment for my kid.
 And it's out of town.
 So I won't be able to get back home in time for the for the class
[00:02:47]
 but I will be able to start up the breakout rooms.
 So student collaboration day on Monday April 12.
 Many evaluations.
 evaluations. Let's see. So, many evaluation week five is closed. So, for this was last week, it's closed, but corrections can be done until Saturday. And, well, many evaluations week six.
 So this one will actually close next Tuesday for corrections.
[00:03:35]
 But if you want to get on time, if you want to possibly get that on time point,
 then you need to do this mini evaluation this week.
 Assignments, there's something new here. The capstone front end accounts. I just
 posted that with some details and I changed the due date to Saturday before class.
 So let's take a look at it.
[00:04:18]
 Have stone front and accounts.
 So let's do April 19 before a class.
 This part was redundant line number eight, so I cross it out, create a branch to establish
 communication between the deployed front and then back end.
 That's basically you'll be doing it here. Greater branch for using the function in a component and rendering the results.
[00:04:50]
 That's basically almost pretty much the same thing.
 So this one was crossed out, but the details.
 There's more details here.
 Let's see which one's important.
 Or which one might be different for you guys.
[00:05:18]
 DDD, I think.
 So when you do TDDD, remember to assert the function return type.
 So the function return type goes on the function signature.
 The function signature is the first line of the function where you have the keyword function, and then the name of the function, then the parameters, and then you assert the return type after the parameters.
 And actually after the parameters before the code block,
[00:05:49]
 that's where the return type goes in the function signature.
 Assert the data type of the function parameters.
 So when you make the create account function,
 you're probably gonna take in an email and password.
 So, the most likely gonna be stringed.
[00:06:12]
 So, just assert the function parameters of strings.
 If that's what you're taking in.
 Probably create and use a branch for rendering results from the create function.
 From the create function into a component.
 So that create function.
[00:06:38]
 Or it's going to be called create account.
 It might be you might call it create account.
 You're going to let a component
 use it. And then you're going to render the results that you get from that function.
 Remember, um, create account is going to have a return value. So when you use it in a component, you're going to return, you're going to get a return
[00:07:08]
 value.
 So assert the incoming data.
 So that's the, basically the return value from the function.
 That's incoming data.
 You're going to receive data from that function.
[00:07:23]
 Just assert the type of that data.
 I should put here assert the data type of the incoming data for more clarity.
 When it results, so they make sense to users and
 match the design of the front end.
 and match the design of the front end.
[00:07:52]
 So if you're going to create an account, well, you have two ways to do it.
 For now, you can do it like a, like a kind of an examples page where you
 can create an account or you can implement it into your login or
 where you have like a form that says sign up. You can implement it into that.
 So we'll see what you guys come up with.
[00:08:22]
 So we'll see what you guys come up with.
 And you'll also need a branch for retrieving accounts.
 And you'll probably call the function read account.
 Similar instructions as this one here.
 When you read an account,
[00:08:58]
 when you read an account, you're going to get an
 you're going to get like the email, the password, the name, the phone number, or whatever. So you should have a custom
 data type for that. Here's a question. It needs to be a part of your website. So there should, I shouldn't have to manually type in the address at the top of your website. I should be able to pick it from your from your nav bar or something or maybe it's just going to be in your home page. I don't know.
 So whatever, however, you can integrate it into your website, that'll be fine.
 Like some people that have an example page.
[00:09:51]
 That's fine there.
 But, you know, that's not ideal.
 Ideally, you want something that integrates and it looks like a real website.
 It works like a real website, not just something that has examples. Because companies are not looking for examples, they're looking for real world applications,
 things that make sense.
[00:10:11]
 For now, you can do that.
 I mean, even for this class, you can do that, but you should be striving to make it like
 a real world example, making it like a smooth
 and user friendly website without examples,
 but actually just looking like an actual website.
[00:10:37]
 I mean, there might be some things
 that you can't implement into your website.
 So you'll have an example there,
 but something like a user accounts, you can figure
 out how to find out some ways to implement into your website. Maybe if someone logs in, maybe they'll get a promo code or they can see some extra information about their website.
[00:11:08]
 The sky's the limit.
 You decide how you want to implement that.
 So if you have a shop, if you have a shop kind of website
 online shop, then your user would basically have like a cart in some items in it.
 But if you're making more of like a resume website, it might be a little bit tougher to have a
[00:11:40]
 you know to implement like a user account or something like that. So you might have an example,
 but if you can implement it,
 like if it's just a portfolio website,
 make it look like they can sign in.
 Like a sign up button, maybe sign up.
[00:12:02]
 And then when they log in, they'll have like a special message or a list of promo codes that they've acquired.
 Or maybe I'll just say some things like the date that they created a registry or they registered.
 registered or they registered. Okay, so Malak Sanja was so she made a portfolio and she made some samples free if they if people sign up. So there was some kind of incentive there.
 So there was some kind of incentive there. So Chris is asking you should have full credit functionality for the user.
 Well, in terms of this assignment, you need to have full credit functionality.
[00:12:58]
 But like I said, you can put it on an examples page or you can make it look like an actual
 user account that they can edit and delete and things like that.
 But at least have an example page where you can do that. But, you know, strive to get to that point where it's actually full user thread functionality.
 So there's, yeah, so here's the update part.
 I put here a certain data type of the function parameters because if you're updating,
[00:13:48]
 you may not have a custom data type for what you get back.
 So you might just get a Boolean saying everything's good, or you may get a number with
 it, or you may get a number with a, or you may get a status code.
 So it just depends on how you designed it.
 Whatever your function returns
[00:14:13]
 when you update an account,
 assert that data type.
 And then there's the delete functionality.
 And then there's the delete functionality.
 Right, oh, did I forget to update this one's supposed to be delete right here?
[00:14:33]
 We forgot to change this for delete.
 Yeah, this one's supposed to be for delete.
 Copy and paste again.
 That's the problem with copy and paste.
 Forget to update some things. So this is this one is the duplicate
[00:14:49]
 of this one up here because I just copied and pasted it, but it's supposed to
 be for delete to match this one.
 You need to deploy it on AWS lambda the backend. And you need to deploy it on AWS Lambda, the backend.
 And you need to deploy the front end with AWS S3 and AWS CloudFront.
 Remember when you deploy with AWS Lambda,
[00:15:25]
 you should have some NPM scripts to build for production. Like mode equals production so that you have a smaller file.
 And it loads faster on AWS NAPDA.
 And you should also have scripts that deploy to AWS NAPDA.
 So you don't have to do it manually every time.
 Remember to configure Webpack for that.
[00:15:49]
 And remember to have a serverless express handler.
 And then when deploying to AWS S3 and CloudFront,
 you should also have some NPM scripts that build for
 production keeping your files small and keeping them you know they will
 load faster. Remember to also invalidate distributions.
[00:16:20]
 Cloud front won't update your websites unless you invalidate distributions.
 And also have a script to deploy.
 I'll make it easier.
 Okay, so this one's do Saturday before class.
 Probably the only thing, you know, sort of like the newest thing here would be like the
[00:16:52]
 AWS Lambda and S3.
 They were not specified in the front page.
 But in the description page, I mean, there AWS Lambda and S3.
 We're not specified here, but I didn't mention something about facing AWS Lambda links, which you should also paste your cloud front
 live site links to.
[00:17:33]
 So this is how to submit the assignments.
 You should have the GitHub repository, AWS Lambda live link
 and cloud front live link link live site link.
 Okay so separate branch for each current operation so Chris is asking
 you want to separate branch for each of the credit operations. Yes. So you see here,
[00:18:06]
 create a branch for updates. This one's create a branch for retrieve.
 And then this one is a separate branch because one is for the backend.
 And then this one is a separate branch because one is for the backend
 Right, no, is this back end? No, this is front end. So
 Okay, so One is for creating the function one branches for creating the function
[00:18:39]
 My create account
 separate branch is for using the function in a component. So
 separate branches. That way it's compartmentalized and you get, you know,
 you sort everything out, do it all in the right order, TDD first, make sure you design it, then you code it.
 After that, you use it, so it's all systematic.
[00:19:12]
 You know, we're jumping around.
 This way you get less confused.
 the function and the JSX to meet the function, the function and the component are two different things. So the function like the create account function is different from the component, which will render it.
 So, and this create account function will return a value that's test those values that a component renders.
 So the function and the component should be separate files.
[00:20:19]
 And you should be importing that function into the component.
 So the component of the this function here, like create account, this would be a module
 in the modules folder and then the component would be in the views folder.
 So you would need to import the function.
 So that's not one there. There's a full description.
[00:21:14]
 You have until Saturday, you finish these things.
 You see what else.
 And if anything is closed on you, make sure to contact the student's success team to see if they can reopen it.
 Practice problems.
 I posted practice problems here.
[00:21:34]
 There's Redux item practice, Redux cart practice, Redux category practice. And you can also check them off as you finish them.
 Let's see. I saw some things in July cohort. Remember, post your questions there if you need clarification on anything.
 Let's see here.
 So, Yuki was asking about a secondary index the other day.
 And I replied saying that right now we're just using one index.
[00:22:24]
 Use it to get login information,
 and then you can match the password.
 So basically you wanted to just get the database
 to return something that had an email,
 that had this email and this password.
[00:22:39]
 But right now we're just using one index.
 If we're just using one index,
 then you can't tell the database based to look for two things.
 When you sort of can, but I haven't taught you how to do that.
 So just use this strategy.
[00:22:58]
 Use that one index.
 Basically, ask the email index.
 You'll get a login.
 Then you just match up the password from there.
 And Chris was asking about notes from day two,
[00:23:16]
 and they are posted here.
 So week six, day two,
 apparently there's no recording.
 No, there's no notes and there's no video.
 So I posted local cloud MD Redux MD.
[00:23:35]
 Just the ones that were created that day.
 Just the notes for that day and also a picture of the Redux workflow.
 Okay, so there's a question here.
 And if you were saying, if you provide an empty email,
 and you try to use DynamoDB to search for an empty email,
[00:24:09]
 it's going to crash.
 So the achris responded, would a good answer here?
 This one should have texted.
 Basically, do a test for it.
 If the email is empty, don't send it to DynamoDB because DynamoDB is going to crash.
[00:24:30]
 Instead, just say, "Hey, you can't..."
 It depends on what he's testing here.
 If he's looking for...
 If he's trying to read the account, if he's doing the R from CRUD.
 So that means read or retrieve.
[00:24:47]
 If he's trying to retrieve something by email,
 no, we're trying to update something with an empty email.
 Now, you can't have it,
 that if the email is the key, the index,
 the primary key, you can't have that empty needs to be,
[00:25:07]
 we have somebody.
 You can't clear it.
 And this test was basically the clearing of the email.
 And they would have the question here, something was wrong with his backend trivia.
 So my suggestion was make sure you can get into that
[00:25:47]
 proxy handler proxy route handler
 If you could get into that route handler, then you can just run it step by step and find out where it crashes
 So we use the debugger to here and then it. And remember to use notebook LM.
 Give it your notes, give it your code and let the AI answer your questions based on your notes and your code.
 answer your questions based on your notes and your code.
[00:26:30]
 You can get the debugger to get into the handler. So if you couldn't get into the handler,
 then maybe the route is not created.
 I mean, like index.ts, you should
 be able to get into the handler pretty easily.
 You should be able to get into the handler for the easily. Okay, so days week six, day two has been updated, so that's the one with the notes that
[00:26:57]
 I linked in directly there. right here.
 Okay, so we're going to review. So hopefully you have the notes already and just absorb.
 After the review make sure you tick notes follow along.
 Have your microphone ready for any questions and for the mini evaluations.
 All right, so now we're going to get into the review. Yesterday, I told you about Redux dev tools.
[00:27:56]
 It's a browser extension that shows a history of state variables and how they changed.
 So you need to download it.
 And this is helpful if you have some bugs in your program, like maybe you have an online store
 and you see that you have a cart.
 And it's showing the wrong quantity.
[00:28:20]
 Like maybe the quantity should be five,
 but it's only showing three.
 There's not going to be any bug there, it's not going to show any errors, it'll just show a wrong quantity.
 This is when Redux DevTools comes in handy, because there's, there is no bug that's kind of,
 you know, crash your program. So you need to find out where it's a different kind of bug,
[00:28:43]
 like a value kind of bug that doesn't crash
 your program so you can use your you can use this to see which component is changing which state
 when it's changing it and um yeah it's a very useful tool. You can see each state change one at a time.
 Let me just show it really quick right here.
 One more time before we move on.
[00:29:22]
 It's in the front end. It doesn't work for the VS code debugger browser. You have to
 open it in a regular browser because the VS code debugger browser doesn't have extensions.
 So this is going to be on
 the whole study 80. And here Here, I can dig my...
 I go here.
[00:30:23]
 This one is chrome.
 I wonder if I have... I don't think I have any installed here. This one is chrome. I wonder if I have a kind of figure I have it installed here.
 This can be.
 Because I don't use chrome for developing.
 These are for our research. and Microsoft Edge.
[00:30:45]
 I use it for development and I just
 clear the cookies and all the storage data.
 And I don't necessarily want to clear those things
 when I'm researching.
 I want to see it there.
[00:31:02]
 I want to see it like,
 it's not going this tan view.
 I want to see it stuck in this panel,
 but you can do it like a pop up like a, like a soft.
 So, I can click here
[00:31:21]
 and look at the state changes and where it changed.
 I can actually change the states.
 So in the beginning, there was hello world.
 And then, later on, it changed into you have a nice day.
 I can click here and then I can see the state gets added for the record of the change and what I have been trying that.
[00:32:14]
 Maybe I can get it for the, maybe it's possible for the VS code debugger browser. I don't know, I have to check with that.
 So yeah, when you get into state months that then cause errors,
 because value problems, then you need to be using
 re-lessed int tools to find the problem.
 Okay, so we go to App Engine.
[00:32:54]
 We started to create an App Engine project.
 And then you'll get to a point where you're trying to create an application,
 which you can't because you need a billing account.
 And so I showed you how to create a billing account or just provide the
 information at least. After you've added your credit card information and
[00:33:21]
 after you've activated your and add in two step verification
 you should also set up alerts especially if your account gets charged one cent that means
 you know you're going to start the growing fees you pass the the free tier and then if you keep
 running your app you're gonna keep increasing.
 So you should get an alert when it increases to one cent. That way you can
[00:33:55]
 be notified right away as soon as you start getting charged.
 Okay, so now for the new topic, Redux.
 So this is like one of the last things I'll talk about
 in regards to Redux, maybe maybe not we'll see.
 But there's something called non serializable states.
[00:34:26]
 But there's something called non serializable states. And you'll get this, you'll run into this if you are following the examples that I've
 shown you.
 So non serializable states are objects that cannot be stringified.
 So you know how you have objects and
 you can use JSON dot stringify to streamify them. There are some objects that
[00:34:51]
 cannot be stringified. Those are called non serializable objects or if you
 store them in a state, then they-sterializable states.
 Basically it is objects that you can't see in the line. So for Redux, dev tools compatibility.
 Redux does not allow non-sterializable states.
 because these can cause even more bugs in your program. There's ways around that.
[00:35:32]
 But first, let's try to identify non-sterializable states.
 So what we'll do, let me actually copy this first.
 And it looks like there's a code sample, so I'm going to add that.
 Okay, so let's go in the next notes.
 Here, let's go in. this
[00:36:33]
 I'm just hopping this over
 and fixing the points.
 You need to remember to add the code sample here.
 Some of these are like colored right here.
 Just around the tube.
[00:37:16]
 Okay.
 And you have to really see them here. So we're going to try to observe the error when
 streamifying a component or react component or storing it into a read-up state.
 So let's first try to stream a high component.
 Do that from the home.
[00:38:03]
 I can just be here from the top.
 The client's result.
 So let's just start with stringify.
 When we're going to stringify, we're going to stringify component.
 Let's stringify the image map.
[00:38:31]
 Or whatever component we might have.
 Then I will store that here in the result. There should be an error that's happened if you try to bring this.
 We'll be there. It's already here. It already crashed.
 Unclop type error converting circular structure. It's already here. It already crashed. Uncut type error converting circular structure with
 the JSON. So components like this, they have, they are an object. It's an object and
[00:39:21]
 parts of that object refers back to itself.
 And then part of that other object refers back to itself.
 So it's going to keep trying to string with by itself.
 It's like an infinite loop on those.
 So it's like saying, this image map has a prop.
[00:39:44]
 And that prop is the image map. And that image map has a prop and that prop is the image map.
 And that image map has a prop and that prop is the image map. So it's just going to be circular and
 it's going to keep going and going. So there's an error there. Those are non-sterializable objects
 and React classes too. I think like classes and, you know, React components that are not serializable.
 I mean, objects that are made from classes are usually not serializable.
[00:40:16]
 Actually, anything that has a method or a function in it is usually, it usually becomes un serializable.
 I mean, you can't, you won't be able to streamify it
 with JSON.
 Can't turn it into a JSON string, basically.
 Can't turn, because every component is also an object
[00:40:38]
 and you can't streamify them because there's
 some circular reference. And if you try to do something like you try to store it
 into a Redux
 state variable. So let me just
 add a new state variable here.
[00:41:04]
 State variables. I'm just going to add a
 microphone in here. Just kind of put empty and you can and then select her.
 Select her is
 select component.
 I'm trying to store a component here
[00:41:41]
 and I need to select it from the state before I can store it.
 I mean, I want to be able to select it.
 I want to set it to, so I'm just going here to the setters.
 I'm going to create a setter for it.
 It's called component. And I'm just going to change the component
[00:42:09]
 to the new value here. So it's set up. I just have to change these three
 files. One, two, and three to add the component state variable. Here it is in state variables starting as
 undefined. Here it is in selectors select component. Basically I'm just
 expecting the component property from the state. Remember the state has a component property.
 The state variables have the component property right there.
[00:42:51]
 Then I return it.
 Then I have a setter.
 It's going to receive some kind of value and then I'm going to save it into
 that same variable right there. So now I can go to the whole page. I can select it.
 So you remember how to select something in the state variables, you need to use the selector.
[00:43:32]
 Look, that's it.
 And then you use, and then you put in the selector function which is select component but don't call it, don't activate it
 and then you can tap your value here
 So this part is not a problem. I mean it is just going to be undefined and it is going to be undefined right here.
 The problem is when you try to store it.
[00:44:19]
 So I am going to go into here.
 Now, how do I actually display that to bottom? So I can reuse this action.
 Action equals set component.
 And that's what I'm going to set.
 That state variable is called component. And I'm going to put in here the image map component. [BLANK_AUDIO]
[00:45:10]
 Let's see, let's see what should not break at this point.
 So let's try to run it.
 [BLANK_AUDIO] should be going to be bigger before I--
 I didn't put-- it doesn't read these-- these burgers right here.
 I have to put the green to the other.
[00:45:37]
 So it stopped on component did now.
 We don't see any errors.
 But then when I get to this part where it's
 tries to store the image map, that's
 going to get the non-sterializable error.
[00:45:58]
 There's an error key.
 Non-sterializable value is a technique.
 So how do you fix that?
 The way to fix that store a placeholder
 for the non-sterializable object.
[00:46:19]
 So basically these are strings.
 basically these are strings.
 So here
 So inside of the corner storing the component here, I am just going to put a string. That says image map.
 Actually, the thing that I wanted to do here is I wanted to render this component.
[00:47:11]
 And I wanted it to be an image map.
 Right?
 So if I put that variable here and it's supposed to be image map, I should see an image
 map under the code. So it should not break because I'm just going to store a string here.
 But there's going to be a problem. This is going to say in this map.
[00:47:40]
 Put a deep under right here.
 See if the Watson happened you can move this. So component right now it's undefined
 that's how it started. I should probably start it off as an empty string
 because it's more accurate that way. String, at least it tells me that I'm going to install a new string in there.
 Okay, so now it should be empty string. There it is.
[00:48:19]
 Then it's going to set component to image map the string right there.
 I'll press play and now we see component is image map the string and then we see image map the string right there. Well obviously that's not what I want. I want the actual image map
 So how do we do that?
 Let's do it like this instead of making this const
 I'll put let
[00:49:02]
 So I can change the value later
 And I'm gonna change that value here. If if component equals image map.
 Then let that component be the image map component.
 We have a tight script area here because it was expecting a string.
 So I'm just going to override that and put any.
[00:49:41]
 and you.
 Because I'm purposely switching from the string to an actual component.
 It was just my placeholder.
 So now you can watch it happen.
 So right now component is empty string.
[00:50:06]
 So it's going to get to this part.
 If component equals image map, then render it in its map.
 Well, right now, it doesn't equal image map.
 So it's going to render an empty string here.
 So it didn't render anything.
[00:50:24]
 Now it's going to store image map right here.
 Set component to image map.
 And now it's updated.
 Now it's rerunning this component from the top.
 It sees that component is image map string.
[00:50:43]
 And it's going to go into this if statement.
 And we'll see that it matches.
 And then it's going to change the value
 to the actual image map component.
 There it's changing to actual image map component.
[00:51:04]
 So I expect that to render the actual image map now.
 And there it is.
 There's the actual image map.
 So if I wanted to switch make it switch between components,
 then I'll have to do is put a different placeholder. So, what if I wanted to be something else like the tool tips?
[00:51:34]
 Or quote.
 So instead of putting this coat here, we remove this and I'm just So I'll change this one to both.
 So this is a placeholder.
 And then we have component equals quote. Then I want to replace it with the actual quote.
 All right, so let's follow it now. So right now component is an empty string. So if I continue it's going to render the component, which
[00:52:46]
 is nothing, we don't even see the code here. Because I disabled it. I actually didn't
 leave it. Then we see it will come down here and it will set the component to quote which is the placeholder. This is string.
 Now we see that it came back up to the top and reloaded this it's going to start to update this
 component. We see that quote the string is stored in component.
 the string is stored in component.
[00:53:26]
 Later on right here
 it's going to check is it and every step
 and the answer is no so it's gets over it. Is it a code? The answer is yes, so it's going to come over here and replace it.
 So component is code.
 And now we should see a boat come down here.
[00:53:48]
 There it is.
 There's the boat coming.
 So, that's how you deal with an uncertainty,
 a lot of the other things.
 Just put a place over.
[00:54:01]
 So, the sample code for that would be this one here. So basically select selected and then change it based on the placeholder.
 So we're going to select it.
 It's going to come in as a string. You check what that string is and we
 will erase it with the actual component or the actual non serializable state.
 Okay.
[00:55:02]
 Just see how much that right here. Okay, let's see what's happening next.
 So now it's time for a break, and then we get the break time to start. [wind blowing] [BLANK_AUDIO]
 And then take the pretend now.
 [BLANK_AUDIO]
 Okay, so you have to look right.
[00:56:04]
 [BLANK_AUDIO] Okay, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back for the break.
 And just waiting to get a chance to do this in the first hour.
 We're just going to do a quick slide on Google Cloud.
 This one will install Google Cloud SDK.
 So hopefully by now, you would have already created your Google Cloud account and added
[01:06:51]
 billing information, verified your account, added two step verification. So copy this.
 I'm going to start sharing my screen and we're going to go over this one nine and Let me switch over. Cloud.
 Okay, so these are key words to look for. Next, actually, let me change this language will be no JS environment. actually move that because the actual keyword other keywords here. Right here.
 All right, so it should look like this
 okay so Google Cloud then you just log into Google Cloud
[01:09:36]
 so that Google.com. Going back to where we left off, that was in the console.
 Need to correctly choose the correct account.
 View all products. So here's here we are in the console.
 Maybe I should put that here.
 Google.
[01:10:21]
 Found console.
 Oh yeah, I also remember the selector project, but if you didn't change it,
 that is going to be the same. It's going to be the last one you created, or view all products right here.
 You can look for app engine, or you can scroll down, or you can just type it here at engine.
 Create application. So you can all make this much and if you have billing information.
[01:11:22]
 And you should have done that yesterday on the four class.
 Okay, you're supposed to select a region here.
 That's closest to you.
 You can sort of zoom in here
 and click the one that's closest to where you live. So that's closest to where I live.
[01:11:49]
 one that's closest to where you live. So that's closest to where I live. And then choose a region that's closest to you then click Next. So don't worry about this one. That's
 going to be automatically filled. Since if no service account is selected, the default
 app engine service account will be used. So that's fine. Okay. Language, no JS. So that's fine. Okay.
 Language, no JS.
 So it's going to, it's going to do something here, which hopefully doesn't take too long.
[01:12:27]
 I already have a app that already has this part right here.
 Okay, so I've loaded a different app that has it. So you can see what I'm talking about.
 Which is this this the language
 no JS environment standard so that's this part here language no JS
 environment standard that's important it's by default environment
[01:13:02]
 standard because I've put've made that clear here
 because don't take flexible
 or else you start getting charged.
 To extend it.
 Download the Cloud SDK is the next step.
[01:13:21]
 So here it is, download the Cloud SDK.
 next step. So here it is, download the cloud SDK. And it has some other things so basically
 after you set up resources there, there's another card.
 Deploy with Google Cloud SDK. So you would download this.
 So,
[01:13:50]
 install Google Cloud CLI. Here's the installer.
 Down low, the Google Cloud installer right here.
 If you have a Mac, it's right here.
 Okay, so you choose your system and then you download the installer. Let's see if Mac has any installer.
 Yeah, so it has a different way of installing this.
[01:14:40]
 But basically, there's a follow-the instructions there.
 For Windows, it's easy.
 Just click on the installer,
 download it,
 already have it here, so it's gonna hold the idle.
[01:14:56]
 It's done.
 Gonna click on it.
 I'm welcome to do a file CLI setup.
 I just basically picked all the default options.
 I agree here.
[01:15:29]
 I would install it for all users.
 That way you'll need to have one copy.
 And then anyone else that uses your computer.
 Or whoever you're logged on as can use Google account CLI.
 And then, so you just continue with the installation instructions.
[01:16:02]
 You will click next. If you pick all users, you might have to put in your password
 or something, but basically you continue the installation. And then when it's all installed, All installed in the VS code terminal type gcloud-version
 I'll just open the internal here
 gcloud-version
 dash dash version and it should show some information there it is if it doesn't show some information after you've installed it you can follow this instruction here.
[01:17:05]
 Close all VS code windows or sign out and back in.
 And then it should start working.
 Okay, so you can use the rest of this time for installing the Google Cloud SDK CLI.
 Or you can use it for practice.
 So these are the practices from before, the Redux item practice, Redux cart practice for making a cart that keeps track of the total quantity of items.
[01:17:53]
 There's also the Redux category practice where you can categorize your state variables and organize them a little bit better. This one's a new one, persistent login
 practice. So if you want to have a persistent login, like right now, if you don't have
 a persistent login, that means someone logs in and then you refresh the page. They're not logged in anymore. The persistent login is a way that if they log into your page and they refresh the page,
 they're still logged in. Or maybe they close the browser and then they open it up again.
 They're still logged in that's persistent login. So with this you can keep the login status persistent, so it stays even when the page is refreshed or reloaded.
[01:18:55]
 And this one, this one has to do with
 storing the email and the password of users.
 Store the e-mail and the password in the object.
 Then use JSON dot string,
 apply it to convert the object to the string.
[01:19:19]
 Then store that string with local storage dot set.
 It's a method. So we have to
 if you don't remember how to use it, just look it up how to use this method.
 You need to provide the key. So an example for that would be log in. The value would be the string.
 Basically this forest key value pairs,
[01:19:50]
 the key is log in, the value is the string
 that you string a find.
 Then when users log out, store an empty string
 with local store and dot set.
 So just basically instead of having the string of i-string just change it to an empty
[01:20:10]
 string when it uses logout or you can clear it. I like to have an empty
 string so that I know that I'm using the log-in object. it's still in the local storage, just waiting to be used.
 And then when you get that implemented, when the sign in area melts, this is how you set up the automatic login. When the sign in area amounts,
 that's where users can sign in,
 right, for the sign in area.
[01:20:51]
 So when it melts, like component did melt,
 get the login with local storage, not get.
 So this is the method you need to,
 if you forgot how to use it,
 basically just give it a key,
[01:21:04]
 and then it will return the value. Or look up how to use it, basically just give it a key and then it will return the value.
 Or look up how to use it.
 Basically, if you get a value back from this, you can either get a login or you won't.
 So if a login was saved, convert it to a login object with JSON.parse because it's storing us,
 they can only store strings for numbers.
[01:21:34]
 Local storage can only store strings for numbers. So you need to parse it and then turn it back
 into an object.
 and then turn it back into an object.
 That object will have an email in the password.
 So use that email and password.
[01:21:57]
 To authenticate automatically without the user having to log in.
 If the credentials authenticate, so if the email and password were correct, then login that user automatically and basically just log them in automatically without them having it being to enter anything. It's just basically restoring their email and password or their login.
 Then if the credentials don't authenticate,
 store an empty string login with local stores that set, just like up here.
 And if you added some functionality for the user to change their password,
[01:22:45]
 then you can do this. If the user changes their password,
 update the login string in the local storage.
 Okay, so this is how you set things up.
 You can have situations where the password can change, even because
 they'll be logged into one browser, and then they log into your site from another browser,
[01:23:16]
 that one will change the password, and then when this browser over here tries to automatically log them in, it's not going to authenticate.
 Because the password was changed over here.
 This browser over here didn't know about it.
 So you can get situations like that.
 So that's why you have to check for these cases.
[01:23:40]
 So that's persistent login.
 You can do,
 okay, so Chris is getting an error message.
 If you have Windows, you can install Python.
 If you don't have Python.
[01:24:10]
 I have Python already installed in mine, so that might have been something
 I might have could have overlooked. Let me check something here. and say anything about Python.
 Well, from the, if you have windows, you go to the Google Store.
 I mean, the Microsoft Store and then
 I don't know Python, I think.
[01:24:41]
 Let me, let me just double check.
 So Chris had a question. These have these solution problems because it says Python was not found.
 So if you go to the Microsoft store, if you have Windows, you can search for Python and install one of those versions.
 So it looks like the latest one is 3.13.
 I think.
[01:25:34]
 Yeah, just moving, I have 3.12 installed.
 I don't have a 3.13 result.
 So, here you can try that.
 So, I'm going to start the breakout rules for 28 minutes. And usually there will be a collaboration route. and then one for
 your valuations Okay. So I'll wait in the mini evaluation.
[01:26:58]
 I'll be ready whenever you're ready. Chris. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so we're going to take another break and then I'm going to continue with Chris's
 mini evaluation.
 So I'll get the break time restarted. started.
 See after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And now there's time to work on an assignment, but it's been a week now.
[02:05:37]
 There's a new assignment.
 This assignment is due next week Thursday. Capstone Redux, basically adding Redux to your capstone.
 Convert all state variables into global state variables managed by Redux.
 So here are some steps to get you going with that.
 Greater branch for adding all state variables to state variables dot TS.
[02:06:10]
 Because in this file, that's where we will put our state variables.
 Quick and easy access to them.
 You also have a branch for coding selectors in stateselectors.ts.
 Well, that's just the same thing I've been showing you how to use Redux.
 You'll have a stateselectors.ts and you'll put selector functions in there.
[02:06:39]
 Number three, create a branch for coding reducers in statesetters.ts.
 So, these are your setters for your state.
 Like, if you want to set the did mount, you're going to put that function in here.
 And it's going to basically let it match.
 You got to let it match your setter needs to match the same, the name of your variable.
[02:07:12]
 Your selector should have a, should be close to the, it should be the naming convention where it starts with select and
 then the camel case of the variable.
 Edit selecting.
 Next created branch for adding the Redux slice and the Redux store to store that PS. You need to have those. And to fully form the
 slice and the store, you need you need things from these files.
[02:08:16]
 Actually, you'll need stuff from this file, the variables file, and the setters file. Next, create a branch for adding the provider component to index.ts.
 This is one of the easiest steps here.
 Create a branch for updating a page. And also it's subcomponents.
 Use Redux states only. So like for example, the home page. So you'll create a branch for the home page.
 And start updating it so that it's using the Redux states only.
[02:08:55]
 So if your home page had a use state,
 well, you're gonna replace that with a selector instead.
 So you'll be using the hook, use selector instead of use state.
 And if that home page has any subcomponents,
 like what else, what else might it be like a carousel?
[02:09:30]
 And if you're using states in that carousel, you would include it inside of this branch.
 Basically, anything involved with that homepage. If you have a navigation and download the separate, you might want to create a branch for
 that too, because here, step number seven, repeat the previous step for each page or
 your website. site. While your nav bar is not a page, it's actually for all pages, your nav bar. So
 you might put some of your nav bar state variables in here, but in the global section,
[02:10:18]
 or maybe you'll just call it the nav bar section, I don't know, whatever makes sense.
 One thing, though, I'm going to put this in the details. So for the state variables,
 every page should have a did-nout at least. It could have a did not at least have a did not.
 So you so in that case you're going to have to like categorize these state variables somehow.
 I showed you how to do it with an object which you can do it with just the name.
[02:11:01]
 You can categorize them with just their names. When I prefer the
 object style. So basically, you'll be creating a branch for each page whenever, like,
 you'll update the home page to use Redux states. So that's a branch for that. You'll make
 another branch for the about page where you update the, you updated
 so that it's only using Redux states
[02:11:30]
 instead of like internal component states.
 Like use state, that's like a private
 or individual state, not the Redux state.
 So convert all your pages,
 one branch at a time, one page at a time.
[02:11:54]
 Make sure it works.
 So if you're working on converting the homepage,
 make sure it works.
 Then you push it like you're on my line number nine,
 merge your branch to main whenever the branch is done
[02:12:07]
 Oh, so merge it. I mean instead of pushing it you could merge it, but you could also push it to so that you don't have to worry about it
 So yeah repeat the previous step for each page of your website. And then here's number eight. I talked about this today.
 If you have a Redux non-sterializable error,
 store a placeholder state instead.
 So, I showed you how you can put a placeholder and then restore it to
[02:12:42]
 a non-ster serializable object.
 I showed you that, how to do that today.
 Then remember when you finish a branch,
 just do this one branch at a time.
 You should be able to do this systematically
[02:12:58]
 and with minimal confusion, minimal fuss.
 If you just do it one branch at a time, then you merge it
 to main, one branch at a time, whenever the branch is done. If you open all
 these branches at the same time, you might have some problems, you'll definitely
 have some problems if you open all these branches at the same time.
[02:13:25]
 So, do them one at a time.
 And then push main and the branches to GitHub.
 So, that's the Redux Assignment Do next week.
 I'll put more details in the assignment description.
 Now open up the breakout rooms.
[02:13:50]
 I'll be open for 37 minutes.
 And I'll see Chris in the break, break our room.
 Alexander, do you want to do yours after class or are you going to wait until Saturday?
 I can do either.
 Doesn't really matter.
[02:14:22]
 Well, how long is it?
 OK, so what we'll see, um,
 I'll let you know. Yeah, we'll see how long it takes with Chris and then we can decide. Does that
 work? Yeah, if I, when Chris's evaluation is done and there's still around and we can go from there.
 around and we can go from there.
[02:14:46]
 Yeah, because we'll see how I feel after that. I'm this one's easier for me than some of the other ones were.
 So it's not that.
 Yeah.
 Okay.
 All right, Chris, I'll see you then.
[02:14:57]
 The valuation room, Chris. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, just going to, gonna have to conclude the class and then going to continue with Chris's We need evaluation. He has these finishing up one question and he has two more questions to go.
 So break our rooms are back.
 In conclusion, we learned about non serializable objects.
 Those are the kind that can't be stringified because there's a sort of like,
 like an infinite loop
[02:51:45]
 when trying to stringify them.
 And how to deal with those when working with Redux.
 Then we installed Google Cloud SDK.
 Now you have one minute to take attendance.
 If you didn't do that already.
[02:52:04]
 And I'll go over to your If you didn't do that already,
 and I'll go over to your code X account and do that.
 Now, classes dismissed that's today's lesson on Google Cloud.
 You can stick around if you have any questions.
 If anyone's still here,
[02:52:21]
 by the time I'm done doing Chris's mini evaluation, I'll answer any questions you have.
 Otherwise, I'll see you on Saturday, Saturday morning.
 And open the breakout rooms againnybody still here?
 It looks like it's just us.
 So we're going to finish.
[03:53:00]
 We need to go back into the, I'll start the breakout.
 Do you need to take a break?
 - Chris.
 - Or you want to continue. - You hear me?
 - Yeah, I can keep going.
[03:53:11]
 Can you give me three minutes?
 - Yeah.
 Okay. [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Apr 19, 2025 10-57.txt"

Transcript from Apr 19, 2025

[00:00:00]
 Good morning class. Welcome to week six. Day five of our Codex Academy course where the theme is Google Cloud.
 This hopefully by today, we can deploy an app, a back end server to Google Cloud.
 Today's agenda, do attendance, do announcements, review. I'll provide a tip.
 That will be useful for Google Cloud.
 Second hour, we'll go through-- we'll spend a whole hour trying to deploy to Google Cloud.
[00:00:51]
 Third hour, many evaluations and time to work on, you know, upcoming assignments or pending assignments. Now's the time to take attendance.
 Make sure you head on over to your code x account and mark yourself present.
 Now time for announcements.
 Let me get that set up here.
 So we had regular schedule all this week, but Monday will be a student collaboration
[00:01:47]
 day so you can spend that whole day for the whole class time working together,
 voting, and you don't have to worry about receiving new things to learn.
 Many evaluations. So there's going to be a time limit on many evaluations. Time limit of 60 minutes per submission.
 When I was I'm a.
 Codex Academy alumni when I was going through the classes.
[00:02:28]
 The evaluations were limited to 30 minutes.
 So I had to know my stuff and go through them really quickly while the instructor,
 just make sure that I know everything that I'm talking about.
 And it was much harder
 back then. I had to know every topic. I couldn't miss any topic. I had to know every topic
[00:02:52]
 there. But for you guys, so for me, it was 30 minute evaluation. And I had to pass all the topics. I had to, I had to know all the topics.
 But for you guys,
 you have 60 minutes.
 Many evaluation.
 Per submission.
[00:03:14]
 So that means you have a total of, you know,
 you know, two, two possible submissions.
 Which can be 60 minutes each.
 So you have, you know, a total of two hours.
 And you even have the opportunity to miss one of the topics.
[00:03:30]
 Like, you can miss a point and still still pass with 80% or 75%.
 So it's, it's much easier for you guys, but I, I encourage you to get all the points that you can.
 Don't miss any of the topics. Otherwise, you'll be going into the programming industry,
 missing some things, and you don't want to do that. You want to keep your competitive edge and
 know everything that you can. Because even after this class, there's still a lot to learn.
[00:04:12]
 After this, you know, after level one, two, three, and four, there's still a lot to learn. And that stuff you'll have to do on your own, but at least you'll have a
 strong foundation.
 Okay, so, but remember, add submission to put yourself on the waiting list for many evaluations
 and to qualify for that on time point.
 All right, I didn't update this one, but the many evaluations for week six. The corrections or late submissions will be closing on Tuesday of next week.
[00:04:52]
 But you can still do week six.
 Many evaluations next week.
 Assignments, so there's still in the process of being graded, you'll receive extensions.
 If it's graded too close or beyond, beyond its closed date.
 The capsule in front end accounts was due today before class.
[00:05:25]
 the capsule in front end accounts was due today before class.
 And remember that the student success team is available
 if you need to get more points on any of these close assignments.
 Just let them know which assignment it was and why you've fallen behind. Then they'll contact me and tell me if it's okay to reopen those assignments.
 Okay, so the practice problems are available here on the side.
[00:06:14]
 That's a week six. The leaves will be useful and there will be the assignment. There will be an assignment requiring at least one of these
 practices. These redox practices. But there was also a practice that was introduced
 yesterday, so I'll put that one here too. I mean, not yesterday on Thursday. Okay, help
 seeker. So remember, if you get stuck for 15 minutes or more, post your
 question in July cohort, let's see if there's anything new.
[00:06:54]
 Just loading it up.
 Just takes a few minutes from the cold start.
 Load up.
 Okay, so, yeah, it looks like there's nothing new.
 Hopefully David was able to get his back end server going.
[00:07:31]
 Remember use notebook LM to your advantage.
 I talked about notebook LM for two separate days. Add your notes and your code to notebook LM and then they'll give you,
 you can ask it questions and they'll give you answers.
 Similar to the answers that I would give you and based on the notes that you were given.
 So it's more focused because if you just ask like chat GBT or
[00:08:06]
 or co-pilot some questions it's going to it's going to take its answers from the internet
 which may not answer your question but if you provide your notes to notebook
 LM and your code your answers will be more focused.
 your answers will be more focused.
 Okay, so week six, day two, that was a day when the recording didn't catch.
[00:08:37]
 So I provided some notes here that we
 did just on that day
 there's Google Cloud MD
 It's just for that day. We only had two slides and then the picture
 So remember to go through your days and order and only market green after you've fully taken notes for that class. All right, so now we're going to review what was taught on Thursday.
[00:09:34]
 You should already have the notes for that, but make sure you take any notes if I say
 anything new.
 Sometimes I say new things during the review.
 So if you're watching the recordings, don't skip the review because sometimes I say new things during the review. So if you're watching the recordings,
 don't skip the review because sometimes I say
[00:09:49]
 or introduce new things during the review.
 And then when I go over the new content,
 make sure you take notes there.
 That way you can you can feed those
 notes in the book LM and which will help you you know get answers which are
[00:10:13]
 contained in your notes. Also have microphones ready for any questions you might have or many evaluations.
 Okay, now time for review.
 Feel free to raise your hand if you have any questions.
 questions. Okay, one thing that we learned on Thursday is that there are non-sterializable states. So there are some things that Redux cannot store in state variables.
 Actually, you can you can you can force Redux to store them,
[00:11:06]
 but it's going to cause bugs, or it might cause bugs.
 That's why Redux discourages it.
 Non-serializable states.
 So these are values that you want to--
 non-serializable states are things that you want to store in the
[00:11:28]
 Redux state variables, but those those values are basically objects that cannot be And I provided a, I provided a demonstration if you, if you try to stringify a carousel component.
 It's not, it's going to have an error and it's going to say, I can't, it can't stringify it because the carousel component
 and other objects that are made from a class,
 they have properties that point back to itself.
 And then if you try to stringify something that's pointing
[00:12:17]
 back to itself, it's going to have--
 it's just going to be an infinite string.
 to be an infinite string. And things that have a method, so classes that have functions in them, or methods, those can't be stringified. So, for Redux Tools compatibility, Redux does not allow non serializable states, but you can force it, but we're not going to go that route.
 So we're just going to comply with non serializable states and the way you get around that. Like for example, if I wanted to store a component
 in a state variable, there's a way to get around that.
[00:13:16]
 If you get around that, we store a placeholder
 for the non-serializable object.
 So maybe just show you that really quick.
 I'm going to load up the sandbox.
 And you get that code up and running here. [ Pause ] So in the sandbox, I wanted to, in the homepage, I wanted to store an image map component for a quote component in a state variable.
[00:14:27]
 But these are non serializable states or non serializable objects or values,
 which Redux doesn't like, because it's trying to,
 Redux is trying to help us avoid bugs.
 And when you put non serializable values in there in the state variables,
 you can have bugs that's hard to track. So instead of storing the actual component,
[00:14:57]
 we're just storing a string that says what component we want. You could also
 as what component we want. You can also throw an object.
 And you can say, like, for example, if you had a object called
 component description, you could call it, you can have here something like
 the name of the component, which would be quote. And if it had any props
[00:15:40]
 or had a source, maybe if it had a source prop, it can be like, you know,
 HTTP.
 If I give it was an image, let's just say, let's call it an image here. HTTP and some kind of JPEG picture.
 Sounds like that. That way you can store information about a component.
 Because right now, my component is very simple. It's not had any props, you can put them into an object like this and specify them.
[00:16:30]
 Or if you already know what kind of props you want, then you can just put the string here and then convert it to a component and how do you
 how do you convert it to a component?
 Basically you check what the value is.
 So here I'm storing "as the component variable, the component date variable, this is the
 quote string, then when the component reloads to check for any updates, it sees
[00:17:16]
 that component is the quote string, then later on I check. Okay, so if component is the code string then I'm gonna store in there the actual component
 And then I'm going to render it right here
 Notice here I'm not using the setter
 I'm using it more like a regular variable.
 Not using a setter.
[00:17:52]
 Because it's just going to go straight from here and into here.
 If you use a setter, there'll be a delay and actually it won't work because this is,
 if you use a setter for this it's going to
 it's going to have an error non-sterializable object so you have no choice but to use a regular variable
 or use it like a regular variable and just render it right down here. It will work because the value is being set correctly up here.
[00:18:31]
 Remember, state variables, they can retain their value in between function calls
 or in between updates.
 But regular variables, if you're just assigning it like this,
 they don't retain their value in between updates.
 But in this case, it's okay because we are storing the correct value here and then replacing it with the non serializable value
[00:19:07]
 right there. So in a way, we are still keeping the state even though we
 are using you know regular variables down here.
 Okay.
 Next thing we did, we installed Drupal App Engine, or actually the SDK, which
 gives you the command line interface.
[00:19:53]
 Basically, we had to create application.
 Remember, you could only create an App Engine application
 if you have your building set up.
 an App Engine application if you have your building set up.
 That means you have to have your credit card in there. Make sure it's valid.
[00:20:20]
 And it's up and running and it stays valid for at least a week or a month.
 Because if that credit card that you provide becomes invalid it's possible that Google might suspend your account. Don't worry they won't charge you if you're not doing anything if you're not passing if you're not
 surpassing the free tier allotments. So when you create a new app, you choose a region and you choose a language
 which is node.js. Actually, this is part of that necessary but I just want what I wanted
 you to take home from this is that it has a lot of languages you can choose from
[00:21:07]
 and it has an environment that you can choose from.
 You can use it to standard or flex.
 You should be choosing standard because if you use flex, you might get charged. And then we downloaded the SDK.
 That's the command line interface.
 And then after you've downloaded and installed it,
[00:21:38]
 you should be able to run this code here gcloud-classversion.
 And it will show you the version. If that doesn't work, it will tell you what's wrong.
 Like it might tell you, "Oh, you need to install Python."
 One of the ways you can do that is just type gcloud.
 Just type gcloud without any parameters and it should load up
[00:22:07]
 an installation for Python, or you can go to the Microsoft Store and install whatever version
 of Python you want. Let's see which one do I have here. So I showed the class which one I have.
 So if you go to the Microsoft Store or wherever,
 whatever system,
 however you download
[00:22:43]
 items into your computer.
 For Windows, you can get it from Microsoft Store.
 I have Python 3.12 installed,
 but the latest one is 3.13.
 It works fine with 3.12, so I'm just going to keep it.
[00:23:05]
 And I'll only update it if there's any problems.
 Like there's a saying, don't fix it if it's not broken.
 So that's why they have so many versions of Python here.
 And since it's working fine for me at 3.12, I'll just keep it
 for now instead of upgrading to 3.13.
[00:23:53]
 And then if you already have Python and this command just doesn't work at all, then you can try closing all VS code windows and then try to command or you can sign out and then sign in again, then the
 command should work.
 I also introduced on Thursday persistent login practice. That's how you can
 keep the login status persistent so it stays even when the page is refreshed.
 So if you notice, if you log in to your, if you have a login feature in your capstone,
[00:24:34]
 if you press refresh, you get logged out.
 So this is how you can keep your login. So if you do this,
 you should be able to log into your capstone.
 I mean, like your website that you made,
 you should be able to log into it.
[00:24:56]
 And then if you hit refresh,
 you should still be logged in,
 which is the expected behavior.
 When you have something like that, that's what
 you expect.
[00:25:07]
 You expect to stay locked in.
 And there are also some cases where you would need to, like, if the person changes their
 password, which you have the ability to provide that feature in your website now
 If the person changes their password, you have to do something new
 Or basically update that
[00:25:38]
 We're using local storage to store the login
 storage to store the login. So if you want to apply persistent login practice or persistent login into your capstone, this is what you do here. Just let me know if you're trying this
 and there's something not clear, just let me know if you have any questions or you can
 even post it in July cohort.
 Remember a lot of the practices, they're just like one-liners like this, so it's up to you.
[00:26:17]
 It's a great all the knowledge that you have to figure out
 how to code a specific line.
 how to code a specific line. And if you have any questions, post it in July cohort, or, you know, send your notes to notebook L.M. Because all of these are based on things that I've already taught you.
 And no book L.M. can look at your notes and find the answer that are actually give you an answer.
 The way that I might give you the answer.
[00:27:00]
 Also, this assignment was introduced on Thursday. Convert all state variables into global state variables managed by Redux.
 So in your capstone, for this assignment, all the state variables
 can be converted to Redux state variables.
 And these are the steps here.
 Basically, do it in order, because if you jump from step to step without finishing the previous one,
[00:27:34]
 you might get lost or confused.
 And you might not meet the, you might not meet, like, for this one, create a branch for adding all state variables to state variables not TS.
 So if you jump around and you don't complete this branch and you just move on to the next one, you might not get the point for this.
 Or you might get merge conflicts that you have to deal with.
 Better just to go in order.
[00:28:05]
 It's all systematic.
 If you do it in this order, it should work.
 Everything should work.
 Okay, so now I'm gonna provide a tip here
 or some actually two chips.
[00:28:37]
 Okay, so this one, let's see which one should we store this. This is mostly related to
 AWS Lambda, but it's also related to Webpack. So, but I think I'll put it in AWS Lambda, but it's also related to Webpack.
 But I think I'll put it in AWS Lambda,
 which you could make a copy in your Webpack notes too.
 I guess I'll put it in both.
[00:29:00]
 So minimize zip size.
 So in your Webpack config, you should have an option for a configuration for this.
 This one, if you remember, it zips up your bundle into a file into a zip file.
 And that zip file is something that we can upload to AWS Lambda.
 There's also a line in the
[00:29:44]
 Webpack and JIC package that library option.
 That bundles exported code. Remember, this library option, it
 It allowed us to bundle exported code like our Express app. It exported the handler.
 We needed this library option to export that handler.
 Otherwise, Webpack says, hey, it looks like there's
[00:30:16]
 nobody using this handler, so I'm not
 going to include it in the bundle.
 So we need this library option.
 Let me share my screen.
 First copy this here.
[00:30:36]
 Let me share my screen.
 And I'll illustrate what I'm talking about or explain when I'm talking about here.
 First, I'll put these notes in AWS NEMDA.
 Maybe I'll also get a web pack. open the tab. the library option. I'll put, I'll put highlights here because it's an actual
 option. I'll load up the Webpack and Zig file. This is what I was talking about.
[00:31:48]
 Where is it?
 Oh, it's in the back end.
 I'm going to load that.
 back end there's a library option j and here's also our express app at the bottom. We're exporting in a handler, but none of our code here in the source,
 right here, we have our code here in source, right? None of our code is using this handler.
[00:32:41]
 All we're doing is exporting it it but nothing is importing it.
 So Webpack when it comes and tries to bundle this it says it sees that hey
 nobody is importing handler so I guess nobody is I guess handlers not being
 used so I'm gonna take it It's going to get tree shaken.
 This part will not be included in the bundle by default.
[00:33:12]
 So we added this part here to tell Webpack, hey,
 don't check off those exports.
 Those unused exports, because this was an unused export, right? Nothing was
 importing it inside of this app, inside of our source folder, nothing was
 importing the handler. So we told Webpack hey, don't check off the export because
[00:33:42]
 somebody's gonna use it. So library means here. It's like you're telling your, you're telling Webpack, "Hey,
 you're this app, this Express app, it's going to be used by somebody else."
 So treat it like a Node.js package, like a Node package, node module.
 Because you know, whenever we have a node module, we import something from it, right?
 So we have a node module called Express,
[00:34:15]
 we import something from it.
 We express object.
 object. So we're telling Webpack that our Express app or this file right here is like a library or a node package. We're exporting something to be used by
 somebody else. In this case we want want a WSNam that uses handler.
 So that's what this is for. And this one just says we want to export it the
[00:34:55]
 common JavaScript way, which is like the old, the old way. It's not going to export
 it with this export command. It's going to use it with the old export command.
 That's what climate.js means here. Make it available in the old style.
 That's the most compatible style. That's why we're using that. There's a way, there's a ways to include it using this new export syntax,
 but it's less compatible, it's experimental, so we're not using that.
[00:35:35]
 Now we'll use the common JS way for the old way of exporting.
 Okay, so when we enable that, when we enable this library option, unnecessary files may be included in the zip bundle.
 So if we look at it right here, actually not here in the
 back end, when we enabled this library option, our disk folder got bloated with all these
 other things, right? Index. You might have vendor here. You will have vendor if you build
[00:36:32]
 in development mode, so I can just do that really quick.
 I think it's NPM run build. That's gonna build in development mode.
 Gonna put a whole bunch of vendor files in the disk folder.
 Now let me let it finish building first.
 Little building there. Okay, so it's built. If I stop this and then I look at the Disholder, it should be even more bloated. Yeah, all these
[00:37:18]
 vendor files. So these are coming from the exports because of this.
 Webpack is now bundling those exports.
 Not just in our file, not just in our source folder.
 Because we only have one export, right?
 This handler. Well, anything that's connected, like for
[00:37:48]
 example, we have this express package. Well, this one has exports. We have
 this serverless HCTP, HCTP package. Well, that one probably has some exports.
 We have this dot DMB package.
 Well, that one probably has some exports.
 So, Webpack is including all those exports
[00:38:16]
 in the bundle, which we see here.
 All of these vendor files and index JS files.
 And if we look at the zip file,
 then you just get that folder shown here.
 So I can pop up the contents of the zip file.
[00:38:52]
 See here, the zip file is right here. If you look at it, it includes those vendor files.
 Actually, just those vendor files.
 Or actually it includes whatever
 we're building. I did so that was it included
 vendor files because I did a development
[00:39:19]
 bill. When if I rebuild with production
 it will include these index JS files.
 But the point is that this zip will include a whole bunch of unnecessary code, because we're not using these.
 We don't need these.
 And all of that is getting pushed over to AWS Lambda,
[00:39:45]
 which takes up more space.
 And it takes a little bit longer to load.
 So what we want to do is we want to minimize zip size
 by specifying the files to include.
 And we don't want to include those vendor files.
[00:40:04]
 And we don't want to include those vendor files. We don't want to include those extra index JS files.
 So we'll just tell it, we're going to tell webpack which files to include.
 And the way to do that is we're going to edit the Webpack config and edit that line.
 Let me just put code things here, code highlights.
 This is what we're going to do. Basically, we're just going to add this into the parameters. So going to the Webpack
[00:40:55]
 file here. This is the plugin that zips up the bundle.
 We need to add a option in here.
 But the easiest way to do it is start with a empty object.
 And in this object, we're going to specify what we want to do.
 And the thing that we want to do is include something.
[00:41:27]
 We want to tell it to include which files to zip up.
 And we even see it pop up here.
 So what do we want to include?
 We only want to include the index.js file.
 So this is red X notation, regular expression notation, which means
[00:41:52]
 a file with this exact name included into the zip bundle. This slash here and this slash over here,
 they say they indicate a regular expression.
 It's color red.
 You need to have these slashes indicate
 that everything in between is a regular expression or reg x.
[00:42:22]
 And then this one here, the character and the dollar sign here, when you put things in between it says, make sure it's exactly the string matches the file name matches this exact string.
 So, let me see here. So the plug-in zips the bundle files into one zip file in the disk folder, and then the expression, also known as rank x is looking for an exact file name match. If you don't put this
 here and this dollar sign here, it'll it'll
 match up anything that has index.js in it,
 which means that it will also include these
[00:43:41]
 files here. See, there's index.js. We don't want
 to include those. We just want to have
 the main one. That's the only one that has the handler in it.
 So I'm going to save that. But let's just double check here. How big is this zip file?
 is this zip file. This zip file is 1,68 kilobytes or 1,600 kilobytes will say.
[00:44:16]
 Now I'm going to rebuild this
 with that new option, which is just include that one file and PM run build. It's going to build in production mode.
 Oops, not that one. This is the watch. Let's see what script did I use for production.
 I made a new script here and build production. I can I should deploy also.
 So I can deploy it with a smaller file.
[00:45:13]
 But actually, let me just run the build production first so that you see.
 When I build it in production mode, you'll see how the zip file is affected.
 Just give it a few seconds here. I know, um,
 Gray line, I know if my computer takes long doing this,
 your computer must take even longer.
[00:45:51]
 So make sure you get that ram and solve as soon as possible.
 Same time.
 I think sure around.
 Okay, so it's built now.
 I can take a look at this. Let me take a look at how big this index. I mean this zip file is.
[00:46:11]
 And look at it's 437 kilobytes now. So it went from 1,600 kilobytes to 400 kilobytes.
 100 kilobytes. And if we look at the zip file, all it has is index Js in it. It doesn't have all is just 400 kilobytes, it will load faster.
 When it loads faster, you'll get a response from your server faster. So I'm going to deploy this.
 Actually, I'll just deploy it.
 NPM, I already built it, so all I need to do is run uploads.
[00:47:16]
 NPM, run uploads. So it's just gonna update the backend in AWS Lambda with a smaller file with just the index.js and let's see if it works.
 Does it require all those other files or is index.js sufficient?
 Let's see if I can, if I'm logged into AWS here.
 Let me log in really quick. [BLANK_AUDIO] [wind blowing] Here, hit only show one file. I'll focus on the right one.
 Yeah, and this shows one file.
[00:49:14]
 This shows that index.js file.
 See, the test runs then it's all we need.
 Yeah, it works fine.
 It's green.
 And it only, I guess that's the minimum memory size it means 128 megabytes, but it's less than 1 megabyte for the whole file
[00:49:51]
 Yeah, it works fine. We just have one file so we don't need those other files
 So we cut down the the load from 1.6 megabytes to less than 1 megabyte.
 Then the next tip, this one should be fast.
 Ignore the back end just folder.
 So for getting nor you want to just ignore that this folder because the this folder is
[00:50:31]
 for starting the backend server.
 But because GitHub doesn't start the server, the repository can ignore the disk folder.
 So what we're using GitHub for the backend is just to, you know, so I can see your source code.
 Or grading purposes.
 But you don't actually, if you're not, you know, when you're all done with class and nobody's grading your stuff,
[00:51:02]
 you don't need to store your back end code in GitHub.
 Because GitHub can't run it anyways.
 GitHub can run your front end code,
 but not your back end.
 Or just to make things,
[00:51:24]
 like to make your pushes to get up a little bit faster,
 you don't need to include that this folder. You can ignore it and get ignored.
 And then you can cause GitHub to remove that this folder with this command.
 Because even if you ignore it, it will not be removed from GitHub.
 You have to run that command to remove it from GitHub.
[00:51:55]
 So let's copy it.
 Let's see, where should I save this one?
 Back end.
 Maybe express. I think I'll copy it in different places.
 Because express is the back end.
[00:52:37]
 Maybe you would of them.
 So I'm just going to save it and get them.
 I'll save it in back end and express. Express. Need to fix some things here.
 The this folder, want to add it to get ignore. This is the command to cause GitHub to remove the disk folder,
 and to stop adding it to the commits,
[00:53:39]
 just stop adding the disk folder to the commits.
 And to remove it can get how you need to run this command.
 Otherwise you'll still see it in GitHub.
 I'm just gonna copy this and paste it into
 Express right here.
[00:54:00]
 And AWS.
 That way it's quick and easy.
 Well, I should put a whole sample here.
 Yes.
 This is a code sample for the zip.
[00:54:30]
 Looks good. And then I'm gonna paste this into, okay, I got all three.
 Express, GitHub and AWS.
 Okay, so you can ignore it. Express GitHub and AWS.
 Okay, so you can ignore it, so I'm just gonna add it to ignore.
 I'm in the backend workspace. Remember, you should ignore the disk folder in the backend, but not in the front end.
[00:55:16]
 So this folder right here with all its files, let's see how big that this folder is.
 This folder is 8MB or 8,000 kilobytes.
 So you'll be saving some time when you don't upload
 the this folder to GitHub.
 For the backend only.
[00:55:41]
 Okay, so that's enough for the tips. I'm gonna take a break now and get
 into the second hour.
 And start the timer here.
 Okay, I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break. And now we're going to talk about Google Cloud.
 So at this point, you had at least around two days to install the SDK
[01:06:59]
 or the CLI command line interface.
 So now we can start running it.
 But first let's create a local backend project.
 And these are just general instructions.
 So when you look at it in your notes,
[01:07:19]
 just know that it's not step by step.
 You still have to like,
 try to figure out what I'm, you know,
 all the information contained in these lines.
 Okay, so make sure you copy this. I'm going to share my screen now. All right, go to go step by step here.
[01:08:17]
 This is a command.
 This is a command right here.
 This is a keyword.
 So it should look like this.
 The workspace.
[01:08:51]
 Make a new workspace.
 So we're going to make a different one here.
 Actually, we'll make it inside of the sandbox.
 Back end Google Cloud.
 The reason we don't want to mix it up because we
[01:09:03]
 have the other sandbox backend going to AWS Lambda.
 This one's going to AWS Lambda.
 And it has a, it has a serverless handler at the bottom.
 We don't want to mix things up so that we
 can see the difference between the traditional and AWS NAMD away. So we need
[01:09:35]
 to, we're going to create a folder here and I'm going to call it back in Google Cloud.
 It's not the same for every service.
 Every service that you want to deploy to, the requirements are different.
 So I'm just specifying here that it's for Google Cloud.
 This one up here is for AWS.
[01:10:25]
 You could rename it if you want.
 This one's going to be specific for Google Cloud.
 What we want to do is copy the backend template into that workspace.
 So actually, I should, I'm going to create a new workspace first.
 Actually, not, I don't need to.
[01:10:50]
 I could just look for one of my templates here.
 I have express template.
 In a copy it, I don't need the node modules folder and I don't need the
 dis folder because those can be generated.
 I'll need all the other stuff.
[01:11:07]
 So you should have an express template by now.
 I'm going to copy it into the sandbox, back end Google Cloud, paste it into here.
 And I'm just going to rename this workspace.
 Because it's not express template.
 I'm just going to rename it to back in Google Cloud.
[01:11:37]
 To match the folder.
 Okay.
 All I have to do is click on this and it'll open up this workspace.
 Okay.
 So it looks good. It's ready to go.
[01:12:01]
 I'm going to close some extra stuff here.
 This one's back in.
 We're not going to work on this right now.
 I can close that.
 This is front end.
[01:12:15]
 We're not going to work on that.
 So I'll close that.
 So what I have is my notes page. a one-vscode for notes, and then another one open for back-end Google Cloud.
 So in the terminal type Google Cloud. I'm going to go to the terminal and I'll type gcloud in it.
 And actually, if I go to the group cloud console for AWS, I mean, for App Engine, it'll show me some things.
[01:13:13]
 And box. Okay. Oh, wait, no, it's not going to show it to me because I already, already built it.
 If you, if, if you haven't uploaded a project yet, then it will show you something.
 Let me see.
 Oh, no, I don't have any.
 Okay.
[01:13:42]
 I don't have any.
 Okay. It'll show you the commands to input if you didn't upload to your project yet, or if you didn't deploy your project yet.
 I've already deployed mine.
 I think maybe this double check here.
 Yeah.
[01:14:12]
 I say this. Okay, and you see if I can use it's supposed to have some kind of,
 like, what commands I can input.
 G Cloud in it is one of those commands.
 Like that.
 Okay. So it's going to take, take us through the configuration of Google Cloud.
[01:15:25]
 the configuration of Google Cloud, has some information. Here's my little difference because I've already used this project.
 I'm going to try to start over here.
 And you need to sign in.
 You need to ask you to sign in for the first time.
 Here, you need to sign in and then visit a link.
[01:15:56]
 And then allow the Google Cloud SDK access.
 access. And then after you've given it access, you need to choose your account. So minus one here. And then you choose the project. So that's number three for me. Sometimes if you forget your project name, you can go back here. And you can view the ID. Sometimes they don't match. So sandbox level 4 is also
 that's the name of it and the ID also matches. So there's no problem there.
 Sometimes they vote match. So just double check to make sure. This one should be matching for you.
 So, okay.
[01:17:13]
 So after it's initialized, it should look something like this and it's attached to the
 project that you chose. So I chose the, I chose the sandbox level 4
 project. It's not the exact name because we had to add some characters to it so
 that it'll work and whatever characters you put. Just make sure it's as long
 as you know that it's a sandbox level 4 project.
[01:17:47]
 That's good enough. Then you can type
 Google G Cloud App Deploy.
 If you type that to try to basically you will see that option in your App Engine,
 you'll see it will give you instructions like download the SDK, type G Cloud in it,
 type G Cloud App Deploy. cloud app deploy. So if you follow those instructions, it'll basically not work, but it'll,
[01:18:30]
 wait, I spelled it wrong, I spelled it wrong here.
 Okay, just fixing this typo here. Make sure it's spelled correctly.
 It's G Cloud.
 G Cloud app deploy.
 If you follow the steps, you should get an error because it's incomplete.
[01:19:13]
 You're not fully configured, but at least these errors lead you every step of the way.
 It leads you one step at a time to the right configuration.
 And it's saying that an app YAML file is required.
 So we're going to get into the next slide. What we saw here was an error message that shows that the app YAML file is required.
 And so we're going to talk about that app YAML file. So that's just something that Google Cloud is requiring, not all platforms like AWS,
[01:20:18]
 even Microsoft, not every one of them will require the same thing.
 But Google Cloud requires AppYAML.
 And that AppYAML file tells App Engine, which no JS version
 could run the backend server.
 So remember, in App Engine, we had a choice to pick the language, and that was no JS, but we need to specify that which version do we need.
[01:20:58]
 So, this is show here the options anymore to choose a language.
 But what we can do is specify the version that we need. And I'm just going to highlight some keywords here.
 AppYAML classic keyword.
 Here's app, yeah, and again, which is a keyword.
 And this.
[01:22:32]
 This is some code right here. And that's it. So let's look at it.
 We need app yaml.
 So installed node packages with PMPM.
 So remember I did it install any packages. I just copied the files, but I didn it install any packages.
 I just copied the files, but I didn't install the packages yet.
[01:22:48]
 You don't see node modules here in this backend Google Cloud.
 So I'm just going to install the packages right now.
 PNP and install.
 To go a little bit fast because you should have those packages already somewhere in your computer.
 It's just going to sort of just point to them. We're just using the packages from the central location instead of copying them
[01:23:25]
 to every folder. With PNPM it's just stored in the central location. And we need to
 build the project to generate a bundle in this. We don't have the just folder yet.
 So let's generate one.
 Because that's what we are going to deploy.
 NPM run build. So this one is the watch.
[01:24:07]
 It's going to watch it.
 Click on going to update this.
 What I'm going to do here. I'm gonna update the package JSON script. So when I build, I wanted to just, you know,
 I wanted to like actually build for production. I'm gonna just add a
 I'm going to just add a command here for building production mode. All right, I'm going to add a script here.
[01:24:54]
 And what is the command to build for production?
 That is NPX webpack. Webpack, go to the /mov,
 goes to the production.
 And that's the one I want to run when I do the
 Don't command for the green script here.
[01:25:20]
 So what I'm going to do is going to change this to
 start to.
 So what I'm going to do is going to change this to start to.
 Since I'm in the new workspace, a new project, I'm going to change some things here.
 And for the build script, I want to run that one for production. NPM run build production.
[01:25:58]
 This starts to remember when I wanted to run locally, I could, I have a console message saying run start and
 then run the build command in a second terminal.
 Well, instead of build command, I'm just going to name it start to, because they basically just starting the app together.
 Let's see if I need to update this console message.
 Yeah, so open a new terminal and type npm run start to.
[01:26:43]
 'Cause they're related.
 They basically need to start together.
 So I think this naming convention fits a little bit better,
 even though it is building, even though this command is
 building, it's building because it's related to the start
[01:27:03]
 right there.
 Usually when we build, we want to build for production,
 which is running this command right there.
 So I'm going back to here,
 generate a bundle and this. So let's
[01:27:25]
 I'm going to run that command.
 Build command.
 And back end Google town.
 NCM run build.
 Now it's building for production.
[01:27:43]
 It's going to generate this folder.
 Okay, it's all done. So we have a disk folder with some files in it.
 Now that we have a disk folder, create app.yaml in that disk folder. There's this folder, app.gettle. YAML. That's the extension. And that program or in between runtime and that program.
 I think I'll add that as a concept for here. a
 a
[01:29:19]
 sample put in your DAML file.
 Then in the terminal, run gcloud app deploy. And we're going to deploy from the YAML file that's in this folder.
 There's an extra space here.
 I need to remove that.
 So we're using relative path to make it clear that we're just going from the current holder, here current holder is the
[01:30:09]
 bot, going into the disk holder, then we wanted to use that yaml file inside of this folder. So here's the command.
 And then from here, G Cloud
 has the toy.
 It's going to deploy from this folder, app.yaml.
 Let's see what happens here.
[01:30:47]
 So it's asking, okay, do you want to deploy?
 And it's saying, okay, it looks like your project is a sandbox level for it.
 It's asking, do I want to deploy? The answer is yes.
 Or since this Y is capitalized, like you just press enter and it automatically
 enter this Y. Whatever is capitalized, that's what it automatically
[01:31:10]
 enters into this press enter. So now it's uploading. My back end server to App Engine.
 This disk folder or this disk file has been bundled, named on.js.
 That's the thing that contains the whole server.
 This file right here contains the whole server. This file right here contains the whole server.
 You don't need to send our source because it still needs to be compiled.
[01:31:52]
 It's in TypeScript. TypeScript doesn't run.
 You have to compile it, you have to bundle it into JavaScript.
 That's the thing that runs. Whenever we start our server it's been this
 that we've been running. This main.js file. If you look at our start script,
 start server is running that main.js file. That's the actual file that is running, not our source.
[01:32:26]
 The things here in this source, you don't need to put this into app
 into because it can't run it.
 Only runs this media, that's fine. error. And the error is because this says here is service account does not have access
 to the bucket. And it's okay to have this error because it's just the first time error. If you rerun the code or if you run that command, it'll work because it basically is
 smart enough to provide access to the bucket the second time around.
[01:33:17]
 So I'm just going to type in the same command.
 And just going to press enter to accept this default here. That's why we say here in the notes try again at error.
 You can probably get an error like that bucket error, but it's going to fix itself.
 So you just have to wait for it.
 This part depends on the speed of app engine. deploying your files. Again, we're only deploying this folder. That's my
[01:34:22]
 appyaml is there. If we put Appianual in the root folder,
 they don't try to deploy everything in here,
 which it doesn't mean because it can't even run it anyways.
 Appianual needs to go in the folder that you want to use.
 Technically, you can deploy this root folder.
[01:34:44]
 But if you do it that way, then you have to tell App Engine
 to install those modules and then to build,
 and then to run this folder.
 We want to save it to trouble.
 Let's just go straight to the point,
[01:35:02]
 create the this folder, and tell AppYAML, hey,
 this is what you need to run.
 I mean App Engine is the one,
 we're just telling it, hey,
 we don't need all this other stuff,
[01:35:23]
 just do it from the disk holder
 Okay, so it worked here. We don't see that error. It worked and it also gives us a link
 right here
 This says deployed service
 There's that link right there. I'm gonna copy that and
[01:35:48]
 What did it say here in the notes?
 Says here open the display link.
 I opened the browser as service unavailable.
 So that's expected.
 There are a message that server that service is unavailable.
[01:36:20]
 Okay, so we expected that because it's not fully
 configured. We still need to do something else.
 App Engine requirements. So this is the summary of what App Engine needs.
 It's just a few adjustments, it's not as much as like lambda.
 So we got that. So here's a list app engine requires these to be in the folder that
[01:37:10]
 will be deployed. So that folder for us is the disk folder. And then you put all these in the notes.
 Maybe up with numbers here.
 This one can be a bullet point.
 These can be numbers.
 See how that looks.
[01:38:08]
 Okay, looks good.
 I'm gonna mark some keywords here.
 App Yambal.
 Back in J-Sine. Start. And then we'll start.
 And then we'll start. and there's another number here.
[01:38:52]
 Okay.
 So this is, we're going to walk through this, but this is just a summary of what we need.
 We need that app gamble file for specifying the node.js version to use.
 And this should be in the disk folder for the folder to redeploy.
 We need the package JSON file to be in there for installing dependencies,
[01:39:16]
 even if there are none.
 If we don't.
 We have that disk folder.
 Accident, actually, don't have any dependencies.
 We don't have any RAP and RAT here without the modulus forward.
[01:39:32]
 We still need package.json in there.
 Now, we need a start script in package.json for starting the back end server.
 And the back end server must And the back end server was
 listen on the port environment variable from App Engine. We can't be just
 listening on any port that we want. So I'll walk you through this in the next So let's copy this down how to configure the back end server for App Engine. Copy the sphere notes and start sharing my screen. Okay, there's ENV or that ENV. [BLANK_AUDIO]
[01:41:07]
 We change this on this.
 [BLANK_AUDIO]
 And gosh, it change the screen.
 Couple of letters.
 There's nothing here.
[01:41:38]
 There's index Ts file. file there's a set the listener in case the listener is a keyword here
 here's how we access the environment variable
 any is a type there where it is hack is got JSON dependencies and then dependencies. I'm going to put these together as a longer input.
 Put them together here.
 And here's the start script.
[01:42:39]
 Okay.
 A lot of keywords there.
 I'm going to go through it one at a time.
 So add.env to get ignore.
 Because we're going to add a.env file and you might not have it here.
[01:42:59]
 So there it is.
 And get ignore.
 And then I'm going to add a.env file for environment variables.
 Then.env in that file add your preferred port. And then install that VND. install.ini. Okay, now it's installed.
 Next type of configure.env and then continue it. And set the listener port to process env.port.
[01:44:38]
 Okay, so this listener right here actually that
 This listener is listening on this port right here, which is this variable right here so instead of putting eight thousand
 I'm just going to put the process that in the
 port it needs to be all caps because that's what
 App Engine is looking for. It's looking for all caps.
[01:45:09]
 Port. So we see here a TypeScript error.
 Number. So it expects a number here.
 So it expects a number here. And it's going to get a string.
 It's going to get a string from here.
 It's going to get a, because all your environment variables are strings.
[01:45:35]
 Even if there's a number, it's going to be converted into a string.
 But this one can handle it.
 So I'm just going to cast it to any to get rid of that
 TypeScript indication. So that's what this one is about. Use TypeAny to remove TypeScript there.
 Next, copy package that JSON to the disk folder. So there's this package.json file here.
[01:46:32]
 I'm just going to copy this, paste it into the disk folder.
 Then Fd out the tendencies and Fd the tendencies. So I'll do it one at a time.
 I'm going to end up, empty out the dependencies here. So it just looks like an empty object. And I'm going to empty out the dependencies.
 because App Engine requires this package.json file to be deployed and they will also try to install the dependencies, dependencies and web dependencies. But we don't need these,
 because everything is all contained in main.js. So that's why we empty these out. empty out npm scripts
[01:48:07]
 empty the map
 you don't need these
 actually all of these, you don't need all of these
 empty the map so scripts also looks like an empty object.
 Next, add the start script.
[01:48:40]
 Is it X-ray-space there?
 I'm going gonna fix that.
 We're gonna add a start script here.
 So if you are inside of this
 this folder, because App Engine will only
[01:49:04]
 basically this folder will look like the
 root folder for App Engine. The command to run a JavaScript file is that's you need to use that command and then specify the Java's group file
 that's main.js.
 So why does this work? So I'm I'm gonna go change the
 directories into the disk folder. This is basically what app agencies only sees these files.
[01:49:47]
 This is all that app engines going to get.
 If you want to run a main.js file,
 you would type the node command and main.js.
 And then it says listening on local host 8000.
 Open a new terminal and time.
[01:50:16]
 So this is it worked.
 It works.
 That's the command that App Engine should use to run our server. So App Engine is going to run the script right here.
 So when App Engine receives these files,
 it's going to run npm start.
[01:50:38]
 And it's going to do the same exacting, which I did right there.
 That's how App Engine starts your server. It's just
 basically entering the command for you.
 Okay, but still not complete.
 One more thing we need to do.
[01:51:12]
 We need to deploy it. And this will basically do it for us.
 Let me copy this. These are just basically finishing things up.
 Deploying to Google Cloud happened.
 So in the terminal, we're going to type in this command.
 After we remove these spaces, the floor script.
[01:52:30]
 Okay, so that's good.
 All right.
 So we're going to run that Google Cloudi command. I should be a G Cloud.
 App deploy.
 But we need to deploy the disk folder.
[01:52:56]
 App dot. Yeah, well, if you don't do that, it's not going to deploy.
 You want to see what happens if you put that.
 Maybe I will find it, maybe I will put that.
 Okay, so it's still found it.
 Hopefully, hopefully it won't work properly.
[01:53:19]
 Actually, I don't want to try grading it, so I'm just going to put that command.
 Just app.yallow.
 Oh, I'm in the disk folder.
 That's why. If I try to do G Cloud app.deploy,
 and there's no app YAML file in this current folder,
[01:53:54]
 then it will happen here.
 So I need to give it the location of that file.
 It runs and it's the same project. So I'm going to press enter and let it upload, let it update. The next thing that we're going to do, we're going to open the displayed link in the browser.
 The link is this one up here.
 But it's still loading, so we'll wait. But we should also do is save the command in npm script.
[01:54:46]
 Like how to deploy it. So we should save this command on how to deploy it.
 This one's going to go into the original package JSON file.
 So in the root folder you have a package JSON file.
 With all your scripts.
 You can have a deploy script now.
[01:55:15]
 What will that look like?
 It's basically it's going to run that Google Cloud command. G Cloud, App Deploy, then you specify the folder, and the App YAM will file.
 So if you wanted to deploy, you just run the script.
 And what else? What else should we do?
 Add an NPM script to open a browser tab with the live app engine server link.
[01:55:55]
 So I have one here that's called open tab with local host.
 I want to have one which opens a live link. So I'll call it open live.
 It's going to have that it's going to do NPX open CLI and there's a live link right there.
 You should put your own night blink.
 Let's see if this is finished.
[01:56:33]
 Okay, so this is finished.
 Let's see if I try opening this live blink again. I'm loading.
 Oh, I forgot to build. I didn't build my new changes.
 I forgot to add that step here.
 NPM
[01:57:14]
 Run build.
 And now I can deploy. NPM run deploy.
 Because the changes I made was to get the port and dot E and B.
 I added that so I had to rebuild the bundle to include these changes.
 Now it's uploading. Good way to, now I can test if my command runs.
[01:58:07]
 My endpad and script one for the point-in-life window.
 And you just make sure. Open live so that's going to open the live server.
 The one that's live on the cloud.
 Not live locally.
 Okay so I'm going to give it a try and PM run open live.
[01:58:45]
 It should open a browser tab with this live site.
 Okay, there it works.
 This is what's supposed to happen when
 when the root of my server is loaded up, it shows this.
 Obviously, I can change it now.
[01:59:10]
 I'm going to change Express template to Google Cloud.
 So let's, let me just change that really quick.
 That's in the root.
 It's, it's showing Express, but I can just change it really
 click to Google Cloud. We build it and then run Build. And then deploy it. I'll close this.
[01:59:47]
 I just need to wait for it to upload the files and update.
 As soon as it's finished, I can open up a new live window or live browser tab.
 And that should finish it. So what we expect is that it's going to say Google Cloud
 instead of Express template.
 I'm going to be updating this note here to remind us to build. We have the project and then we need to to include code updates. So it should be done.
[02:01:16]
 It's done uploading.
 So if I put in PM run, open live, it should open up a browser tab with a new site and it says Google Cloud.
 So I have a server up running in App Engine.
 This is just the route.
 The route path.
[02:01:40]
 I have one for API.
 I have one for API.
 And basically just just basically just repeats what the query is. So if I put a query here, like message equals hello world.
 It repeats it right there.
 That's what it means.
[02:02:06]
 Okay, so that should be, that's it for deploying to move cloud.
 There's a few other things I need to go over, but that's the basics.
 We're going to go into a break now. Then you start the timer for that.
 I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break. And now for this third hour, you have time to work on any assignments.
 The latest one is capstone Redux.
[02:13:13]
 Convert all state variables into global variables managed by Redux. I'm going to start the breakout rooms for let me see here 30 One room as usual for collaboration.
 Another one for silence.
 Then many evaluations.
 I think Alexandra wanted to do hers today.
 [ Writing on Board ] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Let me conclude the class and then I'll finish up your mini evaluation. So we're back from the brick our rooms.
[02:51:31]
 In conclusion, we learned how to configure
 the backend server for Google Cloud App Engine.
 So we just had to make a few changes here and there,
 not as much as, you know, for AWS Lambda.
 And then we were able to deploy that back-end server to Google Cloud App Engine.
[02:51:58]
 So you have two minutes to take attendance if you haven't taken attendance yet.
 And on over to your code X account and mark your attendance.
 Other than that, classes dismissed.
 Chris, do you have a question?
 Yeah, I'm just setting up this, this App Engine thing.
[02:52:19]
 And when I, when I did the Google app deploy after at,
 creating the app
 the AML file, it's asking me about automatic scaling.
 Did you get that too?
 No.
[02:52:35]
 Is that an error or?
 No, it's an option.
 It was like it's saying that as of March 2025, there's some automatic scaling maximum instances default and it's asking if I want to continue after showing me what services it's going to deploy.
 Okay, so it's just under that.
 Okay, so I just wanted you to confirm something then, right? Is that what you're saying? Yeah.
[02:53:04]
 So what
 I, is it like this then? Is it like this services to deploy? Yeah. Let me see here.
 I think you have anything about scaling elements is probably whatever you set there.
 Write it up, you know, the top part at scaling elements. I think that you know the top part at scaling elements.
 I think that's what is addressing above your services to deploy.
[02:53:31]
 Services to open up here.
 This one this morning.
 Yeah that there. Yeah.
 But then it's asking if I want to continue after services to.
 Yeah this part right here.
[02:53:43]
 Oh yeah.
 Yeah. Yeah. You just picked. here. Oh, yeah, yeah.
 Yeah, you just picked.
 Yes.
 Oh, I'm sorry.
[02:53:48]
 OK.
 Just pick.
 Yeah, you just picked the default.
 That's the only way you can continue.
 Yeah, sorry.
[02:53:56]
 Thanks.
 OK.
 All right.
 So, so yeah, I'm going to open up the breakout room.
 This one's just for 30 minutes, because we use up the 30 minutes already. Remember the many evaluations are going to be limited to 60 minutes.
[02:54:27]
 So we'll do what we can within those 60 minutes. out. It's hot and on over there. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Apr 2, 2025 20-17.txt"

Transcript from Apr 2, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 And this is week four day three. And the theme of this week is AWS.
 Yesterday, we learned how to deploy the backend server to AWS Lambda.
 Today, we'll learn how to automate that process.
 If you remember, we had to manually upload our files,
 our zip file to Lambda, and then test it
 and see if it was running.
[00:00:43]
 But today, we'll figure out a way
 to automatically upload things to Lambda
 without all that pointing and clicking.
 So and today's agenda, first hour,
 we'll take attendance, do announcements, review
 what we learned yesterday.
 Then in the second hour, we'll go through new AWS topics and if there's time, some new express topics.
[00:01:16]
 Then in the third hour, do, we'll do many evaluations.
 And you'll have time to work on any assignments or practices.
 Let me just make sure the sound is going to be sound is clear, right? You can hear me loud and clear. It
 thumbs up. If you do thumbs down if there's an audio problem. Okay so yeah make sure you take your attendance, mark your
 soft as present if you're here right now head on over to your codex account,
 mark yourself as present and now it's time for announcements.
 for announcements. And you get that loaded up for you.
[00:02:24]
 Okay, so regular schedule. I can still do corrections for many evaluation week three.
 So, yeah, I'll call on names for this probably.
 Week two is closed. If you need to increase your grade.
 You need to contact students, success team for that. You need at least 75% on all assignments to pass this level.
 And remember the many evaluation for this week was due on Tuesday before class.
 Assignments, they're still in the process of being graded. You'll receive an extension to submit corrections.
 If your assignment is graded too close or beyond its closed date.
[00:03:24]
 So TypeScript is closed. Everyone should have received a grade for that.
 And I can start doing corrections for this.
 Back end.
 That closes on Thursday corrections for that, but I haven't finished
 grading any all of these yet.
 And the capstone proxy is due this Thursday before class.
 Does anyone have any questions about these assignments?
[00:04:09]
 Anyone have any problems rendering your front end after restructuring? Okay, so I'm just going to assume everyone knows how to do that.
 Practice problems as usual.
 They're here on the side.
 Work on them whenever you get a chance.
 Don't rest.
 Don't rest.
 They'll take a break. Like if you finish your assignment,
[00:04:49]
 keep learning, keep doing the practice problems, make sure you understand them.
 It's just going to get harder. You need to have a strong foundation
 You need to have a strong foundation
 In everything otherwise
 You're gonna, you know finish this class and if you if you don't have a strong foundation like you don't really understand what you're coding and
 All you're doing is you know just copying and pasting what I do and it just
 Changing a few things here and there, but you're not able to code from scratch.
[00:05:25]
 You're going to have problems in the real world because you need to be able to understand code.
 What each line means, the syntax, things like that, because no one's going to hold your hand and say, "This is how you solve the problem."
 They're going to ask you how do you do this,
 they're going to ask you, hey, can you do this for me, can you program this for me and then
 you're supposed to say yeah, sure, you can't just go, you can't say yeah, sure and then you go to
 your coworker and say, oh, how did I do this? No, you need to, you need to know how to at least,
 No, you need to, you need to know how to at least, you have to at least understand what I'm teaching you and know how to code it from scratch.
[00:06:17]
 The problem, the practice problems are there.
 You can even, you can even like just start over and just repeat the practice problem.
 That will help you.
 But remember, practice problems will be part of many evaluations.
 So I'll ask you to walk through.
 Walk me through the solutions for the practice problems.
 Okay, so help seeker, let's see,
[00:06:56]
 see if there's anything new there.
 Or anything new until I cohort cohort yes there is.
 Let me see here.
 How to write the test.
 Activate on click.
 Yeah, so saying, you're asking AI for help and it's talking about mock functions.
 Those are not necessary for the practice assignment with activate on click. So let's see.
[00:08:18]
 What is yours?
 So Alexander, what's your specific question?
 Okay, so you posted something just now.
 Your tests.
 Yeah, I moved on to other stuff after that because I have to catch up after not being able to hear for three days.
 Okay.
 Yeah, so yeah, the problem, I walked through it the other day, how to create the object for this, how to create the object.
[00:08:56]
 You did.
 I know it disappeared.
 I don't know where they are.
 And I can't remember without writing things down.
 So it has no failing.
 Yeah, it's not the object is not correct.
 And.
[00:09:15]
 And okay, so.
 The first test is fine.
 That's the easy one is the.
 The other two tests are the ones that are two or three two are fair
 Okay
 Let me define expect result
 Okay Okay, so they hit here.
[00:09:47]
 Let me see if it's in the, if it's in, if I had a chance to post it in there.
 There's reference.
 Probably, if there was no specific slide on it, I might not have posted it here in the
 reference.
 I think I might have just answered the question in a review session.
 I didn't see it in any of the references. Yeah, it's not in here. So,
 I think I just answered it in the like as someone's question. You definitely answered it in my
[00:10:38]
 evaluation, but we didn't I don't think we recorded that. No, that's not recorded. But I did talk about it in class, so let me just talk about it here again.
 Let's see, kind of load the sandbox. I just find it first.
 Okay, so here's the sandbox.
 I don't think I took a note specifically on it.
 But I think I did put it in like a temp.
 I put it in a temp.
 Nope, that's not it.
[00:11:44]
 Well, I have a temp file here in the sandbox.
 And I'll also pull up,, that was TDD practice.
 A right test for a function called ActivateOnClick, which accepts an object.
 So you're going to basically you're going to have a function.
 Well, you have to start with a test.
 So let me just start with a test here.
 10.test.ts
[00:13:00]
 So temp is for my temporary code that I'll just erase later on. So if you're going to write a test, you start with describe.
 And we're describing test for activate on click.
 That's the function.
 I'm just going to use an arrow.
 I'm just going to use an arrow, an arrow function here to contain my tests. So what is it supposed to do?
 It is supposed to return the result of activating the on onclick method in the object.
 So let's just say it returns something.
[00:14:02]
 It returns, I know it's going to supposed to return something. It returns, I know it's going to supposed to return something. I'm
 going to put an arrow function here. That's going to be an easy test. So what
 are my variables here? Return something when given an object.
 Actually that's not going to accept an object with an onClick method.
 Okay.
 Returns the result of activating the onClick method in the object.
 So I'm supposed to have some kind of object. And you know why there's a error here?
[00:15:28]
 Object is declared, but it's no here.
 This is the main one.
 Onst declarations must be initialized.
 ID fix this error.
 You initialize it.
 You give it a value.
 That's how you initialize something. You give it a value. That's how you initialize something.
[00:15:45]
 You give it a value.
 If you use "let" here, then there won't be an error.
 There's no error here if you use "let".
 Why is there no error? Because you can change the value of this later on.
 But if you do cost,
 why is there an error? Because you can't change the value later on.
 So that's why it's saying you need to initialize the value.
[00:16:29]
 So give it some kind of value. That's how you get rid of that error when you're using const.
 If you don't want to give it a value at the beginning,
 then use let.
 And then give it a value later on.
 Like this.
 But in this case, I know this has to be some kind of object.
 So how do I, so we can work on this object.
[00:17:08]
 So it returns something when given an object with an on-click method.
 Does this object right here have an on-click method right now?
 Managers, no, it's an empty object. So how do I give it an on-click method? If it had an
 on-click method, it would look like this object dot on-click and then it's a method.
 So some kind of function. So this, if this object had a on-click method,
 I should be able to call it like that, right?
 'Cause this is a method, this is a function
[00:17:53]
 attached to an object and to activate a function
 you need to use parentheses.
 So notice there's dot notation.
 Whenever you use dot notation, that means you're accessing a property in the object.
 So in this case, the property is called onclick.
 And what is it? It's a method. It's some kind of function. So I could put your function
 and just start, I'll put an anonymous function for now. And what does it do? It'll, it'll, it'll, it'll, uh, let's see, we're, I'm trying to figure
[00:18:57]
 out the, the best need to have it, you need to have
 some kind of function in here, some kind of function.
 And there's supposed to get some kind of result from activating this function.
 How do you activate it with parentheses?
 What it's supposed to take in an object.
 So you're going to put in that object.
 And then you need to assert or declare that you expect the result to be defined. You expect it to be defined, right? You expect something, return something when given an object with an on-click method.
[00:20:29]
 Okay, so this gives you an object. So this should get you started and then you should be able to figure out the rest from here.
 So there's an object with an on-click method, see a JELO.
 It's a it's JELO because it's a function and there's the
 Function this is a definition of that function. It's the same thing as
 writing function on click
 But instead of doing it like that
 I just made it like a I
[00:21:06]
 Check this name over here basically. I just made it like a, I took this name over here. Basically, I just took this name, put it on this side, made it equal that, and I can just declare it like that.
 See, it's still yellow.
 That's what's going on here. This is basically, this is the variable,
 and then it's storing a function.
 This is the variable, it's storing a function.
 When you do it the traditional way, like this, it's still like a variable. This is the variable that contains the
 function code. So even though it's a function name, it's also like a variable
[00:21:55]
 that contains all this code.
 So that's why you're also given able to give it as a callback.
 Like I can have a function called my function and then I can just give it the
 odd click function and then so it's acting like a variable.
 I'm not activating it here.
 Right. I'm not activating it here. Right, I'm not activating it. So like a callback
 function, I'll just rename this. So it just makes more sense. There, it's a callback function.
[00:22:34]
 So my function here, then run the callback anytime.
 Anytime that it wants, how would it do it? So if I'm going to create my function and it
 receives a call back, I can console log hello world and then I can activate that callback like that.
 This case, it's the same name, but it doesn't have to be the same name. It can be my callback.
 And I'm going to pass my callback into here.
 And I'm going to pass my callback into here.
 Right, it's a function. I'm giving this function another function.
[00:23:34]
 That function comes into here, but now it's called callback
 instead of my callback.
 It just comes in through here.
 It gets renamed to callback. And then I activate that function It just comes in through here. It gets renamed to callback.
 And then I activate that function that just came in.
 You're gonna do something similar with this function.
 It's gonna,
[00:24:02]
 it's gonna look, whoops.
 It's going to look-- Oops.
 Function activate on click.
 It receives some kind of object.
 And then you're supposed to do something with this object.
 You could assert the data type here.
 What does this object supposed to look like?
[00:24:27]
 It's supposed to look like an object with a on-click property,
 and that's supposed to be a function.
 If an object comes in and it has a method, then you can activate that method. Like this.
 If that object comes in, it has a method.
 And you're saying it's an object that has an onclick property.
 And you know it's supposed to be a function that
 means you can activate it.
[00:25:16]
 So read the instructions here.
 So this activate onclick function.
 It's supposed to return something.
 What is supposed to return?
 Returns the result.
 So it's supposed to return something, right?
 What is it supposed to return?
[00:25:37]
 It returns the result of activating the onclick method
 in the object. So here's the onclick method in the object.
 So here's the onclick method in the object.
 And you capture the result of activating the onclick method
 of the object.
 If the onclick method returns something,
 you need to be able to capture the result.
[00:26:07]
 If the onclick method returns something, you need to be able to capture the result. It's just based, that's fundamental.
 If you have a, if I have a function here,
 get message.
 And it returns hello world.
 How do I capture the return value of get message?
 So if I activate get message here, how do I capture the return value of that?
 I do it here.
[00:26:42]
 You capture the return value on the left side of the equal sign.
 It basically, when it returns something, think of it, it throws that value over here
 and this variable catches it.
 If there's no variable there to catch it, then it just disappears.
 You don't get, nobody gets the message.
 You need something there on the left side to catch it.
 If there's, there's nothing there, it throws it and then it just goes off of the screen.
[00:27:23]
 Nothing catches it.
 Okay, so this should give you clues on how to solve that. It throws it and then it just goes off of the screen. Nothing catches it.
 Okay, so this should give you clues on how to solve that. You have to form your object properly.
 The object should have an on-click method.
 Then you activate that arm click method.
 Okay.
 So that's enough of that. Let's look at the rest of the announcements.
[00:28:11]
 So I see you guys are, do you guys are, where did it go?
 So I hope you are understanding the code because I, it's so easy to give the answer.
 If you give the answer, then the person never learns.
 So, hopefully you can, if you're given the answer, I hope you understand the answer.
 Otherwise, you're going to be looking for a job and then you're going to realize you
 don't know how to program because all this time people have been giving you the answers.
 So make sure you understand what you're coding. Okay, so let's see here.
[00:29:12]
 Okay, make sure, so I guess one of the things here is I'm making the references based on,
 like I'm typing these references based on the topics that
 were discussed in the slides, but if I get off the topic and start talking about
 it, it's probably not going to be here in the reference section, but you might
 see it in the notes somewhere in the class notes. So if I go and look for it.
 In the classroom recording section.
 And it might have been sometime last week.
[00:30:04]
 So I'll just basically look at the notes. And it might have been sometime last week.
 So I'll just basically look at the notes,
 do a search for activate on click, maybe.
 Okay, so it's not in that one.
 I'll check this one here.
 I'm just basically looking for the word activate.
 Hope it's not there either.
[00:30:23]
 I'm just going to go in reverse order here.
 It may or may not be in any of these, but that'll give me the best chance of finding it.
 Still not appearing here.
 Going 10 days back.
 Keep going, keep going.
 Hopefully it's somewhere in here. So that's not just read it carefully here, activate on click should return the result of activating
 the on click method in the object.
[00:31:52]
 So break it down.
 So here's one thing, activate the on click method in the object.
 Okay, that's one thing.
 Get there's a result, get the result of activating wrong click method.
 So that's another breakdown.
 Here's another one, return that result.
 So, yeah, so now it's time for review.
[00:32:33]
 And before I go into the review, just remember, you might go into a job in the future
 and they're going to say, "Hey, I need a function like this.
 And they're going to write it down for you.
 And it's going to be like that description there.
 You need to be able to break it down.
 So it's going to be like this TDD description.
 It's going to be like that.
[00:33:03]
 Maybe all you'll get is a sentence, and then you need to figure out the rest from there.
 The boss doesn't know how to program.
 He knows how to, well, let's just say he doesn't do the programming.
 He doesn't designing, and then he'll delegate it.
 So if you're going to end up being a programmer,
 you might be the one writing the test,
 or you might be the one implementing the test,
[00:33:39]
 like writing this one here code the function according
 to the test specifications. That's implementing implementing the test or you might be doing
 both. But all you might get is like a sentence like this and then you got
 it you have to go from there.
 You could ask clarifying questions and you should ask clarifying questions otherwise if you don't understand the question and then you just start coding.
 And you write pages and pages of code.
 And then you find that later on. Oh, I misunderstood the question and you just wrote pages and pages of code.
[00:34:24]
 And then you have to trash that because you misunderstood the question.
 So you should be asking clarifying questions if you don't understand something.
 Okay.
 All right.
 So now going into the review, we had to convert our Express app into a serverless
 app.
 And the way we did that was we installed serverless HTTP.
[00:35:10]
 And then we used it to convert our Express app.
 This was error message that we saw when we tested it in AWS, Lambda, task timed out after three seconds.
 That's because AWS Lambda expects a response.
 But when we had the handler, it was just a empty function.
 And then I told you, okay, so we're going to give AWS Lambda what it expects, which is a serverless app.
 we're going to give AWS and the wood it expects, which is a serverless app. So if you look at the notes, we're going to open it in a different page.
 Okay, so this is your app, your Express app. I think that's too small.
[00:36:23]
 There's your Express app.
 It's not compatible with AWS Lamb, the way it is.
 The way you make it compatible is with the serverless HTTP package.
 We just do a default import right there. This is actually a function.
 There's that function. We're using it.
 We're using parentheses to activate it.
 And we're giving it the parameter that it needs.
[00:36:58]
 The parameter that it needs is the Express app.
 When you give it the Express app,
 it returns something. How do you
 capture that return value? It throws it over here and this variable over here
 catches it. So what kind of return value did it give it? It's a book type, with data type. You can see it here. It's yellow.
 It returns a function.
 You have to use all the clues around you. Like colors, the colors are helpful, right?
[00:37:36]
 You can see this is yellow.
 You can see this is yellow.
 So these are functions.
 But you might have different colors
 depending on how you set up VS code.
 But foundational, if something returns a value, you capture it on the left side of the
 equal sign.
[00:37:57]
 If you want to capture it in a variable. On the left side of the equal sign, you can assert the type like this.
 It's a function.
 But you don't put values here.
 You don't put any values here.
 But when I do this, it's not yellow anymore.
 So at least this tells me
 it's a function, but I mean, I can see here it's color yellow, which is the color of functions.
[00:38:47]
 Okay, so that's what we did. After we converted it into a serverless app, we rebuilt it, zipped it up, uploaded to AWS Lambda, tested it, and reviewed the logs logs and it worked. The test output was green because we gave
 AWS land the way it needed. Basically you just needed a serverless app or handler. We saw that it was green and we looked at the details.
 Oh wait, I think. Yeah, I had to add some things we're missing in this slide.
 Let me get the notes.
 Okay, so
 we had we had to come up with a way to access that
 That AWS lambda
[00:40:36]
 Function or our backend server. We have to we have to have a URL to access that back in server
 And to do that we had to go to the configuration tab. And basically create a function URL. And then when we did that,
 what these specifications right here, like off type is none, we were able to get a function URL.
 to get a function URL.
 So let me load it up really quick, how that looks.
 We'll be in first. [ Pause ] Okay, so lambda.
 After we went to the, uh,
[00:42:10]
 right, we'll go to the sandbox level four.
 Right here.
 After we went to the configuration tab and set up a function URL.
 We're able to see the URL right here and we can visit it
 and at this URL right here and this is the root path. Looks like that. But we are also able to
 visit the other paths that we made it, like the ENB path. Right, I just typed it in and it gives the response right there.
 And when we did that, the MD path, it was empty because we didn't set up any
[00:43:19]
 environment variables.
 So I showed you that you could set up environment variables that environment variables in AWS are separate from the environment variables in your local computer. So to set up the environment variables, you had to go to configuration, environment variables, and then
 you could edit it, but we made mode equal production. If anything changes here, like mode equal to hello world and then save it that's what we're
 going to see because all this path does this ENV path all it does is tell us
 what the value of the mode environment variable is. So if I refresh this, it shows us that the mode environment variable,
 the value is hello world. That's all we programmed this path to do.
 Just going to change this back to production.
[00:44:50]
 There it is. It's back to production.
 And then we disabled the express listener because we don't need it to listen.
 As I said, AWS Lambda should do the listening while you're expressed app just does the handling.
 So we provided the express app provided the handlers.
 The Lambda, AWS Lamb lambda function does the listening, or AW, as lambda does the listening,
 and your function or sandbox level for is your function.
 And it just doesn't know that this function includes all this code right here and all this code right here contains your handlers.
[00:45:56]
 So it's basically one function that contains all your handlers.
 Oops, I didn't show my screen here.
 So AWS does the list AWS lambda does the listing.
 You have a function called sandbox level 4.
 The code for that function is right here.
 And that function is actually many functions in one,
 because it's all your handlers.
[00:46:34]
 And also express.
 It's a lot of things.
 So if we test it, we don't see anything that says it's listening. If I change it to production, if I change the environment variable to production,
 if I change it to development,
 I should expect to see the listener there.
 I should expect to see the listener there.
 If I test it and I check and test it and then I look at the details here,
[00:47:55]
 I shouldn't see the listener and I see it right here.
 Why is that? It's because we coded it that way. If it's running locally, then we want the app
 to listen. So if it's running here locally on my machine, then we want the app to listen.
 But if it's not running locally, then it's not gonna run this code.
 So what is this mean is running locally. So we know that it's running locally
 when mode is development.
 So I just basically checked it to think that
[00:48:40]
 it's running locally.
 But I'm gonna put it back to the correct value.
 What will be production?
 And then if I test that again, we should not see the listener anymore because the
 listener only activates when mode is development. But here you see that
 mode is production. This one comes from this right here.
 On so log.
[00:49:39]
 So I'll make it even more clear. The mode is this right here.
 The mode is that.
 And I'm just going to put another parameter here.
 Is running locally is that going to rebuild it?
 And I'm just going to manually rebuild it.
 Webpack mode equal production.
 So it's going to rebuild it into a smaller package if I put mode equals production because it doesn't have the
[00:50:48]
 booger and things like that anymore. It just takes longer to build slightly longer.
 I've rebuilt the app. I haven't tested it, but I'm pretty sure it will work all I did was a console
 log. And then I need to go in here, zip up the files here. Actually, all it needs is index
 JS. This map is for debugging, but I just able to be debugging. So I'll, I need this, this actually just index j s.
 Just go with the name there, upload it. There's the next zip.
 It went from 800 kilobytes to 300 kilobytes.
 When we were building in development mode, it was 800 kilobytes, but now that it's all
[00:52:18]
 I did was include the index.js file.
 It's just 300 kilobytes.
 If I test it, we'll see that it runs.
 And we see here the mode is production is running locally. It's false.
 production is running locally as false.
 And I can, you know, I can edit this mode.
 Remember, I can just edit the, uh, uh,
[00:52:54]
 environment variables. Okay.
 Then I introduced this.
 So I hope you guys had a chance to at least make a lambda user.
 We'll take a break.
 If you haven't done this yet, make sure you do that.
 But I'm going to put on the brake screen though.
 Let me just make sure it's time for a brake. Yeah.
[00:53:35]
 This was this was also a practice that was talked about yesterday. So you can copy it now if you don't already have a copy and now I'm
 gonna just set up the break and then it break and switch over.
 Thanks, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] We're waiting for the break. And now we're going to talk about the AWS topic, how to automate the deployment, the
 AWS lambda. AWS Lambda.
 Okay, so first thing we want to automate is zipping the file. What if we don't have to zip it manually anymore?
 Well, we can get Webpack to do that for us.
 These are the steps to do it.
[01:05:29]
 to do that for us.
 AWS notes. So I have a VS code here for a sandbox.
 I'm just using sandbox for my notes and then I have a VS code here for Sandbox. I'm just using Sandbox for my notes, and then I have another VS code for backend.
 But, yeah, Sandbox is for my notes.
 Okay, so we need to install a package called zipwebpack plugin. We need to import it into Webpack.
 And then we need to add something to plug in there.
 So the notes looks like this.
[01:06:53]
 So we need to install zip webpack plug-in. So this is, is this going to be a dependency or a dev dependency?
 So supposed to be a dev dependency because webpack is going to use it and Webpack is outside
 of our app.
 Because we're configuring Webpack to do something for us.
 So I'm going to actually, that's going to go in the back end.
 So I'm going to close this part so I don't get confused.
 That's just for my notes, but the back end is where I'm gonna install that.
[01:07:34]
 Again, it's called ZIP, Webpack plugin.
 PNPM install.
 Gonna save it in the dev dependencies.
 It's called zip webpack plugin.
 Okay, that's done. I can see I should be able to see it here in dev dependencies. Under dev
 dependencies right here. That's all I need for that. Next step in the Webpack config file, you need to import it.
 This is a default import. Again, with default imports, you can name it anything you want.
[01:08:37]
 You can go like this.
 And what is that called?
 The package called is webpack plugin.
 And there's the three dots.
 I didn't put it here in the notes. So I didn't put it here in the notes
 what to do about those three dots,
 but you should know by now how to get rid of those three dots.
[01:09:11]
 The NPM install saved dev. Basically just put
 app types and then the package name.
 The disappear soon. Okay, there they three dots are gone.
 This is actually not a good name for it. I just wanted to, you know, make a point that default imports. You can name it whatever you want.
 But you'll find out a good name for it when we use it.
 I'll even put in here.
 I'll even put in here. Install
[01:10:10]
 at types
 zip
 webpack plug-ins.
 So this is the webpack file.
 Just going to go to the bottom here.
 Plug-ins.
 So there's a property called Plug-ins.
[01:10:44]
 It has an S. Well, we even see a pop up here.
 So if it has an S, we can safely assume that it's in some kind of array.
 Right. An array is like a list of stuff. Well, this is going to be a list of plugins.
 This package is called zipWemPack plugin.
 It's basically something that you add to Webpack
 to give it more features.
 Because Webpack doesn't have the ability to zip up our files.
[01:11:21]
 So we install this plugin to give it that ability. To use a plugin,
 we just put new and the name of the plugin.
 And that's a class because we're using the word new.
 You also see it's color green and to activate the class,
 you need to add parentheses.
 So it's gonna construct an object from this class.
 Obviously it's not a good name, right?
[01:11:54]
 Classes usually have a uppercase letter.
 So I'm gonna rename this.
 Something that makes more sense. I'm going to rename it to zip like that.
 You can call it whatever you can call it zip up the one, but no files. But it makes sense. I can just comment here.
 The plugin
 zips up the bundle files
 into or zips the bundle files into one file into one zip file.
[01:12:53]
 And that should be it.
 So I'm going to delete this.
 I'll delete the disk folder.
 Just to see what happens.
 And make sure nothing here remains.
 I'm going to delete that this folder.
 It's OK because I never even made that.
[01:13:20]
 It's always webpack that's making that.
 Now I can build, I'm going to build it in
 production mode, NPX, webpack, mode, equal production, or maybe you have a script that does that.
 maybe you have a script that does that. My script is called "Deploy" but it's incomplete because it's not really deploying.
 See my script here.
 Oh actually I don't have a "Deploy" script which I'm going to start doing here but not right now.
 Let's look, let's look here. There's the disk folder, there's the files and
[01:14:14]
 then there's the zip.
 Okay so I'm actually what I'm going to do.
 I'm going to make a change here.
 I'm going to make a change to my index file.
 No, not my root handler because it's not expressed template anymore. This is my sandbox level 4. So if I work properly, I'm zip file to have any changes that I made here. Okay, so let me just try it out by uploading it.
 Again, this zip file, I didn't make it Webpack made it for me. There's a combination of all the files, so it's not, it also, it also includes the map
 file.
[01:15:59]
 It's in there.
 There's a map file, there's the text file.
 It funded all those together. It's in there. There's a map file. There's a text file.
 It funded all those together.
 But before, we just saw that we're good with just the index J
 s file.
 So I'm going to test this.
[01:16:21]
 I test it.
 It's green. That means it's good.
 I'm going to look at the output here and I see here a sandbox level 4.
 I used to say express template, but I made a change. Now it says sandbox level 4.
 And I didn't zip up the file myself.
 So we had a question.
 No, that's, that's it.
[01:16:54]
 Chris, just had the only thing we added to the web pack, which was the new plug-in.
 Okay.
 So we got it, we got it zipping automatically. And it runs just fine.
 Now the next thing, what do we want to do next?
 We want to get it to upload.
 Because we still had to manually upload it.
 So let's see.
[01:17:32]
 Well, to upload it, we need to download a WSCLI.
 That's terminal commands.
 CLI stands for command line interface.
 So that's basically terminal commands.
 The text file, I'm not sure about how to remove that.
 I haven't looked into it.
 I just went with it because
[01:18:05]
 I'm sure if I want to eliminate that text file,
 I'm going to make my Webpack
 Continue.
 I'm just going to leave it alone.
 So terminal commands can be used to log
 into AWS and make changes.
 So we need AWS CLI to make changes for AWS,
[01:18:36]
 because if we can type in commands,
 then we can automate it because we've been using scripts to automate things for us.
 So if we have the ability to control AWS with commands, then we are getting closer to what we need to do,
 which is automatically deploy the zip file or automatically upload the zip file
 AWS map map.
 Let me just put this in the notes.
 So we're going to create a user.
[01:19:54]
 And that's why I was mentioning to you the other day.
 You should have this. So, in AWS and the AWS console,
 create a user with full AWS lambda access,
 with no console access.
 So, that was the lambda user.
 So that was the lambda user. You create a user, go to IAM,
 Users here,
[01:20:36]
 and I already have one called lambda practice.
 But I can just make a new user here.
 Lamb the test. I'm just going to delete this right after. I already have a user. Yeah, that's, so you said full access to DynamoDB and Lambda.
 Yeah, that's fine.
 Because we're going to use this for backend, so you need both.
 So I could include that here.
 Great a user with full AWS Lambda.
[01:21:25]
 AWS Lambda and
 DynamoDB access.
 We're just not going to do DynamoDB right now, but I'm just looking ahead. Yeah, that's good.
 But you can always add it later.
 So don't check this off, because this one says provide user access to the management console. This is the management console, which you see here in the graphics and the forms that I can't this is the console, we don't want this user having access
 to login here. So don't check that out. So we're going to create a user with full
 AWS Lambda and DynamoDB access access but no console access.
[01:22:31]
 Do that you need to attach policies over here. If you're following the practice, then you should know these steps.
 If you look for lambda, you should see full access somewhere here.
 There it is.
 Just check it off.
 And then if we search for diamond mode VB, you should see something with full access there
 and check it off.
 Okay, so that's it.
[01:23:09]
 Next step.
 Okay, so when we finish that moment.
 So there's the access, there's animal DB full access and then that will access. I should call it lambda 10.
 Remember to read it right after. So there's the user right here. This is big enough.
 The user is right here. Lambda test, but you guys will call it lambda.
 I call it lambda test because that's just a reminder for me to delete it.
 Now create a CLI access key for the lambda user and download the CSV file. So that's in security credentials.
[01:24:11]
 Create an access key.
 Oh, yeah, I didn't specify here. Oh, then I put here a CLI access key.
 So it's going to be this one here. CLI access key command line.
 You have to confirm it there. You could describe it if you want. So, I'll just put here and delete this.
 I believe this key as a reminder to myself,
 but you might put here this key is for sandbox
 or you could actually, now, just leave this for...
[01:25:03]
 You could actually, yeah, just leave this for,
 let's see, this is the lambda user. It's not just going to be for sandbox,
 it's just going to be for all your projects.
 So, I'll put here, this is for capsule level 4.
 Leave the next one here.
 Key or capsule in, You can also use it for your capstone project. but your codecs level port.
 You can't change the key.
[01:26:07]
 Yeah, and the practice had been specified, which one to make a clarified entering class. That it should be the CLI one.
 Okay, so the access key is created.
 There's the CSV file. Download it into your sandbox.
 You should have an AWS folder, not AWS, put it in there.
 So that's done. Next, we need to install AWS CLI for your system.
 So basically just search the internet for install AWS CLI.
 That's going to be the fastest way to find it. Install a WSCLI. And it's going to be the first thing that pops up.
[01:27:39]
 So the pen's which system you have. So you probably have either windows or a Mac.
 that's what system you have. So you probably have either windows or a Mac. I have a windows machine. Download and run AWS CLI MSI installer. So basically I will just download this.
 Put it in the downloads folder. I already have it right here.
 I'll just override it.
 It's okay.
 It's installed.
 I mean, it's downloaded.
[01:28:20]
 Then basically run it.
 So it looks like this.
 Please wait while set up wizard to grab the guide you through the installation. So yours might look different because I already have it installed.
 You can see I've put any special notes here. Otherwise, just go with all the
 all the defaults.
 So it has this thing here to accept it next. Install that one there.
 That's fine.
[01:29:17]
 Let's go to the default and click install. small. If I click in that's how it's going to be put in the right.
 Need to put,
 it needs to enter in here.
 Administrator writes for Windows
 if you're installing for Windows. the following windows.
 Let's see what's in the solar, the one for your system. If you have a window system, just go with step number one here.
 We have a room with the AWS CLI MSI installer.
[01:30:28]
 So you have to download the one for your system.
 So I don't know if this thing you have, maybe you have a Mac, maybe you have a Windows,
 and you have Linux.
 This is the follow the instructions for this system.
 You can use this one as the best one to follow.
 Just get, well, you find out. So, just get the, if the one that's available, that pops
 up and is tried. [no audio]
[01:31:20]
 alright, so so finished. Instructions here.
 Saying that you should be able to type AWS-DASH version.
 Okay, so I'm going to try it in my VS code here, AWS dash dash version.
 In works line.
 Does anyone have a problem not working inside of your VS code terminal.
 So if anyone does have a problem, it's not running into your VS Code terminal, like you see here in mine,
 you can try closing VS Code, all of your VS Code windows, and try again,
[01:32:36]
 or you can sign out of your windows and then sign back in or you can restart your computer.
 After you install the AWS CLI, you should be able to just type AWS dash dash version
 in the terminal.
 Again, you have problems running this command. The worst case scenario is just we start to continue. Okay, so the next step.
 Okay, so let me put the code there.
 AWS configure. After it's working, you need to log it with the lambda user.
 You know, you downloaded the CSV, right?
[01:33:56]
 Log in from the CLI with the command AWS configuration.
 You can, you can try it it installing it in a different drive.
 It might, so you could use that, you can install it in a different drive.
 You can give it a try.
 Hopefully it works.
 After installing your terminal of the living differently, it might still be installing
 or just press enter and then a few times in that it'll get through.
[01:34:51]
 Or you can try just closing all your make sure you close all your
 ports like exit exit your back end server you know like press control C for that also exit
 the web pack like pressing control C.
 Close VS code,
 start it back up, see if everything reset.
 It comes up after you're able to get AWS-version going. that's best for you. So Chris was able to get AWS dash dash version. installing. Well if you're once you have a working this type AWS like this AWS container and login with the map to user that you created. [ Pause ] So if you get to the point where you're able to install and it works, yeah, you have to check the version first that tells if you couldn't type AWS dash, dash version in your terminal.
 That means it works.
[01:37:59]
 But if you're not able to get that to show the version in your terminal,
 then you need to shut down all your VS code windows.
 If it says, "Command-dot-found," shut down all your VS code windows, all of them don't
 leave any of them running.
 If that works, if that's the fastest way, sometimes I'll work, sometimes I'm busy.
 So Chris, what are the options you have there for the output format? And then just go with none.
 So I just press enter and basically to go with the default options.
[01:39:18]
 Let me see what I would do. [ Pause ]
 Access keys there.
 I already put in my access keys.
 [ Pause ]
 Default region.
 So, you should know your region already. If it's not there, you
 should pick the one that's closest to you.
[01:40:09]
 I've already entered in my keys and ID and region. That's why it knows, but you should already know which reason you're in.
 I just press enter to go with the defaults. But if you for the region part, if it's not the one closest to
 you, then change it to the one that's closest to you. If you go to your AWS, you
 can see the regions right here. Go to your lambda. If you go to your landa, if you go to landa, then you can see the region that you picked.
 U.S. - West, that's one, that's for me.
 You guys will probably be one of these in the East, whichever is closer to you.
 I don't know Ohio, North Virginia. Whichever one you is closer to you and on the Ohio North
[01:41:05]
 Virginia whichever one your closest to that's the one that's the region you
 shouldn't have that's the one you should be creating your landlof functions see
 if I go here if I click on US East one and I look at my my lambda functions. I don't see the ones that I made because it's
 different. It's because these reasons like a folder. I didn't make anything in the other regions.
 I guess I accidentally made something in the, in North Virginia region.
 But not making region is a US-West one.
 And that should be where all my lab functions are.
[01:42:08]
 That's the default. That's the one you're going to pick for default.
 You can take.
 Now you don't need to put brackets.
 This press enter.
 This press enter or if you're gonna just put u.s. dash East dash one two
 or just no brackets.
 Alright, so this is the command. Once you log it to the A-W-S-C-L-I and we put your access information to your access
[01:42:51]
 keys, you should just be able to run the command to upload your changes.
 So terminal's commands can be used to make changes to the AWS Lambda.
 And this is how we do it.
 If you want to see a list of the commands,
 you can go to the search for AWS CLI Lamb lambda v2.
 Why should you put a v2?
 Because we installed version two of the CLI.
[01:43:33]
 Hopefully, you did.
 Because it's newer.
 So if you want to see the list of commands, again that's AWS CLI and Lambda, these are
 the commands for Lambda version two.
 And see there's a list, there's a into the notes. here's a code. This should all be one line. Remember these dash dash. You notice that there's always like a dash dash, right?
 Whenever there's an option, think of it like a parameter, dash dash. So this is the parameter, function name, is the parameter, the value is next to it.
 And the practice or I think sandbox level where you guys it's sandbox
[01:45:37]
 okay but before we go before I run that command let's look at the section
 for updating function code.
 Well, if you installed the wrong one?
 How do you know you installed the wrong one? Did you do dash dash version?
 And
 Let's see AWS dash dash version
 Since 0 2.25.9 or later, okay, yeah, you got the 1.38.
[01:46:32]
 Well, let's see.
 If you go to the 1, if you search for the commands,
 and you load up the one for 1.38.
 It looks so similar.
 Update function code.
 That's the same. It didn't change.
 It didn't change. You could still use it.
[01:47:04]
 It's the same command for version one and version two.
 You can keep going.
 So if you do a search for AWS CLI lambda, you can see version two here and version 1.
 I'm going to click on version 2. But if you install version 1, just click on that.
 I think the commands are just saying.
 Scroll down to this section about updating the function code.
 That's what we're going to do.
[01:47:43]
 This is AWS Lambda.
 We want to update the function code.
 And there's a lot of options here.
 You see one about providing a function name and a zip file.
 And I think it's going to be the same for version one.
 So it didn't change for you guys.
 So the command would look like this.
[01:48:13]
 So long command.
 AWS.
 You saw with AWS because that's the CLI that we installed. And then you put in that,
 then you put in this thing here, that section that you looked at. So we looked at the update function code Because that's what we want to do and that's also the name of the section
 So that's what goes next update function code
 Then what goes after that
 We can even see it here so basically just imagine that there's a AWS in front.
[01:49:06]
 Then you put up the solution code. Then you need to put dash dash function name.
 And then guess, guess what you need to put there.
 You need to put the function name so that's sandbox level 4.
 Oh, let me, oh yeah, we have to put lambda. That's right.
 We got to do that.
 So, we have to do that.
 Yeah, you need to put that.
[01:49:53]
 'Cause that's the part that we want to affect.
 We want to affect the lambda part.
 And in lambda, we want to update the function code.
 We need to provide the function code. We need to provide the function name.
 And then we need to provide the command that we want to do.
 That's the zip file command.
 That command will-- or this is a file function or parameter.
[01:50:20]
 We'll upload a file of our choosing, but you have to let it start with file B colon slash slash.
 And then you can put disk folder and the file is called the zip file index.js.zip.
 index.js.zip.
 I'm going to run that command.
 And this has this thing here.
 It says more if you press space or even Q,
 you should middle scroll through everything.
[01:51:30]
 You can look at it if you want but it has a lot of stuff that happened there.
 It doesn't look like there's any confidential information in there. So we should have worked.
 Well, I won't know that.
 I won't know for sure that it worked because I didn't make any changes.
 So I'm going to do something here.
 Sandbox number four.
 I'm just going to put hello world right here.
[01:52:05]
 Hello world and I'm going to test it.
 Well, first I need to build it.
 N-P-X webpack. I'm just going to build it in production mode. this one should zip the file up for me
 and now I can run that long command AWS lambda update function dash function name. So the function name is
 sandbox level 4. The zip file. Well, the path is here, just slash index.js.zip.
 I just have to put file B in front of it. So if this works, it's going to upload
 it to mapAPDA.
[01:53:05]
 You can press Q to just exit this, or if you press space, you'll see all of it.
 If you go to AWS NAPDA, it's going to say something different.
 Like I'm going to AWS NAPDA, sandbox level 4.
 It's going to say something here.
 Oh, it might.
 If you have the old, oh, here it is, this function code has been updated and deployed in another
 editor. To discard your local changes and get the latest deployment version. accept. So just press accept.
[01:53:48]
 So that's an indicator that something got changed or uploaded if I press
 test. And I look at the results I should see how the world is amazing. And it does. It does say, "Hello, world."
 All right, so actually we should have that working. Let's just go into one more slide.
 Because it's a simple slide.
 And that's right. You can make a script out of it.
 Automate deployment to AWS Lambda, create an NPN script that combines these commands.
 So bundle in production mode and zip.
[01:54:56]
 So we command that bundles in production mode and zips it.
 And then it command that uploads zip file to AWS Lambda,
 optionally in first to GitHub.
 So I would create a new script for this in notes. Then I'm gonna write the script and then take a break.
 Okay, so first bundle in production mode.
 So I'm gonna write a script,
 I'll bundle in production mode.
[01:56:11]
 in production mode. There's my package JSON. I'm going to make a script called deploy, which will bundle in production mode. So I'm just going to write it right in here.
 Actually, let's see, MQX.
 I'm going to put...
 I'm going to make a new one here.
 Build Production.
 That's NPX Webpack Mode equals Production.
 Then I'm going to run that. And Pm, and Pm, run, build a production.
[01:57:12]
 What else do I want to do?
 I also want to put a comma here, fix that error.
 I want to run that upload.
 Actually, I'm going to put this in alphabetical order.
 So upload. Upload zip. That's where I'm going to call it.
 zip. That's where I'm going to call it. And it's going to be that long command, which I was just copy and paste. And yeah, run up loaded zip.
 and DM run up the zip.
[01:58:11]
 Jane, the end is there. Now I show it all I should type is the
 employee.
 If I want to get the look.
 So I'm going to test this out.
 I'm going to change this back to sandbox level or back in. So it all works, if
 it all works fine, I should be able to type in npm run deploy and I should see the changes in AWS Lambda.
 So it's building it in production mode,
[01:58:51]
 making sure the file is as small as possible.
 And now it's uploading to Lambda,
 and it's done.
 I can just press Q and just get out of there.
 I'm back here in Lambda.
 And if I click on code, it should give me a warning.
 I can see what happens.
[01:59:27]
 Yeah, it says sandbox level 4 back in.
 So it worked.
 And we just at 10k I'm running the coin. Okay, so we're going to go into a break now.
 Okay, so you have to look great. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] All right, so we're back from the break.
 And now you'll have time to work on the assignment, which was work it on your capstone proxy.
 So this is about.
 So this is about getting your capstone to work.
[02:11:06]
 I mean, the backend.
 And now you can even, you have the ability to get it to,
 to deploy.
 But you should have some kind of API communication and also
 be able to use the, like some kind of API communication and also be able to use the like some kind of authentication around.
 I'm going to start the breakout rooms.
 And it's going to go for 32 minutes. [ Writing on Board ] And then I'm going to check who's up next for many evaluations or corrections. Any one want to volunteer? Only a few more days left in the week. Okay, so we're you in the breakout room. [] [typing]
[02:14:08]
 [typing]
 [typing]
 [typing]
 [typing]
 [typing]
 [typing] [BLANK_AUDIO] Okay, so it doesn't look like Alexander's responding. I can meet with David for corrections for week 3. [ Pause ] Oh, wait, three.
 Oh, you haven't done that yet.
[02:16:17]
 So it's just going to be the first grade. [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [ Writing on Board ] Okay, so it looks like what is available to do their evaluations.
 Well, they're just not going to get the point.
 We're going to just automatically miss that point on time.
 And it's just gonna put more pressure to
 even do their evaluations for next week.
 So.
 - I can just go now even though I know I'm not ready and I know I'm going to get at least
[02:24:07]
 two points off if not all of them, but it's fun.
 At least I can guide you with some things.
 So yeah, let's go.
 Yeah, I reread what is in the evaluation and I might actually get more things right than
 I'm anticipating.
 So. actually get more things right than I'm anticipating. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [no audio]
 It's probably in the server component.
[02:44:38]
 Yeah, yeah, it's probably in the server component.
 And the server component.
 Just going to conclude the class.
 The breakout rooms are back.
 So in conclusion of this class,
 we learned how to use Webpack to zip a file.
 We learned how to use Webpack to create a zip file of the bundle. We installed AWS CLI and logged in from the command line. And then we also use the AWS deploy. The one command does it all for us.
[02:45:32]
 Builds and deploys.
 Okay, so if you didn't take attendance, make sure you mark that in your COVID X account.
 Looks like class will be dismissed early,
 but I still need to finish the evaluation with Alexandra.
 But that's the day's lesson on AWS.
 Yeah, you can delete this. So, Rayline's asking a question.
 Yeah, you can delete this because I'll just get,
[02:46:21]
 you'll just get recreated anyways.
 Basically, you would delete this to see when PACT do its work and to also clear it up.
 So it's not just-- so you know for sure that it's fresh files
 and not some old files.
 I'm just going to start the Alexandria and then. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]

///// FILE: "Level 4/transcripts/Apr 21, 2025 19-57.txt"

Transcript from Apr 21, 2025

[00:00:00]


///// FILE: "Level 4/transcripts/Apr 22, 2025 19-42.txt"

Transcript from Apr 22, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four week seven day two in, especially for this exciting new topic.
 So today's agenda in the first hour will take attendance,
 announcements review what we did on Saturday, some things about Google Cloud, second hour, we'll talk about AI and have some time for practice. Then in the third hour,
 many evaluations, mostly for corrections for week six,
 many evaluations, and time to work on assignments.
 Now is a good time to take attendance. If you haven't taken attendance yet, please head on over to your code X account and mark
 yourself present if you're here right now.
[00:01:51]
 And now time for announcements.
 Let me vote of that screen. Okay. Okay, so here are the announcements. So yesterday was Stephen Collaboration Day.
 How did it go?
 Was it helpful?
 Did you get stuff done?
 Did you get your questions answered? Do you have more questions?
 Feel free to talk on the mic or just put it in the chat.
[00:02:59]
 Okay, so hopefully everyone was able to use that full day or full class time to just code or catch up.
 Do you feel like you might need another student collaboration day anytime soon?
 Or that that's enough for now.
 All right, are you guys caught up by now or still catching up?
 catching up.
 Do you have all your questions answered or do you still need to get the Okay, so it's good that, so Chris is saying he's caught up, pretty caught up. So if there is another student collaboration day, he'll be a good help. But, you know, we're having new topics every day and every day is a new day.
 And sometimes those are days where we can't keep up just because things happen.
[00:04:39]
 So we'll see.
 Okay, many evaluations. Time limits, 60 minutes per submission.
 So we got to keep the time down.
 And when I was in Codex Academy as a student,
 our evaluations were only 30 minutes long. And I had to cover all the topics in those 30 minutes.
 And, you know, that's, that, back then it was a lot harder.
 But you guys, you guys have it easy.
[00:05:20]
 You have 60 minutes per submission and you're allowed to have two submissions.
 So that gives you a total of two hours.
 And you don't even have to get a point on all of the topics.
 So you're able to like miss one point and you can still pass that assignment like for example,
 for last week's mini evaluation here.
 There, there's this point for some again on time.
 If you get that point, that means you could miss
[00:06:08]
 any one of these topics right here and still pass this assignment. I mean, I personally,
 I don't like that because that means you'll have, if you get a, if you miss a point like like
 If you get a, if you miss a point like like this one here, if you get a zero on TDD read practice, it's possible that you never did this.
 And you never learned the information from doing this,
 but you can still pass this assignment.
 And if you continue, you know, passing these assignments with with a zero on some sections, you're going
 to pass this class with some holes in your knowledge.
[00:06:54]
 So even though you can pass, I suggest that you try to get all the points that you can
 that you got to zero on.
 Because you have a question.
 Yeah, this might just help set your mind at ease.
 You know, some of these things where we don't get all the points for them during one week, after a couple weeks after the subject has been thoroughly gone over, we've been working on it more.
 We end up understanding those things.
 So just the ones from the earlier weeks, or we may be missing points, I think you might
[00:07:29]
 find that in the later weeks, we understand the subject matter. Yeah, I
 understand that, yeah, that's that's completely possible because you know, these
 evaluations are slightly behind the assignments.
 So by the time you submit the assignments
 and maybe when your assignments are graded,
 you have a better understanding.
 So you might come to this decision that, okay,
[00:07:59]
 so it's, I got as, like for example,
 you might have gotten the zero here on TDD read practice,
 but then, you know, the assignment closed, but eventually you did get it done, because
 you were having a hard time within the assignment or something.
 And TDD read practice was a key to understanding it, but you know this this evaluation could have been closed by that
 but at least you know you might have had like 80 points on 80% on this
 evaluation which is passing and
[00:08:36]
 even though it's closed
 you figure okay I know TDD read practice by now and it's closed and I passed so I'm
 I guess I will spend the time to try to get that extra point and yeah that's
 completely possible so that's what I hope. I hope that's what's going on if
 you get if you didn't get a zero on something I hope you you went and filled in
 the holes later on.
 You went and fill in the holes later on. Okay, so 60 minutes per submission.
[00:09:17]
 So do it fast.
 Know your stuff when you, when you go in.
 It's open note too.
 So you should know your stuff. you should know where your notes are,
 use all the tools available to you. When I did my submissions,
 like, let me show you here, my evaluations, when I did my evaluations,
 they were more than just one topic.
[00:09:45]
 I mean, four topics, 'cause this evaluation here
 is just four topics, this, this, this, and this,
 60 minutes to cover everything.
 Sometimes I would have like 10 topics to cover
 or 10 points to cover or more.
 I had to do it in 30 minutes, but at least all the topics that I had to talk about,
 so I had the opportunity to organize all my notes and I can just talk about things and demonstrate something whenever the evaluator thought that
[00:10:27]
 my explanation was not good. I had the opportunity to demonstrate it, to show that
 I'm not just meeting off of my notes, but I actually know what I'm talking about. Because sometimes you can just put your notes, read it, and then still not know what you're talking about.
 So that's why these evaluations are necessary and the illustrations are necessary. So evaluations.
 So the many evaluations for week six, they're closed by now, Tuesday before class, but it can still do corrections until Saturday.
 Many evaluations for week seven so yeah they're posted
 right here. I didn't get a chance to put all the details yet.
 But here are the topics how to deploy a front end to AWS S3.
[00:11:47]
 You should have your notes organized to show the systematic way of doing this.
 Everything involved with deploying the front end to AWS S3.
 Also deploying it to CloudFront.
 Even though they're separate, they work together,
 but each has their own ways of deploying.
 And they use their own console.
 It makes it easier, at least they's split up into two different topics here instead
[00:12:27]
 of one, even though they work together.
 Same thing with this one, split up into two different topics.
 Setting up Redux.
 So set up for Redux took a long time took a few days and then using Redux for
 global state variables that's a you know a separate topic but as long as it's split up like this, it makes it a little bit easier to talk about.
 And you should be working on assignment about Redux.
 So you should note pretty well.
[00:13:20]
 Okay.
 So, um, the estimations for this are due tomorrow before class.
 Wednesday to 23rd. assignments. So,
 the capstone front and the
 counts that close in Thursday
 before class.
 Front and the counts. So, that's
[00:14:00]
 being able to set up the
 counts with the front end. Well, that it being able to set up accounts with the front end.
 Well, that it's supposed to communicate
 with the back end too, with the front end to do it.
 And some of you might just do it with,
 like an example page, which will pass this assignment,
 but for your final capstone,
[00:14:24]
 I wanted to see, I wanted to see it integrated.
 I want to see it integrated, not just like an example. Okay, so, and, okay, so I haven't posted this one yet, but you saw the, the description
 for this last Thursday.
 I posted, see, if I don't post this soon, then I'll give you an extension like last time until Saturday.
 But, yeah, capstone Redux, due to Thursday and before class.
 I'll post this assignment again like the explanation or the steps for it later on today.
 The student's success team, remember you can contact them for anything that is closed, contact them so you can get
[00:15:33]
 your points, get to passing,
 use assignments so you can pass this course.
 The student or you pass this course, the sooner you can get a job.
 At least you don't have to know it perfectly, but you can get a job as a TA and you'll
 learn more as a TA because students, you're going to basically become a TA and then
 go back to level one.
 And mind that level one should be a breeze to you.
[00:16:10]
 Should be a piece of cake.
 And you should be able to help those students in level one
 and start getting paid to help teachers. And you're also getting paid or getting the experience you need because
 jobs want to see that you have experience actually working.
 It will be an actual experience.
 And even as a TA it's not going to take up all your time.
 You can still do side projects and build up
[00:16:45]
 your experience and your knowledge.
 You actually have more time as a TA than you do as a student
 because as a student, you're finishing projects.
 But as a TA, you don't have to make any projects.
 So that brings up more time for you.
 Practice problems are again, that listen here,
 have a side, and we'll have a practice problem later on today.
[00:17:24]
 Let's see, help seeker.
 Those are problems in July cohort, if you get stuck for 15 minutes or more.
 Let's see if there's anything new.
 Nothing new, just okay, Easter greeting.
 Let's see here.
 David was having a problem with using the VS code. the Easter greeting, let's see here.
 David was having a problem with using the VS code,
[00:17:53]
 the booger,
 or the browser.
 If this is for backend, it won't work. It only works for front end.
 If you're doing back end, you can, you don't need to launch a V as come to be bugger for the browser. He just needs start to server in
 JavaScript. He bugs for people. And then whatever--
 so I'm talking about the backend.
 If you start to server in JavaScript, debug terminal,
[00:18:32]
 when you use them browser to send the request to your server,
 that's when your debugger will activate in your backend.
 So if you're talking about the front end, then everything looks right.
 It's your work.
 And if that's not working, then just fall back to using them tools or not clone them
 tools or end steps. the tools are answered.
 Okay, so it's okay. Yeah, sometimes sometimes, you know, you might leave there and be as code open for
[00:19:14]
 like days, because you just put your computer to sleep. But then when you reopen it's actually here.
 Yes, code has been open all the whole time and not getting a chance to reset.
 And sometimes when you're coding and coding and building it bugs out your
 cause is just code to bug out.
 I've had to close it a few times and then reopen it.
 Yes, come to mug out. I had to close it a few times and it reopened
 Yeah, happy Easter hopefully everyone had a good Easter
[00:19:59]
 I took my kids out egg hunting
 And in the vent They had fun.
 You're a good company. They got nice treats and candy and toys. So, what was good?
 Notebook LM. So, the week of this theme is AI and notebook LM is an AI that I showed you how to use
 to answer questions and basically help you find things in the notes.
 There's ways you can just put all your notes into notebook LM. I mean, it only takes 50 documents.
 If you try to add more documents to it,
[00:20:51]
 then they won't let you or you have to pay.
 But what you could do is just compress a lot of your notes
 into one file.
 And then I think you could take a pretty big document.
 So you just can press if you can't fit everything into 50 documents.
 I mean, like, if you meet your 50 documents limit,
 you have to start compressing your notes
[00:21:18]
 and see like compiling them into like one big document
 so it can make space for other weapons.
 Okay so this one's asking, but I see that I have a recording now so that's good.
 We should get a recording for today.
 And I'm pretty much done with the program that can just transcribe our videos.
 So I'll start rolling out some transcriptions this week.
 Maybe you can add those transcriptions to the local talent.
[00:22:03]
 And it can answer your questions even even better with those transcription cells.
 Those transcription cells are pretty long, especially for days where I talk a lot or do more teach more topics.
 or do more teach more topics.
 So your document limit might start to exceed when you start adding transcriptions here.
 But I think I'll teach you some ways
 to automatically, like if you want to continue using
 the book L.M.
[00:22:43]
 Or free, I might teach you some ways
 to take multiple files and then combine them into just one file.
 That way you can just pass it to notebook LM.
 And you'll be maximizing the total documents
 that you can put in there.
 So basically, you can let the take like 10 files
 which contain your notes, put them into one big text file,
[00:23:14]
 and then you pass that on to the notebook LM, and now
 you just only take up one slot instead of taking 10 slots,
 10 documents slots.
 So you can fit a lock there. instead of taking 10 slots, 10 documents slots.
 So you can fit a lock back. You could probably fit your whole codecs course
 if you take the huge, if you do it that way.
 I'll teach it away.
[00:23:38]
 Hopefully I'll have time to teach it away to do it automatically.
 Like automatically, like automatically,
 like automatically instead of you
 having to copy and paste everything.
 So we'll see if we'll have time to do that.
 Focus.
 Now, we're going to review.
[00:23:58]
 Hopefully you have the notes ready.
 You have the notes for whatever you're going to review
 from Saturday. But if I say anything new,
 make sure you type what I type and type whatever new things you learn. And if you're watching
 your recordings, you should also watch the review sessions. Not only will they solidify your knowledge,
 but you'll also learn anything new that I teach.
 And sometimes I do teach new things during the review.
[00:24:31]
 If you just skip the review during the recordings, you might be missing something that's useful for assignments. And then have your microphone ready for any questions or many
 evaluations that you want to continue. Okay so that's it for announcements
 just let me know if you have any questions. Now it's time for review.
 Okay, so we learned how to minimize the zip size because when we were zipping up our bundle,
 it included a whole bunch of files that we didn't need.
 We just needed that one file index.js.
 Or, and I'm talking about the AWS Lamb to server.
[00:25:42]
 The server, the back end server that we deployed to AWS
 Lambda that we need to zip up and upload.
 So the library option allows Webpack to bundle exported code.
 You should know that already.
 But as a result, unnecessary files may be included in the zip bundle.
 By enabling that library option, we end up with like 10 other files, 10 other exports
 that got bundled up.
[00:26:21]
 And we're not using those exports.
 We only need one export from index.js, a handler export.
 But somewhere in your code, maybe it was express or maybe you got ENB.
 You were you're importing those packages, right? Well, those packages might also be exporting some code.
 You may not be using them, but it's, you know, they're being exported by those packages.
 And if they are being exported, then Webpack is bundling them because of this library option.
 And when Webpack bundles them, they get put into the zip, which makes the zip file
[00:27:09]
 bigger than it needs to make.
 So we learned how to minimize the zip size by specifying the files to include.
 The way we did that was we edited the webpack config file and then just basically just look
 like this but we inserted an object in between the parentheses and that
 object has the include property and it has this value which is drag x
 regular expression that means only include the index.js file or any file that exactly matches
 this. When it's regular expression, it's contained in two forward slashes like this. It tells JavaScript. This is a regular expression meaning you can
[00:28:08]
 Whatever's in between those slashes it it tells JavaScript how to search for things
 how to search for strings and
 in this case it's using a
 Carrot here and the null or sign here. These are
 symbols that tells JavaScript
 match whatever's in between here exactly, match it exactly.
 Like I will be the beginning of the string.
[00:28:34]
 That's would be the end of the string.
 So basically Webpack is given a file name.
 And some of those file names are long.
 Some of those file names also include index.js.
 Then you show you what I mean.
 And then you click on my sandbox first.
 Okay, so I'm going to share my screen now. Okay, so this is the dist folder. And we see some files have index.js in the
[00:29:31]
 name. So we're going to tell webpack. We're not just looking for index.js, but we're looking for index.js. Exactly.
 So that's this one right here.
 And the webpack file is here.
 And we're telling it.
 And you file that comes in with exactly called index.js,
 put it in the zip. And zip file. So after we enter that command,
 we can view what's inside that zip file. The file explorer.
[00:30:28]
 So I'll look for that zip file here.
 Here it is.
 Now there's just one file in there.
 Index.js.
 If we don't put that command, all these files in here.
 Get put in there.
 And they're not necessary.
[00:30:50]
 So you end up with a small zip file, only 437 kilobytes.
 I think before it was 1,200 kilobytes.
 So you minimize this zip size. just folder to the to the get ignore file. This is just folder. This is for the backend only because the back
 end is not the boy won't might get up. If it was, then we wouldn't be using other things to deploy the backend server.
 GitHub can't deploy the backend and the disk get the hub doesn't need this folder.
 We ignore it.
 But we're still pushing the back end code to get the hub.
[00:32:13]
 So then I can see your code for purposes of grading.
 So it should have your source file or source folder.
 You should ignore that.
 AWS, the only one you should do here.
 Okay, so, and it never gets to put the data to be less in here.
 So not only that, we want to not just, we don't want to just add the display to get ignored because if the display is already in your repository,
 it will stay there until you do something else. And what
[00:33:09]
 is that something else?
 Go to your main branch. This is going to be done in your main branch, then you go to
 your local main branch, type this command, and then commit the changes and push the
 GitHub, then it will disappear in your GitHub main branch. If you go to another branch like the front end branch
 maybe one of the front end branches. And you see the disk folder and you
 want to remove that disk folder from GitHub. Then you go to your local front
 end branch, run this command, commit the changes and push updates to get help.
[00:34:25]
 Run this command, commit the changes and push updates to get help. Then in your front end branch and get help,
 this folder will be gone.
 So there's that.
 So we create a local backend project using VS Code.
 We created a workspace called backend Google Cloud, a separate project for workspace, but it's still inside the sandbox.
 A separate backend, I mean, and then we copied a backend template into that workspace. So it's a fresh new template.
 You should have a backend template and copied it over.
[00:35:21]
 And you should also have a workspace.
 And you should also have the workspace. So that's what I have here.
 I have the sandbox and there's the backend folder and the front end folder and then another one.
 Back end Google tab.
 So you can compare in contrast the difference between
 the playing to AWS Lambda and deploying to a traditional
 a traditional platform.
[00:36:04]
 And the notes for this hour and the cloud. [BLANK_AUDIO]
 Here, all right, and then,
 [BLANK_AUDIO]
 You should already have your GCloud command or the SDK CLI working.
 You ran this command, GCloud in it, and prompted us to sign in.
 You might need it to visit a link and allow Google SDK access to your project, your local project.
 Then also, as part of this command,
[00:37:12]
 you would choose the sandbox level or project,
 whatever it's called, whatever you need it in App Engine.
 After you select it the after you've initialized and selected your project to deploy to you in app engine, you can type gcloud app deploy. When we did that, we got an error message. That app YAML is required.
 And so it comes the app.yAML file.
 So this file tells app engine, which no JS version should run with backend server.
 So App Engine is going to already have no JS running.
 All you have to do is upload your files and then give it the command,
[00:38:16]
 give App Engine the command to run it.
 That's all you have to do is basically tell App Engine, which nodes you want App Engine
 to have ready to receive your source code.
 So the way we do that is we have to install the packages because all we did at that point was just copy the file over.
 We didn't install the packages yet.
 So, you can install the packages.
 Use kfpf to save space. So, in style, build the project.
[00:39:07]
 Because I didn't copy over this folder.
 This would, I didn't copy over this,
 this folder and I didn't copy over this,
 no modules folder.
 I just generated them.
 I'll copy it into this project with the source folder and some of these other files.
 So I generated no modules by installing the build command and then run build.
[00:39:50]
 That's when we create the file app.yaml in the disk folder.
 We need this folder, you should see at.
 It's appengine needs that.
 It tells appengine which folder to deploy.
 And we specify the notification every what.
 So appengine only looks like this.
 Basically just one line.
[00:40:28]
 You can put some notes here.
 You can use the this one here and put a comment specified. and
 and also put here
 that requires
 requires
 a
 file to
[00:41:25]
 deploy
 i think
 part of this file to be
 in
 the holder
 that's
 the
[00:41:48]
 So you can add notes like that. Because eventually you'll have a mini evaluation about this.
 And it's good to add notes.
 That's readily available. Let's see in the terminal now I can try to deploy what you should specify where that
 YAML file is otherwise it's just going to look for it in the folder that you're in.
 Usually you're in the root folder so it makes sense so you've specified the full path
 that it's in the disk folder.
 You will get an error for the first time if you do this for the first time because it has a bucket error meaning the storage.
[00:42:41]
 Just like in the AWS
 a bucket is just like a place to store, like a hard drive.
 So you'll get a bucket error for the first time,
 because it just wasn't set up yet.
 But if you try it again, it'll work.
 This command will work.
 You can rather than the bucket will be set up
[00:43:02]
 to receive your files, because that's
 where your files will go into storage
 into a bucket or thinking it like a hard drive in Google Cloud.
 Then it will give you a link.
 Once you find a copy of your files over to Google Cloud App Engine. It'll give you a link. You can try to open it in your browser,
 but it'll say that service is unavailable.
 App Engine requirements. So this is how this is the information we need to set up
[00:43:49]
 app engine so that you know get service unavailable instead you know get your
 actual server rendering. So app engine requires these to be in the folder and that
 will be deployed. It means that app.table file and it needs to specify the node version.
 It means that a package.json file for installing dependencies, even if there are none.
 In this case, when we bundle our file, it doesn't have any dependencies.
 It doesn't need node modules. It's node modules are your dependencies. It doesn't have any dependencies it doesn't need little modules it's
 little modules are your dependencies doesn't need that because we've bundled
[00:44:29]
 everything together into one file so basically this package that JSON file
 will not have any dependencies in it but appengine requires it a start script in
 the package that JSON for starting the back answer so it's this start script in the package.json for starting the back end server.
 So it's the start script is slightly different than how it is in the root folder.
 And then the back end server was listening on the port environment variable, which comes
 from app engine.
 You can't just listen on any port.
[00:45:07]
 You need to use the environment variable given by app engine.
 And that environment variables is spelled like port,
 but it's all capitalized.
 And then we started configuring the backend. So according to those specifications.
 So what we did was we added that the that to get help.
 And in that.env file, remember, your.env file is
 containing variables that you don't want anyone to see.
[00:45:57]
 I mean, it will say 1,000, well, that's not really
 something very private, but it's a good rule of subject, but not E&D in getting more.
 But we add four people's 8,000,
 or whatever, or if you wanna listen on
 with your back end server,
 you click inside of your.emb file.
 You gotta install the.emb package and continue it in index.ts.
[00:46:28]
 And then set the listener port to process.env.port. [wind blowing] [wind blowing] [wind blowing]
 [wind blowing]
 [wind blowing]
 [wind blowing]
 [wind blowing]
 [wind blowing]
 [wind blowing]
[00:46:58]
 [wind blowing]
 [wind blowing]
 [wind blowing]
 [wind blowing] [wind blowing] Next slide.
 So the index file.
 I have a port variable. It used to be just 8000 people say 1000, but instead I'm taking
 the port from the environment variables and then listening on that point right here. [ Pause ]
[00:47:47]
 Any right here because port will give you more than just a string.
 That will give you some other things.
 Or this environment object.
 Or process is the object, but then the data type that gives you is not just doing it's like a different
 like other kinds of data type. And if you don't put any here, then you're going to get a
 patch here. You can just expect it in London. Now, it's expecting a number, but it can take in that screen.
 I think it can be a screen that's come from here. If you don't do this, then what you
[00:48:35]
 could do is convert the screen into a number. But somebody can use the screen. somebody's here
 Talking package jason to this folder
 So this folder is here with package JSA and it's pretty empty. Empty out the dependencies and the dependencies.
 Like this, it's empty down empty out empty empty scripts and then add the start script
 so no main j s so this file here this package JSON file is inside of the disk folder. So if you were in the disk folder,
 how would you run this main.js file?
 The answer is here. If you were in the disk folder, you run that main.js file with no
[00:49:58]
 main.js. Don't use node mod because that's more than you need. No mod monitors for changes.
 that's more than you need, no one monitors for changes.
 When you have this one before, you're not changing it. So you just need to know that.
 That's a command to run JavaScript files.
 Then, deploy the back end server to App Engine. So, you run that command one last time and then it worked. We got a
 gave us a message with a link
 that we can pull up on the browser.
[00:50:54]
 When you open up that link in the browser, you should show the your loop handler
 and what it responds with.
 and what it responds with. Save the command in npm script so the boy so let's pull that up very quick. So this would be in the so not in the package JSON file where it's all
 emptied and it's in the disk folder. This one is for this package JSON file is
 for App Engine. The one that we use is in the loop folder right here and we have that deploy command for deploy script and it's gcloud app deploy and then just give the location of app.yaml file
 Then add an npm script to open a browser tab with a live app engine serving. So I'll give it a try.
 And PM run open live.
[00:52:33]
 Pay it open up just to pay it here.
 This is just a new path and it just sends a simple response
 saying Google Cloud is welcome to the backend page.
 That's a live, that's, that's, that's
 app engine, the live, the code live. Okay, so I think it's the last 15 times.
 Just go ahead and check.
 Yeah, so it looks like we can take a break here.
[00:53:56]
 Also, it's after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and the next topic is about Google Cloud. We finished deploying a simple back end server to Google App Engine.
 And a few things we can do to polish things up is are these steps right here.
 Let me see what before I even execute these steps, let us have a reminder of what happens when we deploy
 something to happen.
 But in the meantime, make sure you take these notes, and then the nose. One more space. Space now.
 And the five nose.
 Up engine extra steps.
[01:05:27]
 So this cooler.
 I'm going to do this just yet. I want to show you the reason why.
 I'm just highlighting the keywords here and fixing things that have space in the property.
 I'm going to go back further than I like to use. [ Inaudible ]
 >> Okay, I finished highlighting if she was there.
 But before I talk about them, let's see what happens when we deploy something to App Engine.
 Like the messages with GIMP-S. I didn't make any changes.
[01:06:42]
 I'm just basically deploying what's already there.
 It's gonna ask, is this look right? Is this the correct project for the deployment?
 And I see this, phone just press enter.
 See the automatic retunes for what that's capital values. [BLANK_AUDIO]
 [BLANK_AUDIO]
 You think that makes this tick long?
 Actually, they're just gonna tick that along.
[01:07:26]
 I mean, it would tick longer if it had to install the
 pet and the cease.
 It's right now, we're deploying the dist holder that has
 these files.
 There are no dependencies for it.
 There are no dependencies for it. So, because what I'm trying to do is, it tries to install what I was in the dependencies
 inside of this folder. And there are no dependencies, so that being said, it uploads and it deploys faster because there's nothing else to install.
[01:08:15]
 Everything is built into this file. to the style of the the the the the the the
 the the
 the
 the
 the
 the
 the
[01:08:31]
 the
 the
 the
 the
 the
 the
 the
[01:08:38]
 the
 the
 the the
 the
 the
 the the
 the the the the the the and we'll have the package block down here.
[01:08:47]
 Suppose the same message. Okay, here it is.
 Warning, compute builds performance by generating and committing package lock JSON.
 So it does it right now. We don't have the package lock JSON file here. We just have this
 package JSON file. The package lock JSON file is generated when we try to install
 what's in here.
 So the note say in this folder, run npm install, not pnp. To generate package lock json.
 The reason why we don't want to install pnpm is because it doesn't generate package lock json.
[01:09:44]
 It generates a different file. It generates
 it generates PMPM block, not PM1. Yeah, that's what it generates. PMPM block that If you want to get rid of that, if you want to get rid of this warning, we should generate
 package lock JSON.
 So, how do we do that?
 We go to this folder. Right now I'm in the loop folder. I'm going to go to this folder.
 Then I'm going to run that here and install. If I just look at it right now there is no package block file which is package JSON.
 LS is the command to do a list of the files in the folder.
[01:10:53]
 So if I'm here in NPM and small it will install the dependencies in package JSON which
 there are any but it will do something that we want it to do, which is generate
 package lock JSON.
 Now that it's here, we're not going to get that warning from before.
 We're not going to get this one here in a minute.
 So I'll just come just and then deploy again and then deploy
 while that's going. Looks like it's for us this year.
[01:11:35]
 Optional delete load module is in the disk folder because App Engine ignores it anyways.
 It knows it anyways. So what does that mean?
 Empty, I'm not deployed. It says it's missing. Why is it? Because I'm in the disk folder. And in the disk folder, the package
 then PM scripts look like this. It's only a start script.
 So I need to go back one over, where my
 the voice is.
 Let the voice get this here, and then over. And back in case I'm going to be going straight.
[01:12:27]
 I'm going to bring that.
 Meanwhile, that's going.
 I'm going to bring that.
 I'm going to bring it back. You need no modules in this folder because it happens in the browser.
 So it's not active.
 You need to use this folder and then the modules.
 Okay, there is a message.
[01:12:56]
 So that's good.
 There's nothing to do.
 So that's fine.
 I'm going to click you dip install anything, you can do it because it doesn't get uploaded
 anyways. If you look at this file, this one was automatically generated by Google Cloud,
 G Cloud ignore. So what is it going to ignore is going to ignore the node module folder.
 So might as well save some space.
[01:13:32]
 The node module has got installed into this folder.
 Or you can read it, it doesn't matter.
 That's why it's optional.
 I like to read it.
 All I wanted to do is generate packet of the application. Here you can also do this, save a backup of AppYAML and modify the package on file
 in the folder. I like to call it, I like to save it in the folder called "not-to-back." And it's the "back-up" page.
 I can move back up.
[01:14:17]
 And when you put a dot in there at two, three meetings,
 it's not meant to be an "in-in-in-in-in" or "in-in-in-in." Which meant to be an antibiotic more. It's meant to be hidden.
 But I'm going to start copying my files
 over to that.
 And you copy the modified package
 case on file.
 on file. I think I'll copy this one too. The packing stuff and happy angle. I want to copy these here. Because what if I accidentally delete this folder,
[01:15:08]
 like it gets too messy here or something,
 and I want to just regenerate it with webpack.
 Well, if I do that, then these files that I added in
 will disappear too.
 So I want to have it back up so I don't have to be there. So I can be great inside again.
 So let's not get that package locked on here.
 So you can back up the back back there. Modify the package case on file and package mod.
[01:15:58]
 You can call it whatever you want to call it archive, the other.
 Then add the backup folder to make more. So as usual, I put a dot in front of the files that I wanted to work, that was very obvious,
 but not meant to be seen.
 Now, so it's then deploying, and then it's then deploying, and we don't see that warning
 in the book.
 It's because we have generated the lock flag.
 You just always see the link here, the live link. live-link and something about looking at the logs.
[01:17:11]
 You know how in AWS lambda to see the logs,
 you can look at it through the console from the AWS website.
 But since App Engine lacks any of that console stuff,
 it can be done from the terminal.
 And it gives you the commands here.
 I haven't tried this because it's not necessary.
 It hasn't been necessary.
[01:17:44]
 But I guess there's a command here to automatically open a browser.
 Let's see if that works.
 Open a automatically open a browser to your employee site.
 Let's see if it's that work. I would see anything popping up.
 Okay, then something that popped up.
 I wonder what it did to my computer.
 Maybe it installed a package that I really have a package.
[01:18:19]
 They opened the file up here.
 Or it opened up this problem.
 We have to see different ways to do it with that look and see a light or now
 we have a huge loud half of the brow.
 Okay, so that's it for this slide.
 Okay, now we're going to talk about AI, artificial intelligence.
 So this is just an introduction.
[01:19:12]
 I'm not going to get too deep into it.
 Actually, you're supposed to be the practice.
 And let's see if I can cover it in five minutes so we can
 bring the practice for 30 minutes.
 It's just all conceptual, no coding here.
 Just concept for facts. So artificial intelligence, that's what AI stands for.
 We haven't figured that out right now. But basically artificial intelligence
[01:19:58]
 for AI is a combination of programming, large data sets,
 and problem solving.
 If you combine all those together,
 that's like an artificial brain.
 We're basically like in this picture here,
 we're trying to mimic the functions of our human brain,
 at least the problem solving part of it.
[01:20:27]
 If our brain has its doors knowledge and we try to solve problems and the
 programming part here is like we learn how to solve problems.
 We learn. So that's the programming. Basically, that's the part.
 We have to teach and have and learn. And so there's different fields of artificial intelligence.
 And we just put these in the notes. and then the file and it's already here, ai.
 When I talked about new work on them.
 I guess I started that file.
[01:21:27]
 You can continue it here.
 And there's machine learning, computer vision,
 generated AI, natural language processing.
 So you might have heard about these things.
 And maybe wondered what they were.
 So now you can have a general understanding.
 Machine learning.
[01:22:06]
 That's one computer's learn from data without being explicitly programmed. So usually we program
 computers to do things. And with machine learning you don't have to really programming, program them how to do something.
 You just give them, like, you just tell them repetitively how to do something.
 Like, what is the right way to do something?
 And then I'll just figure out how to do that.
 So let me think of some examples here.
 Machine learning.
[01:22:54]
 Like they're usually used for repetitive tasks.
 Like how to,
 how to put a lid on a can.
 So, like, if you're thinking of a, like a manufacturing building and you have a robotic arm. Instead of like typing in how to put a lid on a
 can, you just basically record the movements of the arm. So you take that
 mechanical arm and you just manually move it and you cause it to tighten a, tighten the lid on a can,
 I'm manually moving the mechanical arm. So it's reporting all those movements.
[01:23:56]
 You didn't have to manually program it like my code. You just told it by
 recording the movements. It now knows that all it has to do is just replay those movements
 and it tightens the camera, tightens the lid on the camera,
 or it can continue.
 Machine learning just basically learns things by example,
 learns and do things by example.
 Instead of you having to go in there and program it
[01:24:28]
 every line and step it away. Computer vision, that's when computers, you get your computers
 to analyze images and videos. Like YouTube videos or images you download from internet
 and the YouTube videos or images you download from the internet, it can identify them. And once in basically something that analyzes images and videos.
 Well, the analyze images, but there's also
 times that analyzes videos.
 And in San Francisco, which is like two hours, one and a half hours from where I live, San Francisco.
 They have self-driving cars and they have cameras all over those cars.
[01:25:35]
 They can basically just drive on their own and they're like taxis, they are taxis,
 self-driving taxis, they can have people who can order a subdriving car to pick
 them up and drive them wherever they want to go, but only in San Francisco.
 Because that's where it was trained to recognize the streets of San Francisco.
 And how?
 It's because of machine learning. Somebody took a car,
 a car with all those cameras around it,
[01:26:09]
 and that person just drove all around San Francisco.
 Actually, they had multiple cars driving around
 and recording everything that it sees.
 And instead of manually programming all that,
 they're just this machine learning to figure out what it sees
 and actually machine learning and computer business
 to take in all that data and analyze images from the recordings.
[01:26:44]
 There's generative AI, that's when computers create new text and other media based on data
 it already has.
 So that's, I think that's on Chris's website to his capsule. The AI he uses takes a picture and generates another picture that has like the bits and pieces of the previous picture.
 The rest of the images takes it.
 So it's generating something new. That's a generative AI. It takes what was there and then generates something
 new out of it. There's also new text, there's some AI, you can just say tell me a story
 about a unicorn and a faraway place and it will tell you, it'll write out a story for you. That's, that's gender than AI.
[01:27:45]
 There's also AI that makes music.
 So, there's AI.
 So, let's just kind of make a, make a mellow,
 little fire hip-hop song about,
 going to sleep.
 Something like that. And then I'll, I'll create create the beat and it will create the lyrics for it.
 So it can create new text and other media. It can also make videos, not just pictures, sounds. It could make sounds like the generator sound of some mighty stomping
[01:28:27]
 the feet. So we like, or generate a sound of three people stomping their feet. And one
 of them is a child and the other one is an adult. So that's the only way I can do those
 things. It's based, it generates these things based on data it already has.
 And then natural language processing and helping.
 That's when computers understand and generate human language.
 So we know English, but it can NLP or not
 little language processing can also generate human language and other
[01:29:14]
 languages. So like for this part, generative AI when it creates lyrics or text. It's using NLP to generate the human language like
 text like lyrics and you know responding to your questions if you have a
 question like no no book LM it's using natural language processing to
 respond with English.
 Natural language processing. So, we're going to focus more attention on to natural language processing
 because that's what we see the most and use it the most.
 That's when we when we have something like chat, GBT or Jim and I or co-pilot and we ask it
[01:30:16]
 questions like what's the answer to this question or what's wrong with my code here.
 That's based on natural language processing.
 So since we use it the most,
 we're gonna focus on it for now.
 And if there's time, I can teach you about other AI.
 I have a lot of people who are not interested in the This is audio. Let me show you coffee this. I'm gonna drink that. [ Pause ]
 Okay, so natural language processing,
[01:31:41]
 also in the next NLP. language processing and Lp. When you saw that with the picture and the
 useful vector, it bridges the gap or the communication gap between humans and
 machines with natural language. So machines they actually just speak with ones and zeros, but then as programmers, we can use other code like console.log or
 if then else
 const, let, class, and all those things. So, I mean those are coding language, that's a coding language, but it's not a language that's for the general public.
 But there is natural language processing that allows computers to speak a natural language and natural human language.
 So you see here a picture of the human speaking and the picture of the computer speaking.
[01:32:58]
 Well, NLP bridges this gap so that they both speak English or in different language.
 The way it works, NLP analyzes user input.
 So like for example, the human is the user.
 NLP will analyze their input or what they're saying.
 Then it extracts the intent.
 Like, is it a question?
 Is it a statement?
[01:33:31]
 Are they trying to say yes?
 Are they trying to say no?
 Because sometimes you might ask somebody
 a yes or no question, right?
 And they don't always answer with a yes or a no.
 They might answer with
 absolutely or they might answer sometimes or not really so intent that's
[01:33:56]
 analyzing the intent it might be a yes like when all the different ways to say yes, all the different ways to say no,
 like that's part of analyzing intent.
 And so when this, when the person basically
 just puts in the text or a question,
 when you're typing to ask a GBT a question it's also
 extracting other info like time and location like if you ask it
 something like how will the traffic be at 5 o'clock on this freeway. So it's extracting not just the intent but also information.
[01:34:47]
 Like time and location. You might even give it an exact time and the exact location.
 So it's pulling that information out.
 Extracting it from the original question or comment.
 Then NLP, it keeps track of the conversation and context.
 So, there are some AI that you can just tell it one thing and then it responds.
 Then when you ask another thing, it has a short-term memory
 loss.
[01:35:33]
 It's like it forgot it forgets which it's asked in before
 and it forgets the context.
 But with NLP, you can keep track of the conversation and the context.
 So it knows which asked before.
 Like,
 what is the best,
 what is the best programming language?
[01:36:02]
 You might ask it that.
 And then the follow-up question will be, why is it the best?
 So it knows that maybe the same job is the best programming language.
 So the follow-up question is based on the previous question in response, right?
 So there's a context there.
 If it didn't have a context,
 then when you ask the question, like,
[01:36:34]
 why is it the best program language?
 If it didn't, it forgot to stop from the forum,
 then it might respond to what are you talking about.
 I don't know what programming like.
 I don't know what you're talking about.
 What programming language?
 So you need something to keep track of the context,
[01:36:56]
 like what you're talking about before.
 So you can answer it.
 The question that you have now.
 OK, so the context is like questions that were previously asked and we also had the answers
 that were more of the responses that were previously given.
 And now the NLP produces a response based on information from the internet
 or a given context. So we know with this part here the given context that's notebookotebook LM. We give it the context. And then it provides, if we ask a question,
[01:37:47]
 it gives us an answer based on, you know, the files that we've either are notes based on our
 code. Whatever we give, notebook LM, that's the context. And it basically answers on that.
 If it has no, if we, if we don't give it any context it might not be able to answer
 but it I'm pretty sure it has some answers from the internet so if you don't
 give it any context and you ask it a question it'll get its information from
 the internet or you have chatBT, you can just ask it
 whatever. Well, it's just basically getting its information from the internet.
[01:38:30]
 It's getting its context from the internet. Or getting the response. It's
 pulling things from the internet and basing a response on it.
 We want to focus on giving it a context.
 When you do that, then they will give you answers that you already understand.
 Because we want to basically, you know, ask good questions about our notes. We want it to be useful, right?
 We want it to be useful, help us succeed with our Codex Academy course and make it easier
 for us to keep checking notes.
[01:39:18]
 So we want to be able to, I want to teach you something, an AI that uses NLP, but it doesn't get all of the information
 from the internet.
 Instead, you have to give it the context, just like the LM.
 So we'll sort of copy the local talent.
 Then MLP can respond in a language that
 it has already analyzed and understood.
 So once we're using already analyzed English
[01:39:58]
 and it understands, it already has like a strong basis
 in English.
 But if you like other languages, like Spanish, Japanese, Italian, those are available too.
 And I think this is the last slide.
 And so last slide.
 Over.
 And I. Yeah.
[01:40:30]
 And then after this, we'll go into the break and now just introduce the practice.
 After that.
 So, we'll hug you face AI models.
 AI models.
 What we see here is a picture of an AI, and it's like something coming out
 that this is representing in this box.
 So hugging face is a platform or website
[01:41:00]
 for creating, running, and deploying AI models.
 So we're AI models.
 AI models are programs that protect patterns in data
 and respond based on the patterns.
 So look at this as an AI and all the data is in its brain.
 In that data, there's some patterns
 And then here's a response based on the patterns in that data
[01:41:38]
 So, you know, that's why, you know, I
 Might think that AI is dumb sometimes, but it's it's smart to in that it has all the data and it can just pull it up really easily. But it's just based on the patterns that it's solved, not much different than us.
 Like, we are, we based our responses and we'll be talking about based on what we already learned.
 So AI is not so different in that is, whatever data you give it,
 it will respond with that data. And there's like the same garbage in garbage out. Like if you
 just put garbage into AI, and it'll just respond with garbage. But if you give it good data,
 AI and they'll just respond with garbage. But if you give it good data,
[01:42:25]
 they'll respond with good data.
 And people, if you teach people garbage
 and like just how to cuss
 and how to speak with bad grammar
 or, you know, this respect,
 this respectful way to speak,
 then that's what comes out of their mouth.
[01:42:47]
 But if you teach people to use good grammar,
 use good language, with respect,
 then that's what comes out of that mouth too.
 So similar to AI, whatever data it's given,
 that responds with similar data. So similar to AI, whatever data it's given,
 that's the response with similar data.
 And that's what it was programmed to do. So AI models are basically programs
[01:43:24]
 that detect the patterns and the data. And then AI models on the hugging face have been programmed
 to respond according to tasks.
 So what we're going to take a look at this.
 There's a website here and you just put this in the notes.
 And we'll take a look at the website.
 And by the name of it, you never guess that it's about AI.
 I mean, it's about AI.
[01:43:45]
 I mean, it's like, like, it's like, how is that for the agency AI?
 It doesn't sound like AI kind of, I mean,
 but you need to take a look at it. There's a lot of AI.
 From that website. And I like it because it's free.
 You can use it as much as you want without getting charged.
 Well, it's not the only one. There's other AI websites,
 or platforms that you use it for free.
[01:44:35]
 But this one has a lot of pre-built ones. That's why I like this one.
 Pre-built, ready to go.
 Some other websites, you have to go to yourself.
 But that's a different course, not this one. We're here in Codex Academy.
 We're just learning how to build, I mean, how to use AI.
 That's already been built.
 And that's coming soon.
[01:45:00]
 We'll do it by side.
 Hugging face.
 Not code.
 This is the website. Pretty simple.
 Looking at the website.
 A lot of just text.
 So not really much to look at. We could just get lost in just text. So not really much look at it.
[01:45:25]
 You can just get lost in the text.
 But we were talking about models.
 So let's, I'm going to click on models here.
 When you click on models,
 all of these here are Okay, so this one is just showing what's trending models.
 So there's models, there are AI programs or models coming from Microsoft.
 Deep seek is a popular one.
[01:46:21]
 Let's see if it inserts for it there.
 I guess I don't see this option when I'm pulling it in.
 It's a search for one. I need zoom out.
 I click on models here. I should be able to search for one.
 So they have all kinds of models. I think they have Gemini.
 Gemini, I think it's called Gemma though. Yeah Google Gemma. [BLANK_AUDIO]
 Yeah Google Jamma, that's the one they use for gemini.
[01:47:11]
 It's here and the files are really big.
 The data comes with the data.
 It's a program and the data.
 So some of these files are really big, like gigabytes.
 You can take a look at it, let's see here.
 One seven, let's see how big this file is.
 So I'm just going to click on this AI model. And we're just going to explore here. I'm picking on files because that's
[01:47:50]
 where the problems are. You can get this 4 gigabytes, 4 gigabytes of data. Actually,
 maybe all of these are necessary for that.
 That's a lot.
 Or maybe almost five gigabytes each.
 Huge.
 You will be able to run a server in the cloud with that kind of
 model.
[01:48:21]
 Because it will cost too much to put it in there in the found because it
 takes up too much space and it's gonna use a lot of CPU to process. The more CPU
 you use the more you get charged. Let's see if there's also a cool pilot here. Here, here, cool pilot.
 I don't know what's the,
 I guess you can see for a company.
 A new pilot is at my gift club.
 It moves back and back to the.
[01:49:09]
 [BLANK_AUDIO] And you see a whole bunch of AI from Microsoft here.
 There's also a channel of G18,
 or G18.
 [BLANK_AUDIO]
 Open the AI.
 [BLANK_AUDIO] Open the eye.
 So we see all those popular models here in hugging face and basically we have access to them,
[01:49:38]
 AI models.
 We can use the leaf. and it shows here AI models on how we face have been programmed to respond according
 to tasks.
 Here this is exploring the website. There's tasks here.
 And these are the different tasks that AI can perform, like converting audio text to
 text or you can see your computer vision.
 Yep, as a nation, you can estimate like how far an object is or turn an image to a video
[01:50:27]
 right here or turn an image to the text and basically take an image and then
 describe it as image syntax. Here's natural language processing. The one for
 processing, the one for chat is text generation, the one for grading sporees or lyrics. That's text generation. One for answering questions based on
 documents and files that you give it. That is a question answering right there.
 The task that I'm using for,
 or there's task for transcribing.
 So that would be audio and the text.
[01:51:27]
 It's not in this site.
 Oh here, automatic speech recognition.
 That one's,
 that's, I use an AI model from here
 to transcribe videos.
 So a lot of tasks.
 So once you learn how to use AI, your creativity and your willingness
[01:51:51]
 to learn about new things, there's no you know, there's you know, guys a little bit,
 so many options available and it's just going. Image to 3D.
 You can take a flat image and make it 3D.
 But I'm just going to talk about things that we use in class
 or it will help us succeed in class.
 So we're going to take a break now.
 And get the break timer going.
[02:04:58]
 Okay, I'll see it's gonna break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back in the break. Now you have time to work on any assignments.
 You'll produce assignment. Or the current assignment is caps done with redox.
 Anyone done with this?
 Almost done with it.
 We're going on it.
 All right guys, anyone have any questions about this?
 Alright guys, do anyone have any questions about this?
[02:05:34]
 Okay, so this one's due on Thursday before class,
 but there's also a practice just in case you're interested in trying something for your capstone,
 expiring persistence practice.
 So what is this one about?
 So after a set amount of time,
 expiring a persistent login,
 so you those must be re-enter their credentials. Have you ever been on a website
[02:06:09]
 you log into it then after like 15 minutes you have to re-log into it as a
 expiring, expiring login or maybe there's other websites where you can
 log into it and then the next day
 you're still logged in, the next day you're still logged in, maybe it's after a week
 that you have to log in again. That's an expiring login.
 For this Codex Academy, for your Moodles academy account, I think that's a 24 hour
 expiring login that expires after 24 hours. So this one is going to um copy that,
[02:06:56]
 which you can basically set any timeframe that you want. If you know how to convert milliseconds.
 If you know how to convert milliseconds, so how does this go? So in the front end, when users authenticate, like when they log in to your website,
 get a timestamp with this, with the, with fast and method. Date. Now you don't need to install anything it comes with.
 It comes with JavaScript.
 Now we'll give you time step.
 You need to capture that time stamp.
 Save it in the variable.
[02:07:38]
 Then store the user's email password and the the timestamp in an object. So we could call that object
 login and you'll have you see mail password and the timestamp. I give you the
 current timestamp when they logged in. Use persistent login practice
 instructions. So we had a previous practice called persistent login practice instructions. So we had a previous practice
 called persistent login practice. Use those instructions to store login info
 and go for storage. And then when the site and area mounts, so you have a site
 and area in your capsule or wherever project. You have a site in area in your capsule or wherever project you have a
[02:08:25]
 sign in area there get the current timestamp with date.now so when that site
 in area amounts or when the when your website loads for the first time that
 day or whatever in that hour or Just basically, whatever it knows,
 get the current timestamp to date about it now.
 Also use persistent login practice
 instructions to get login info from local storage.
 So that previous practice from the floor it teaches it has the instructions
[02:09:06]
 how to get the login info that's already stored in the browser, how to get it with
 local storage. So basically want to get that login info that's already stored in the browser. Using local storage.
 Now, once you've got that login information,
 the save login information.
 If it was saved,
 because maybe there's not a login information in there,
 but if there was something saved in there,
[02:09:40]
 convert it to a login object with JSON.parse.
 Because you would have to a login object with JSON.parse.
 Because you would have stored a login object with an
 email password and timestamp.
 So you take, you get it.
 It's going to be a string when you get it.
 So you have to use JSON.parse to turn it back into an
[02:10:00]
 object, then subtract the current time step and the time
 stamp from the login object. So that login object will have a time stamp and
 you get the current time. So maybe that login object was created like one
 hour ago. And then you get the current time stamp and then you subtract that current time stamp minus the login time stamp.
 So check if the difference is greater than
 86 million 400 thousand. So that's one day in milliseconds. So it goes by milliseconds basically.
 You didn't get
[02:10:43]
 you know you can expire a login as precise as millisecond.
 This is one millisecond, I mean one day in milliseconds.
 So if you want to expire it longer, then you would make it a bigger number than this. Or if you want to expire it after one hour,
 if you want to expire the login after one hour,
 you would make this smaller number,
 which means it could be calculation.
 Or it could ask AI, what is one hour in milliseconds?
[02:11:20]
 If you don't mind, it would be math.
 That's the easy answer. easy question for AI is answer.
 So we are basically comparing the previous time stamp
 to a current time stamp that gives you
 the like how long has this person been logged in?
 So if the difference is more than one day,
 store an empty string for the login in local storage.
[02:11:52]
 Yeah, store it in local storage.
 Just basically clear out that login,
 that's already in local storage.
 I like to just clear out the property instead of totally deleting it
 so that I know that you know there's something
 that's supposed to be there. So you just clear it out just store an empty string instead of
 object instead. That basically clears it out and that means no more lock information to say.
[02:12:24]
 that basically clears it out and that means no more login information to save.
 So the data empty string indicates an expired login.
 That basically means there's no more login stored in the browser.
 And it will require users to re-authenticate.
 Basically, when the login expires, they have to enter their password and email again. So that's what this blocks you through.
 I'm going to start the breakout rooms. and visual on core collaboration.
 One place islands.
[02:13:17]
 One for many evaluations or corrections of many evaluations.
 And we have put four of them, three or seven hits, we'll get ready.
 We'll get into them.
 We can break our rooms, it should be open now. I'll stick around if you have any questions.
 If you want to do any corrections, just let me know.
 I'll be here. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO]
 >> Just the other question.
[02:34:08]
 Yeah, I was wondering if I could just show you the crowd forms for
 the front end assignment just to see if I need, if this will satisfy the requirements.
 >> Okay.
 >> Okay.
 >> And it's in here, so you have it now. Okay.
 It's in here. So you have it now?
 Yeah.
[02:34:38]
 Is this, was it like this be okay?
 I mean, it's not going to be how it will end.
 I still need to like integrate it into the maybe the science thing, but just to satisfy it.
 I know a lot more.
 I need to read the loan.
 I got to see.
 My page.
[02:34:57]
 I see it, but it's small.
 I can't like expand the page.
 Like as usual. I see it, but it's small. I can't like expand the page.
 Like as usual.
 And like, and I can like, let me look in. So this is the page. Let me see that.
 So it's AWS.
 Create, create, create, delete, delete. Yeah. and the heat.
[02:35:28]
 Yeah, just a simple form.
 Yeah, then I guess the output, the output from this,
 something going on, it should be an output.
 Yeah.
 And not just like objects. Yeah, so for the UI, I think it's fine.
 It's not just--
 It's okay.
[02:36:03]
 It's like, yeah. Okay. Thanks.
 I'm trying to integrate it.
 Yeah.
 I'm not, how do you want me to integrate that?
 It's like trivia API and the dynamite authorization.
 Does that need to still be in there?
 the dynamite authorization. Does that need to still be in there?
[02:36:30]
 Wait, say that again. I'll show you.
 Are we showing?
 Yeah.
 Do these two here still need to be in?
 If I still need to submit grades,
 okay, I'll leave it in the last,
 at least they fulfill their requirements,
[02:36:54]
 unless there's a different thing in your website that
 fulfill their requirements for things.
 I think it's okay.
 So there's caps on proxy.
 If you're not using any other
 So there's truly API using that as a proxy. This is just this isn't a live
 Think this is that was just my little
[02:37:21]
 See what I'm showing
 So you update the UI for the AWS,
 but you could show me that.
 No, it's still not.
 It's showing, that's showing like error message
 is checking to see if there's a, you know,
 a backend for the proxy,
[02:37:39]
 but it's not returning, just saying it's unreachable.
 Does that satisfy the proxy requirement? Or is the proxy
 have to show the actual backend connected? No, it's it it should show it should actually
 either connect to it. Yeah. Show a response as if it didn't work. As if it did work.
 Yeah, like a response that it usually would show as if it didn't work.
 I saw that I thought it was this, the handle errors.
 It's like coded to handle the back end error, the KP cases are there, but I don't know how it.
[02:38:22]
 Yeah.
 Oh, maybe I'm thinking about an assignment that the team later on.
 >> Okay.
 >> So this one's for the proxy.
 So yeah, proxy.
 Oh, yeah, we did deploy back then.
 >> Yeah.
[02:38:36]
 >> We didn't deploy anything to the back.
 So yeah, you can just handle the errors from now.
 >> Okay.
 >> Okay.
 >> Cool.
 >> Thanks. >>, cool. Thanks. [BLANK_AUDIO] [ Pause ]
 >> Yeah, the question is.
[02:39:38]
 >> Yeah, so I wanted to put some on.
 Are we getting, are we going to go back into the lambda?
 And are we going to do anything more with the lambda back end.
 I have like I'm trying to play to cloud front and back into play to lambda,
 but the assets for the front end images and videos and stuff To those be automatically deploying or like
 uploading to that. Can we go through that?
 Oh, no.
[02:40:15]
 Yeah, so those,
 let's see, Ken,
 I think those assets can be put in there.
 How do we know?
 Why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why our internet picture, then you don't need to avoid them to face it. You have a internet meeting.
 Let me show you what my thing is looking like here.
 Let me see if I can find it real fast.
[02:40:53]
 Let me see if I can find it real fast.
 [BLANK_AUDIO]
 I thought your question was about an ambulance.
 So you probably won't have much assets in there.
 - Well, just the, when I deployed the front end to,
 or when CloudFront deployed,
 had a host the front end,
[02:41:18]
 it doesn't, all of the images are just like,
 you know, exists.
 I looked into how to upload the front end,
 and ask that folder, but I wasn't sure exactly like, you know, exists. I looked into how to upload the front end asset holder,
 but I wasn't sure exactly if it should be the district
 or it should be in the folder or how to path
 to the assets is resolved.
[02:41:33]
 The front end, when you have the assets there, it should automatically, it should have access
 to the assets that's in the disk forward.
 But don't we just upload the main or, I mean, the index?
 What are we uploading?
 Indexed name? the index? What are we uploading index remains? Oh, well, yeah, you would upload a main budget
 as per the assets and those will be those get copied to this
 poll. Also, so you have to include those.
[02:42:17]
 You have to include those if you're zipping those up,
 you need to include those. and those up, we say, we have water. - And S wait, so in S through like,
 the S3 bucket, the front end bucket,
 do we add it to the,
 this folder of the S3 front end bucket with main?
 - With this folder, yeah, it pulled all your assets
 from the S4.
[02:42:42]
 - It wasn't pulled it from the S4.
 - Okay, do we just dump all of the images all your assets from the SFO. OK.
 Do we just dump all of the images next, upload them in there with main?
 Yeah.
 But your images will not be the same name as they are in the SFO.
 They are left-packed maintenance.
 There as they will be actors who packed in the disk folder.
[02:43:06]
 Yeah, so basically just copy everything in a disk folder and then you should have a problem.
 Okay, gotcha. Thanks. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, looks like the brick our rooms are back.
 Also in conclusion, I didn't listen here, but we learned the Google Cloud summarizing.
 What can we do there? I forgot.
 We just got the texture.
 We did extra steps.
 Ignoring the disk folder.
[02:51:23]
 Saving backups of AppYAML package, and package JSAID and package lock
 file. And we added that backup folder to get ignored. And we also learned a few things about AI and started honing in on natural language processing and Now you have two minutes to take attendance.
 Make sure you do that if we haven't done that already.
 Now classes dismissed.
 That's today's lesson on AI.
 Stick around for a few minutes just in case anyone has questions. [wind blowing] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Apr 23, 2025 19-51.txt"

Transcript from Apr 23, 2025

[00:00:00]
 Good evening class. Welcome to Code X Academy level four week seven day three and the theme for this week is AI our official intelligence. agenda for today is take attendance, do announcements, review or was taught yesterday.
 I think if we have time, we'll do some of these second-hour things, which are just concluding
 some things in Google Cloud and then continuing with new AI topics.
 I think we might also, if there's time to do some practice,
 otherwise it'll happen here in the third hour,
 which is also going to be available
 for many evaluations for this week,
[00:01:04]
 or the corrections of last week's many evaluations.
 Now's the time to take attendance.
 If you're here right now, you can head on over to your code X account and mark yourself present.
 Now time for announcements.
 Can you just load that up for you guys? Okay. So, you have student collaboration day on Monday.
 First, I did went well.
 What would you say about it, Alex and her, they'd go well, that we were able to catch up.
[00:02:14]
 We were able to get a lot of things done.
 I'm not completely caught up, but I fixed some things that I was struggling with.
 So that was progress.
 - Okay, very good.
 Do you think you'll need another student collaboration date
 or you're all pretty caught up?
 - I don't know yet.
[00:02:43]
 I probably okay. Oh my god. I had booked an hour with deep
 today and my calendar didn't go off. Oh, you just missed your appointment with you.
 Yeah, I'm going to message you. Okay. All right. So just continuing with the announcements. We need evaluations, so the one for week seven was due today before class.
 We can do the many evaluations for the corrections for week six, but that was the submissions
 for that was posed on Tuesday. And the other ones were posed to. Remember you should on the add submission button to be placed in the waiting list and to qualify for the
 on time point. This is the
 meaning evaluation for week seven. I haven't included the like to find details yet.
[00:04:05]
 But I'll I'll do that today. Just as a brief overview, basically it's about AWS S3.
 Being able to deploy to AWS S3 through the console and also with the CLI and other like setting it up with the console.
 Also deploying to AWS CloudFront because they come together.
 Technically you can deploy with just the S3, but you're re-exiting the network properly.
 Because S3 cannot, it doesn't have options for single page websites.
 So that's why we have CloudFront to give us the ability to customize the options for single
 page websites.
[00:05:07]
 So, how to deploy the cloud front with a console and also how to deploy with a command
 line and how to set up a platform.
 Or you're seeing the page website.
 How to set up Redux right here.
 So like package is needed.
 What file should you have?
 What folder structure should it be?
[00:05:39]
 What belongs in each file.
 How to set up a store, and then how to use readups. So set up is a lot. And then using it is different than using regular state variables. So that's the difference? What's the need? How to dispatch actions, things like that.
 assigned so the front end accounts assigned it.
 But this is on Thursday for late credit and corrections.
 If you haven't received a grade for this yet,
 then you'll receive an extension to submit corrections.
 If one capstone reduction is through the Thursday or tomorrow before class.
[00:06:47]
 It's just in here.
 In the descriptions. some of these are short descriptions and we know that we need more information about them
 but basically the main line right here.
 This is not a all-inclusive description, meaning this main line speaks for itself
 it describes itself so that's item repeated here in the description. This one just
 adds to it. I'm going to close up here. And you're not common principle in the description.
 I'm trying to get something down.
[00:07:52]
 The principle is not included.
 Inside of this main description.
 There is this one here. Use placeholder states for non-zeroizable values.
 If you are not using non-zeroizable values for your state variables, there is an idea
 for you.
 For a cleaner, redler's return section
 built into the conditions and then like that and symbol.
[00:08:37]
 So the ad will return section in your
 your Redux components, right? You have you return whatever you turn it gets rendered.
 And you might be using the N symbol to cause some things to either render or not render.
 Working in the nation here is don't use that N symbol.
 Instead use conditions outside of the render return section. When we put your conditions, so this is the condition, right?
 This is conditional that decides whether something or not, whether something renders or not.
 So instead of doing that, you can have a cleaner return section by putting your conditions
[00:09:29]
 outside of that return section.
 Those conditions will determine what to render and how will they determine what to
 render.
 They just either will score something or nothing in the same variable.
 So basically you can just render that state variable, maybe it will have something,
 maybe it will have nothing, that's how you basically decide if something
 renders it up. If you don't want something to render, score something in that same variable.
[00:10:07]
 And then another thing is here.
 I'm going to plug it back into lambda, the front end to S3 and the out front. [BLANK_AUDIO]
 The assembly is coming up tomorrow.
 Remember ask questions that we have here.
 [BLANK_AUDIO]
 And whatever is posed here, any of these that can you need more points on them, remember contact the student's success team, that we know what assignment.
 And the reason why you follow behind, practice problems are closed from here, on the side and people, knock them off as you finish. I'll see if you can get stuck with a few minutes or more post into my cohort.
[00:11:07]
 So let's see if there's anything you want.
 Let's get like that. [BLANK_AUDIO]
 And there's nothing new here.
 [BLANK_AUDIO]
 When you post your unique clarification on any of the assignments or
 you have any questions.
 [BLANK_AUDIO]
[00:11:41]
 Note the LM, so remember this might be a great help if you have a lot of notes,
 or you're having a hard time finding where some notes are.
 Just add your notes, note with LM, and let the AI answer your questions or find where your notes are. We're in the other side. Another benefit here.
 I didn't run into it.
 I added some transcripts already.
 I think it's a day two here. [BLANK_AUDIO]
 [BLANK_AUDIO]
[00:12:35]
 So I created a program that takes our class recording and transcribes it. Here's this one for April and it shows
 like when something was said so this one was said at the beginning this was said 15 seconds into the video
 This one was said 13 minutes and 25 seconds into the video so if the
 transcription is not here you could always
 Find the spot in the video
 you could always find a spot in the video to get a better understanding of what happened.
 It's also a transcript for day 19 or April 19.
[00:13:49]
 So it gets pretty long so this is is how long. And this was a date when, well, this is Saturday, when I recently went to a first-to-hour routine. So this was Saturday, it gets pretty long.
 But it's something that milk book LM can help
 provide some information.
 In the middle school Saturday.
 And just keep going and going.
 And then there's this blank your there for the time to understand this thinking.
 Let's see this one, this one's the ethic, where you had more time to basically, I just
[00:14:40]
 talk to me first power.
 So this is how long you're listening to the first panel.
 Obviously some things here. I'm not sure what that is.
 Just open to a panel.
 So I'm using AI to trans-trans-trans-drive here and it trans-trans-drive it can.
 Maybe some audio is not here or it's not just I'll just go check what's going on there
 especially here it's it's seeing what's going on here for
[00:16:00]
 April 19
 It's in April 16. for a second. When you can start the audio, it's a little bit.
 This one is an incredible one. [BLANK_AUDIO] [BLANK_AUDIO]
 [BLANK_AUDIO] Okay, we'll put it in right here.
 Okay, so for those parts of the transcript, let's get, You can feed them to the left and find some things in the and useable marker days.
 Fill for your notes, fill for the recordings and order.
 And now we're going to start review so you might not need to take any notes.
[00:18:21]
 But if I say anything new, make sure you take note and type it down.
 Don't skip the review section if you're watching the recordings because sometimes I say
 new things during the review.
 So, what I'll further do is we'll into it, but also have your microphone ready just
 in case you have questions or when you do mini-value questions. Okay, so now time for the review.
 So we started talking about AI, let me get the new account here.
 We didn't do any coding yesterday.
[00:19:19]
 We just all conceptual. Conceptual.
 So artificial intelligence, that's a combination of programming and large sets of data and problem solving.
 Basically getting a computer to do what humans naturally do.
 Machine learning, so there's different areas
 of artificial intelligence, there's machine learning.
 That's where you basically, when you give data
 to a program, you don't have to explicitly program
[00:20:04]
 that program.
 You just let it like analyze patterns and let it apply that.
 Like for example, you can teach AI how to do math,
 not by programming it, but by just letting it see like a whole bunch of math examples and they'll
 figure out the patterns in there. And that's all that AI can do. We can just basically just learn
 from the patterns and what has already been seen in the data. Can't really tell you anything new?
 in the data. Can't really tell you anything new. Or they can sort of mix stuff up when you ask it to write a story and gender
[00:20:53]
 that they are. You can ask AI to write a story for you, but not that it's new.
 It happens somewhere and it's just putting bits and pieces and making a new puzzle for you.
 So, AI can't make up anything new. You can just give you examples of what I've already learned,
 but, you know, what makes you unique is that you can make up something new.
 And if there's things that you have to think out of the box and programming that you can wake up something new.
 And if there's things that you have to think out of the box and programming that you need to do and think out of the box, well, AI can't help you with that because AI can only teach you or AI can only help you with things that it's already learned.
 But things that's outside of the box, AI doesn't know about that.
[00:21:45]
 outside of the box, AI doesn't know about that. You could use AI to give me hints of
 bits and pieces of information,
 but it's up to you to integrate that information.
 If you're trying to do something encoding,
 and you can't really find it on the internet,
 most likely that AI can't help you with that either.
 that most likely that AI can't help you with that either. So what all AI can do is just, you know, give you information that it has already learned.
[00:22:14]
 A computer vision is not one's unique because it AI can analyze images and videos. And natural language process that's what we use for chat,
 chatting with AI. And so we talked about natural language processing. That's basically bridging the communication gap between humans and machines
 with a natural language. Before, machines could just talk once and zeros. Then we learned how to
 create programming languages. So the programming language we use is JavaScript and we use that to
 talk to computers, JavaScript, and HTML and CSS. But that's not exactly
 English. But with natural language processing, now we can speak English to a computer and it can basically understand us.
 So NLP, natural language processing that's it analyzes what you say or the user input and then the computer is able to extract the intent for
[00:23:47]
 which you're trying to say and it's also able to extract other information
 like time and location and bits and pieces of facts that's that was
 stored inside of which you said.
 And LPA also keeps track of the conversation
 so that it has a context, it's able to answer your questions
 without having to fully ask the question again.
 Like if you ask it, how's your name?
[00:24:24]
 Or I'm not like, what's your favorite programming language?
 And then if the AI answers JavaScript,
 then if you ask a follow-up question, then you say,
 so it's talking more about that programming language.
 Well, the AI knows that it's related to previous
 question and previous response here and we're talking about job experience, even though
 you did say it in that sentence. If it can't keep track of the context, then it
[00:25:00]
 basically just takes each sentence like as complete. Like if you ask it, something more about that language.
 And if that AI didn't have any context,
 then they'll just say, hey, what are you talking about?
 What language are you talking about?
 So basically NLP is able to keep track of the context.
 And it produces a response based on the information from internet
 or given contacts. So that given contacts is what note would balance
[00:25:33]
 response with, it could be given documents and text.
 NLP can respond to the language that is already analyzed and understood. So
 the language that is already analyzed and understood. So AI, some AI, they were trained on multiple languages. So not just English. We can ask it to respond
 in a different language. Then we talked about looking face AI models. Looking face is a platform or website
 for creating, running and deploying AI models.
 So let me show you that website. [BLANK_AUDIO]
 So the hugging face outside is nothing new. Will there anything is just mostly text?
[00:26:57]
 This is the homepage of it.
 Actually this is kind of long-term. It's really like the bulk out.
 So this is how it looks like when you get to that home page.
 It's just text and information.
 Well, it looks more...
 It looks better when you're not logged in because it has the information and some pictures here.
 In the summary of everything.
[00:27:32]
 You don't need an account to do what we're going to do with AI.
 I just wanted to create an account.
 Just seeing you.
 Just a difference. And there's no real difference. We can basically
 do what we need to do without an account. So AI models are programs that protect patterns in data
 and respond based on the patterns.
 So there, when you see things like models here, AI models,
[00:28:17]
 basically, you're just programs that detect patterns
 in data and respond based on patterns.
 And AI models on looking face have been programmed to respond according to tasks.
 So we are tasked here. We'll do our tasks here and which we'll get into in the next line.
 I'll actually have the next slide. I'll do this one first.
 Okay, so Google App Engine, I also talked about this one. this up here. And it will happen in the cloud.
 So there are some extra steps.
[00:29:37]
 So that this holder that we have
 Now we have, we generate the package, lock JSON file. The reason for that is because when we just load up the backend here, [BLANK_AUDIO] [no audio]
 okay so we can just go back in and then you go to the terminal and try to deploy.
 Then have the package lock to JSON file.
 It's going to be the clear.
 I have a copy of it. Okay, I'm going to deploy so it's going to explode. Just put some inside of this and just ponder.
 But the things that take a little here is it's going to say something
[00:31:35]
 about package lock JSON file.
 And then you notice is that we don't have it.
 And if we did have it, it would speed up the required process.
 And it really knows the difference in the climate speed,
 but it may be more obvious when the program is much bigger.
 [BLANK_AUDIO] So, to generate the package lock JSON file, use npm install, don't use npm because p and p m doesn't regenerate the size, generates a different file.
 And optionally, you can delete the node modules if it appears in the disk folder,
[00:32:34]
 because we're going to run npm install, right?
 If you ever have some node modules appear in the disk there.
 So here's that thing here.
 I'll actually visit the Silver Warning for it. [inaudible] Yeah, if you don't have that package, JSON, mock file, it'll basically give you a
 warning that you get rid of that warning.
 Just when in-gen installed, you can connect this over, see the disk. and then installed in the next disk holder,
 seeding this, and then installed.
[00:34:09]
 You won't install anything because we have the empty package
 file there. [BLANK_AUDIO]
 [BLANK_AUDIO]
 [BLANK_AUDIO] (mumbling)
 Well, I'm just gonna copy this one.
 I had a backup copy, which was, oh, it's already there.
 (mumbling) [ Pause ]
[00:35:19]
 >> Okay, so I had to back the top of you because of this.
 Save it back up of the hammer file and package JSON
 and package not in a folder.
 So I called mine knockback folder,
 scan for a backup, put it on in front of it
 to represent that it's like hitting over the floor.
 So that's not me and T.
[00:35:43]
 I'm talking to him over the north, holding him, that's not me until you're talking to him.
 And to get him over, so he won't get talking anywhere, it acts as a head member.
 He's gonna get him in some of the more.
 Right there.
 Okay, so now we're going to just fill this up a few things about Google Cloud. App Engine environment variables. So right now we don't really need environment variables, but we can
 we can use them, but it's different. It's different on the
 algorithm. Compared to AWS. So copy this and keep it as reference.
[00:36:50]
 This is how you get environment variables.
 Or this is how you can figure environment variables for App Engine.
 And you know, if everything is half-engine,
 when we're doing things, it's all command line.
 There's not much, like, not much on the website to continue about your program.
 We can do a lot of things on the front, the terminal. So this is notes for Google Cloud.
 Sound is faded away. the other. Next, next, next.
[00:37:47]
 Next, next, next.
 Next, next, next.
 Next, next, next.
 Next, next, next.
 Next, next, next.
 Next, next, next. Next, next. Let's get through the things.
 Pump up here.
[00:38:12]
 I don't think the sound a little bit there.
 That's the most I can pump it up make sure it's
 coming from the
 direct source
 matter now
 alright So what was I, yes, I just pasted this in.
 I've been pasted in yet.
[00:38:55]
 I'm going to paste it in now into the notes.
 Environment variable is going will happen.
 So we need to, the key to this is use a separate dot e and v file.
 To score environment variables for app engines, specifically
 for app engines.
 So in the disk folder, we're going to define app
 engine environment variables in the file.
[00:39:29]
 And then you're going to save a backup of that in the folder.
 It might be the back folder. back over and then if you don't already have this and the this over to getting
 more because because GitHub doesn't employ the backing [BLANK_AUDIO] [inaudible]
 [inaudible]
 [inaudible]
 But let's see if it's in very more. With this folder.
 Okay, it's not in here.
[00:40:47]
 Okay, so we're going to ignore the disk folder.
 Because I guess I didn't talk a lot of the work.
 So GitHub doesn't deploy the back end.
 And if it doesn't deploy the back end, it doesn't need to have this folder because
 that this folder is where we deploy from.
 That's why we deploy the back end with other things like AWS Lambda or in this case
 Google Cloud App Engine.
[00:41:27]
 You can help with just there for the backend so I can see your code and so I can grade it.
 But when you're done with this class, you don't need to store your, your backend code and get up.
 Because again, deploy it anyways, unless you want to save a backup copy of it and get help.
 Or if you want to share your code,
 you're back in server code to somebody,
 then you can store it and get help.
 Other than that, you don't need to put your code in the GitHub
[00:42:02]
 repository online.
 put your code in the GitHub repository online.
 So we're going to use a separate D&D file for App Engine. In the disk folder, the find App Engine variables in the D&D file.
 So we have a D&D file right now.
 And we have a ENB file right now. We just have 40,000, 8,000.
 All you can put here, mose equals to about.
 This is the main ENB file.
[00:42:37]
 And then in the disk folder, we're going to make another one.
 But this one's for App Engine.
 This is in the this folder now.
 In this folder, I can set the mode to production.
 And let's see, I'm going to just start this folder.
 Not from this folder, but this one here is the sea.
 Is the sea with the enders here. [BLANK_AUDIO]
[00:43:30]
 [BLANK_AUDIO]
 So it doesn't say anything about the moment.
 [BLANK_AUDIO]
 So I can include it here, and you can see the difference.
 And this makes your other pattern here.
 And it puts it in the back.
 And if the other pattern is clear,
[00:44:02]
 so when the handler was going to add the mode here. and then we're going to import.env
 and figure it And then insert another here.
 Here I need to to start 2.
 And then I left the one for building it in production.
 I left with exclusively for building.
 And you see if I fixed this, yeah.
 So open a new terminal and type NPM start to tune.
[00:45:31]
 NPM will start to tune.
 So that's like, that's been enabled not takes.
 And if I don't run this, it's in that can seem unbarnable. [ Inaudible ]
 [ Inaudible ]
 [ Inaudible ] [wind blowing]
 [wind blowing] [inaudible]
 It's three light.
[00:47:01]
 Now I just repress the back.
 Back in.
 There is a 3-3.
 And then we can put out the... Now if I deploy this in the building first, I can actually move.
 And then run the hill.
 and before it now, which we expect, what we expect to see is that it's going to show mode equals production because we put a separate in v file in the disk folder.
 While that's not going in, let's take a look at this. Save it back up a bit in V and the back and folder
[00:48:47]
 and this folder to give ignore so I think I'll do that already
 ok
 ok Okay, so it deployed. I can even type this or I made a script already.
 So there's my website.
 And here I am.
 I'm looking like. [BLANK_AUDIO]
 [BLANK_AUDIO]
[00:49:51]
 [BLANK_AUDIO]
 [BLANK_AUDIO]
 [BLANK_AUDIO]
 I deleted the wrong file.
 [BLANK_AUDIO]
 Good thing I have a microphone right there.
 [BLANK_AUDIO]
[00:50:04]
 Let's try that again.
 So the problem there is, it didn't have the package, it's not JSON file, it needs that.
 And you can see the Json family. So the lock file.
 Yes.
 So again, we have inside of this missed folder.
 It's own in the file with its own E&B variables, which is separate from the ones that
 we have in the loop right here.
[00:50:54]
 We have in the loop is for a development for us here locally, whatever is here in the room. I mean, whatever is here in the disk folder, that's for App Engine.
 It's okay for App Engine to have a copy of this.me because it doesn't give it away, like a browser does.
 It keeps it all in there. The only thing it gives away is whatever you respond with.
 So if you have a, the only way it can give away your environment variables is if you,
 you have a root handler or something like, you have a handler and it gives away, you just basically respond with your environment variables. That's the only way you can give it away.
 Or if someone acts into acting, then accesses or files or logs into your app engine project.
 Actually, they can't even log in through your web app engine website. They have to log in to the console.
[00:51:55]
 Okay, so I'm gonna try that command again.
 Open live.
 This should show the moment of production.
 Yeah, so it's using, in this live site, it's using
 production money.
 and the
 so we can take a break here
[00:52:32]
 inside of the
 break timer [BLANK_AUDIO]
 All right, see you after the break.
 [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [no audio]
 [no audio] Okay, let me just go to the right slide here. Okay, so we're back from the break. And now some new AI topics. I'm not not going to use the full hour so so that there will be enough time for practice
 or for working on other things so hugging face AI tasks
 so
[01:04:01]
 I went through a quick overview of the tasks yesterday, but we'll go a little bit more in depth
 today.
 So tasks are actions that AI models have been trained to perform.
 And we're going to load up the page right here to show you what those tasks are.
 Make sure you copy this,
 save it into your notes.
 Into the AI notes, this is going to go into the AI notes. Okay. We have to flip side, also put it in the chat, just in case for user access.
[01:05:16]
 Okay, so here on this page is listed tasks.
 Another way to get to it, I think think is thinking here and thinking on tasks. Yeah it's a big
 re-menu, hamburger menu with a lot more things.
 So task reactions at AI models have been trained to perform.
 So here are the tasks that are in hugging face.
 This one that makes sense.
 Natural language processing.
[01:06:01]
 So translation.
 So that's the task.
 It can translate things.
 Subarization, you can give it, you can give AI a whole book and they'll
 summarize it for you.
 Click notes, you can click notes.
 It's a little bit of a re- Next generation, if you click on it, you can see it.
[01:06:27]
 Next generation.
 Next generation, that's about generating text.
 Text is a task of generating new text given another text. So I hear it, not upon the time, and then the AI does the rest.
 And you get more information about it, where you can click on the task.
 where you can do this click on the task.
 So I'm going to face lists of variety of tasks that we saw there. And the pre-trained AI models that can perform them.
 So for this text generation task,
[01:07:23]
 here's some models that can basically perform this task. Here are some models that can
 basically perform this task. And it also has data sets here, but we
 don't really do not make a sense of much to the data sets. We're just looking at the
 AI models, looking at AI that can do this for us. Some other tasks.
 Some interesting ones like computer vision.
 Mask generation.
 We need that.
[01:08:02]
 Mask generation is the task of generating masks that identify specific objects or region of interest.
 Mask are often used in segmentation tasks.
 When you provide a precise way to isolate the object from interest, refer to the process or analysis. So there's a B here. There's a bump of B right here. And somehow
 you tell the AI mark the spot of the bump of the B. And then it goes and gives you this image. So there's the B. And then you tell A, I move the B and then it
 puts this. So now it's just all red. You can fill it in with something else. It's easy to select it.
 So you could just use it as a like if you're doing Photoshop. you can use it to select the red, which is much easier than
 You know tracing out this bead right here
[01:09:21]
 Once that are just a little bit more difficult to understand And it's text text that's we'll get the foot side to stand.
 And then text the text that we have split in the yard.
 It takes a bit of edge and text pop and out the foot's the text.
 Okay, so this is not the CR, let's take the image and then say something about it, describe the position of the beat.
 And then it gives you the answer to beat, sitting on big flowers, running, run in the other flowers, the beautiful, beautiful set of flowers. Who's head and foot like this.
 So yeah, there's plenty of things that AI can do. Lots of tasks.
 We're going to focus on this one of them today.
[01:10:27]
 Let's see, your pre-tank AI models are programs that have recognized patterns in specific sets of data.
 So when you see trained or pre-trained AI models,
 if you see, the system basically means that they are programs
 and already can recognize patterns in the data that they're
 given. So in regards to the data that they're given, so this, these eight models here on the side, they've already been programmed.
 The data that they've observed is a whole bunch of pictures.
 They've already been programmed to complete this task.
[01:11:22]
 So when you see something that's free train and AI model
 that's free train that means it's already been given a whole bunch of data and
 it can just you know it can function without it without you giving any more data to it.
 And click on it's asked to view details about it. So that's what we did.
 Question answering AI.
 So that's what we're going to focus on for now. The question answering AI.
 That helps them.
[01:12:10]
 That will help with their notes.
 And I'll give you a new idea for your caps.
 Later on, after we've
 got some more to get.
 But basically the question answering AI
 can answer a question based on the document or text.
 So similar to notebook LM.
[01:12:44]
 So let's copy this and paste it into our notes. We've got the question
 answering AI.
 That's what we're gonna do. This is what we're gonna make.
 this is what we're gonna make almost like enough with the government on the state of the
 left, what's more of a sophisticated
 Okay so the question answering AI
 it takes two inputs which is a question and a contact.
[01:13:27]
 So I'm going to go to the website here and I'm going to pick the question and answering task.
 Here the others will see what the question is for you. Pressing press.
 Under natural language processing. Put it back to it.
 Natural language processing.
 There's a question answering right here.
 So it takes two inputs. It takes a question and a context. So this example is, there's a question which name is
 also used to describe Amazon rainforest in English.
[01:14:23]
 We context. So this would be like your document. You can read a document.
 That document should have the answer somewhere in there. It's just one sentence here.
 Here's the context. The Amazon great course, also known in English as Amazon,
 or the Amazon jungle, and so on and so on basically
 You give it a whole document and the question it'll give you the answer
 based on that
 Or not in this case is this text
[01:15:01]
 context And it provides one output which is the answer
 And it provides one output, which is an answer. There are thousands of AI models that can perform the question answering task.
 So let's take a look at this.
 So this is a question answering task.
 If we look over here, how many models can do with the question answering task?
 Since year 13,000 to the home in 227.
 That's a lot.
[01:15:36]
 So how do you, how can you choose how do you have your values?
 And then work with your knowledge.
 Which one is good? It's a work with not. It's a big, not good.
 Which one takes up too much space?
 So we'll learn that.
 At first, we need to know not coming face libraries.
 I mean face libraries are modules or packages that are used to connect to AI models.
[01:16:16]
 So, like for AWS, we had to connect to DynamoDB.
 We had to, we downloaded the package that helped us create a DynamoDB client.
 So looking face libraries are just like the package.
 Download it, then you can connect.
 You can connect to AI, or communicate with AI like that.
 The module will attack it.
 So, you can see slightly different words, but they mean the same thing.
[01:17:00]
 Module, package, library.
 It means the same thing.
 I'm gonna copy this into the notes. [ Pause ] So we have a lot of libraries here.
 So these are the 13,000 models.
 There's honey pages of them.
 Okay so libraries we need to know not in libraries because we have to choose one of these and we're in there now we're down by the
 library
[01:18:20]
 so let's look at this next here I'll put it in the chat also, just in case.
 So this one talks about libraries. So basically, hugging faces like a hub of libraries or modules, packages.
 These are libraries right here.
 Different packages you can use to connect to AI.
 And some of the features that these libraries or faculty have.
 This inference API widget download from HUB, pushed to HUB.
 So, we're going to talk about that.
[01:19:16]
 The inference API.
 So that's the REST API that the frontend consent inputs and receive AI outputs.
 So basically, just at API,
 you can connect to an AI
 with your, you know,
 when you have to proxy,
 when you've created on an API proxy,
[01:19:42]
 it's like that.
 You just send your, send your data through a URL using Axios,
 communicate with the API, and then you get a response back.
 The thing is, when you use inference API,
 you can only contact it like a few times, maybe like 10 times,
 I don't know, get like 10 responses, and then it's, then your time got for the, for the
 day, or maybe for the month, or for the week.
[01:20:18]
 So that's one of the drawbacks.
 I mean, it's easy to access an API, It's just basically send your question, send your contacts,
 and then it responds back to the question.
 You just send it through Axios.
 No setup necessary.
 You don't even have to install any AI packages.
 You just contact with the API, which you can only get a few responses from.
[01:20:48]
 That's what that's about.
 You're not going to go that route because we don't want to be limited to like 10 responses.
 We want more.
 Without the one here, push the HUD.
 That's this one right here.
 What does that mean?
 That means AI from the library can be custom trained.
[01:21:16]
 So if this was, if you conducted to AI with this library,
 you can custom train it.
 And then upload it to a hidden face.
 You can upload that AI to a hidden face
 and share it with the world.
 Widgets.
 So that's this one over here.
[01:21:41]
 One custom AI from a library is uploaded.
 So if you upload it from here, it'll have a website interface.
 So when it has this widget feature,
 and you upload your own custom AI, it'll automatically have,
 like a feature, like an interface to use the AI.
 It'll be built in.
 So let's see if you're getting an example.
[01:22:17]
 Something that has question answering
 and under help
 that means [BLANK_AUDIO] So, this, let's see if I click on something that you will have to site.
 That's right. [BLANK_AUDIO] And you have to get to the side.
 [BLANK_AUDIO]
 Some of the new things taken in the house widget like you can enter the inputs on the website
 and get the output
[01:24:15]
 And you see, I'll try one of those hockers [INAUDIBLE]
 [INAUDIBLE]
 [no audio] Well, it's just some of these they have a, when you click on the model, the AI model, you can use it right here in the website.
 [no audio] right here on the website.
 Anyways, so that's a widget.
 With the library that we'll be focusing on is Transformers JS.
 So let's take a little of this here.
[01:25:36]
 We need to get familiar with Transformers JS
 because it's the easiest library that,
 I mean it's gonna be the easiest for us to work with.
 Because most hugging face libraries or packages were written in the Python programming language.
 With this one, Transformers JS makes some AI models compatible with the JavaScript.
 Let's put this on the notes. [BLANK_AUDIO] Okay.
 We need to work aside.
[01:26:51]
 I'll put in the chapters in case.
 Basically here.
 Something like so, we can example how to use it. Okay, so here, like this one, this is almost looks like JavaScript, but it's not.
 This is Python.
 It still has import and front, but they're like in different port.
 So import is here, there's from.
 There's no, we don't see any like const or left.
[01:27:42]
 It's just, it's just very debirable.
 Well, job escape you can do that team, but not attack.
 It almost looks like job escape.
 There's a rate, so that's easy.
 So it's not going to be too hard if you wanted to learn pilot.
 I think you can figure it out.
 I'm not going to go that route because we have
[01:28:15]
 transformers.js which makes some AI models compatible
 with JavaScript.
 You don't need to use Python library to use it.
 So let's take a look at it.
 Transform the JS.
 So in Python, this is how something would look.
 From an import.
[01:28:47]
 I'm using a pipeline function here.
 And then getting an output. This is how it looks in Python.
 And in JavaScript, this is how it looks. Not that much different.
 Using the Google input syntax that we use to
 declaring a variable using a weight. I guess I guess this one right here, I guess Python is
 automatically awaiting synchronous. It makes it look like it's synchronous.
 synchronous. It makes it look like it's synchronous. That's what it might be. We have to say, "Wait, otherwise it just keeps on going."
[01:29:36]
 So if the library doesn't have any, if the library is not with TransformersJS,
 you can't use that AI.
 I mean, if an AI doesn't have any features
 and Transformers that they're just
 and you're going to have to learn Python to use that AI.
 on the left, the eye.
 Unlike many hugging face libraries, transform with JS can only be downloaded.
[01:30:15]
 So let's take a look at that.
 So here are all these libraries here. Transform your JS.
 And only be downloaded by the user.
 You can't make your own with it.
 You can't upload it.
 And since you can't upload it, you can't have a widget.
 You can't use it to connect to an API, but you can download it and use it.
[01:30:49]
 And you'll walk on the scene. And we saw the similarities and differences in Python.
 And we see the next angles. Okay, I think we could stop here and use the rest of this hour for practice.
 So let me get that loaded here. for practice and for catching up.
 So this is the same practice from yesterday, since there was not much time to do it.
 Expiring persistence practice.
 So this is about a login where you can have a persistent login.
 Well, you don't want it to always be there.
[01:32:07]
 To build in some security, you want to be able to let that login log out.
 It needs to log out by itself.
 In this case, it'll log out by itself after one day.
 And this is what this is about.
 You can set it up to log out after a month.
 After a year, it's up to you.
 But a day is a good rule of thumb,
[01:32:28]
 because that's what our code X account uses.
 Like, if you've been logged out, or after a day is expired,
 you get logged out, and you have to log in again.
 So this only lists up here. And we're going to take a break with you and in 20 minutes,
 I'm going to be available for questions.
 If you want to do corrections, back in your graduation corrections, it's
 formula.
[01:33:15]
 You want to see the first half happening this week.
 When I get started with that, when I get that going there.
 I'm going to start break out real quick.
 20 minutes
 Use our needs just because Okay, so here's my side of the breakout. You can go in for a time, you need it. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so I'm going to go into the break now.
 I'll start the timer for that.
 And I'll continue just a few more minutes with Chris for the mini evaluation after the break. [BLANK_AUDIO]
[01:54:47]
 Okay, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And in this third hour, you have time to work on the assignment, which is perhaps stone Redux due tomorrow before class.
 Remember if you have any questions,
 you can ask through July cohort,
 or you can ask me here while you work on this assignment. There's also a post-apostal practice.
 Let me see if I have it here.
 But since you probably know about that index,
[02:06:22]
 I didn't post the practice yet.
 So it's right here
 just in case you missed it it's right here
 I'm gonna start to break our moves again Okay, Chris, let's head back over to the evaluation room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. So Chris is finished his mini evaluation for now.
 He's going to do some corrections later on.
 Alexander, do you want to do your mini evaluation? [no audio]
 Are you there?
[02:13:34]
 Are you just going to take it later?
 [no audio]
 I'm available just in case.
 Let me know. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so the breakout rooms are back.
 I don't think anyone was in them.
 At least not for the last few seconds.
 Well, in conclusion, for App Engine, we learn how to add environment variables to it. You need to use a separate.env file.
[02:51:27]
 There is no online console where you can add environment variables for App Engine.
 I'm going to face AI tasks.
 That's where we looked at a page where we can pick a task, click on it, and get a full description of that task.
 Question answering task. That's the one we're going to start using where you provide
 a question and the context, and it responds, the AI responds with the answer.
 Hugging face libraries. So there's a lot of libraries or
 So there's a lot of libraries or packages or modules. But a lot of them are Python libraries.
[02:52:13]
 So we're going to focus on transformers.js because that's the only one that's for JavaScript.
 And basically it's a, it provides a JavaScript way of accessing some AI models.
 Okay, so attendance, you have a minute to mark your attendance. The last class is dismissed.
 That's today's lesson on AI.
 I'll stick around for a few minutes
 just in case anyone has questions. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Apr 24, 2025 21-6.txt"

Transcript from Apr 24, 2025

[00:00:00]
 Okay, good evening class. Welcome to Code X Academy level four. It's week seven, day four.
 And the week, I mean, the, the theme of this week is AI. Today's agenda is to take attendance, do announcements, review, and then in the second
 hour, talk about AI if there's time, we can also practice third hour. Many evaluations or corrections.
 And time to work on assignment.
 Okay. And Alexandra is all entering to do her mini evaluation.
 And also, take attendance. Make sure you head on over to your Codex account and mark your attendance.
 Okay, so now time for announcements.
[00:01:26]
 Let me load that up. [ Pause ] Okay.
 All right.
 So let's see here.
 Okay.
 You guys, we're here for the student collaboration day and got some stuff done.
 That's good.
 Many evaluations remember at 60 minutes per submission, the time limit.
[00:02:34]
 So, you should try to know your stuff.
 Have your notes arranged already so that you can answer all the questions.
 It's already pre-made or at least it's here.
 We need evaluations.
 Yeah, one day in advance, basically,
 to arrange a note, but they should already be arranged because
 We're keeping everything together and together by topic
[00:03:13]
 AWS S3
 Cloud front Redux
 and setting up Redux and
 Using the state variables.
 There aren't any descriptions here, so I'll describe some of the things that I forgot to put here.
 So for AWS S3, I'll deploy it through the website, through the AWS website, how to deploy it with command line, how to set up an S3.
 That's the storage, how to add files, how to add folders online through the website. What else?
[00:04:10]
 Which files do you need to send two files plus the assets.
 Pictures, videos.
 And let's see, grey Ws Cloudfront, how to set it up through the website, how to how to set it up through the website, how to
 add permission for it to
 access the S3,
 how to set up
 how to set up
[00:05:16]
 in validations online. How to set it up for SPA. You have to set something up. You have to change the setting for it to work with SPA's single page applications, react applications.
 How to do all that stuff from the command line.
 I mean, basically, we just do one thing
 from the command line that's called invalidations.
 We should have some scripts for both of these.
 Then for setting up Redux, what things do you need?
 So it's similar to the CAPSTUM.
[00:05:55]
 You need to set up the state variables. ts file. How do you set up the state setters dot ts file? How do you set up the state selectors dot ts file?
 How do you set up the store dot ts file?
 What should you be exporting from those files?
 The code should go inside of those files. The code should go inside of those files. My package is
 you need. There's also a component you need to use. And I guess a lot of it is in the setup because using it is very easy.
 Once it's set up, using it is very easy.
 But using it, you would also have to demonstrate how to set up placeholder values.
[00:07:03]
 Placeholder values so that it's similar to what's in the capstone here.
 Perhaps on the Simon for Redux. to use placeholder states for non-sterializable values.
 So one way to do that is to use conditions outside of the render return section.
 So when you return elements from your React component, you have that
 return section, right? That's what gets rendered. Instead of putting conditions in
 there, you can leave the conditions outside of it, the conditions outside of it,
 so that your render return section looks clean. If you want something to render, put it in the
[00:08:09]
 state variable. If you don't want it to render, you can put
 nothing in the state variable. But just render the state
 variable.
 So what else do we need to do? Other things for Redux.
 Using a selector.
 How do you use Redux?
 So you need to use a selector to get a state variable.
[00:08:44]
 And you need to use the
 Use selector hook. You need to get a just stature by
 Using the Use dispatch hook.
 You need to put a provider component
 And into the store in it.
 You need to create an action
 by using the set object.
[00:09:10]
 You need to pass that object.
 You need to pass that action to the disk pattern.
 And that's about it.
 It's all pretty much, but the redox part is probably the hardest part here, but if you
 did your cap cell, this should be pretty easy, you know it already. And so this, we're still doing corrections for week six until Saturday for many evaluations.
 And so many evaluations were on time credit, were week seven, was two yesterday.
 And some assignments.
[00:10:20]
 So the capstone read-ups, I could do this.
 That was due today before class.
 And this one just closed the capsule and the counter caps.
 So if any of these assignments closed on you, make sure you contact the student's want to increase your score. Tell them which is
 I bet and why you felt behind. Practice problems our
 posts are inside bar here. I didn't fully
 update it so some of the some of them are still missing.
[00:10:59]
 Let's see if there's anything in the live cohort.
 Let me just go check that. I have nothing new here.
 When you have a question, do you need clarification on anything?
 And also for notebook LM, I provided some transcripts.
 So, I provided the transcripts for all the week six, week five and week four.
 If you take a look at them, you can click on those days.
 You should have a transcript there. So this one's from week four.
[00:12:14]
 And it's pretty long.
 But the good thing about how to get a transcript is that you can pass it to local LM and
 local LM will answer any questions you have about what's in the transcript.
 You can even pass all the transcripts to local LM, then they'll know all the transcripts to note with L and then they know all the answers to the topics that I didn't teach you.
 I've also added some for this week, maybe just
 I think this one.
 Yeah, that one.
[00:13:16]
 So order, I mean like, I didn't do it in order. I'm testing some features here and there.
 So I didn't do this in you have to use it all.
 I'll get something in there.
 Okay.
 I don't know.
 I don't know.
 Is anyone been using notebook L-M to help you find answers that you pass it
[00:13:46]
 your notes and your code or are you just doing it the old fashioned way or
 searching with your outside sources because sometimes if you look
 through your outside sources it takes longer to find things and it might not be as helpful because they talk about different styles of programming.
 You could even ask it, you can talk to your notebook LM and ask it, you know, ask it things like it's an interview.
 So, it's really nifty there, or you can just type everything.
 So, make sure you go through these days and order.
 I'm going to jump around, around for us you're gonna get lost
[00:14:47]
 because each day is built on the previous day and now we're gonna review and you should
 already have the notes for the review but type anything down that I introduce or anything that's new
 during the review session and if you're watching the recordings don't skip the review sessions
 because sometimes I add new things there. Also have your microphones ready for questions and for the mini evaluations.
 Okay, so that's it for announcements.
 Now time for the review.
 So for Google App Engine, we learned that adding environment variables
[00:15:51]
 is different. When we're doing it for Google App Engine, basically, use a separate.env file to store environment variables for your app and you don't have to do it online
 actually there's no feature to do it online like how you do it for AWS Lambda
 I need to pull it in a same box here. [wind blowing] [BLANK_AUDIO] [ Inaudible ] So the environment where. Basically, if you want to have environment variables for your backend server in Google
 Cloud, have a separate dot in the file in the disk folder.
 That's what will be used for your environment variables.
 All you do is put the values in there that you need.
 And that's it.
[00:18:35]
 Pretty easy.
 You just have to have two different copies.
 So it says here in the notes.
 Same with backup. So it says here in the notes, same a backup in some kind of folder. I put it in the disc folder, by the way, in the back folder, right here.
 We're talking in there and along with some other files.
 We're copy in there and along with some other files. Because sometimes we might delete this folder.
 And the files that you want to have a copy of are the ones that are not automatically generated.
[00:19:17]
 So this B&V and AppYAML and PackIt's LockJSA and PackIt package json these are not they're not automatically
 generated this is a special package json file with no dependencies and just So, you have to save backup from your non-generated files, automatically generated And then also the disc folder to get it more because your environment variables are there.
 Your environment variables are there so you want to ignore them.
 And there is this folder.
 And if you're just going to, if if you're gonna push this to get done, get done doesn't use this boulder anyways.
 Put it back in because get on can't deploy your back in.
 Audio is low. So the disk holder, you can ignore that for the back end server.
[00:21:07]
 You can get can't deploy it anyways.
 Your disk folder will get deployed to App Engine, but no one will have access to the code in this one.
 So we talked about tasks, AI tasks, and hugging face.
 Tasker actions that AI models have been trained to perform.
 The actions, things that they have been programmed to do.
 And let me just load the notes here.
 Okay, so this is the website. And if you go to that website, you can see a detailed list of the tasks.
[00:22:35]
 I mean, you can see the task details.
 Basically, just click on a task and you can, and you'll know what that task is about.
 Like this.
 What is zero shot classification?
 If you click on that, zero shot text classification is a task in natural language processing where model
 is trained on the set of labeled examples, but is then able to classify new examples
 from previously unseen cases. So we see here there's a text input and a labels input like these are like tags
[00:23:30]
 and doing is the best movie ever.
 So there's three words here, cinema, art, and music.
 So let's try to find an association between these phrase and these words.
 And it sees that the highest association here is cinema.
 So this is the output. This AI takes in these two inputs and it
 outputs the word cinema with 90% certainty. That's what this mean here. So
 basically saying this is what they're talking about. This is what this phrase is about. It's about soon enough.
[00:24:28]
 Other ones that we saw that might be unusual, we'll see it. Something that I didn't pick before.
 You can sort of guess what that is. Okay, so it's going to take an image and then return a 3D file, GLB, I guess that's what that is.
 In this 3D model, say, can you miss input and produce 3D output?
 So it's going to--okay, so it's going to look like this sort of.
 So that's pretty good.
 I mean, you see that it's made manually,
 or you have to scan it,
[00:25:26]
 but now you can make a sort of guess what the 3D is.
 Text to 3D, and the other one does.
 Text to 3D models to take in text input and produce 3D output.
 Okay, so it takes a word or a prompt for cats statue and then it makes a 3D
 out of it.
 3D file and check.
 If you're, if you're making, if you need, like if you're interested in video games, this might
[00:26:11]
 be something that can help you, like, produce your things, like video game models.
 So those are examples of AI tasks that can be performed.
 So one can face this a variety of tasks and pre-trained AI models that can perform them.
 and pre-trained AI models that can perform them. So let me task that they can perform.
 This could form that career going through talking about.
 Question and answering.
 In natural language processing, question answering. And it shows the models
[00:27:08]
 right here, the AI models that know how to do this task. Basically it's a
 given question and given a document, then I'll give you the answer.
 So you'll hear the score a lot, pre-trained, pre-trained AI models.
 So they are basically programs that have already been given the ability to recognize patterns in specific sets of data.
 You don't have to teach it in any of the other things.
 Because in some of the, in some, like, hooking face is not the only AI website. There are some that gives you a
 Like tasks, but they're not trained the AI is not trained in the accepted training
[00:28:18]
 And oblique two years
 In a monkey face you can stick to short cut and use something that's already trained. So we clicked on the task and we needed.
 And we saw this one question answering.
 A question answering AI can answer questions based on the document.
 It takes them two inputs, a question and a context.
 And it provides one output to the answer.
 There are thousands of AI models that
[00:28:58]
 can perform the question answering task.
 the question answering task.
 So, we look here how many? 13,000. So that's too many.
 Like, how do we do this one to pick?
 I mean, there's big names here.
 Like, you see, like,
 like, deep seek.
[00:29:22]
 So, I might be related.
 We will. right there.
 You can try the big names, but when you get big name,
 you might get a big file and you can get a big file
 like four bigabytes in my senior, so much to handle, too much processing.
 Then there are
 hugging face libraries.
[00:29:59]
 Hugging face libraries are modules
 or packages that are used
 to connect to AI models.
 And remember something very popular. library.
 library is right here on this page.
 There's a list of them a lot to choose from.
 Basically there are like functions or you know how you have a
[00:30:45]
 a root-chills holder and you have your favorite function in there that's your
 library of functions so these are libraries of functions that work with
 AI and the different
 And for its API, so some of these libraries, you can just connect to the AI with the REST API.
 And it provides the URL, and then you add in the query is for JSON forever.
 Like you just pass it through the URL,
 like a question in the context,
[00:31:29]
 we pass it all through the URL
 and then it does a computation
 and then it sends you back to answer.
 So it basically has its own server.
 If you do it that way, you can only contact it a few times
 and then you can have to pay
 or you wait for your credits to refresh before you can contact it again.
[00:31:52]
 That's not a good way to do it because you can only contact it like 10 times
 and that's it for the day.
 If you can try to implement that on your website, it's not really practical
 if you have people picking on like an AI feature on your website and then it says,
 "Sorry, come back another day." So that's the entrance part that provides a API that you can eventually, you can just
 try it out, but it's not really good for, you know, production.
 Exposing to clients unless you pay for it.
[00:32:39]
 Here's to the hop, Here's to the help.
 Here's to the help.
 So we can customize.
 And here you can customize.
 These libraries provide ways to customize the AI models.
 So you can customize them and then push it to.
 Having this. And share it with the world.
[00:33:07]
 Which is so this is the thing about which it's here.
 Go on step.
 I try to find some images before but once I'm talking about I know the ones I've seen before, like Deep Sea.
 I think Deep Sea here. [no audio]
 [no audio]
 [no audio]
 [no audio]
[00:34:04]
 [no audio] So this is a widget right here.
 This is a widget.
 You click on their site and then it has a widget.
 You can use the AI here.
 So basically what that course labs does is you give it a clock and then it creates a picture for you.
 So, I'll put it here at Tiger with just as a bound.
 and see the ball. So it's just as a whole bunch of static and then it comes into view.
[00:35:08]
 And there it is.
 But if you do this like five times, it's gonna, or maybe like ten times or whatever. It's gonna say, that's it for today, come back later.
 This is a nice picture.
 This is a niceless.js.
 And one thing you should know is that most of the libraries
 are written in Python, in the Python programming language.
 Python programming language.
[00:36:08]
 But TransformersJS makes some of those models compatible with JavaScript.
 OK.
 And you'll see that the library for Transformers to my JS is a lot of these libraries here
 to provide function in the Python programming language, where even Java or C++, C#, The transformers.js provides functions for using the AI and JavaScript.
 And it doesn't have these features right here in 1, 2, and 3.
 This long-decere it has is and you can download it and use it. You can't, there's no API.
 There's no widgets for it.
[00:37:09]
 You can't customize it.
 As long as you can download it,
 that means there's ways to use it for free.
 And here it is how it easily looks in Python. And then it gives you the,
 it gives you the JavaScript translation on the side, which isn't that far.
 And yeah, so that's about it for that. Okay, so we're going to go into, I think this is, alright, so this is the new section. You're going to talk about artificial intelligence, new topics,
 which are done straight.
[00:38:15]
 So, Transformers.js, AI models search.
 How do you search for models?
 So this is the part where I show you how to use
 hugging face, hugging face websites as well as
 for AI models.
 I define one of the things that you need.
 I'm copy this here. [no audio] So if you go to the 100% side, then you do the model search so that you pick on models here.
[00:39:27]
 There's tasks. You can pick a task or multiple tasks and then they'll show you which
 models can view those tasks. So what we'll do is we'll select question answering from the natural language processing section.
 So here's the natural language processing section. And we see here there's 13,000 results to many to choose from.
 Then in libraries, in the library section choose transformers.js. It's easier to see.
 Some here's a library section.
 We're going to have a library so basically functions that lets you use the AI.
 So, if you transform this job to a J s right there. This one is jobless
[00:40:50]
 given. So, let me do the Python. And observe Zenova and the names. So, we pick the question answering task and we pick the transformer by JS library.
 You see that there's only 18 models that matches and Zimova is, you know, where the name is in the modern piece.
 So we're going to be is we're going to install
 Zenova Transformers.js.
 I mean, yeah, the Transformers library.
 So Zenova is a company that heavily contributes to the progress of transformers.js.
 Basically that's a library that converts the Python functions into JavaScript functions. So let's copy this down here. [wind blowing]
[00:43:40]
 Being same with being out. So what we're going to do is we're If you go to the NPN website, NPMjs.com,
 I'll be facing the channel.
 This is where your downloading package is from.
 Like the Express package,
 this you can see it here.
 This is the Express package in some documentation, and it's covered.
 Well, there's the Nova transformers.
[00:44:18]
 That's only in the Nova Transover.
 I didn't want over the foot here.
 And another chance for it.
 So basically it's search for that.
 And you should see it the first one. We're going to use PNPN to install it. And we can install it into the Google Cloud back in because
 the back end server will support the AI. It will run it.
 And we can't do that with AWS Lambda. It's just too big for AWS Lambda.
[00:45:24]
 We can do it with Google Cloud.
 I'm going to turn it over here.
 And here, install and send a little bit about transformer.
 Next step,
 PNPF approved bills.
 That runs extra scripts.
 That's some packages require to complete installation. So, as a node with transformers is actually not fully installed right now.
[00:46:15]
 You might see something like this warning, "Can PN approve builds use it to install some other things.
 So when I type that,
 I want to install some other things.
 Choose which package is to build.
 Press Base to select A to toggle all
 i to invert selection. I'm going to press A and I'm going to pick everything
 and then enter.
[00:46:59]
 Next package is to now be built between build-based packages.
 Do I approve? Yes. Just put
 the S there. It defaults to none. Don't pick the S or, as if you're picking out, this is
 going to cancel. You need these packages for as many of the Transformers to run.
 is a number of transformers to run.
 If you do an NPM install, instead of PMPM, then NPM will just run this, these extra installations
 for you automatically.
[00:47:36]
 I mean, there might be a security risk
 because if you just install whatever package
 and it's not trustworthy and it has an extra installation
 script that also gives you some malware.
 You don't want that.
 At least with PNPM it's controlled.
 You can choose to install the script or not.
[00:48:07]
 You can do the post- install.
 That's what it's called.
 You can do the post- install.
 Also install Python, my typing Python in the terminal. So if you have Python you should be able
 to just type Python - - version. If you can't, if you don't see that, I'm
 recently upgraded mine. I had Python 12, I think, now I have 13, 313. I had 312.
 So if you don't have it in spaldew,
[00:48:51]
 you just type the word "type" on.
 And it should-- it should install for you.
 But if you just type it, and you have it,
 it's going to give you a prompt where you can actually start typing Python code here.
 I don't know Python code, so I'm not really sure what I mean.
 I know we can have variables and stuff like that, but I'm not sure how to describe them.
 But you can type "quit" in it in.
[00:49:27]
 No, it does the same thing too. I think it is just type "no".
 If you type "no", this is where you can start coding JavaScript. So I know job is good. I can put x equal 5 times 3 by 2 times 7 minus 9. So that's what X is. Now I can console file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file the word when you have a Python command or the node command it lets you start running code
 in those languages. So node JS, that's the point.
 And node, you have to press the code, see the price.
 the rest of the place.
 Okay, so I'll give you a chance to install those. Here's the brakes and the second brake now. [wind blowing]
 Okay, so you have to break. Thanks, yeah.
[00:51:25]
 Thank you. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Just waiting for the slides to load here. Okay, so we're back from the break.
 And now we're going to continue the lesson on artificial intelligence.
 So you should have installed. Um, there's an over-transformer is by now.
 That's Transformers.js.
 And there's different versions of Transformers.js,
 but you want the one from Zenova.
 Okay.
[01:02:41]
 And the reason is because they developed it the most.
 So it's going to be compatible with the most systems.
 There's other versions that people changed and customized.
 Those may or may not work on your system, but the number one works well.
 So that's why I'm just going to go the number out. But we're going to now we're going to use TDD.
 The design a question answering AI module.
 So if you remember from the hugging face site, right here, question answering, I I'll just pick this one. Question answering.
[01:03:47]
 The AI receives a question.
 It receives a context.
 And then it outputs an answer.
 So that's pretty much what you need to know to start designing a module.
 So what we're going to do is we're going to create, getancer.test.ts, make a test that context then responds.
 You can check if it responds with the correct answer. If it's in the context.
 Sometimes the answer will be in the context. Sometimes it won't.
[01:05:02]
 Test that it doesn't provide an answer if it's not in the context.
 And then test other likely and unlikely cases.
 Okay, so I'm going to switch over.
 So these are my notes.
 I'm going to switch over to another VS code
 where I did this installation
 and
[01:05:37]
 hit one of these files
 and I'm just going to start designing without programming first. I'm just going to start designing with module.
 Getensor.test.ts. So we'll just go to the answer. So we'll just go to the answer.
 So the answer is the answer is the answer.
 And then we'll just go to the answer.
 And then we'll just go to the answer.
 And then we'll just go to the answer.
[01:06:24]
 And then we'll just go to the answer. Then you put the callback in here for a function. I'm going to put an anonymous arrow function right there.
 So basically an arrow function.
 And then I'm just going to put my code in the code block.
 That's where I'll put the test.
 What are we testing for? Test that it receiving the question and the context and response.
 So maybe I'll revert it.
 So get answer.
[01:06:59]
 It's going to be a function. What does it do? It accepts a question and a context and it turns a response.
 And then for the second parameter here it's another function. I'm gonna put an arrow function
 there. You could just write right a full function like this like
 function. I actually this is a amount of assumptions like that. You can do it like that and then put your coat in here.
 The shortcut basically is just take the silks in right here
 and take it out and basically put it in there, so it's a good effect on your function.
 So it basically takes the place of the word function, because function will do it right here.
[01:08:16]
 And it's here to do it. Basically just move over into here and then turn into the camera.
 So I'm going to start writing my range phase in here.
 And put it at the back phase and insert phase.
 So a range is for setting up variables. With variables that we want to set up,
 we want to set up the question.
 We want to set up a context.
 We don't know what it's going to be yet.
[01:09:00]
 We'll figure it out.
 And we can figure it out now before we even move on.
 So what could be the question? I'm gonna figure it out. And we can figure it out now before we even move on.
 So what could be the question?
 I can keep it simple.
 No, we can.
 I can look at it here.
[01:09:27]
 Here.
 Here's the name is also here to describe the Amazon rainforest from English.
 So this is from a question answering task.
 And it has a contact already.
 So it's missing something.
 It says the Amazon rainforest also known in English as Amazon or the Amazon
 So it's missing something. Let me add that information here.
[01:10:12]
 Amazon rainforest. So I'm just going to look up Amazon rainforest.
 And some of the next one. and so, and so, and so, and so, so, so same thing also called the animal that I've
 heard, and also called the Amazon General or Amazon, yeah, it's a moist, dry leaf Okay, so I'll just get my whole sentence.
 Okay, so the first thing I have here is which name is also used to describe the Amazon Green Forest in English in the context.
 The Amazon Green Forest is also known as Amazon Amazon and Amazon Pumble.
 It's a moist, large, beautiful, green forest on the Amazon Bio.
 It's a covered and coverage of Amazon Basin
[01:11:25]
 from South America.
 And so, all right, so what we're gonna do is,
 we're gonna have that in the act phase.
 You're gonna use that function to get answered.
 So, what do it except the question and the context.
 So we can put that in here, the question and the context.
 And then returns a response.
[01:11:59]
 So this is the return of a response.
 How do I capture that response on the left side of the vehicle sign?
 Into a variable which I need to repair.
 I'm making a cut. I'm not going to change it.
 I do call it something that you can do. All your variables cost.
 So the blank wants to assert here. So if I look at this page,
 Amazon, it should say ambizonia. This should respond to the word ambizonia.
[01:12:56]
 So I'm going to expect the response.
 I can change the word around the combined input response is the result.
 This response is the...
 It's going to calculate the...
 It's going to calculate the...
 It's going to calculate the... Okay, don't look if you got this down.
 I can come down if you need to look a little bit more time.
[01:13:35]
 And you can see I haven't coded this function at all yet so I'm going to get some red lines
 here.
 Next one. Test that it was pause. We correct answer. I'm fixing the contacts.
 Okay so I'm fixing this let's return any response.
 So in this one should be the time.
 Okay,
 And also click the D. Just that it was all for the correct answer. It's in the context.
[01:14:35]
 It responds to the correct answer.
 The second parameter of this function is a function. So I'm just putting an arrow function there.
 and arrow function there. Lock in here.
 Start the remaining phase. I just copy this question in contact.
 As I can do the same, actually the same thing.
 I use the same thing. Act on the circuit.
 Actually, they're not--
[01:15:51]
 they got back.
 I'm just going to get this actually non-
 That's what we're going to get an actual answer. Let's copy it and paste it.
 Copy the paste on the previous one.
 Just put our filter down it to make it too much. And it's still going to build it.
 And then I'll put the next one.
 Test that it doesn't provide an answer
[01:17:00]
 if it's not in the context.
 If it doesn't, it's on the real answer. It's not in the context. So to make this work, I need to take the answer at this time.
 The answer is not in the context anymore.
 I remember what it was going can say this time, or how it's going to reply. But whatever, however, in response to this,
 you don't know how it's going to reply, but I can design how I want it to reply.
 So when the answer is not available, I don't want it to respond with anything.
 So, I can put here the response, the policy, or undefined. So, I can decide.
[01:18:38]
 I'm going to make it undefined. So, if it doesn't go to the answer, I just want to make it undefined. So if it doesn't go to answer, I just want to get it undefined.
 You could let it determine the empty screen, which is all seen.
 Or you can let it return something like, oh, I don't know the answer.
 You can let it do that.
 But in this case, I'm just going to let it not say anything.
 I'm not providing an answer because in the answer is not in the context.
 So we should not be able to answer the question.
[01:19:54]
 The next one is test that it doesn't provide an answer if it's not like the right to be that.
 Last one, test other there's no question. [no audio] So it doesn't respond with an answer if there is no question. this time I'm just going to put question after the final. Where are you going to come from the screen?
 [inaudible]
 Instead of responding from the answer, it's just no question.
 So there's no question here but there is a context.
 I suspect the response will be on the time.
 What's the middle case?
[01:21:35]
 In other cases, if the context is empty. the contact identity.
 It is possible that the AI might respond anyways.
 It is possible that it will say something and here with this module I mean I'm going to control the
 response. I'm designing it to respond the way I want it. So basically it will
 get the AI response but then it will return a different response based on this design right here. So the [inaudible]
 [inaudible]
 [inaudible] [BLANK_AUDIO] and
[01:23:47]
 you can
 send in the
 number
 and objects
 array and the array.
 This is the response of an answer if there's
 one of the questions. first thing, first thing.
[01:24:34]
 There, it's defined.
 I mean, that's designed. Get answered.
 The function is going to look like it's going to do this.
 Basically.
 If I didn't code anything yet.
 I've already been doing the first test.
 Okay, so now we're going to add the function signature. So that function signature is that the top line of the function, where you have function t-shirt, Grammaries,
[01:25:26]
 return types.
 So let's do that for us.
 I will come from some signature left for this. [wind blowing] Here. Here.
 Here.
 All right.
 So we're going to code the function signature. First, we need to create the actual module now.
 Hit answer.ts.
[01:26:37]
 Enter.ts.
 It's an empty file
 export the function
 from the specific function
 export and also match the bottom
 export function So next we're going to take in a question and a context.
 A question in the context.
[01:27:21]
 It's a message.
 A test file here.
 It's an artist file. You get the answer. answer is supposed to take in a question and the context.
 You see these three dots, though.
 These three dots mean that we didn't provide a type and
 the concept is saying, "Hey, I can't help you.
 Check it. These are coming in correctly."
[01:27:51]
 What we're going to do is we're going to
 insert the parameter type.
 All right. So for now, we saw that they were strange.
 So let's just at the open strings.
 And then, we insert the return type.
 What do we expect it to return?
 We expect it to return. back to tree turn. Back to tree turn.
[01:28:33]
 Either a string or undefined. So when we turn time, just come after the front to seat, just put a coat and then the
 foot here, it will return a string or nothing for undefined. Actually, there's more to it if we look at the sample of code here.
 Actually, this is not the job of scale.
 If you go to the NPM website, you have NPN website.
 And then the website for the Nova Transformer is you will see that it uses a link.
 So this is the Python code.
 You see the JavaScript.
[01:29:49]
 So we use the wait.
 So we're going to have to use the wait.
 We're basically here. And even if I put here like a return return in the world,
 we'll see the discrete linear library.
 Straightness on a valid-facing function return type.
 In the ESI because it's not referred to a
 promise compatible constructed bound. That means remember whenever we put a
[01:30:35]
 sink in front of a function it causes that function to return a promise. So
 this is not accurate anymore. It's actually returning a promise.
 And what does that promise contain?
 That promise will contain whatever we're returning.
 So how do we write that?
 We're going to...
 We write here that this promise, I mean this function returns a promise, and look, is that promise contained?
[01:31:08]
 He's the angle bracket there, it contains a string or undefined.
 So that's what the promise will be in return. on the front. That's the turn.
 That's the turn.
 It's a return type.
 So actually it's two return types for me.
 It depends on how you design it.
 Maybe you just can return a string only.
[01:31:44]
 You can return an empty string where you can return, sorry, I don't know. maybe you're just gonna return a string only.
 You can return an empty string where you can return, sorry, I don't know the answer.
 I'll see you in the inside. Okay, so this next part is the Transformers JS pipeline.
 We sort of saw that in the NPM page.
 The pipeline function lets you choose an AI task to perform.
 Then returns an A_i model.
 So let's copy this here. [wind blowing]
[01:32:46]
 [wind blowing]
 [wind blowing]
 [wind blowing]
 [wind blowing]
 [wind blowing] Okay, so pipeline function is here. [no audio]
 [no audio]
 [no audio] [no audio] So the Zinnovat model can paint.
[01:34:14]
 This is the task paint.
 Here's the Zinn's another model page.
 Remember, we have this list.
 After we select the tasks, and we pick,
 push an answering.
 And then in libraries, we pick
 transformers.js.
[01:34:40]
 We see some AI models here.
 Remember AI models, they're just programs that can perform
 with task and use selected.
 And you can always say there's not very much interruption.
 Even if you just go to the swim site.
 You might have a hard time finding information to eat.
 I mean there's a little bit of information right here.
[01:35:12]
 You can eat this model.
 If you click on this, then it pops this up.
 And even this is not correct because if you try to use this it might not work on your system.
 It doesn't work on my system.
 We installed this in over-transforms instead so we're going to deploy it.
 And then here's question answering.
 Oh, there's a dash in the keys that we fixed this here. [no audio]
[01:36:12]
 This is a direct example of the neck energy,
 but you don't need to mention this right here.
 I guess you could.
 We're going to put it and leave it up and see what happens if we can do that.
 Basically the second parameter is specifying which AI model you want to do.
 And that's the one that you can copy it here but it's not going to nothing exactly the way you want if they have to paste it in here
 and move it around. I guess you can try that. Let's try that. If I copy this
[01:36:55]
 I'll paste it into the function and then move the thing around.
 and it's facing into the function and move this one out. It'll just get in for its feet and it gets in top.
 And this is in the movement comment.
 It was a problem here, we have a great new place in the middle of it.
 And,
 we have a problem here.
 And we have to leave this part here.
[01:37:41]
 So you can see what happened at the demo. Provide that information.
 And then,
 so it's calling it type.
 This is.
 So we imported pipeline and give it the question answering task and it returns an AI model.
 So it returns an AI model.
 So we can make it clear.
[01:38:21]
 That's what it returns.
 Remember AI model is the program that can perform the tasks.
 And we can be more specific and we can say this is a question answering model.
 This might be enough or you might just call it, I just want to call it AI. Then, give the AI model a question in context, and different response.
 So I'm just going to select for it.
 Give the AI model
 and a question in context.
[01:39:21]
 We can even mouse over this and this will tell you.
 So this AI model, it takes in a question, which is actually, it could be a string or a string
 array.
 And it takes in a context which can be a string or a string array.
 And also takes an option.
 Question mark means it's optional.
 You can enter your current options.
[01:39:51]
 And it returns a promise.
 So if it returns a promise, you should wait here.
 And it's going to give us a question answering.
 That promise will return a question answering output.
 Or a range of outputs.
 It's just basically a response.
 Not sure how a fear been a response right now.
[01:40:27]
 So I'll get into this.
 I'll return that response.
 And put it like it.
 Because it might not be a screen.
 So many of you just feel like this.
 Because maybe, maybe it won't be a screen. I'm going to put results as might have to access a property record.
 Maybe I'll leave us on to that answer.
[01:41:15]
 Or there might be even a percentage like how, um,
 like how, how much percentage is it, is it think it's correct?
 So it might be an object. like how how this percentage is because I think it's correct
 so it might be an object
 so I'll show you the tip here. You could actually find out when types go.
 So this response will be a question answering output.
 You can see here.
[01:42:03]
 Question answering output. If I'd provide a third right here question answering output.
 And it doesn't like it because the choices are question answering output or the array.
 So let me just stick with one for now.
 Actually, I think this is all I need.
 If you click on it, right click, go to the definition. You can see the question answering model output. It has an output property because this is a class at the top of the class [inaudible]
 [inaudible]
 [inaudible]
[01:43:40]
 If you can right click on it.
 [inaudible] I can right click on it.
 I'm going to have mouse over it. Now I see it.
 It's an object that has a score,
 a smart and an anaster.
 Okay, so I already think it's going to be an anaster.
 It's a string here.
[01:44:08]
 You see that? I just-- from here, from here, I was able to figure out
 what kind of data type response would be.
 It shows me here that this promise will return a question answering output
 So I just put it here
 Then I might click on it
 And I can see the definition right here and if I mouse over it
 I see that it's supposed to be an object that has a score start and then answer.
[01:44:47]
 So that tells me response dot answer is what I'm looking for.
 So actually I said we need this to answer.
 It makes a more sense because this function is called the answer.
 Functions should be named after like a verb, but what it does is it's going to do is going to get something.
 What is it going to get? What an answer.
 Oh yeah, and to fix this one here, I'm just going to put this one on the other side
 on this side and insert it here. (wind blowing)
[01:45:48]
 (mumbling)
 Then you,
 maybe do it this way. Then you take this out.
 [no audio] output and then I can
 restructure the answer from it.
 The response will be an object that has an answer property. But instead of using documentation on this side,
 I'm just going to discharge it,
[01:46:49]
 discharge it out of this side right here.
 So there, that's a lot cleaner looking code.
 And since I already have this function signature, I can take these red lines out. Let's see what happens. and we can just put the whole path there or you can do NPM run test,
 you're going to get some problems here.
 And this is what it says unexpected token export. So, not even except. So, we're going take a break now.
 I'll see you on the other side of the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and this is the practice from earlier this week. now to expire a persistent login within one day, which is a 86 million 400,000 milliseconds.
 And while I'm going to issue a new assignment, but this is the previous one still.
[02:01:47]
 The new assignment that I'm going to issue is about setting up the Google app Engine Server. So you'll have a little extra time for submitting that.
 As soon as I have it posted, but I'll leave this up for now.
 So now it's time for the meeting evaluation. So I'm going to start up the breakout rooms.
 I'm going to give evaluations, so I'm going to start up the breakout rooms. As usual, collaboration, one for silence, and one for many evaluations. And I'll be open for 30, seven minutes. Okay, bring up rooms are open.
 Alexander said she wants to do the mini evaluation for this week, so I'll meet you in there. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 Oh, wait, did I?
 Oh, it's a little bit early. So, I'm going to go ahead and click on the button.
[02:40:27]
 So, I'm going to click on the button.
 So, I'm going to click big at room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so the, the breakout rooms are back.
 And now we're just going to conclude the class. Basically, it was about Zenova Transformers.js.
 We learned how to install it, how to set it up,
 but we couldn't quite run it, at least not with just.
 With there's some bugs, which we will fix tomorrow,
 where we learned things about the question
[02:48:26]
 and answer, sending out the pipeline function.
 And we learned about other tasks.
 But our focus was about question and answering task.
 If you didn't take attendance, make sure you do that.
 You have four minutes.
 Do you mark your attendance?
 Other than that, classes dismissed. That's the days lesson on AI.
[02:49:06]
 I'll stick around for a few minutes.
 I like Senator's just finishing up.
 Her.
 Her many evaluation.
 So let's just conclude it. I'll head on over to the breakout room now. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] So, let me think, I need to put how much, how much, how much do we start, how long do we do this? So I think we have 50 minutes left for this evaluation.
 What was it?
 45 minutes for this correction. Okay, going back to the... [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] I think it's a work now.
[04:05:12]
 Try it.
 Let me share your screen, though. I'll stop the recording.

///// FILE: "Level 4/transcripts/Apr 26, 2025 11-1.txt"

Transcript from Apr 26, 2025

[00:00:00]
 Good morning, class.
 Good. Welcome to Codex Academy, level four.
 Week seven, day five.
 And the theme of this week is AI,
 or artificial intelligence.
 In today's agenda,
 we'll take attendance,
[00:00:25]
 do announcements and review during the first hour.
 Then in the second hour, talk about new AI topics,
 specifically about getting our AI to work,
 at least with the tests.
 Third hour, many evaluations time to work on the assignment.
 And I see here Yuki wants to do the many evaluations, so I'll do his first.
 Now it's time to take attendance.
[00:01:07]
 Make sure you head on over to your codex account and mark your attendance.
 If you're here right now, you can mark your office present.
 Okay, now time for announcements.
 Let me just get that loaded up. Okay. Okay, so many evaluations of time limit is 60 minutes per submission.
 So I discussed before that when I was doing my evaluations, there were 30 minutes.
 And there are on a specific topic like per week kind of
 topic like what we're doing and it included more topics like for you guys
[00:02:33]
 you have like you know like four questions I had more questions on that and I had
 to do it within 30 minutes so I had to have all my notes organized.
 And, you know, just get straight to the point.
 And enough time to answer the questions
 that the evaluator had,
 which you guys have 60 minutes per submission.
 It goes a lot faster and smoother
[00:03:03]
 when you have all your notes organized.
 You should also submit your evaluations, your many evaluations on time so you could
 qualify for the extra point or not the extra point. The on time point.
 And the place in the waiting list.
 So I can still do corrections for week six.
 Many evaluations until the end of today.
 And then the mini evaluation for week seven closes Tuesday before a class.
[00:03:54]
 Okay, so recently closed.
 Was capsule in front end.
 Capsule and redux closes Thursday next week.
 There's a new assignment, I didn't get to announce it on Thursday,
 but I sent notifications about it Thursday evening.
 Capstone app engine is due Thursday before class next week.
 Right here, capstone app engine.
[00:04:39]
 This one should be pretty easy, I think.
 Create a template outside of your capstone. Okay, so the template will be outside of your capstone for a basic app engine back end server.
 So, basically, you just take our sandbox level 4.
 I mean, yeah, sandbox level 4, the App Engine part, the Google App Engine part, and save a copy of it, make any changes you need to, make it a basic App Engine backend server. Then in the
 capstone, create a branch for adding a separate backend folder for App Engine. So like we have what we have a.
 For your capsule and you should already have two folders the front end folder and the back end folder.
 You should have a separate one.
[00:05:56]
 Or app engine.
 So you can call it back end app engine if you want or back end Google Cloud. Maybe just
 double check my microphone if I can boost it.
 Let's see here. Yeah, I'll boost my microphone a little bit,
 or the most that I can.
 Okay.
 'Cause the past few days, I had to boost my microphone.
[00:06:38]
 All right, so,
 yeah, separate back in because this back end will be deployed to a different location.
 It's not going to AWS Lambda, it's going to Google Cloud.
 And the setup for it is different.
 So we don't want to confuse that setup with AWS Lambda setup.
 And then in that branch, where you add the backend folder,
 the new backend folder, paste in the template of the App Engine backend server.
[00:07:25]
 So that's the template you would have made over here.
 In the front end, create a branch for
 rendering the response from the local server.
 So you have to connect to the local server, your backend server.
 This is not, you're not going to get the response yet from the deployed server.
 You're going to get it from the local server first. And then in Google Cloud, I think I missed something up here, creative branch for rendering
 the response from the, okay, yeah, that's fine.
[00:08:22]
 Okay, yeah, that's fine.
 Okay, yeah, that's fine. I thought I was getting confused.
 I thought I would create a separate branch for rendering.
 I mean like getting separate branch for communicating
 and then a separate branch for rendering,
 but it's okay, The combined into one branch.
 Rendering or communicating and rendering is combined into one branch.
[00:08:54]
 And then in Google Cloud create an App Engine project for this back end server.
 Deploy the back end server to App Engine.
 You don't need a separate branch for this, because it should almost be part of your template.
 Because it's an App Engine backend server.
 And you're just copying your template over. You're not really changing anything.
 Just getting it to the employee and App Engine.
 Then in the front end,
[00:09:35]
 create a branch for rendering the response from the App Engine server. So here, you're going to create a branch for communicating
 with the deployed App Engine server
 and also rendering the response.
 The front end should be able to connect to servers locally and deployed.
 So this means that whether the front end is local or whether it's deployed,
 it can basically when it's local, it should communicate with the local server.
 And then when it's deployed, it should communicate with the deployed servers or server, the App Engine server, the
[00:10:27]
 deployed one. So it needs to be able to choose without errors.
 That means you need to have a condition that checks where the front end is.
 You can use the domain to find out which one to communicate with.
 Window dot host name.
 And then as usual merge, just do these one branch or one step at a time and then merge them one step or one branch at a time
 then force them to GitHub
 the details are not written yet I'll put the details later on, but this is pretty straightforward, I think.
[00:11:27]
 If you have any questions, just let me know in the July cohort chat.
 So that's the one, Capstone App Engine coming up this Thursday.
 And as usual, contact the student's success team
 if you need to submit a close assignment.
 Also, if you're gonna be absent or anything like that and you wanna get a excuse point,
 get a point for being excused for your attendance.
 You can contact them also.
[00:12:14]
 Okay, so there was a practice problem for this week.
 I don't know if I posted it yet, no, not yet.
 I'll post it today. But all the other practice problems are posted.
 Help seeker. So if you get stuck for 15 minutes or more, post it in July cohort because
 because maybe I didn't teach you how to solve something yet.
 And it might take you a long time to figure it out.
 So post your questions in July cohort, don't stay stuck for a long time.
[00:12:58]
 Let me see if there's anything new. [ Pause ]
 And it looks like there's nothing new.
 No questions posted here.
 [ Pause ]
 You can add notes and remember to use notebook LM to help you remember where your notes are because you can ask it questions and it will tell you where the answer is
 in your notes. And if that answer is in multiple files, it'll show you all files.
 And it'll also give you the answer. So that's one way to do it. Also, I've been posting
[00:14:00]
 transcripts. So all the transcripts up to Day four are current. Actually day three. I, week four and day 5.
 So it'll all be caught up.
 Then when I get a chance, I'll give it over to notebook LM, it'll help
 you, you know, find things that are not written in your notes. So you can copy those transcripts to notebook LM2.
 So remember, do your days in order, mark them in order,
 so you don't get confused, because each day
 is built on the
[00:15:45]
 previous one. If you skip a day, you get confused. And let's see. And like what Yuki is
 doing, he's using the recordings to catch up. And and you know, like your other classmates are doing using the recordings to catch up. So that's
 good. And now we're going to do a review. So just try to absorb.
 You should have all the notes for that review. But if I say
 anything new, make sure you type it down and take it, put it in your
 notes. Then after that, when I start talking about the new topics, that's when you
 should type whatever I type. And then also type some things that I say. You don't have to type it all, just things that stick out to you.
[00:16:49]
 Or things that you think you might not remember.
 And you can always watch it during a better time
 or just read the transcripts when I post them.
 Also have your microphones ready
 for the many evaluations or
 any questions you might have. Feel free to raise your hand at any time if you
 have a question.
[00:17:27]
 Now, let's time for the review. So on Thursday, we talked about the AI model search.
 Use the hugging face website.
 Inserts for AI models there.
 And while I'm at it, I'm going to load the 10 box notes.
 Give me a second here. So this is where we focused on the question answering task.
 That's in the natural language processing section. So tasks, we selected this one here.
 Here's the natural language processing section. Question answering. It pops up 13,232
[00:19:12]
 13,232 AI models are basically programs that can answer questions. Think of it like that. those are the ones compatible with JavaScript.
 So here's the library section.
 These 13,000 AI models or programs that answer questions. They're compatible with Python and some
 other languages but not all of them are compatible with JavaScript so if you
 want to see the ones that are compatible with JavaScript pick
 transformers.js and we have 19 here.
 We should see that there's a lot from company or profile called Zenova.
[00:20:36]
 And then we installed Zunova Transformers.js. So Zunova is basically a company that heavily contributes to the progress of Transformers.js. And if you look at the Hugging Face website,
 and there's a part about Transformers.js here,
 let me see if I can find it.
 where's the documents right here.
 Okay, let's see if I can see it. Okay, right there.
 And the docs, it has a section about Transformers.js.
 And it shows, let me see if it shows here.
[00:21:40]
 It doesn't show anything about which,
 okay, here hurts installation.
 It's saying, get it from hugging face transformers.
 If you try that, which I have already tried,
 it might not work for you.
 Maybe it depends on your system. Maybe it's just my system.
 It's uses my system uses the arm 64 processor, which is sort of has less support.
[00:22:19]
 But if you have the most common one, the x64 processor, or is it 86, I forgot which one.
 This might work fine.
 But for more compatibility, the Zenova one, the one from Zenova,
 instead of hugging face, there's the one from Zim Nova, instead of hugging faces, the one from Zim Nova.
 This one here.
 This is the one that's more compatible and it's more polished.
 So it should work on all our systems.
[00:23:15]
 My system, your system.
 So going back to the model search here.
 So going back to the model search here. Picking a question answering and then transformers JS. Yeah.
 The Alexander said X86 is an old school one. A lot of processors, I think a lot of computers
 still have that, but it has the most, I mean since it's established, it has a lot of support.
 See, even the Zenobo website, I mean, the Zenova AI model.
 It shows that you should be getting your, you should be using the Hunking Face Transformers.
[00:24:37]
 So if you tried that and doesn't work for you, it might discourage you from even using
 these models.
 So it just takes some digging to find out which one to use,
 which took me a while. I had to find out that this one was available.
 And I started using it and it worked on my system. Added the box pretty much, almost.
 I was able to get the one from hugging face working on my system, but it took a lot of work to get it going.
 So we installed the Zanova transformers and we view the NPM website which shows us how it
[00:25:34]
 translates Python because it's originally a Python AI model or program that answers questions. So this is Python. Looks pretty easy to understand.
 The conversion to JavaScript looks like this, which we are familiar with.
 When we are installing it, we need to run this command, PNPM-approved builds.
 Because PNPM has a safety feature.
 If you install a package,
 some packages require a post install,
 like an installation that should be done after installing the main package.
[00:26:36]
 Usually that post installation is for compatibility with your system.
 Like there's a Mac system, there's a Windows system, there's a Linux system
 or platform. And the post-insulation is, it blocks the post installation. So you need
 to run this command, PMPM approved builds to choose which post-insulation that you want to allow.
 And you need to allow the post-insulation
 from Zanova Transformers,
 or else it won't work on your system.
[00:27:36]
 It needs that.
 So this command runs extra scripts
 that some packages require the complete installation.
 that some packages require the complete installation.
 Not every package requires this. Just this one because it requires,
 it depends on your system, what it will install.
 And then if you don't have Python already installed, you can install Python by typing
[00:28:08]
 Python in the terminal.
 Let me fix that there because that's a keyword. I'd Python in the terminal.
 And then we started using TDD to design a question answering AI module. So let's take a look at that and it was called get
 answer. Let me open the Google Cloud back backend here.
 So we started putting it in our sandbox Google Cloud backend.
 We didn't put it in the front end folder.
 We didn't put it in the regular backend folder.
[00:29:24]
 the regular backend folder.
 We put it in a separate folder called Google backend.
 Because we're not going to.
 You cannot deploy the AI in AWS Lambda. It's too big.
 AWS Lambda has.
 Size limitations.
 So this backend here, that's for AWS Lambda.
[00:29:50]
 You can do other stuff like DynamoDB and, you know,
 proxy and proxy and API, you can do that.
 But when it comes to AI, you need more storage.
 And you also need to install it the traditional way.
 So that's why we have Google Cloud or the App Engine
 for our backend.
 This is the backend server for the handle our AI. And we started writing tests. I put these tests in the modules folder.
[00:30:50]
 There's also just a sample module here called Addition and the test for it.
 What you could do is just overwrite them or delete them. They were just there for, you know, for the template.
 But these are the tests.
 Oh, I think I added some.
 Yeah.
 Let me see which ones I just added here.
 So test that it receives a question and a context.
[00:31:43]
 Then response. So that's here. It receives a question and a context then responds.
 So that's here, it accepts a question in a context
 then returns a response.
 Then test that a response with the correct answer
 if it's in the context.
 Responses with the correct answer
 if it's in the context right there.
[00:32:08]
 It responds with the correct answer if it's in the context right there. It doesn't provide an answer if it's not in the context.
 So if the answer is not do you have any questions?
 I'm going to ask you, do you have any questions?
 I'm going to ask you, do you have any questions?
 I'm going to ask you, do you have any questions? respond with an answer if there's no question. I mean, doesn't respond if there's no question.
 Doesn't respond if there's no context.
 Doesn't respond with an answer if there's no question
[00:32:56]
 and no context.
 Okay, I remember I added this on Thursday.
 I mean, I showed this in class on Thursday. I mean, I showed I showed this in class on Thursday.
 You guys should have this in your notes.
 So this is what we set up each one for. We set up a question.
 Which name is also used to describe the Amazon rainforest in English
 and then it has a context. The Amazon rainforest also known in English as Amazonian or
[00:33:34]
 the Amazon jungle is a moist broadleaf tropical rainforest and the Amazon biome that covers most of the Amazon basin of South America.
 And this is before we even wrote the function.
 We had to design it. So what do we want? We want the function to be called get answer and we give it a question.
 And we give it a context. And then it returns a response which we
 capture on the left side of the equal sign. And then this one in this first
 task we're just expecting some kind of response so it can be any response. Then in the second one, we're
 expecting a correct answer if it's in the context. So it looks like the
[00:34:35]
 previous one, but now we're expecting the response to be the correct answer, which is Amazonia.
 Third one.
 Here the answer is not in the context. I removed Amazonia from this context.
 There's no answer in here.
 So I decided that
 if the answer is not there,
 if there is no answer, I don't want a response.
[00:35:07]
 So I just wanted to be undefined.
 I can go from there.
 'Cause sometimes your AI will give a wrong answer.
 And do you want the wrong answer,
 or do you not want the wrong answer?
 And so you have to program the module to only give you the right answer or no answer.
 I mean, that's how I want to design it.
[00:35:37]
 And you should also do think the same way.
 Customize the output.
 You might not like the output of the AI model.
 So you customize it with your function.
 And you return that custom response.
 As I can tell you right now, it will give the wrong answer.
 When you give it this question and you give it this context,
[00:36:07]
 that doesn't have the answer, it will give you a wrong answer.
 So you need to-- what I want is no answer at all.
 So you need to program this function.
 So not return anything if there's a wrong answer.
 There's a way you can check if there's a wrong answer.
 if there's a wrong answer. There's a way you can check if there's a wrong answer. And so, yeah, we want no answer if it's, did I just do this right here?
 Yeah. Here it is.
[00:36:54]
 If there's no question.
 So if the question is undefined, it won't give me an answer right here.
 Because the question is undefined or blank.
 You can also test it with different data types like empty string.
 You might get a different, you might get a different response with empty string
 versus undefined. So you can add those too.
 Because most likely you might get empty strings.
[00:37:40]
 Let's see here. I just did this one already.
 Okay, oh no, this one's no context. So if the context is undefined, it shouldn't give an answer. So this response should be undefined too. And then if both
 of them are undefined, expect the response to be also undefined.
 You might want to put here.
 I guess I'll do it now.
 I'll just combine them here.
 What I'm going to do, make another test.
[00:38:22]
 Right now, doesn't respond with a
 answer if
 if either I'm adding something new here if either the question or for context are empty strings. So, I'm going to put here instead of context here.
 I'm just going to put fake context or temporary context. Or even now fake context is fine because it
 shouldn't work at all. It should still give me no response. And I'll call this response 1.
 In response 2.
 I'll put in the fake question.
[00:40:13]
 All this response to, and then this one will be response three, or both of them. Okay.
 So here we're checking for empty strings.
 You get different results.
 You might get different results when you check for undefined and when you check for
 different strings.
 I mean empty strings.
 So it's good to test for those.
[00:40:52]
 So here it is in the test. We're testing that if either the question or
 context are empty strings, we should not receive a response. So here they are empty strings. Here we're starting with empty question and a fake
 context because it doesn't really matter as long as there's something in here. That way we can
 check if this will be undefined. Here we're testing for empty context, or empty string context.
 We just plugged in here a, a colored placeholder.
 Place holder.
 Place holder.
[00:41:41]
 Okay, because the question doesn't really matter,
 because if the context is empty string,
 it shouldn't even even-- it shouldn't even
 try to contact the--
 it shouldn't even try to use the AI model.
 It should just identify that this is an empty string
 and it just give an empty--
[00:42:04]
 like no response right away.
 And then here both of them are empty strings.
 All cases, they should be undefined.
 The responses should be undefined.
 Okay, so I just added something new there.
 Okay, so we started coding the function.
 We've designed the function first and then we started coding it.
[00:42:43]
 What you can do is if you want to open that file, just right click on the function,
 here's the import, but you can also right click on where you're using the function
 here.
 So anywhere the function is, you can just right click, go to definition, it shows it to
 you. We created the file, get answer. We exported the function, get answer, because
 basically this was empty. It was just an empty function. We exported it, we added parameters,
 question and context. You can call this whatever you want it doesn't have to match
[00:43:29]
 What's in here?
 Because if you have a variable here question it comes in here only the value goes through the name doesn't go through
 Okay, so this is this question. Well, let me just go to the empty string one.
 It's easier to explain.
 So this question here is an empty string.
 So it goes into here, but it only the empty string goes
 through the name doesn't go through.
[00:43:59]
 So the only the value goes through the empty string.
 And then when this function gets called,
 then the string goes through here.
 But this is not the name of what came in.
 This is the name of whatever I wanna call it.
 So I can call it,
 I can call it user question here.
[00:44:23]
 And it doesn't matter 'cause and I can call it user question here. And it doesn't matter, 'cause then I can call this user context.
 Just to clarify that these don't have to match.
 Okay.
 'Cause it's only the value that goes through.
 The name of the variable doesn't go through.
 So this empty string comes in through here to the function.
 And it comes out through here.
[00:44:55]
 So it didn't keep its name.
 Instead it changed its name to user question.
 Okay.
 So think of it like an alias. These
 parameter names are just they're useful. You don't have to match them. You could match it
 if you want, but the purpose is so that you get an idea of what the parameter is asking for. So
 when I see a parameter called user question, I think I need to
[00:45:26]
 submit a string. That's a question. Basically, they just describe
 what you're expecting to get for that parameter. What kind of value you expect?
 Okay.
 So we added the parameters and then we asserted the parameter types, the parameter types are string and string using the colon.
 Whenever you use the colon it comes right after the variable.
 So this is the variable. So this is the variable. Here's the colon and then
 there's the asserted data type. It never comes after the equal sign. It
[00:46:13]
 always comes after a variable name that colon when you're defining the type.
 Specifying the type. And then we asserted the return type.
 The return type is here.
 It's a promise because we made it a sync
 because we had to await these things.
 And this promise will eventually return a string
 or undefined because I either wanted, I either wanted a string here like this or I wanted it to be undefined like this. Okay, then the next thing we did, the pipeline function let's you choose an AI task to
[00:47:14]
 perform, then returns an AI model.
 So I showed you this part, use, we viewed the Zenova AI model page and we saw that if you click on the top right, it shows
 you how to use the model.
 It tells you to use the hugging face.
 It didn't update that yet.
 Let me show you, but at least it gives you a clue on how to use the AI model.
 Actually, no, it doesn't, it doesn't even it a task, and then it returns an AI model.
[00:48:12]
 In this case, well, they call it pipe.
 I wouldn't call it pipe. I'll just call it AI model.
 And it's going to basically be the AI model that you specify right there.
 But instead of specifying it, we're just leaving it blank.
 But at least even if it doesn't tell you how to use the AI model, the one that it returns here. You configure it out.
 Because we have TypeScript and the mouseovers.
 Okay, so we imported the pipeline function.
[00:49:08]
 Right here, from the Nova transformers.
 Then we gave it the question answering task.
 Right here, just that's it.
 Simple. Right here, just that's it.
 Simple.
 We gave that pipeline function the question answering task.
 It even pops up your choices here.
[00:49:36]
 Oh, yeah, here it is.
 Yeah, it pops up your choices.
 So question answering is the one we picked.
 Then give the AI model a question in context.
 So this returns the AI model.
 Then when you're going to use it.
 If you mouse over it,
[00:50:08]
 you can see here
 it needs a question and that question should be a string or a string array and
 it needs a context
 which should be a string or a string array.
 And we know it needs those because it's in the parentheses.
 That's what parameters are contained.
 It's in the parentheses.
[00:50:36]
 It also has some options that it can take.
 And then we see here using the callback function notation.
 It looks like an arrow function would basically just means that it's going to return a promise.
 And that promise will contain a question answering output or a question answering output array.
 So this question answering output is what we use here.
 So we can get the automatic, we get the menu for this part.
 So this AI model takes in the question and the context and then it returns a response.
[00:51:37]
 But in this, this response is either a question answering output or an array.
 Here, we're just, we're specifying that it's only the output, or an array. Here we're just we're specifying that
 it's only the output not the array. Otherwise if otherwise this one won't
 work. If you'll see how it if I go like this, see there's a TypeScript error.
 there's a TypeScript error.
 Bestify this. If you do it like that,
 then you can,
[00:52:10]
 you can, you can de-structure the answer there.
 How do I, how do we know there's an answer here?
 This question answering,
 output if you mouse over it, you can see that this response will
 have a score, start and/or answer.
 And I'll give you a clue right now.
 The score tells you how right or wrong it is.
[00:52:42]
 It's like the percentage.
 Like,
 zero means it's wrong. One means it's the answer is most it's 100% correct.
 And anything in between is the percentage of how correct it thinks the answer is.
 So if it thinks the answer is correct, then it's going to the score will be like a 0.9. If it's just guessing,
 it might give you a score of like 0.2. That's how you find out if a answer is most likely right, with the score.
 And we see what's next here for the,
[00:53:34]
 let me see what's next.
 So we gave it the
 question answering task and then we gave the AI model the question and the context. Okay, so that's, that's it.
 We're going to take a break now and get the response.
 That's what we did.
 We got the response.
 Okay, we'll take a break and then we'll go into the second hour with new AI topics. Okay.
[00:54:39]
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break.
 And now we're going to start new topics on artificial intelligence, mostly about getting
 it to work now, at least with the tests.
 Okay, so if you try to run the tests, it doesn't work.
 Just cannot test Transformers JS.
 So, I showed you last week,
 but what happens if you try to run the tests?
[01:05:42]
 So, I'm going to get that.
 Just going to run the test here.
 And PM test.
 It's already in the script.
 Get answer.
 We see here there's an error. Export.
 And this error right here, it doesn't come from our file.
[01:06:12]
 It comes from node modules.
 From the Nova transformers in the node modules.
 So this tells us that the Nova transformers is not using the old style of importing and exporting. It's using the new style right here. The new style of exporting and importing.
 And just is not compatible with this style. That's why we had to use, we had to use Babel here.
 This one right here.
 It converts new export import syntax to old export import syntax, which is compatible with Just.
 The thing is, it doesn't, it only does it for our code.
[01:07:22]
 Our code uses the new import export syntax like this one here and this one here and this
 one here.
 The R code uses it, but Babel or Just doesn't transform or doesn't compile the files in node modules.
 There's ways to get it to do that.
 There's ways to get it to do that.
 But in this case, you don't want to, I mean, you can try it. If there's
 time I could show you what happens. If you try to force, if you try to force, just to, or
[01:08:17]
 a babble, if you try to force just to use babble.env to convert this.
 You're basically just gonna hit a brick wall where it's just, the Nova Transformers doesn't work,
 because it needs, it basically needs a new syntax.
 I've already taken that route, tried to get it to work.
 So let's take that note here.
 Gonna copy this in our notes.
 So just cannot test.
[01:09:01]
 Transformer's JS, at least not without any heavy configuration, I wasn't able to get
 it to work with Transformer's JS.
 So basically an error appears when running the test file with JS.
 And just is not compatible with the new import exports syntax.
 And the new import exports syntax is in the transformer's module, not in our code.
 So that's what I showed you.
 It's the error is inside of node modules, not our code.
[01:09:51]
 Transformers JS.
 It also uses something.
 So if you were to force just to compile the new import export syntax inside of node modules and to make it and you force it to use the old syntax.
 If you force transformers js to use the old syntax of export import. Just will be able to test it, but then you'll run into a new
 problem. Transformers JS also uses import.medda. So basically that's
 something which is not compatible with JEST. And it's not easily a comparable either.
 So import.medasintax, let me just,
[01:10:53]
 we'll put that in the note here what that is.
 It's just, you don't need to know it in depth.
 Just need to know about it.
 Just in case you run into problems.
 That's just a different way to import, basically.
 A new way, another new way to import.
 Let me see here. So, Transformers.js, that's a keyword.
[01:11:37]
 And another keyword here.
 This is a keyword. This is code.
 So that import meta syntax or just basically a different way to import the import.
 Metasintax imports from different locations depending on the environment. So if you install
 if you install this on a Windows system, it might import from somewhere, if you install it from a
 Mac system, it might import from a different place. If you import from
 If you import from, you can actually use Transformers.js in the front end. So if you import from the front end and it detects it's in the browser, it'll import from
[01:12:40]
 a different location.
 So that's what it means. It imports from
 different locations depending on the environment. So that's not going to work
 with just it's hard to it's hard to compile this. I've tried it already. I couldn't get it to work. It needs
 transformers.js. It needs the new JavaScript syntax, basically.
 All right, so what we're going to do is use vtest instead.
 So, a vtest is a unit testing framework, very similar to JEST, but it's compatible with
[01:13:34]
 Transformers.js.
 And the reason why is because it doesn't require the tests and the modules to have the old export and import syntax.
 Basically, you can use the new export import syntax with the test.
 That's why it works.
 That's why it's going to work.
 Because we're allowed to use our new import export syntax.
 And we can use no modules that have the old,
[01:14:08]
 I mean that have the new export and import syntax. So let's copy this.
 And we're going to start installing it.
 There are my screen now. Okay, I'm just going to mark some keywords here. Okay.
 All right. So we're going to install VTest and uninstall all just packages.
 Because we're not going to use just for this.
 Not here, I'll do it from the backend here.
 So let's install VTest, PnPM install, you know those.
[01:15:49]
 And it's a testing module.
 That's not part of our app.
 We don't import it.
 So we save it in dev dependencies.
 And it's called VTest.
 And I don't know if we have to do this PnPM approved builds, but it won't hurt. So I'm just going gonna do it.
 Maybe it will hurt. Let me see what happens if it'll work without this or not.
[01:16:35]
 I haven't tried it without it, so let's see what happens.
 Uninstall. And so first we're going to, oh, no, we need to uninstall all just packages.
 So just packages that we have.
 Let's take a look.
 We have just and we have at types just.
 So that's only two.
 Pnpm uninstall just and at types just. Just.
[01:17:30]
 Okay, that worked.
 Uninstall at Babel preset ENV.
 Because it was only required for using JEST at PnPM, uninstalled, at NABL preset ENV.
 So that's this file here.
 That was only needed because of JEST.
 All right, so it's gone.
 And we also have to unconfigure it.
[01:18:24]
 Here it is. I can just comment it out just
 Basically, we don't need it. So it doesn't have to be part of the transpile process anymore
 Or the compile process. So I just commented out or you can just delete it so you know
 You can leave it here so that it reminds you why you don't need it because it's only for just or you could even put a note here that this is not required for the test and you
 actually shouldn't be using it because it'll break Transformers Transformers.js.
 'Cause Transformers.js needs a new import,
 exports syntax.
[01:19:19]
 Okay, so that one happened there.
 The TypeScript era started happening
 'cause we did some things.
 Now we need to change the JESS command
 to V-test for running tests.
 So I have a script in package JSON
 that uses JESS.
[01:19:43]
 So now I just need to use V-test. I'm just going to change this to vtest.
 That's it. It's going to use vtest to run the tests.
 It should be as simple as just changing that right there.
 Then run the tests with vtest. So if I just run the script, that will run the vtest command.
 So let's try it.
 NPM test.
 Or you can do NPM run test.
[01:20:18]
 They both work.
 Okay.
 So right now. Okay.
 So right now, so the test ran.
 It's saying here reference error described is not defined.
 Okay, so basically it's asking it wants us to import all these functions.
 And it's on watch.
[01:20:51]
 Press H to show help.
 Press Q to quit.
 So it's stuck on watch.
 It's automatically watching.
 I don't want it to automatically watch.
 I want to be able to control when it watches and when it doesn't.
 But at least the test ran.
[01:21:12]
 We're going to do something now to fix those that error at the scribe error. V-test configuration. So some configuration is necessary to make V-test run without importing the test functions.
 So those test functions are described, it and expect. And it'll work if you import those, but it's better to just configure VTest once and then
 after that, you don't need to import, describe it and expect anymore.
 Just like how we were doing with Jest, we're going to try to make V-test as much as possible. The
 same is JEST with minimal changes. So we need to create V-test.config.ts. Do this in the root.
 So that's the keyword here. And this is the key.
 This is code.
[01:22:29]
 And this is code.
 And this is code.
 And this is code.
 And this is code.
 And this is code.
 And this is code. And this is code. And this is code. So that's a keyword here.
 And this is a key.
[01:22:48]
 This is code.
 This is code.
 This is code here. Okay, let's try it out. Make that file vtest.config in the root.
 So make sure you're not in any folder. You can just click on the main folder here.
 The test.config.ts.
 So the TypeScript file right now. Import.
 User config.
[01:23:49]
 Export from V test config.
 So just copy that line here.
 Just like that, this one will give us the data type of the
 exported object.
 And this is what I'm talking about.
 Your exported default object and assert its data type as user config export.
 So, just like the webpack, we're going to
[01:24:28]
 de-export a default object, right? Here in webpack, we're exporting a default object and then we are defining the or asserting the data type here so that it helps us to know what options are available and if we're using it properly.
 So we're going to export that default object and we are going to assert its data type as user config export.
 So that's this one that we just imported here.
 As user config export. at the property test. So there's going to be a test property in this object. What's the
 value going to be? The value is going to be an object that has a property of Goebbels and Watch and
 Goebbels is true and Watch is false.
 So again, Test is an object.
[01:26:02]
 It has the global property or Goeb or global, you can see it here.
 And it has the watch property.
 Well, global is we're going to put true.
 This one allows the use of describe it
 the use of
 Describe it and expect
 Without importing them and then the other one is watch
[01:26:42]
 You can see it pop up there
 false and You can see it pop up there. False.
 And that's obvious what it does, right?
 Should be obvious.
 I can put here by default.
 The test.
 Watches tests.
[01:27:09]
 We're going to disable it there.
 Now we're going to run the test.
 NPM test.
 Actually, we should also observe here.
 That will move through.
 Okay, yeah. So we will still see the TypeScript errors here.
 But if by putting this, we can use those, even if there's TypeScript errors.
[01:27:53]
 So that's the only thing we change, right?
 We added global's true.
 We changed this configuration here.
 So we should not see a describe error.
 So we should not see a describe error. Okay, so we didn't see a describe error this time.
 Now it's actually ran the tests.
 One of the tests passed.
[01:28:20]
 So that test was accepted question in a context then returns a response.
 Well, that's actually a fake response because we see here it responds with the correct answer.
 If it's in the context or that's we're checking here.
 If it responds with the correct answer.
 What happened, we expected Amazonia as the answer,
 but instead we got a promise.
 Does that give you a clue what you're supposed to do to fix these?
[01:28:59]
 So this global's true, it allowed us to run our tests without getting stopped for it,
 without having to import this.
 Then you fix this.
 Allow the use of describe without importing them.
 Yeah. Allow the use of describe without importing them. Yeah
 We're now we're gonna remove the TypeScript and timeout errors
 Okay, you're gonna get timeout errors
[01:29:49]
 So So let me show you how. So tests will fail because they time out.
 They need time to download the AI model.
 So we don't have the full AI model.
 Actually, we don't have any AI model because it didn't download it yet because it gets timed out.
 When you install the package, it doesn't come with AI models.
 You're supposed to choose which one you want.
 So we actually, we can see here.
[01:30:34]
 We'll see it in the next slide, I think.
 Let's just paste this in the notes. Okay so what I'm going to do, I'm the timeout, why fails by with a timeout.
 Okay, so we saw that there are errors here. So Amazon, we expected Amazonia to be the answer.
 It gave us, but instead we received a promise object.
 So does that tell you?
 Tell us, to tell you? Tell us,
 to tell you that we should be awaiting the answer instead of receiving the promise.
[01:31:54]
 So we can fix that.
 So this get answer. We see here it's an async function.
 That means it takes time.
 So we should also wait for it to finish and then we'll get a instead of getting a promise
 back.
 We'll get the response back.
 So the way I'm going to fix this is just I'm going to select
[01:32:27]
 these arrow functions here. Control D to select them all, put a sync,
 going to put a sync in front of these. Not this one though.
 Not for the described because it doesn't need it.
 Only the ones that need it.
 Then I'm going to select get answer. And then change each one with async.
 I'm just going to add, I mean, a wait, I'll add a wait.
 To those.
[01:33:35]
 So let's try that out.
 Because we know the test run will fix the TypeScript errors later.
 Let's try that.
 Let's see what happens and PM test.
 Should not be getting promise errors anymore.
 See, the test is taking a while. And it says, if I scroll up here, test timed out five seconds here. Basically, the test had five seconds to finish.
 If it doesn't finish in five seconds, they automatically fail.
[01:34:41]
 The problem with that is we need to download the AI model, or it needs to download the
 AI model, which one doesn't need to download.
 It tells us, it tells us which one.
 Right here.
 Using the default model.
 Can't make that any bigger. Zenova distill bird based,
 cased distilled squad.
[01:35:16]
 So that's the default model and trying to download it.
 But it couldn't because it got timed out every time.
 Got cancelled after five seconds and it takes more than five seconds to download it
 because it's, you know, it's pretty big. Not too big, but, you know, too big, too big to
 download within five seconds. Now, do you fix that timeout error?
 Add timeout 100,000.
 Well, this one works for me.
[01:35:50]
 This means 100 seconds.
 This is 100,000 milliseconds, so that means 100 seconds.
 You add that as a second parameter of the described function.
 Actually, before I do that, let me do this first. Let me see what happens if I tried it.
 I wonder if it will show me the pop-up menu.
 I'm out.
 Nope, it doesn't show me the options here.
[01:36:38]
 So I'm going to take this out and I'm going to fix it.
 Confine first. Type script.
 I should put it in the other, the reverse order.
 So then you put it in the reverse order here
 to fix the TypeScript first.
 So TS config JSON, right there.
 We need to add something to it.
[01:37:22]
 And type vtestquabbles.
 This line right here will declare the functions for TypeScript.
 I can specify it here. You're clear that the scribe, get and expect.
 So, you know, remember how we have a declaration file?
 Do you declare things that come outside of the come from outside?
 Well, this one will take care of that and without having a declaration config.
 Oh, types. Yeah, type older. Let me fix that.
[01:38:52]
 I see, as you can see, the TypeScript errors are gone. Let me just fix that in the notes.
 It has to have the S here.
 OK. Okay, so that adding this line here types, basically it's like a declaration file. We're giving it a declaration file with that.
 Basically this folder contains the declaration file.
 This is a folder that contains a declaration file which describes script loads and then it
 recognizes these functions here.
 So, we can put there, paste it here.
[01:39:57]
 The clairs, the test functions for TypeScript. I think I'd like to capitalize my notes. There's an
 option here. If you pick "show and run commands", there's a transform to uppercase right here. We can do search where you can just type uppercase.
 And transform it to uppercase.
 I want to put this back to lowercase,
 because these are code words.
 So I'll show in one commands again, and now lowercase.
 Right there, made those lowercase. The location of declaration files, actually list the folders that have
[01:41:27]
 declaration files
 lists of folder
 list
 it's a list of folders
 declaration all right Okay, so we got that.
 The TypeScript stuff, the TypeScript errors are gone and now we can test this.
 We'll add timeout to 100 seconds. The second it will be the second parameter here. Now when we can set the time out,
[01:42:15]
 there it is, it pops up now. 100 seconds or 100,000 milliseconds. So it has a hundred seconds to complete each test.
 You might need to increase that, depending on how
 faster internet connection is or how slow it is.
 But I'm going to run the test.
 Basically, it needs time to download the AI model.
 Something happened here. Actually, it looks like it downloaded already.
 I think it downloaded because let me see here.
[01:43:21]
 It passed this second one, responds with the correct answer if it's in the context.
 So I think it did download it.
 It downloaded it behind my back. But if it didn't download for you, oh, I know.
 I know.
 I know.
 Because I previously installed it and when it downloads these models, it puts it into
 node modules.
[01:44:01]
 And since node modules is coming from PMPM, it's taking from the central store,
 and I've already downloaded it. I've already downloaded the model. It might take
 you time, though, if you try to run this, it'll take time for you to download the model. But that's it for this one.
 And then the next one, we're going to configure the AI model.
 We need to, we want to remove that warning.
 So we're going to specify a model to use.
 So there was a model.
[01:44:42]
 I mean, a warning.
 Remember it says it's going to use the default
 model. I want to just remove that warning. And I also want to save the AM model in a
 folder that I control. I don't want it to be in the node modules folder. Because I want to have access to the AI model whenever I need access that AI model separately.
 And I don't want it to be trapped in the node modules folder.
 So I'm going to just paste it into the notes here. Okay, so there's the key word right there. So to remove the warning, specify the model to use.
 So remember, oops, not in this one here.
[01:46:18]
 This one over here.
 So here's, this is the warning.
 No model specified using default model.
 So this is the default model.
 I'm just going to copy this.
 I'm going to basically I'll specify the model so that it doesn't have to have this morning anymore.
 How do you specify the model?
[01:46:51]
 Let's use TypeScript to give us clues.
 Okay, so here's that pipeline. If I mouse over it, it shows the task.
 And here's a parentheses.
 So it tells us what the parameters are.
 First parameter should be the task.
 In this case, it's question answering.
 Second parameter should be the model, which is a string.
[01:47:23]
 should be the model, which is a string.
 What I'm going to do is I'm going to create a constant. So something that's easily accessible, and I might change it.
 I put it up here.
 So default model, and I capitalize it, meaning like it's
 it's important. And and I'm not likely to change it, but if I do want to change it at least it's here at the top because you can change the model.
 But for default, my default, I want to use this one.
 And I'm just going to so here's the pipeline the second.
[01:48:02]
 And I'm just going to, so here's the pipeline. The second parameter is supposed to be the model.
 So instead of putting that whole string in here,
 I'm just going to put the default model.
 Then, next thing.
 Next thing. The save AI models in a folder.
 Set the options object.
 Hash directory right there.
[01:48:34]
 So, actually I'm going to do it like this first.
 That options object.
 Is. right here.
 So this is the third object is for the options.
 I mean the third parameter is for options.
 We see it here.
 It's an object.
[01:48:57]
 And we see a colon here that means it's asserting the type.
 The type is pre-trained options.
 So what I'm going to do here is I'm going to create It's asserting the type the type is pre-trained options
 So what I'm gonna do here is I'm gonna create an options variable
 What is the data type it's this one here?
 pre-trained options
 pre-trained options.
[01:49:30]
 So that's an object.
 So what are we going to put in this object? The cache directory or cache, I don't know how to pronounce that.
 If I start typing it, I see there's the option.
 That's only because of this type right there.
 And it needs to be a string.
 It tells me here, it did be a string right here. So, with folded I want to put
 it in and AI models. I don't need to specify a path.
[01:50:27]
 Basically this will be in the root path.
 Okay.
 All right, so we specified the default model and we're telling it to save the AI model
 in a folder.
 Right now, we don't have this folder.
 If we look here, we don't have an AI model folder in the roots anywhere. But now it will take me time because it's going to re-download it and put it into that
 folder. So let me try it again.
[01:51:12]
 I'm going to run the test and PM test.
 I'm going to take time now.
 I think it's, I think what I should do so I can see it happen. So then I can see it happen.
 I'm just going to run one test.
 This one right here. Actually, no, this one.
 The one that gives the correct answer.
 Run one test, you're just put it that only.
[01:51:57]
 It'll just run one test.
 That one test, the only test.
 So that's how you skip all the other tests, just put only on the one that you want to test.
 Now I'm going to try to test it.
 Oh, okay.
 So as I might as it says, download it.
 It passed already, but I don't see it in the
[01:52:32]
 is it here?
 To be an AI models, oh, I forgot to put the options in.
 Need to put the options. I made the options, but I never put it in. Need to put the options. I made the options, but I never put it in. Okay, there, there are the options. Okay, let me see if it works. If I take out only here.
 Let's see.
 Okay, it's stuck. It's stuck because it's downloading.
 It's downloading that AI model right now into the folder.
 I think it finished downloading.
[01:53:26]
 I check here.
 Yeah, I have AI models.
 There's the folder.
 And here's the AI model that got downloaded.
 Okay.
 So we don some failing tests.
 So fixed test errors, I'm not going to give you the answer how to fix those.
[01:54:18]
 I want you to figure those out on's wrong, and don't let the module
 return an answer if it's probably wrong. Remember you can check if you can check if
 an answer is probably wrong. You have to inspect the response object to find that out.
 And don't run the AI model if the inputs are invalid. Like if there is no question, there's no point in trying to run the AI model.
 So basically, you don't run the, just skip the AI model if the inputs are wrong.
 If the question or a context is wrong.
 I'll paste it in here now. But next week, the A, the, I will have the answers.
[01:55:38]
 I'm not going to give them to you, though.
 So hopefully your AI models work next week that you're able to pass the tests.
 Okay.
 And now we're going to go on a break and head into the third hour. Again, let me just run the test again.
 To show you what's wrong with them.
 It doesn't have to download it anymore because it's downloaded in these two tests, responds with the correct answer. So this one right here
 responds with the correct answer. We expect Amazonia and it does give us Amazonia. We just don't see it because it doesn't show us the results of things that go right.
[01:56:49]
 It only shows us the results of things that go wrong.
 So look over these tests like this one.
 It give us a wrong answer actually.
 Doesn't respond with an answer if it's not in the context?
 So the answer is supposed to be Amazonia, but it gave us a wrong answer.
 So, fix the function.
 Fix, get answer so that returns nothing if there's a wrong answer.
[01:57:23]
 If it's not likely to be correct.
 Does it respond with an answer if there's no question? So there's an error. If the question is
 if the question is blank, there's an error.
 There's another error. If the context is blank, another error, if the question in context are blank also.
 And there's some other areas here too.
 So make sure you fix them.
 Next week they'll be fixed, but I will show you the answers how to fix them.
[01:58:15]
 I'll just expect you to know how to fix them.
 But we'll take the break now.
 Let me restart this slide on the break
 Okay, see you after the break [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back in the break.
 And now for this third hour of class, you have time to work on the recent assignment. Again, that's about connecting your capstone front end and back end to Google Cloud App Engine.
 And I talked about this in the during the announcements.
 So we just look over this to get some details.
[02:09:40]
 And then just let me know if you have any questions about it.
 And it's start to break our rooms and you can do, you can do as many evaluation. As usual, the first room will be for collaboration, second room for silence, third for many evaluations and corrections.
 And I'm just going to put you guys into your room.
 You don't have to go to it.
 I'm just going to put you there just
 just in case it bugs out and doesn't show you the rooms.
 Oops, I forgot to change the duration. Maybe fix the duration here.
[02:11:02]
 Okay. 30.
 40.
 37 minutes.
 Okay. Okay, Yuki.
 I'll see you in the mini evaluation room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] I'm just going to conclude the class and I'll continue the
 the mini evaluation with you key.
 So the breakout rooms are back.
[02:49:41]
 And in conclusion, we use vTest as a Jess replacement.
 We basically, we abandon Jess now we're using vTest.
 At least for the, at least for this Google Cloud backend,
 you can continue to use Jest for your other,
 like for the front end and other backend,
 you can continue to use that
 or you can just switch everything to VTest,
[02:50:18]
 it doesn't matter,
 but it's good to know Jest because a lot of companies
 they require knowing Jest, but not that many require V test.
 We learned how to configure V test to make it work.
 And then we got our question answering AI model to work.
 I mean, at least provided a response.
 You guys need to figure out how to make those tests pass.
[02:50:49]
 It's not going to be that hard.
 You've done similar things before.
 Now you can take attendance.
 Just head on over to your codecs account
 and mark your attendance accordingly.
 If you didn't do it already.
 Other than that, class is dismissed.
[02:51:13]
 That's today's lesson and this week's lesson on artificial intelligence.
 Have a good weekend and I'm going to open up the breakout rooms to continue Yuki's evaluation, mini evaluation.
 It's gonna be open for 30 minutes. Okay, Yuki, I'll see you in the, in the evaluation room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] I have any more questions I'll post them into.

///// FILE: "Level 4/transcripts/Apr 28, 2025 20-11.txt"

Transcript from Apr 28, 2025

[00:00:00]
 Good evening class. Welcome to Co-
 next Academy level four.
 Week eight day one and we're going
 to continue this week with the Today's agenda in the first hour will take attendance, do announcements, review, and
 go over some new AI topics.
 Then second hour will be open for practice and asking questions, catching up. And the third hour will be open for
 many evaluations and working on assignments and also catching up. So this week,
[00:00:59]
 all throughout this week, the second hour will be available for asking questions and catching up. I will just use the
 first hour to squeeze in some new topics so that, you know, more of the class has time to catch up.
 Okay, so for attendance, make sure you head on over to your code X account and mark yourself
 present.
 If you're here right now, then it's okay.
 You can mark yourself present.
 Everyone here counts as on time.
[00:01:44]
 And now time for announcements.
 Let me just load up the screen here. Okay, so announcement.
 So we have regular schedule this week.
 There's a survey, a new survey posted in July cohort.
 Please submit it when you get a chance.
 Let me just show it here.
 So this was just posted today.
[00:02:38]
 It might be in response to,
 you know, how the class needs some time
 to catch up. So this survey, I think it's a, you know,
 in reaction to that, they just want to know how everything's going.
 And notice here, it's instructor evaluation. It's most,
 it's probably going to be about like,
 oh, it's, you know, as, as rules are teaching as class properly, why are these students not caught up? Why are they, why are they behind? So they want to know these kind of things.
[00:03:32]
 And your questions, I mean, your responses are confidential.
 I won't know your answers there.
 At least not specifically,
 but they'll eventually come and talk to me about the results of a survey and
 speak in general terms, not pointing anyone out and specifically.
 They're just going to say, okay, this is the kind of feedback that we got.
 And let's talk about it.
[00:04:08]
 But they won't really they won't mention any names and who said what.
 Okay, so many evaluations, the time limit is 60 minutes per submission.
 There's a new mini evaluation here.
 For week 8, properly explained and demonstrate the custom data types for the action parameter.
 So this is in regards to Redux.
 We create the custom data type for the action parameter in the state setters file.
 Include specific data types for the action type and payload.
[00:05:10]
 So let me just load up one of the, I'll load up the front end,
 code.
 So I can understand what I'm so I can show you what I'm talking about here.
 State setters.
 So state setters has an action.
 Here's the data type for it, a custom data type, which I made down here, but notice that
 this one is not specific.
[00:05:56]
 So create the custom data type for the action parameter.
 Include specific data types for the action type and payload.
 So in this case,
 this is not specific. This payload right here.
 So it would encounter.
 But look at this one, did mount.
 Okay, so did mount?
[00:06:35]
 The new value is going to be in the payload.
 So what would you say the data type of the payload would be?
 It would be a Boolean. So if I were going to make a data type
 for this, I would set the payload to Boolean instead of any.
 Okay, so we just use this just to, you know, just to
 just for learning purposes, but now you should be more familiar with Redux and you should know that
 you can set the payload,
[00:07:24]
 do whatever data type the new value is supposed to be.
 Click Count right here.
 We're supposed to count the number of clicks.
 So the new value is going to be stored in the Payload.
 What is the data type of this payload?
 So any is not specific,
 will be the specific one.
[00:07:44]
 In this case, it would be number.
 So you can show you how to do it.
 I'll just do it manually here.
 So this is the custom data type.
 I can set it for the amount. So, the one way to do it.
 This one is just a generic one.
 I'll set it for action.
[00:08:21]
 Boolean.
 Put a Boolean here. And I'll put action Boolean here. So this payload should be a string.
 So instead of any it should be string there.
 Component this one's gonna be a string because we're going to store placeholders.
 So I would create something called action string because it's going to store a string
 in the payload. So, you know, there's a pattern here. This replaced this one with a string and also here,
 put it in here, and it would also apply here.
[00:09:36]
 I'll show you another way to,
 there's other ways to set it up.
 So you can, so that you can just use the word action and then you can
 specify what this is individually.
 But I guess that's a little bit more advanced, but maybe I'll have time to teach you.
 But for now, this is the easiest way to go, just create a separate data type and specify the data type for the payload.
 So that's the custom data type for the action parameter.
[00:10:25]
 Then properly explained and demonstrate the solution for Redux item practice.
 The Redux item practice is back here from week six.
 You should be familiar with Redux by now.
 Hopefully, because the assignment was due last week, the Redux assignment. new assignment is
 Capstone App Engine.
 So once you have Redux set up, all this other stuff should be pretty easy.
 So this one is Redux item practice. That's where you create a global state variable for an item
[00:11:27]
 and dispatch an action to change its quantity. Some of you have already done this.
 The other question, Redux cart practice. This one might be a little bit harder than the item practice, but not that much harder.
 That's where you create a global state for a shopping cart and change the total quantity.
 So if you have multiple items, you know, like two items,
 see if you can get the total quantity and set it using Redux. And Redux category practice. If any of you are interested, I can walk through some of these practices so you can understand
 how they go.
 I can do that today if that's your question.
[00:12:52]
 Maybe your question is how do you do this practice?
 So in category practice, you're're gonna separate global state variables into categories
 that represent which page they're on.
 So like did mount is a state variable, but you have multiple pages and
 they might need a did mount
 each of them. Well, they, yeah, they should have a did mount because the
 assignment was to have a did mount for each of them. Well, they, yeah, they should have a did mount because the assignment was to have a did mount for each of them.
[00:13:27]
 The previous assignment.
 So there's different ways to sort them out, but this one is using an object, I think.
 Yeah, an object by adding a property for each page.
 So those are the four main topics or questions for the many evaluations this week. Let me just double check the date that I set it properly here. So to do tomorrow, April 29 before class and then late credit until May 6.
 So that's a Tuesday next week.
 And many evaluations for week 7, you can still submit corrections Tuesday before class.
 But we can do many evaluations.
[00:15:09]
 I mean, we can still open for corrections until Saturday, meaning I can still do your mini evaluation until Saturday.
 I mean, mini evaluation for corrections for week seven.
 I can do that until Saturday.
 Assignments, okay, so let's see here.
 Redux, Capstone Redux that closes on Thursday.
 But App Engine, Capstone App Engine is due on Thursday.
 The student success team is available.
[00:15:50]
 Hopefully you're able to contact them and ask them
 if you can submit some of these codes assignments
 if you need to raise your grade.
 Just let them know why you've fallen behind. If you're thinking of retaking this class, the next instructor may not teach you the same topics. And that may be good, it may not be good, just depends what they teach you.
 But it's better if you can just finish this level.
 It's better to finish this level, and then you can just start working as a TA instead
 of getting, you know, repeating the level again. Then you're going to get delayed for even
[00:16:53]
 just getting actual on the job experience. Okay, so let's see, practice problems.
 There are posts here on the side, then I post the one.
 Yeah, expiring persistence practice.
 This was from last week.
 This is like a companion to persistent login practice. That's where you can log in the user and they stay logged in for like a day
 Even if they close their site if it opens the logged in
 Expiring persistence
[00:17:41]
 Expiring oh I spelled it wrong persistence
 So yeah I spelled it wrong. So, yeah, actually this one
 persistent login practice. It was not
 expiring. So, if they logged in,
 they would stay logged in indefinitely until they logged out.
 But this one here, it makes it so that they can.
 That their login will expire after one day,
[00:18:06]
 and then they'd have to log in again, more secure that way.
 Help seekers, so Herman is available again
 for mentor meetings.
 And the July cohort page. And you look at the canvas. For mentor meetings, Herman is available. I'm going to put his name back at the top, but he's back.
 What happened to the link here?
 Not says link.
 Let me try that again.
[00:19:07]
 Okay.
 So, is available again for mentor meetings?
 Helping you get caught up.
 Let's see if there's any new questions here in July cohort.
 Nope, not the new, just the survey.
 Notebook LM. Remember, you can find notes easily with this. Just give it your
 notes, give it your code, even the transcripts, then it will tell you where the
[00:19:52]
 answers are in your notes.
 Okay, I should remove this. Basically go in order with your days and don't use notebook LM if you're
 just looking for an answer for like, like if you're doing an assignment like tapstone
 app engine, but you haven't finished taking the notes for it. You haven't taken the notes for,
 you haven't taken all your notes for Google Cloud.
 Don't ask notebook, LM.
 What's the solution for these things?
[00:20:38]
 Because it's going to be, you're going to get it in complete picture.
 It's just going to give you an answer, but then you're not going to understand the answer. So what you should do is only use notebook LM once you've taken your notes
 and you've already like somewhat understood the answer. So Google Cloud, like for example,
 make sure you take all these notes for these days. And then when
 you attempt the assignment, that's when you can ask notebook LM to help you with these things.
 At least now you're familiar with the content and you just get a notebook LM is just giving you a refresher on how to do things.
 Don't use basically only use notebook LM for a topic that you've already gone over.
[00:21:35]
 So it's just reinforcement, not a teacher, not teaching you something new.
 Don't use notebook LM to teach you something new. Don't use notebook LM to teach you something new. Use it to reinforce
 what you already took notes on. Okay, so we're going to start the review now. I'll probably go a little bit fast for the review.
 Some I have time to go over the new AI topic.
 But make sure to take any notes just in case I say anything new during the review.
 And if you're watching the recordings, don't skip the review because I say something
 new sometimes.
[00:22:25]
 Just like this, I added something new to this sandbox front end.
 I added this new data type.
 It's going to, I've been adding transcripts and maybe by today or tomorrow,
 I'll have all the transcripts up to day five, level seven,
 I'll post them all.
 But eventually, the transcript for day one today,
 you'll be able to see that I added something new
[00:23:08]
 in statesiders.ts, this action boolean custom type.
 You'd see that in your, in the transcript.
 Okay, so let's see here. Yeah, and have your microphone ready.
 If you have any questions or if you want to do any corrections or many evaluations today. Okay.
 Now time for review.
 So on Saturday, we saw that just cannot test transformers.js.
 So we tried to run our tests and it didn't work.
[00:24:11]
 It's because it showed there is an error, not in our code,
 but in the transformers.js, actually it's not an error.
 It's a syntax that just doesn't like just like the old export import syntax
 But transformers.js
 But transformers.js uses the new
 Export import syntax just doesn't like unlike that so it pops up in error.
 And so let's see here.
[00:24:55]
 Yeah, so just is not compatible with the new import export syntax.
 The new import export syntax is in transform may transformers.js not in our code.
 Transformers.js also uses import meta. So I didn't
 demonstrate this to you. But if you keep trying to force
 just to test transformers.js, you'll run into import metadata error. And that also is
 not compatible with just because import metadata is a new a newer way to import. The import meta syntax imports from different locations,
 depending on the environment. So, just doesn't like dynamic things like that. So,
[00:25:58]
 import meta, basically, transformers.js uses meta. To import some things depending on where Transformers.js is installed.
 It can be installed in the back end.
 It can be installed in the front end.
 It can be installed in Windows machine.
 It can be installed in a Mac or a Linux machine.
 So import.medda will have a different value
 for a different value for
[00:26:30]
 You know a different import depending on the the platform
 And Just cannot work with that
 So we had to
 Switch to a different test
 called the test I mean a testing framework called the test which to different tests, called VTest.
 I mean, a testing framework called VTest.
 It's a unit testing framework very similar to Just,
[00:26:52]
 but compatible with Transformers.js.
 Basically, VTest allows the new export
 import syntax, and it also allows
 important meta. It's okay with those things. So we
 installed vtest and uninstalled the just packages. So there's no more
 just package. There's no more at types just. We uninstalled those.
 We also uninstalled at Babel preset -e and v, because it was only required to use just.
[00:27:38]
 That's, this is the package that converts the new export import syntax or the modern export import syntax. It converts that to the old. And then that's what that's what gets bundled by Webpack. test. But since we're going to use vTest, we don't need this one because we don't need
 to transform those modern export imports statements into the old ones. And then in the scripts, in the NPM scripts, we change the just command to V test
 for running tests. So I can show you that one.
 Um, that's in the back end. I'm going to load the backend. OK, so this is backend Google Cloud.
 And let's see here.
 Yeah, what is going to show you.
 Oh, yes, the scripts.
[00:29:32]
 So instead of testing with Jest, we're testing with vTest.
 That's what we use to test our AI function.
 This one's-- it's called get_answer.
 This one's it's called get_answer.
 And we're able to run our tests after.
 After using vtest. There were some some configurations that we had to add.
 We had to make it run smoother.
[00:30:19]
 Like for example, if we didn't do any configurations, we would have needed to import the test functions like describe it and export. I mean expect.
 I mean it's okay, I mean it's not that hard to import those, but if you wanted to.
 Not bother with that. Because in our ingest, when we had Jess, we didn't have to import those things.
 So to make it as similar as possible,
 to make the test as similar as possible to Jess.
 We added a config file called vtest config.ts.
 imported this user config export. that's a data type.
[00:31:07]
 Then we asserted that data type.
 So here's vtest config.ts.
 There's a data type we imported.
 And then we asserted it right here.
 That gives us the structure for this object.
 It tells us if we put something in, that doesn't belong.
 It'll tell us.
[00:31:39]
 Like, if I put message here, it will tell us there's not supposed to be a message.
 Oh, I guess not. Is once you type it here, it'll tell you if it's valid
 or not. value then it's just going to accept it like this.
 So this one's a guide for this object right here. And to make it similar to just in which
 we don't need to import the describe function function the it function and the expect function we put
 So we're gonna describe our tests with this test property
 So we want our test to use
[00:32:57]
 Gopels
 So Gopels are those
 Those test functions described it and expect
 So we put true that means we want to use them.
 So here's the note. Allows the use of described it and expect without importing them.
 And we also set watch the false because by default, we test watches tests. You can override this but I personally want to manually
 watch one test at a time and then if I want to, you know, watch continuously, I want to specify that on the command line. So we were able to run tests like that.
[00:33:48]
 Then we experienced a timeout error.
 The test failed because they timed out.
 They needed time to download the AI model.
 When we install transformers.js, it doesn't come with any AI models.
 It just comes with the library and then you have to choose which model you want to use.
 When you choose it, it downloads it. Well, we did this step first. Yes, config.json to get rid of the because when we started using
 describe it and expect
[00:34:52]
 TypeScript didn't know about it,
 TypeScript didn't know about it because we didn't import them.
 So we added this here.
 This is similar to like,
 like when you install at types, at types just, this has the same effect
 because there is no package called at types detest.
 Remember when you install something like that, like at types react, it removes some of
[00:35:24]
 the TypeScript errors. something like that, like at types react, it removes some of the the
 TypeScript errors. Well, this one will remove it for our tests, so I can I can
 remove it right now so I can see how it looks without it. So we had tests here.
 test here.
 Get answer. We had these tests.
 And if we didn't have this,
 we didn't have this. Then TypeScript doesn't know where the scribe is coming from. It doesn't know where it is coming from.
[00:36:06]
 It doesn't know where the
 expect is coming from.
 So we enable, we added this line to tell
 TypeScript, OK, here are the declaration files.
 The declaration files for the sc and expect are in this folder in the vtest package
 in the global folder of that.
 So basically it declares the test functions which are described in an expect.
[00:36:41]
 Declares it for TypeScript.
 So basically it's a list of holders that have declaration files.
 There's an action line there. So then we added time out as a second parameter of
 the described function. So that's 100 seconds or 100,000
 milliseconds. So here it is. The second parameter of the described function. This one
 lets the test wait up to 100 seconds. If they take longer than 100 seconds, then they time
 out and the test automatically fails. So you can increase this if it takes
[00:37:32]
 time for, if it takes more time for the AI model to download, you can increase it
 but once it downloads, it's going to go fast. It doesn't really need this time out anymore once that AI model is downloaded.
 Again, this is just needed to allow time for the test to download the AI model.
 Otherwise the download gets stopped and it has to start over the next
 time. Okay, this is another thing we did. We configured the AI model because it was telling us a warning to specify the model to use.
 So all we did was, okay, actually, it told us to specify the model and because we weren't specifying the model, it chose the default model.
 All we had to do was copy it and paste it here.
[00:38:52]
 Okay, so we started using, we set a default model. This is the one we copied and pasted.
 Basically, Transformers.js was telling us this is the default model.
 And so if we specify it right here as a second parameter of pipeline, then it gets rid
 of that warning. And then we also added this, some options for here.
 And we found out the data type for it is pre-trained options.
 The way you get that is if you mouse over this, you can see that there's an options
 object.
[00:39:40]
 You try that again. There's an options object.
 Right here, starting with the word quantized and progress callback can
 be cached directory.
 And we see there's a colon here, which means this is the data type pre-trained
 options.
 So that's for the options object.
 So we just basically made an options object here.
[00:40:09]
 We said it's going to be pre-trained options.
 And one of those pre-trained options is the cache directory.
 And basically we're saying store the AI models
 in this cache directory or a directory called AI models.
 That created this right here.
 Created this directory, AI models.
 So that if we ever, if we ever need them,
[00:40:44]
 it doesn't have to download them again.
 It's, it's always here, all here.
 Whenever AI model transformer, JS downloads, it'll get stored here.
 And then it doesn't have to download it again. You can just, you know, if you make a new project,
 you can just copy over the AI models
 and you don't have to download them again.
 Then the last part was fix test errors.
[00:41:24]
 Run the test and debugger to find out what's wrong.
 So I didn't go over this because I want you guys
 to figure this part out.
 But I will run the test and show you the result, which
 will be some failing tests and some passing tests.
 which will be some failing tests and some passing tests.
 I type here NPM test.
[00:41:54]
 It's gonna run the test.
 And we see two past.
 By failed. The two that passed are accepts the question in a context.
 Then returns a response.
 Or here this this one passed response response with the correct answer if it's in the context.
 So we can follow that with the correct answer if it's in the context. So we can follow that with the debugger.
 This one right here responds with the correct answer. So I'm going to let that be the only one that we're testing by putting only right here. That way if I run this test it's only going to run that one.
[00:42:54]
 it's only going to run that one. And it passes. And now I can do a deep dive into that test by starting a debugger. And running the test from there. Next, I want to put the
 I'll put a dot right there.
 See if it can stop.
 Actually, I'll put a dot on all these.
 Hopefully, one of these catches in the bugger and PM test.
 Okay, so we see that it got caught the debugger caught the first one there.
 So we're going to create the options object. So there it's created now. There's options object.
[00:43:46]
 Now next we're going to create the AI model. The question answering AI model.
 Hey, it's done. This is the AI model now.
 And now we're going to give that question answering AMA model a question in a context.
 So here's the question, which name is also used to describe the Amazon rainforest in
 English.
 Here's the context.
 The Amazon rainforest is known in English as Amazonia or that Amazon jungle.
[00:44:29]
 It's a Moist broad leave topical rainforest and that Amazon biome that covers most
 of the Amazon basin of South America.
 Okay, so it's gonna try to answer the question
 based on that context.
 Okay, so now we got a response. That response has an answer. The answer is
 Amazonia. The score is 86 or 86 percent. It's 86 percent sure that it's
 correct. That's what the score means. So we're going to extract the answer from the response.
[00:45:07]
 So the answer is Amazonia, then we're going to return that answer.
 Here it says the test failed because I took too long.
 It took longer than the 100 seconds to walk through that. But if I just let it run without the,
 without, if I let it run and I finish it
 within 100 seconds, it'll be fine.
 So I'm gonna let it play out here.
 And it's done, good passes.
[00:45:52]
 passes. Okay, so I have a few minutes in this first hour, so let's see what we can cover for artificial intelligence. So this is a new topic.
 Get a response from the back end server. So this one is about creating a route so that we can get a response, not just from the
 test, but from the server actually.
 So what we're going to do is create a route and a route handler and we'll go from there.
 So I'm just going to copy this here.
 I mean, I'm sure you know how to do this by now.
 How to create routes and route handlers and use them to run your modules.
[00:46:42]
 Use them to run your modules
 And this share my screen now
 Copy this
 And
 Place it into the notes.
 The AI notes. Create a route and route handler to run get
 answer. So get answer is the function.
[00:47:26]
 It's going to extract the question and the context from the query parameters.
 It's going to send the return value of get answer.
 And then we're going to try that route with the browser.
 Okay, so this part, you should be pretty familiar with it by now.
 And it creates the route and the route handler.
 That's in the backend index file.
 Okay, so I'm just going to call it.
[00:48:17]
 App dot get. that get which should it be answer question. I just call it AI for now. I just
 call it AI. The AI route. So this is the this is a route and I need to create a handler for it.
 A route handler, we're going to just do that here.
 Match the name, ai.ts.
 Book an easy way to do to create that handler is just copy one that I already have.
 I'm just copying the API one, pasting it here.
 Renaming it, start from the top, work my way down, make sure everything's correct.
[00:49:21]
 So I need to be importing those.
 The name is not right. I should change
 the name to AI to match the file name to match the route. I'm not going to send any
 data, but I do want to get the request query. So let me start by doing that.
 I want to work with the request object.
 And the request object.
 I expected to have a query object.
[00:50:00]
 And in that query.
 I want to de-structure it.
 What do I expect that query to have? I expected to have a question.
 And I expected to have a context.
 And then I can pass those in to get answer. And it takes a question here. called the user question doesn't have to be the same name
 See here get answer takes a user context. We don't have to match that
 We just need to put a value
[00:51:02]
 The value is coming from this variable and it's going to come in through here.
 But it's going to be known as something else by the time it comes out.
 Basically it comes, like, actually let me get rid of this first.
 Do you get rid of these TypeScript errors. You can just put any right here.
 Basically you were saying that this is any object, which tells TypeScript, basically it's
 going to disable TypeScript checking for these.
 So get answer returns a promise, so we should await that.
[00:51:47]
 And then we should be capturing the value. It's going to recapture the value on the left side of the equal sign.
 That's going to be the answer. Hopefully it'll be the answer.
 This one has a red line under it, because we need to put a sink over here.
 We need to tell JavaScript, or a TypeScript, that this function will take some time to finish and it can be skipped to allow other
 functions to run. A synchronous means not synchronous so it means it can stop
 on the line and then it'll wait there and you can do some other stuff some
 processing and then you can come back and you can do some other stuff, some processing, and then
[00:52:45]
 you can come back and continue where it left off in that function.
 Okay, so we're going to get an answer here and then we're going to send that as a response.
 And I have to import this one here.
 Okay, so let's see.
 So we created a route in a route handler to run get answer.
 The route handler extracts the question and the context from the query parameters.
 And we can send the return value of getanswer.
[00:53:33]
 This is.
 We're going to send the return value of getanswer.
 Then we're going to try the route with a browser.
 So I need to start this one first.
 NPM start.
 NPM run start to. So I renamed it instead of build, I called it start to because they
 basically come together as a parent.
[00:54:15]
 Oops, did I start that in the debugger? Anyway, here it is.
 Anyways, here it is. Okay, so the way I can test it is I go to the AI route and give it a question.
 So what is the question?
 The question will be what's my name?
 And then I separate with the Empress and.
 The answer.
 I mean the context, I'm going to give it a question and a context.
[00:54:55]
 The context is.
 My name is.
 Roll is our.
 Okay, so I guess it has the bug around it, so that's good. I guess I'm gonna use that.
 And watch it come in here.
 Hopefully.
 Okay, let's see what happened. Maybe I have to type in the boger here.
[00:55:38]
 The boger. the booger.
 Oh, some errors.
 Oh, yes. Okay, so we see here that there are some errors.
 So it was able to, well actually it couldn't compile.
 Then we tried this again.
 So I'm going to compile it here, NPM start to. So it's going to try to build it.
 NPM run start to.
[00:56:43]
 And I tried to build it.
 And it tried to build it. It ran the first time, but now the second time it broke.
 Remember the first time it showed Google Cloud.
 Now it broke, it says this.
 When you try to get to the top of this, okay, here.
 Module parse.
 Basically there's an error.
[00:57:19]
 You may need an appropriate loader to handle this file type.
 Currently no loaders are configured to handle this file type. Currently no loaders are
 configured to process this file. Okay, so with that we're gonna basically
 the takeaway here is that if you try to run your server and you try to visit
 the path or basically if you even--
 it might have worked when I bundled it.
 But now that it's--
[00:57:51]
 they had one run through, it recognized there's an error.
 So that's the takeaway.
 There's an error bundling it.
 And we're going to--
 tomorrow, we'll fix this error.
 So what we're going to do now is take a break. [ Pause ] Okay, so you have to the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And now for this second hour, you have time for catching up.
[01:09:15]
 But if you're caught up, then here's a practice problem for you.
 Redux sign-in practice. Use Redux to to login and log out the user.
 You might have implemented this already.
 So I mean, you might have been put into this already because you should have been changing
 your state variables into Redux state variables.
 And if you already had a login feature for your website, this one would naturally,
 you would naturally implement to this. But if you haven't done that yet, here it is.
[01:10:03]
 For the Redux store, you you know you can have a
 Redux store create a state variable selector and setter for the login status
 you might have that already is logged in maybe it's gonna be a boolean for
 is logged in or maybe you're going to store the whole account, because maybe if you're
 going to store the whole account like the email, the password, and all that information,
 if you have the account stored, then that means they're logged in.. So you can do it like that too.
 Let the sign in area component, remember you have a sign in area, that one
[01:10:54]
 decides whether it's going to show the sign in button or the sign out button. So
 let the sign in area component select the read up state.
 It'll select that read up state regarding the login status.
 So whatever this state variable you made, the sign an area will select that.
 When the read up state shows the user is logged out,
 then show the sign in component.
 That's what will be shown.
[01:11:31]
 You'll see a sign in button.
 If there's no user, if there's a user--
 and if they're logged out, then it's
 going to show the sign in button.
 When the Redux state shows the user is logged in,
 hide the sign in component.
 So when they're logged in, that sign in button is going to disappear.
[01:11:51]
 When the Redux state shows the user is logged in,
 show the sign out component.
 So if they're logged in, they should see a sign out button. And then when the Redux state shows the user is logged out,
 hide the sign out button.
 So if the user logs out, that sign out button should disappear.
 Then going into the sign in component,
 when the user logs in, dispatch an action. Let that action,
[01:12:32]
 set the proper Redux state. So maybe you're going to put is logged in, you're going to
 that an action to set it to true, or maybe you'll just store their account information into
 the state, into that redox state. So you're going to save their email, their password, their name and phone number. You might store it all and that indicates that they're logged in.
 Or you might have two different variables.
 One for is logged in and then the other one
 for all their account information.
 So that's up to you.
[01:13:14]
 How you wanna do that?
 Then in the signout component,
 when the user logs out dispatch an action. That the action set the proper
 Redux state. So when they sign out. You should have an action saying that is logged in is equal to false.
 Or maybe that action will just clear the account. So maybe when they log out, you're just going to
 clear that account object and you said it's undefined. Or no, whatever, whatever you
 want to set it to. So that's the sign in practice. So now I'm gonna open up the rest of this hour
[01:14:05]
 for any questions or if you need any help on your assignments
 or anything.
 I'll let you ask those.
 And if there's no questions in five minutes,
 then I can do the
 the mini evaluation corrections for Yuki.
 In the meantime, I'll start the breakout rooms.
[01:14:41]
 For 38 minutes.
 For 38 minutes, first breakout room will be for collaboration. Second one will be for silence.
 Third one for maybe evaluations.
 And as usual, I'll just put you guys into a room where you don't have to go into them.
 I just need to put you there and just so that you can see them.
 Okay, the breakout rooms are opened.
 Use this time to catch up, work on assignments, just code, ask questions, collaborate, whenever you need to work on.
[01:15:47]
 And then in seven minutes, if there's no questions, I can do the many evaluation for Uki. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so, yeah, Eukie just got back from the breakout rooms and we're going to go on a break now.
 Just a few more minutes and Eukie will be done with his break.
 I mean, with his mini evaluation corrections in the third hour.
 I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And for this third hour, you have time to work on your assignment, which is setting up
 your capstone to work with App Engine.
 But before I discuss this, I want to
[02:04:51]
 share with you, I've just made a change to the mini evaluation.
 Basically, I just made it a lot easier for you guys.
 Okay, so I changed the mini evaluation for this week.
 So the mini evaluation for week eight.
 It'll still have that part about the custom data type for the action parameter. They'll still have that.
 But then the other three are just about your capstone properly explained and demonstrate how your capstone proxies, how your capstone proxies and API for the front end. So this was this is related to this assignment here,
 Capstone proxy. And then properly explained and demonstrated how your Capstone uses AWS NAMDA. Actually, how it's deployed to AWS NAMDA.
[02:06:05]
 So that's this assignment here, back in the counts.
 And then properly explained and demonstrate how your capstone is deployed to AWS S3
 and AWS CloudFront.
 So that's also part of this assignment here.
 Yeah, so it should be a lot easier.
 This was, these were based on assignments two weeks ago.
 Those those assignments have already closed.
[02:06:51]
 So this one, these should be done and you should,
 you should be pretty comfortable with these topics already.
 Okay, so I'm going to just start the breakout rooms really quick and then if anyone has any questions while I'm starting this, you can ask it on your microphone or type it in
 the chat.
 But I'm just going to start the breakout rooms again.
 And they're gonna go for 30, 40 minutes.
 42 minutes. Okay, I'll stay on here for a few minutes just in case anyone has questions. And then I'll head into the breakout rooms if there aren't any questions. [BLANK_AUDIO] I'm going to head into the breakout rooms for the mini evaluation.
[02:09:56]
 If you have any questions, just post it in the chat.
 And then the mini evaluation with the with the UK should be pretty fast.
 I'll be back out here in a few minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so the mini evaluation corrections for UKE is done.
 If I can do more, if anyone wants to do corrections,
 I can do that.
 Otherwise, I'll just stay out here just in case anyone has any questions. [BLANK_AUDIO] [ Pause ]
 >> You have a question? >> Yeah, I have a question.
[02:35:06]
 Yeah, I have a question now.
 You made did Mal for two, like home did Mal in a shop did Mal.
 When you go to setters, you have to make two different dead mounts?
 Yeah, so there's different ways you can do it. You can just call it one name,
 like home did mount, that's one name.
 But you could also set it up like the state variables
 where you have the different levels.
[02:35:47]
 So if you have a home property in state variables and that home property has the state
 variables for the home page, you can do the same kind of structure in state centers.
 >> So, object with
 a good malfunction in it.
 >> Yeah. Like categorizing them.
 Just as the state variables were categorized.
 And you can call it with dot notation. You might have given a try and let's, let's you have your setters and see that you see the setters is an object and those
[02:37:20]
 are like the state variables there inside of there, but you know, they're basically set or functions.
 So if you want to put that did mount in, like you want to associate with the home page, you just make a, you just stick it in the home property.
 So make a home property in that object.
 And let that be a, let that one be an object.
 And then stick the did not function in there.
 It's supposed to be a comma.
 Okay, so we can work with that. So the did mount, so state does not have a did mount
[02:38:11]
 property anymore.
 It's a home did mount now.
 Okay, so that one, so that one is categorized.
 Okay, yeah, you have to, since you updated your So that one is categorized.
 Since you updated your
 state variables into categories,
 you should categorize the other ones also.
[02:38:36]
 And click message and component are inside here. Here.
 Okay. Yep, have to remember to change that.
 That's good.
 Okay, there we go.
 Yeah, and now you have to fix your dispatch.
 Yeah, and now you have to fix your dispatch. I think let's just fix the store first.
 Go, sir.
[02:39:38]
 So, let me see.
 What is the error there for reducers?
 Type home, tick bound, really long error. Great, nice. [ Pause ]
 >> Is it expected type from property reducer?
 States centers
 Wait, that's storm storm one. Okay, okay, you have two stores, but then why I'm missing
 Okay, it's pretty much the same error. I think because you're using the same values there.
[02:41:07]
 Okay, but this one is just an example. This one isn't connected anywhere. This one is the one that's connected.
 Okay. Yeah, so we can try it out.
 Let me actually, yeah, let's try it out first.
 Let's set that one to any to remove the as any.
 No, not there on the other side.
 Yeah, to remove that.
 And then let's see if we can dispatch actually.
[02:41:44]
 Yeah, let's see if we can dispatch actually yeah let's see if we can dispatch
 something
 let's see do you have your selector is correct
 there's only one did mount the selectors are a little bit tricky to
 mount. The selectors are a little bit tricky to select. So we've got to put home on these.
 Yeah.
 Message home.
[02:42:18]
 Home.
 Need another one.
 Yeah.
 For. Did mount. Need another one. Yeah for didn't mount
 Another one is for shop
 Okay Okay. So let's look at the shop now.
 Or home.
[02:42:55]
 You have to change the names to selectors. [ []
 This right-click in rename.
 Oh, because the the imports are also wrong.
 You might want to start with the imports because it starts from there.
 And I want to be shop the quantity is in the shop.
 So, rename that one.
 Okay the home component needs some updating. dating. [ [ [ [ [
[02:44:46]
 [
 [
 [ [
 [ [
 [ [ [
 [ [
 [ [ [
[02:45:02]
 [ [ [
 [ [ [ [ [] [
 [
 [
]
 Okay, so it's going to get selected. Um, so we
 right now is a good time to use a debugger because that set object
[02:45:24]
 won't have a click count like that. It's going to have,
 it's going to be in the home. So let's, let's put a debugger in the store. The one that you're using.
 And we'll look at the set, put one on the set on line 19.
 the set on line 19, put a dot there or after it, even fine.
 Okay, let's see if we can stop there, get the program to stop on that debugger. Now, this is the front end.
 You don't need to put it in the JavaScript.
 That's only for the back end. It'll stop in the dev tools, or if you use a VS code debugger, that can stop here on
[02:46:33]
 this page. [inaudible]
 As check the tools.
 And the browser. up the sidebar inspect.
 Now not redox the tools because that's where the bugger is supposed to be.
 Okay, so I think there's an error in the configuration of the slice. Oh wait, what is not a function? Okay, refresh just to
 refresh that page. There. Okay, there's a set variable. Let's see, what can we type that in?
 Cottal?
[02:47:47]
 Yeah.
 You can type it, type, set and then dot.
 So you see Home and Shop.
 Yeah.
 And then you can pick one.
 Go ahead and then dot.
 Then you should see a dot, and then you should see an action.
[02:48:11]
 Oh, it's not showing the action.
 No, not the action, but the did mount.
 Yeah, it's not popping up, but it's there. Type did mount.
 I was right now it's undefined.
 Did it, did we set it properly?
 Oh, it's just in the slice.
 Okay.
[02:48:42]
 It's just not, it hasn't been set yet. It hasn't run through the story yet.
 It's not, are the breakout rooms done?
 I think.
 Okay.
 And one minute.
 Okay.
 So you can, yeah, you can continue. Okay.
[02:49:05]
 So you can, yeah, you can continue, yeah, you can continue, but then there's the error in the homepage.
 So we have to fix that.
 You can just press play.
 Oh. [ Inaudible ]
 Yeah, so there went the fix yet.
 It's a big home did mount.
 [ Inaudible ]
[02:49:40]
 All of those should have home in front of it.
 Those actions, because they're all
 they're all belonging to the home property.
 That's okay, just you can put a debugger on each one of those so we can
 explore the set object. Now put it before because one's just a TypeScript area. It's not going to stop it.
 Okay, so it stopped on, uh, which one, let's reset.
 Press play.
[02:50:48]
 It's supposed to stop on something. There's an error.
 Oh, it didn't stop there.
 Okay, put it before that.
 I have a capelker before.
 No, that's in the component-did-mount.
 Higher up in your code.
 No, go back to VS Code.
[02:51:19]
 Scroll up.
 Scroll up component-did-mount.
 Oh. scroll up component did mount.
 Oh.
 Okay, I need to, let me just conclude the class really quick.
 Okay.
 Okay.
[02:51:38]
 So, we break our rooms are back.
 And in conclusion, we learned, we added the AI route and route handler.
 We saw that there was some kind of transformer.js build error.
 So we're going to continue tomorrow on this topic.
 You have one minute to mark your attendance.
 Other than that, class classes dismissed. That's the
 day's lesson on AI.
[02:52:11]
 I'm going to go back and let you be sure his screen.
 Okay, so let's look at the debugger.
 Okay, so what is in this set object?
 So let's look at it in the right panel.
 There should be a set object there somewhere.
 Open the second closure.
 No, there's local in the scope.
[02:52:58]
 There's local, close that, close local
 'cause it's not in there.
 Let's open the closure.
 I don't see set there. Okay, close the closure. Let's do the next one. Is there set there set?
 Let's open that.
 There's door. Okay. Why is there still I don't see home did we make a home?
 Yeah, we made a home in the in the state centers
[02:53:43]
 Okay, there's home. Okay. Why does it see shop, but it doesn't see home?
 Shop house, right, it's about.
 Yeah.
 Okay, go back and then go back to the browser and then in the console, there should be like
 some spot where you can type. Click on console tab and then yeah type set
 Dot
 Up you can see did mount there. Okay, let's see what happens
[02:54:19]
 And define okay, let's do let's try home set that home
 The the store was not set up properly. Maybe no, that's set up [BLANK_AUDIO] Store.
 And then let me let me check my computer.
 Then we try to write it on my computer and then let me see where I can find out.
 Let me just, I just need a step away from the computer for a minute. I'll be right back.
 Okay. [ Pause ] [BLANK_AUDIO] [ Pause ] [ Writing on Board ] Okay, I'm back. I'm just going to try it on my computer off the screen for a few minutes. [BLANK_AUDIO] Is it the action payload? Because I'm looking at the error and it says, "Did Found does not exist on type action creator without payload.
 The string string.
[02:58:32]
 I'll have to change the payload maybe. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [ Inaudible ]
 >> Hey, Eukie.
 Yeah.
 Okay. So, it's easier just to instead of creating an object with levels.
 Yeah, just just create this or one level object and just start it with like if it it's gonna be in the home category, just start it with the word home.
 If it's gonna be in the shop category,
 just start it with the word shop.
[03:16:50]
 It's gonna be easier that way,
 'cause when it's in different levels,
 yeah, it's gonna require a lot more work.
 And it's gonna require some syntax that I haven't taught you guys.
 Okay, so it's just a lot easier just to categorize them by name.
 Okay, I'll do that.
 Yeah, they do look much better, I think. What the cat.
[03:17:22]
 Yeah, they do look much better, I think. What the category is?
 Yeah, when, when, when,
 they'll look better with the categories, but if, um, if you do it that way, it's going to make the,
 it's going to make the store, uh, like the store.ts file, look much more complicated.
 Okay. I'll, I'll take some syntax.
 Okay, I'll take some syntax. Go to fact.
 Yeah, it'll be much easier that way.
[03:17:51]
 All right, thank you.
 It might be like a slightly,
 maybe I'll have it have some time to teach you guys the,
 the way to do it for like the different levels.
 But for now. Just stick with just grouping them by
 name instead of level.
 All right.
[03:18:18]
 Okay. Thank you You're welcome and good night
 Good night

///// FILE: "Level 4/transcripts/Apr 29, 2025 20-2.txt"

Transcript from Apr 29, 2025

[00:00:00]
 Good evening class. Welcome to Code X Academy level four. It's week eight, day two, review, do AI topics,
 second hour practice and have time to catch up on the
 assignments or recordings or even do some answer any of your
 questions. Walk you through some things. Third hour time for many evaluations work on assignments.
 If there's no questions in the second hour,
 then I can also do many evaluations then.
 Attendance.
[00:01:02]
 So make sure you head on over to your code X account and mark your attendance.
 If you hear now, then your present.
 You can mark yourself as present, I mean.
 And now time for announcements.
 And me get that loaded up for you.
 There's some new things here.
 Okay. So things have been added to the class schedule, such as the last day of class and final evaluations. If you look at the class schedule. Last day of class is is May 24. So let's see how that looks on the calendar so it can get a visual of it.
[00:02:17]
 calendar may.
 2025 calendar.
 Okay, alright, so
 let me pick a different one.
 Okay, so this is the the last day of class, May 24. Right now it's the 29th.
 So this week, this last week right here will be for evaluations.
 If you look at the schedule here. And we just collapse these.
[00:03:27]
 Okay, so the schedule.
 We don't have a topic yet for week nine.
 We're going to see how it goes.
 But week 10 are actually week 11.
 That's the last week. That's for evaluations.
 This week is for evaluations. This week right here is finishing up on the capstone.
 If there's time, then you can present your capstone to the other classes so that they can see what they have to look forward to. one, what if somebody from level four came and started presenting their project and says,
[00:04:25]
 "Okay, you're in level one, I'm in level four.
 This is what you can expect to be doing by the time you reach this level."
 So you might be doing presentations like that for a class.
 We'll see if any classes are open for you to present, we might have to bump up the schedule so
 that you can do more presentations.
 But for now, evaluations is going to be this week right here. Some touch up topics will be
 talked over here. And this is today right here. So I'm not going to teach too much so that
[00:05:17]
 you have time to catch up wherever you are. But this is the absolute final day. If you don't make the cut on Saturday 24th, that's it.
 That's it.
 So you'll either make the cut,
 or you won't buy the end of the class day on the 24th.
 There's no more things going on on this week right here.
 There's no more things going on on this week right here.
 So it's possible to do your evaluations on Capstone to now a week, and then you can do your corrections and this final week right here. That way, you know that everything's done and you don't have to worry.
[00:06:04]
 You know that everything's done and you don't have to worry.
 But, you know,
 by in the head, this is the last day here. So you want to finish on time so that you can start work as a TA or,
 you know, there are some internships, internships on the way.
 Think there might be ready by then.
 And they're hoping to get some students that know their stuff, that know their fundamentals.
 So, plan ahead. There's a bright future ahead, but only if you take the initiative,
[00:06:49]
 bright future ahead, but only if you take the initiative to finish this class or this level on time.
 So that was, it's in the class schedule here. Last day of class and final evaluations will be on this week right there. You can sort of see a summary right here.
 We can't and we can live in.
 I think all of the guys should be casting.
 Okay, next, the survey. And you're still in July cohort here.
 If you haven't had a chance to complete it, make sure you get a chance,
 make sure you click on the link and fill it in.
[00:07:57]
 Your answers are confidential, I won't know.
 I won't know what your specific answers are.
 So just be honest.
 And since I'm here on this page, let's see if there's any questions.
 Okay, nothing new.
 Okay, many evaluations.
 Remember there's a time limit 60 minutes.
[00:08:25]
 So it just arrange your notes in such a way that you can get it done and get it over with
 without any struggle.
 Remember, and add submission, click on that button to be placed in the waiting list and to get that extra point or the on
 time point. Okay so the mini evaluations is closed for week seven but I can
 still do the corrections until Saturday for week seven.
 for week seven.
 Week many evaluations for week eight that was due today.
[00:09:13]
 Otherwise it closes next week.
 And just feel free to post in the chat when you want to take your evaluation or if you want to do it today
 assignments
 so
 Redux that's still you know, you can still turn it in for
 link credit or corrections that's still, you know, you can still turn it in for late corrections,
 App Engine, that's due this Thursday.
[00:09:53]
 And remember, contact the student success team
 if you need to earn some extra points
 that are on things that are closed,
 that they know which assignment
 and why you've fallen behind.
 And got some practice problems here. I need to post the one from yesterday, but we this is everything. Just let me know if something's missing there.
 Help seeker.
[00:10:33]
 So again, Herman is available for mentor meetings.
 So you can contact him.
 If you get stuck for 15 minutes or more,
 post your question in July cohort.
 Don't be stuck for a long time.
 Don't wait, just post it in 15 minutes.
 Maybe you'll get the answer after 20 minutes.
[00:10:59]
 Or I mean, like, maybe in five minutes after posting, you might get an answer, but it's better that you post your questions whenever you get stuck.
 No, book LM. Remember, this will be a good study guide for you because it'll help you find things in your notes.
 Just give it your notes, give it your code. But you have to just rename your files to like dot text. And
 you also, we can give it the transcripts. I have the transcripts are complete up to to day five here.
 Let me see.
 Day five of week seven, there's transcripts there.
 Up to.
[00:12:01]
 It's complete all the way up to week three.
 I'm still posting week two and week one here. I'm not quite done with that, almost.
 Oops, but here's the transcript for week three.
 I mean, one of the days.
 You're going to go in order when you're catching up and going through the recordings going order, otherwise you get lost, because each day is built on the previous day.
 Okay, so now we're going to review the review,
 we won't take that long because we didn't learn that many new things yesterday.
[00:12:54]
 So just absorb during the review session, but type anything down that we,
 that is, that's new to you.
 And get your microphones ready for the evaluations.
 Let's see here.
 So capstone app engine. So, Capstone App Engine is the most recent assignment here.
 And I haven't posted the requirements yet.
 So does anyone have any questions about any of these?
[00:13:41]
 Do you need any more details?
 If you need any more details about any of these points here,
 any of these statements,
 just let me know or post it in the July cohort.
 whole heart.
 See what else is here. Yeah, so that's it.
 Now we're going to review, see some typing.
[00:14:18]
 We have some questions. So that's it for announcements now time for review.
 And we didn't review. I mean, we didn't learn that many new things yesterday.
 It was just during the first hour of class that I introduced some things.
 Well, actually, this one that I introduced during the second hour.
 This was the Redux sign-in practice.
 And it was successful using Redux
 like converting your app sound to Redux and controlling the sign-in process with it.
[00:15:19]
 Thumbs up if you were able to do that yet. Thumbs down if not yet.
 So Chris just finished, he said.
 So it just takes a few conversions.
 For this part, you just basically need to just,
 you should already have a sign in button for your
 capstone project.
 and button for your capstone project. That was from last the previous level. All you have to do is change the state variables to use Redux. One One thing I wanted to point out, so I'm going to put something new here.
[00:16:10]
 I'm going to add something new because since the topic is Redux, you should get some notes
 ready.
 And we just load the sandbox.
 Since there was a read-ups question yesterday,
 I'm just going to clarify some things here.
 Let me just get it loaded.
 just gonna load it. On the front end.
[00:16:47]
 Okay, yeah, for the capsule.
 So if you finished it for the capsule, that's pretty much the same thing.
 If Chris is saying he finished that sign-in practice for the capsule, that's pretty much
 the same thing.
 So if you did it on your capsule, then you did the practice too.
 Okay. You did the practice too.
 Okay, so this is this is new. It's not in the notes because there was a question about
[00:17:36]
 Redux yesterday and the clarification after class
 when everyone was gone
 gone When the class was already dismissed.
 Okay, so there was a question about categorizing the variables.
 So let me pull this up right here Catch down the Redux
 [ Pause ]
 Categorize the state variables my page.
[00:18:35]
 Or however you want to categorize it. It makes sense to do it by page.
 So the question was how do we do that?
 And the best way to do it is by the name, not trading levels in state variables
 object.
 Create a custom data type for state variables. That's pretty easy. We did that already. If you're doing Redux, you
 should already have custom data type for state variables. Basically this type of
 state variables. If you look at this data type, it's going to be basically just like this, but it tells you what the data type for each property is.
[00:19:30]
 You did not, is a Boolean quick count is a number.
 That's when you get, basically here it is, get the data type of state variables object.
 That's what this means. Get the data type of of state variables object. That's what this means. Get the data
 type of state variables object. And when you do that, here's the data type of it.
 That's what this means. Okay, so how do you categorize them? So the easiest way to categorize these by page is by doing it by the name.
 So here's the hard way to do it, which I don't recommend.
 I mean, it's good if you can do it.
[00:20:21]
 And if you can figure it out, it might, you might run into some
 difficulties if you try it like this. If you try it like this, like if I want
 these to be the state variables for the home page and I want the about page.
 I have a did mount also. This is my levels. right, I have like different, I have like different levels in this object.
 This is an object and I have different levels and this one is a deeper level inside of this object.
 So object within an object. So I don't recommend this because it's a little bit more
 difficult, but if you could do it this way, there's a way you can make it
[00:21:17]
 even, you can write some code to simplify Redux even more. If you do it this
 way, if you do it this way, there's some code that you can write to make it even a lot easier to work with state variables.
 But you have to have an understanding of how code works to be able to write another piece of code, which makes it easier to use levels in your state variables.
 But if you don't have that skill to do that yet, then this is what I recommend.
 So if you have a home page, I would convert this, I would change this to HomeDidMout.
 And Home, Click Count, Home Message, Home Component.
 And then if this is for the About page,
[00:22:24]
 I'll change this to AboutDidMout. And then if this is for the about page, it changes to about the mount.
 If you have a contact page, then that would be contact the mount.
 So basically, it's categorized by name
 by the first word of each table is the page that they're on. If you have a
 global thing, you can call that like if you have something global like a cart or total quantity, you can categorize it like that.
 Global things.
 If you have a shopping cart, if you implement that, I would go to global because this
[00:23:19]
 would be like all the pages.
 And you can categorize it by Google. These are only in the
 homepage. This is only in the about page. This is only in the contact page. So
 now that I've renamed my variables, I'm gonna have to go in here and fix my Setters, not actually let's start with the selectors here.
 Let's go in order from the chart.
 So I'm going to just load up the Redux chart here.
 Basically, the store, that's part of the state variables, it was part of the store. Now I'm going to go to the selectors and change those.
[00:24:39]
 Selectors are right here.
 Select did not. So I have to rename these because I have multiple did not.
 He's just way as just to select home did not.
 And then I'm gonna, I'm gonna destruction of the home
 part of the state.
 No, no, this one's gonna be called
 home did not here.
[00:25:14]
 And then rename this home
 did not.
 This one's select home message.
 I'm gonna rename this select home message.
 I'm going to rename this to home message.
 This one select home Click Count.
 This one is home quick count. As with category it's in.
[00:25:50]
 This one's select home component because it's in the home page.
 Basically just put home in front and
 front of each one that belongs to the home category.
 Just like this, they belong to the home category.
 If I'm gonna select, I don't have it here,
 but I'm gonna select the did-mouth for the about page.
 So I'm just gonna copy this.
[00:26:21]
 The about page has a did-mouth.
 So I'm gonna put that in here.
 And I'm going to update this.
 And remember what it says about.
 And the contact page has a did mount.
 I'm just going to copy this and do it for the contact page.
 Update this one for the contact page. This is the easiest way to do it. I mean, it's not the most efficient way to do it,
[00:27:06]
 but it's the easiest from just to get going without changing too much of the things that you've already learned.
 Without adding too much to what you've already learned,
 this is the easiest way to do it.
 to what you've already learned. This is the easiest way to do it.
 I don't have a
 global total quantity, so I'm just gonna add that here.
 Select. select
[00:27:47]
 one whole total
 quantity
 and then I'm just going to
 update this
 one whole
 total quantity
 there. I've created selectors for all of these state variables right here.
[00:28:09]
 Okay, so going in order, I made a selector here.
 Let's check out how they look like in the components.
 How did my selectors look like in the components. How did my selectors look like in the component?
 And we're going to the home page.
 So there's going to be bugs here because these selectors don't exist anymore.
 And we name them.
 So this one's instead of select component.
[00:29:12]
 I'm just going to press control D to select these both of these.
 It's going to be select home component.
 Just putting the word home in front of these
 same variables. Press Ctrl+ to rename select message here.
 Select Home message.
 Okay, so that, that was all done here.
 Okay.
[00:30:01]
 That's in the component. How it's selected.
 And now, going to go to the actions where the component creates the actions.
 And see if I created the actions properly.
 Okay, so there's a problem here because I didn't rename my actions.
 So actually, I have to go back to maybe it's better to start from reducers.
 And for take care of these, these, these four right here before getting to the
 action and the dispatch. So I need to fix the reducers.
[00:30:53]
 Because right now my actions look correct, which they're not correct.
 because it's supposed to be home did now and home message. I'm going to go to my setters.
 This is where the errors are. There's no more did mount by itself.
 It's now home did mount.
 I should also update this one when did mount.
 This one's also, I should update this.
 The home click count.
[00:31:55]
 update this, the home clickout. And I should update this one. It's my home message. I should update this one. It's my home component. And there's some other ones like about the mount. That's pretty easy.
 I just copy this. Change the name here. About the mount. The next one is contact page.
 It's going to change these for the contact page.
 Not currently using them right now, but that's okay.
 These are all set. It still looks like there's nothing wrong here.
 There's something wrong because there's no war set dead mount. Let's see what happens here in the store page.
 Redox store.
[00:33:16]
 So it doesn't do the type checking automatically.
 So here's the actions, here's the set, but it didn't do the type checking.
 So you just have to know that when you're going through this chart here, when you do the action, you need to select the correct action.
 So there is no more set did not. It's home did not. And this one is, there's no more
 set message. It's set home message. We just don't see a TypeScript error here. Let's see if I can trigger that TypeScript error.
 I mean, let's see if we can, let's see what it looks like.
 Let's see what the set variable looks like. [ Pause ]
[00:34:39]
 >> Okay, so we're in the home component. And again, the C of these got selected properly.
 And then we'll sort of work. Yeah, it's all there. We have a message. We have a
 click count of zero. All right. Now we can take a look at the set object.
 If I go to the debugger here, I can look at the set object.
 Just basically go start from the top and check if it's in there.
 I don't see the set object there. I don't see it there.
 Here it is.
[00:35:32]
 And yeah, this doesn't look right in there.
 So when you get to the situation where you find the set object and it doesn't show the properties you're looking for, you could just try
 You could try just typing it in the console here set. We have the set object
 Let's see what properties it has. Okay, this is, this
 seems to show any properties here. This should have combed melt. See what it is. It says
 undefined.
 says undefined.
[00:36:34]
 Let me try this out here.
 This is the whole message. Try this again.
 You can look this.
 Let's see if it properly creates an action.
 Does the action look like?
 Okay, that looks, looks about right.
 It was, it was properly made even though this set object that didn't seem to have a
[00:37:15]
 home that now.
 Let me try to get in the console here.
 Home that now.
 Yeah.
 Some reason it can't see it properly.
 So you just have to know that it exists.
 Like Home to mount exists on the set object.
[00:37:35]
 And it creates an action.
 If it works properly, then an action would be created here.
 Yeah. So here we're in the producer.
 And it's going to set a new value for home did not.
 Press play.
 And crash.
 and the crash happened here. Set the component is not equal to.
[00:38:14]
 So I need to find out where we're wrong.
 Let's see here.
 State variables.
 Home did not have its correct.
 State setters, home did not.
 Here count.
 I know we got into the state setters properly.
[00:38:41]
 State not home did not.
 People do not immune value.
 I wonder if that new value came in properly trying to get it.
 And new value is true, okay, so that's good.
 It stopped here for some reason, and it crashes.
 I said that concludes not a function.
 I tried to cover the data so it could be found.
[00:39:19]
 (mumbles)
 on
 and and
 simply
 added here
 on message
 and on message from campus to.
[00:39:47]
 Oh, wait, set. Oh, that's why. This is a problem right here.
 I forgot to change this.
 Okay. So if you're going to get an error, if you forget to rename the set property, so set
 and then the property, or the variable that's going to change. If you forget to rename it,
 it's that's how you'll see an error. So it's working fine now. That's did
 not should be true. Yeah. So everything is working fine if everything's working fine. I should be able to click this. Okay, so that one there. Click count on. And forget the count here.
 Oh, yes. So look for all instances. So this one is in the handler. This is supposed to handle the click. So again, whenever you see an error,
[00:41:11]
 that's because you forgot to rename one of these.
 Oh, click count. So everything should be working fine now. I got everything. So now I could just click on this. Oops, it has a
 key folder here. Yeah. And this key folder and, and these should refine that.
 And it's going to go on the view button.
 Okay, click out the next slide now.
 And this one also changed.
 This was Hello World.
[00:42:11]
 Now it's have a nice day.
 Sorry with Hello World.
 Let's see, your state of variables.
 Yeah, sorry with Hello World.
 And then it changed to have a nice day
 on when the component amount.
 So that's how you categorize them.
[00:42:29]
 That's the easiest way to categorize them.
 Just put the category, just pre-pend the category,
 pre-pend the category to the beginning of the state group.
 All right. So, we're still in review, except for that part where I showed you how to categorize variables the easiest way to do it with minimal minimal effects on your code. Now transformers JS. We try to get a response from
 the back and AI server. We created a route and a route handler. And basically here, I'll show you what we did. So we added this right here.
 Then you get the back end portion loaded. Okay, so we made this route right here.
 I called it AI.
[00:43:55]
 Here's the handler.
 I'm going to use that get_answer function.
 And then send the...
 Send that answer to whoever's making the request.
 So we're going to...
 We tried to make a request from the browser.
 So let me just stop this front end here.
[00:44:23]
 So the front end we know that's working properly with categorized variables.
 Just remember to rename them everywhere.
 Okay, so we got up to this point where we created a handler and then we start the server and it's
 crashes.
 But let me just build the build part of the server also and PM start to
 So this one's constantly
 updating the code
[00:45:15]
 It used to be built, but then I called it start to
 And you should get a crashing page if you try to view it.
 Like the Ai route.
 I'm trying to give it a question.
 Like what's my name?
 The question is what's my name?
 And then the context is my name is Robozar.
[00:45:46]
 So it should crash. And the reason it crashes is because it could not get built.
 So here's the here's the build.
 And the error is because here in the node modules, something about the nodes modules, this is not our code.
 It says failed to parse or basically module parse failed.
 And so is the question mark. Like it sees the question mark in the code.
 That's because this is a binary file. It's not like a JavaScript
 file or anything like that. That you can read the text from. It's binary. That's why there's
[00:46:56]
 a question mark and like a diamond here because it's actually just like ones and zeros. And it's actually just like 1's and 0's. And it's trying to render what
 thinks it's saw, thinks it's a question mark, but it's really just 1's and 0's.
 It says here, you may need an appropriate loader to handle this file.
 Although there is a loader that handles that node files or binary files.
 If you try to, if we try to, you know, try to load it, it still won't work,
 because it's going to run into like a rabbit hole or cascading of cascading listed problems
 when you try to, when you try to take this suggestion where it's trying to say hey get a
[00:47:50]
 loader for it if you try that you're just you're gonna get stuck you're
 gonna you're gonna find the dead end okay so now the new stuff.
 Let's see what I can teach here in the next few minutes.
 So here, errors bundling, transformers.js.
 So we got this error.
 We specifically saw a known file error.
 It's not specified here, but you could specify it in your notes if you want.
[00:48:39]
 So bundling Transformers.js will result in errors.
 And adding new loaders won't work because transformers.js is different for each platform.
 What does that mean?
 So let me just put this into the notes and we'll discuss this even more.
 more.
 And go into the front end about A_i
 king. Okay.
[00:49:34]
 All right, so
 Transformers.js is different for each platform. So if you install Transformers.js and you try to use it on a Mac,
 it's going to install certain codes for that system. If you install it on a Windows system,
 it's going to install a certain code for that system. If you install it in a Linux system,
 it's going to install a different set of code for that.
 So that's what it means. Adding new load is won't work because
 Transformers.js is different for each platform.
[00:50:14]
 What this means is if you bundle your app including
 Transformers.js, it will just work for your computer. It won't work on, so if you for your computer it won't work on so if you have
 Windows it won't work on a actually if you have a it actually depends on the CPU also and GPU so your
 processor and your graphics card so that's for words.js.
 On your computer, it might work, even though it's Windows, and it has like a,
 I don't know, Intel CPU, and it might have an Nvidia video card.
 But if you try to install that, if you try to use that same bundle somewhere else on another Windows machine, it won't work because maybe they have a AMD processor and radion graphics card. basically, Transformer's JS installs specifically for your computer.
[00:51:25]
 And if you make a bundle for that, it's not going to work in very many places.
 Only it will work in places that match your setup.
 So it's not a good idea to bundle Transformer's.js.
 This bundling assumes that the code should be the same
 no matter which platform it's on.
 So far, we've been bundling our code and it's been
 working because like the Express server, it's pretty much the same
[00:52:00]
 on a maximum Linux Windows. But Transformers.js, it's different because it depends on your CPU, your GPU.
 Transformers.js needs to be installed specifically for each platform.
 And the post-install script ensures compatibility with each platform.
 So remember we did improve builds.
 We did this here.
 Over here.
 We had to do PM-approved builds. This one is the Post-Install Script. It runs a Post-Install
[00:52:50]
 Script. This is what this is talking about. Post-Install Script is you're going to install
 the Transformers.js package, then it runs this post install script which customizes everything for your computer.
 It looks at your CPU, your GPU, your processor and your graphics card and installs depending on what those are.
 So it needs to be installed specifically for each platform.
 So it needs to be installed specifically for each platform. Let me see what the next slide here is.
 I'll go over one more slide here and then one in the second hour.
 So here it is. So since Transformers.js shouldn't be bundled,
[00:54:07]
 then we need to configure Webpack to not bundle Transformers JS. It makes sense, right?
 Because Transformers.js, it needs to install different code depending on the platform.
 If you just bundle it, it's trying to use only the code that worked on your computer.
 So we want to tell what pack don't want the lint. We're just going to install transformers.js manually wherever
 whatever system it's installed and and we're eventually going to use transformers.js on
 you know app engine. So which is a different system than yours.
 App engine is a, I think it's a Linux, Linux-based system, not Windows, not Mac, Linux. So here are the notes.
[00:55:11]
 I'm gonna paste them in here. Actually, let me just highlight transform using the Now we need to start the new section of notes right here with the blue points right there.
 In the webpack and fig add externals and also add externals type. So externals are modules that won't be included in the webpack bundle.
 Exerls are modules that won't be included in the webpack bundle. So here, we're gonna do this that in Webpack config and external,
 the Nova transformer, this means that
 we're gonna tell Webpack that the Nova transformers
 are this module, this package
 did not be included in the bundle.
[00:56:24]
 It's an external. It's external to the bundle. It's outside of the bundle.
 So it's called externals. With the S, because there's a lot of them.
 You could mention a lot of them.
 So usually when there's a S it's usually in array.
 You could specify a list of external things not to bundle.
 In this case, we don't want to bundles in no but transformers.
 Don't bundle these packages.
[00:57:27]
 And you can add extra notes here to explain the reason why. Why we don't want to bundle this.
 I just described why we don't want to bundle this because it needs just bundling the software for your system, not for
 any other system.
 So if it's external, if it's outside of your bundle, right, you're going to make a
 bundle and you're telling webpack that this package should not
 be bundled, that it needs to import it because you're importing this code, right?
 You're importing this code right here.
[00:58:18]
 So you need to tell webpack how to import this code.
 You want it to import it the new way here, the new
 import syntax. You want it to import it the old syntax.
 So the way we tell when to unpack how to import is with external type. So
 external type specifies how the bundles app should import the external module.
 And fix that type over here.
 So Webpack is going to keep this line here. Instead of cutting this out, instead of tree shaking this, it's
[00:59:10]
 going to keep it and it's going to use this important syntax. Not the old syntax, because
 we're going to specify here, we're going to specify that we want to use the common jas module syntax. If you just put
 common js that's the old syntax module syntax is more current external
 type.
 [BLANK_AUDIO] >> External status right there, if you don't specify this,
 then Webpack will not try to import the Nova Transformers.
 I mean, your bundle will not import the Nova Transformers, but
[00:59:59]
 it needs to import it because it needs it, right?
 It needs it, it needs it right here.
 because it needs it, right, it needs it, it needs it right here.
 So we need to tell about pack, okay, these externals right here, that's that's important. The common JS module way.
 I think it's going to start mumbling now.
 Yeah, see?
 I guess I'm passionate.
[01:00:31]
 So let's start.
 I have to restart this mumbling, because I've changed the configuration.
 If I start mumbling now, it should start working.
 It should get through without errors. If I start bundling now, it should start working.
 It should get through without errors.
 And now it has a warning.
 Okay, so with that, we'll go into the break.
[01:00:57]
 Get into the next section after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so we're back from the break for this second hour.
 We could practice, but before I get into the practice, I'll just clarify that the the back end server for the AI should be working now that we've configured Webpack.
 So I've started the server here and it's constantly building updates here.
 I can close this one.
 I'm not using that terminal anymore. And then where is that right here?
 So I can type in from the wiki page actually, something about So I'm just going to get this first few sentences about an apple.
 That's the context.
[01:13:38]
 And I'll just put the question is, what's an apple?
 And then I'll put the context here,
 which is from that wiki page.
 Press Enter.
 There's the answer around edible fruit.
 You can edit the context and instead of round output square, a square poisonous.
 So it only knows how to answer based on the context to get it.
[01:14:23]
 So what's an apple, a square poison is fruit. So it works now. Tomorrow, well, we will go over how to deploy it to
 App Engine so that it doesn't just work on our local machine. It can also work in the internet.
 But for today, the second hour, you can practice.
 This one is about Redux sign-up practice.
 So you had sign-in. You should have a sign-in ability for your
 website, the sign-in feature. You should start adding the sign-up, or at least practice for sign-up.
 How do you sign-up like a created new account? So that's the sign sign up, right? So use Redux to toggle access to the sign up page
[01:15:30]
 Actually, not just even not just toggle, but also to actually sign up. So I'll I guess I'll update this description here
 Basically, you're gonna create create a sign-up component.
 So if you're going to follow the same pattern that we had,
 it'll be like a button.
 It'll render a button.
 And then when you click on that button,
 it'll pop up a model for signing up.
[01:16:01]
 Let that model contain a signup form that asks for an email and password.
 Okay, so it's just not, it's going to ask for an email and password because that's what
 you're going to sign up with.
 You're going to sign up with a new email and a new password.
 When the signup form is submitted, check if that email is in the database.
 Now click on submit and you're gonna find out, okay, is this email already in the database or not?
 So if it is in the database, send an error message,
[01:16:39]
 then an account has previously been created.
 'Cause you don't want them to sign up,
 but their emails are already taken,
 or maybe they've already created an account.
 So if they've already created an account,
 or you see a matching email,
 then you're gonna provide an error message saying
[01:17:01]
 the account has already created.
 But if the email is not in that list, so in your database,
 you have a list of accounts. And if you don't see that that new sign-up, you don't see it in the
 list, you create a new account in the database. You should already know this because you know the because the CRUD create, read, update, and delete.
 Then on successful sign-up, if they were able to sign up
 and the account was created in DynamoDB, automatically
 log in the user by setting the proper Redux state.
[01:17:48]
 So, you don't want them to, I mean, it's up to you.
 Do you want them to log in after they created an account or do you want to just log in and
 log them in automatically
 when they create an account.
 I prefer being logged in automatically.
 Like when I go to a website and I create an account,
 I just want to get into the website and start exploring
[01:18:19]
 instead of having to log in with the password I just created.
 So this one is good for user experience automatically log in.
 Let the user automatically log in the user when they successfully sign up.
 And you need to use a Redux state variable to control that.
 And then that sign of component that you created up here,
 that it select the Redux state regarding the login status.
 So maybe that login status is gonna be,
[01:19:00]
 what a variable called is logged in.
 That might even be a, you might consider that a global variable, not just on the homepage.
 So you could put that in the global section is logged in or maybe you might call it account
 and contains all their account information. I would categorize that in the global section.
 So maybe I'll call it global account,
 so that it's accessible from every page.
 Not just the homepage, not just the login page,
[01:19:44]
 not just the home page, not just the login page, not just the about page.
 So it depends on how you want to set it up. Do you want to just use a Boolean
 variable or do you want to use an object that contains login information.
 So when the Redux state shows the user is logged in, I'd the sign-up component.
 Because if they're logged in, there's
 no need for them to sign up anymore.
 So hide the component.
[01:20:12]
 When the user logs out, set the proper Redux state.
 So when they log out, you're going to set
 is logged in to false, or maybe you'll just
 clear their account information.
 And then when the Redux state shows the user is logged out,
 show the sign-up component because after they're logged out,
 maybe a new user might try to use the website.
[01:20:38]
 So you need to show the sign-up component again,
 whenever they're logged out.
 So that's the sign up practice.
 I'm going to start break our rooms for 30 minutes.
 Okay, let me just finish. I see you have a question Chris. What's your question?
 Let me just face. I see you have a question Chris.
 What's your question?
[01:21:08]
 It's about the the new capstone assignment.
 I'm just looking at it now.
 Let's start with that question here.
 Just look over really quick.
 The App Engine 1.
 Oh, it's so it's saying, create an
 App Engine project for this backend server. What do you, what, what exactly do you have to deploy?
[01:21:36]
 You have a separate just like in our sandbox. We have a separate folder for the backend.
 Yeah, but do you just want us to deploy that like what we worked on in the sand box or was there something specific that you.
 So yeah, it's going to be similar to it's a template. So it's going to be a template there's nothing.
 Well, let's see, let me go through the description here.
 Like, just try to tell what response you want us to render for the front end of the front end.
 Yeah, you can do a similar response that you get from the sandbox.
 Okay.
[01:22:22]
 So let me just look at this here.
 This is more just to see if we can successfully just like set up the
 just this isn't so much about just playing an AI response, but just
 showing that. Okay, I gotcha.
 Yeah, I just basically connecting them together. Yeah, getting your front end to work with the back end a second back end. Yeah, there's one back in for the account and then there's going to be a second back in or the AI. Okay. I gotcha. Okay, thanks.
 So yeah, so the front end is going to respond from the local. So you're working on it locally first.
 Okay. And then once you get it working locally, that's when you're going to start
[01:23:17]
 deploying it to App Engine. So, whatever it's doing locally, it's going to do the same when you deploy it.
 And there's nothing specific that you should render.
 You can just render the same things that we're rendering in our sandbox.
 Or, like, one idea you can do is render the environment variables or if you have the AI going,
 then you can render that. The easiest thing is just to get it rendering whatever the sandbox has
 and then once you get that going, you know, you can start adding the AI or even before adding the AI, just get a
 surrender to the environment variables that's in App Engine. And then, and then start adding the AI.
[01:24:12]
 Okay. Okay. Now, basically, it's just getting the connection, setting up, deploying app
 to App Engine and making sure your front end can connect to it. OK, yeah, thank you. Okay, let me know if anyone else has any questions or if you want to volunteer for the
 mini evaluation today. they post it in the chat, post your questions in the chat, or raise your hand.
 Work on catching up. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] All right, so it's break time.
 So I'm going to start the timer for another break.
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And for the third hour, you can work on the assignment, the upcoming assignment, which
[02:05:38]
 is Capstone App Engine. engine. And as discussed earlier, there's no specific output or return value or response
 that we're looking for here. Just get a response. Just to tell you that it's connected
 properly. Try to make you can even try to make some changes,
 practice some deploy so that you can see if it's updating
 an app engine.
 Basically, connect your capsule in front end and back end
 to rule cloud app engine.
[02:06:35]
 So, the front end should not be connecting to the Google Cloud App Engine directly. It should connect to the front end, which connects to the Google Cloud App Engine.
 And the backend is in the Google Cloud App Engine. OK, Chris, you have a question?
 Yeah, I just wanted to let the other people know that when
 you set up another like a bug or like another Google Cloud project for
 Capstone, you know, it defaults the user to an editor. So you don't have permissions
 to upload to Google Cloud. So you have to change the user permission so owner so they know.
 So, um, okay, so did you use a, did you add a new user?
[02:07:38]
 It, it, it creates a like a default editor user when you make a new project.
 That's associated with that project.
 - Oh.
 So, like--
 - Okay, so you put it under a project?
 - Yeah, I put it under like,
 'cause I wanted it to be under the sandbox project,
[02:07:56]
 I wanted it to be under the capstone project.
 So, so you made a new project.
 - Yeah, well, I think when you make your first project,
 it gives you owner permission,
 but when you subsequent ones, it defaults to editor permissions, which aren't enough to push the
 Back into Google Cloud
 They just have to you
[02:08:16]
 You just have to change the permissions there. Yeah, you do it and that there's like an I am
 Yeah, that's too. Yeah, you's an agenda. Yeah, so they know
 Okay, thanks for the tip here
 I'm gonna
 I'll look into that and
 I'll discuss it with a class tomorrow
 I'm gonna now start another session of breakout rooms. This one's 42 minutes.
[02:09:14]
 And I'm going to check. So now it's time for the many evaluations. [BLANK_AUDIO] Okay, Chris, you're in the waiting list, your first and the waiting list for the many
 evaluation.
 I'll meet you in the mini evaluation room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Let me just conclude the class first.
 Okay, so the breakout rooms are back. In conclusion, we learned how to configure Webpack
 for the AI backend, and we got that running locally.
 Tomorrow, we'll figure out how to get it running
 in App Engine or Google Cloud at Engine.
[02:51:44]
 Also, this practice was introduced,
 Redux sign-up practice.
 You can, you have three minutes to mark your attendance.
 Other than that, class is dismissed.
 That's today's lesson on AI, I'm going to continue the
 mini evaluation of Chris. Okay, Chris, I'll meet you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Apr 3, 2025 20-43.txt"

Transcript from Apr 3, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four week four day four and this week's theme is about AWS
 yesterday we learned how to automate the the the the ploy process sending our
 sending our backend server to AWS Lambda with just one command line, one script. In today's agenda, we will do attendance, taking do announcements review
 second hour AWS
 We won't do express. I forgot to remove that and then
 Third hour many evaluations and time to work on new assignments
 So work on assignments. So make sure to take attendance and on over to your code
[00:01:10]
 X account. And if you're here right now, mark yourself present. And now time Now time for announcements.
 I'll start sharing my screen here in a few seconds. Okay, so for announcements, many evaluations. So, the mini evaluation for week 4 was due on Tuesday.
 And so that's for this week.
 It was due on Tuesday.
 And the last day to do it.
 To do your mini evaluation is April 8 before class.
 So that's Tuesday.
[00:02:29]
 I think, let me double check.
 Yeah.
 So basically today, Sunday, I mean, today, Saturday and Monday are the last days to do many evaluations for week four.
 Actually, no, I can do corrections for week four during week five.
 I can do corrections for week four during week five. But just get in the lineup.
 Get in the lineup.
 The waiting list before April be due today before class,
[00:03:35]
 but because I wasn't able to finish the detailed requirements, the detailed It's being postponed until Saturday before class.
 Practice problems, they are posted over here.
 I've posted secure keys practice.
 And remember when you do the secure keys practice, you're making a CLI access key.
 So when you create an access key, you have some choices.
 Make sure you choose a one for command line interface. That's what CLI stands for.
 Okay continuing over here. Alright so help seeker. So let's see if anything new appeared in Slack.
[00:04:58]
 Waiting for it to load.
 Okay, so Alexandra had a question about what should render for the backend.
 And basically for the backend, you should have an index TS file that has express. And then, like for the root route, you can have some kind of HTML string
 be returned by your back end so that it says something. So let me see if I can load it up for you.
 Okay, this is just the back end right here of sandbox level 4.
 I don't have a front end started up right now.
 Just the back end and the back end it has an HTML string for,
[00:06:13]
 it has an HTML string that renders at the root.
 So it's supposed to render here and then you see what happens.
 I was making some changes in like PMPM broke.
 Okay, so it looks like it fixed.
 All right, there it is.
 So this right here is being rendered by the back end at the root path,
 which is defined in index 8 CML right here and it's being handled by the root handler and this
[00:07:10]
 root handler is just returning that 8 CML string right there.
 And it's just, this is, you know, usually back ends don't have any, they don't usually have anything to display.
 But you can just add some, like some kind of a simile string so you get something when you go to the root.
 But usually they're not back ends are not usually displaying anything.
 If you're using them just you know for data
 and proxying they usually don't display anything at the root path so it's just minimal right here
 what we're displaying right here is minimal
[00:08:02]
 okay so that was only question here
 Okay, so that was the only question here. But remember, if you get stuck for 15 minutes or more, don't delay post your questions
 in July cohort, because some things might take a long time to figure out. Maybe even a day in.
 You should be spending more of your time doing actual like coding instead of
 figuring out what's wrong.
 Because if you're just trying to figure out what's wrong, you're not really writing much
 new code. You're just like, thereThere's a bug, it's not rendering."
[00:08:47]
 And it might take you a whole day to figure it out.
 But if it slowed you down for 15 minutes and then you post it on July
 cohort, someone can just reply and say, "Oh, I think this is the problem."
 And then you get something to render in just a few minutes, whereas it could have taken you a
 whole day to figure it out if you didn't ask for help. So it's more productive to ask your
 questions in July cohort within 15 minutes of getting stuck.
 Okay, so as usual,
[00:09:30]
 Mark your days is green, go in order,
 take notes, also consider organizing your notes.
 If you're having a hard time like,
 you know, finding notes and finding information, then maybe
 consider organizing your notes.
 But now we're going to go into the review.
 So, in the review part, you don't need to be taking notes unless I say something that
[00:10:04]
 you forgot to jot down in your notes.
 The review part you should just be reinforcing what you learned yesterday.
 Okay, so let's see.
 So there's something here in the chat that exercise wants us to make a home route with
 the home path and use the axial's get method to have the front end, use that route.
 That's why, okay, yeah.
 Let's just practice, right?
[00:10:36]
 You can make any route.
 You can make any route render an 8C mls ring. This is just practice creating a route and getting it to respond.
 And so it's just practice. And have your microphones ready for
 for for evaluations many evaluations.
 Okay. So, I'm going to start there in you.
 And we learned how to configure Webpack to automatically zip up our disk folder.
 And we have some notes in the sandbox about this.
[00:11:47]
 And I think I'll try to go fast through the review,
 because to give you more time to see what's coming up, Webpackzip plugin.
 So we installed zip webpack plugin and then we imported it into Webpack.
 Right over in the back end and transfer over to the back end here.
 There's one pack.
 We installed it and then we imported up here. We chose this name because it's actually exporting a class.
 You can put any name for a default import,
[00:12:53]
 but this seems like a good name as long as it's a capital Z.
 It gives us a clue what it is.
 We also installed at types because there was three dots that were appearing right here.
 We actually don't really need it because all we do is this right here.
 We create a plug-ins property because this whole thing is an object, right?
 See it's an object. We create the plugins property.
 That's an array of plugins.
[00:13:31]
 And then to use that plugin,
 we just, you know, it's a class.
 So we put new and then the name of the class that we made up.
 new and then the name of the class that we made up. And that's that's basically it. You just do this and it zips up and plug in zips the bundle files into one zip file.
 into one zip file.
 Look in the sips that bundle files.
 Into one zip file in the disk folder.
[00:14:27]
 Let's see what else. Yeah, and we manually uploaded the zip.
 So Webpack created the zip file.
 Then we manually uploaded it to see if it affects the AWS NANDA, and it did.
 It worked.
 The zip file contained changes, and then when we uploaded to NANDA, Next, we installed AWS CLI.
 That has terminal commands that can be used to log in to AWS and they changes. I'm going to share the screen about this.
 Let's see.
[00:15:35]
 So we had to create a user with full AWS Lambda and DynamoDB access with no console access.
 Then you see if I can show you that.
 That was an IAM created a user there. I called my Lambda because I'm going to delete this. And you can see
 right here the policies that we attached are Amazon Dynamo DB full access and AWS Nanda full access.
 And no console access so there's no password or anything for it.
 So log in with that user.
 Then we created CLI access keys.
[00:16:47]
 Oh yeah, here's the part that says console sign in.
 Actually, no, it's not enabled.
 It's not enabled, so there's a button to enable logging into you know this AWS console
 Website, but right now it doesn't have that ability says here not enabled. It's just for the command line
 I have access keys here
 It's active
 I'm not actually using this one
[00:17:26]
 And there's a description here. Keep for Pro-Rex level 4.
 And
 And you see if it says anything like specific like it's a CLI key. It doesn't specifically show that it's a command line key.
 I don't see anything here that says it.
 I don't see anything here that says it.
 I'm not doing that as specified. I'm not going to do that. I'm not going to do that.
 I'm not going to do that.
[00:18:08]
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
[00:18:16]
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
[00:18:23]
 I'm not going to do that.
 I'm not going to do that. I'm not going to do that. I'm not going to do that. I'm not going to do command that we use. There was no difference.
 So it would have been okay whether you installed version 1 or version 2 for this.
 And after you installed it, you should see something in the backend.
 You should be able to type in AWS dash version.
 And then it should give you something there.
 You should tell your version to install.
[00:19:13]
 version 2 install. And then we type the AWS config to log in to AWS from this command line. And it stays logged in.
 Once it's logged in, we can start using AWS commands.
 So, then we learned the AWS command to upload something to AWS Lambda.
 So there's a list of commands that we can use.
 So let me show you that.
 So there's a complete list.
 If you do a search for AWS CLI lambda version 2 or version 1 whichever one you're using.
[00:20:19]
 You should see here. Here's version 2, here's version 1.
 Here's version two, here's version one.
 I'm solved version two.
 And then you have a whole list of commands and sub commands.
 Only one we looked at was this one, how to update a function code.
 This is all for lambda here.
 And it's right there, name there.
[00:20:50]
 It's not really clear like how you would write the command here,
 how you would type in the command.
 There's not an example on this page.
 And maybe there's not an example on this page that's seen.
 There is an example, but halfway through the page, AWS Lambda,
 update code, update function code.
 And here's a sample command. You wanted to put these slashes. These
[00:21:27]
 just mean, you know, the next line. I mean, it just means these lines should be on the same
 line. So we looked at that and we came up with this long command.
 AWS starts up the AWS command line and then Lambda is the part of AWS that we want to affect.
 Because you can affect, you know, Lambda, you can affect DynamoDB from the command line.
 Well, who are affecting NAMDA?
 The next one is what do we want to do in NAMDA?
 We want to update the function code.
[00:22:15]
 And then the next one is a flag or a parameter.
 That's what, you know, double-dashes mean.
 It's a flag or a parameter.
 Usually you'll have an equal sign or, you know,
 this is space specifying the value of that parameter.
 So the function name, and then there's a space.
 So that function name is sandbox level four.
[00:22:44]
 And then the next parameter is zip file. You need to have file D in front and these double
 slashes. Then you put in the path and the file name. So it's in the disk folder and it's the zip file in there. Again,
 AWS Lambda only takes zip files.
 And then in the next slide, we are automated deployment to AWS Lambda with NPM scripts.
 We made a, so that it combined the script to bundle in production mode and zip the files.
 So the way I did that is right here.
 And I can trace on in the back end.
[00:24:04]
 So here, I've made a script called build production, that's NTX Webpack,
 Modi, with production all those zips the file
 because that's webpack to it. And then I made a command or script to upload the
 zip to AWS. So that's this one here. Upload zip. There's a whole command right there.
 And then I put those two commands together in the deploy script.
 So here's the build production script. And here's the upload zip script.
 upload zip script. So all I have to do, if I want to upload to AWS Lambda, I just need to type in, in, run the point. And it does what it needs to do. It's it's up to file and
[00:25:21]
 uploads it to Lambda.
 to manage. Optionally, you can have it, have that the BoyScript push to GitHub, which involves like adding them and then pushing them. You can do that too, all in one step.
 I prefer to keep them separate so I have more control and I can test
 things out without pushing the GitHub.
 Alright, so now it's time for new AWS topics. So get your AWS notes out.
 And I think for this one, I would start a new section,
 or maybe you don't want to, because this one is about DynamoDB.
[00:26:30]
 You can create a DynamoDB notes, or you can put it all in AWS. I think I'm just going to put it in DynamoDB notes.
 and the MODV notes. And you can basically connect to DynamoDB with environment variables. So that's what you should be doing now because
 environment variables, they hide are important information. So copy this down and I'm just going to create a new set of notes though for And so AWS, but I'm just going to keep them separate.
 So it's easier to find.
 So in the back end, we had to save our access keys and other credential information into a.env file.
 And then you need to import.env and initialize it
 and use the environment variables to create the API key object. And use that API key object to connect to DynamoDB.
[00:28:50]
 And then create the nice animal DB client.
 So we have this information already.
 We have that information in sandbox level three. and you might have copied it over to your
 capsule level 4.
 So what I'm going to do is just copy it from my other sandbox in number three. Actually I'll set up a file first. Backend,
 in reverbables. So that's gonna have, it's gonna have those three things here.
 three things here. Access ID, when you just copy this really quick. It's going to have those in here.
[00:30:11]
 I'm not sure what it's going to be, but'm just gonna put a BBC there. I know the reason though.
 For me, it's US West 1.
 You need to put your own region in here.
 And then create a module. See here.
 I am going to create a temp.ts.
 I'm going to rename it later.
 And a copy into this module.
[00:31:02]
 The things that we need to connect to, DynamoDB, I'm going to copy that from the previous
 sandbox, level 3. It was called the Act.
 And it was all in JavaScript.
 Okay, so somewhere here modules. Okay, that's it.
 AWS authentication AWS.
 I'm just gonna copy all this, then I'm gonna edit it.
 Paste it into here.
[00:32:27]
 And so paste it in, I don't need that one anymore. I'll just move down.
 All right, so obviously we need some packages.
 So we can do that.
 We're not going to do this anymore.
 We're not going to import credentials file, because if you you import something it's going to be part of your code.
 And that means your secret access to use will be part of your code and you don't want it to be in environment variables. So we need to import that in the
 And we need to initialize it
[00:33:15]
 That's a config method right there
 If you don't if you don't initialize it, then it's not gonna grab the variables from here. So I'm going to install these right now.
 They're not currently installed in the sandbox.
 we can install that one and put them on the same line and it's all the way. So that will get rid of these red marks. And I'm just going to call this temp for now.
 I'm going to call it temp. and just leave it like that.
 So what is the region going to be?
 That's going to be from process.env.
[00:34:39]
 Greeted.
 Remember you need to use that process object.
 It has environment variables in here.
 Then you pick your variable from there.
 The access key ID.
 That's going to be the access.
 The ind.access key ID. and then this secret access key.
[00:35:07]
 That's the process that can see for the access key.
 So all this should connect. I'm going to just, um, I'll be the system.
 So that's how you, that's how you use the, um,
 environment variables.
 Basically add your access key,
 secret access key here and your needs in there.
 And we imported that in the initializing, and we used the environment variables to construct the API key. So, this is an object that has access key ID property and the
[00:36:27]
 secret access key ID. We have this API key in C here. Then we form the
 repass in. So this one returns a object we capture it here on the left side of the equal sign, then we
 pass that object into here, which returns a different object which is a nice version of the So we did this and connected with the API key and then create the nice,
 nice and low DB client.
 all right so this is a funny word it's an actual acronym for programmers and they chose this acronym because it's a funny word and it means something. It means, well, it stands for it refers to our actions that can be performed
 on a database. You can create, read updates and delete data. So let's just copy this and Get it down.
 Now we're sharing the screen now.
[00:38:33]
 Guys, I put this into the notes. So, tried it.
 So, the C stands for create.
 That's how you, that means add new data to the database.
 Our stands for read or basically that's retrieved
 existing data from the database.
 View stands for update, that means change existing data
 in a database and these stands for delete.
[00:39:03]
 This removes which you can use to remove data from data base.
 So these are actions you can perform on a database.
 You can create data, you can read data, you can update data, and you can delete data.
 Okay, so simple. And we're going to review how to read data from dynamo.
 We're going to do something special.
 We're going to just add something to it.
 And what we're going to do is make a module out of it and put it in a kind of low DV folder.
[00:40:07]
 So our, our modules are together.
 I'm going to start sharing my screen now.
 We're going to make four modules here.
 One for each letter of credit.
 Okay, so in the sandbox, create the read.ts module module in a dynamo DB folder.
 So that's why I wanted to call it temp.
 I'm going to switch over to the back end here.
[00:41:03]
 I'm going to switch over to the back end here. If I'm going to call this one, that mod.
 So in the modules folder, we just create a DynamoDB folder to keep these together because
 we're going to make four.
 We're going to leave this one, but I'm going to rename to the DynamoDB.
 So we'll leave that right there.
 And then form the request object with table name which is the name of the table in DynamoDB.
 So here's the request object and here's table name.
[00:42:15]
 You put in whatever you call the table in DynamoDB. So in dynamo dv, I switch over to dynamo dv.
 I can view the tables and I have two tables, I guess I'll work with them.
 So logins, so I can view the items in it, clicking on the floor items button.
 I see the items right there.
 There they are.
 So the table name was Loggins. and then key, you need to specify a key and that request here's the key, which is an object. It's an object. He is an object
 that contains the key and the value to look for. So here he is an object You see that the curly braces and this is the key to look for and then the value to look for
[00:44:08]
 I'm just gonna hard code something in here for now
 Hard code one of these emails
 And a And then we add the dot com.
 Next, send the request object with the get method.
 I'm going to highlight this, we need to use a get method.
 I'll highlight item also if that's coded.
 So send the request object with the get method. So here is to get method on the nice client.
[00:45:00]
 Sending the request there.
 And delete this stuff because we're not authenticating. And we're not doing this one.
 And it's going to get a response.
 It's going to get, use a get method, send a request, and we're going to receive a,
 it's going to receive a return a response, we're going to capture it here on the left side of
 the equal side. And if there's a match, the response will have an item
 object containing the data. So this response, so this response will have an item object that contains the data.
[00:46:11]
 In this case, let's see what you can call it. Login data.
 Login data right there. [no audio] Let's see how we're going to test this out. We can test this out by...
 So this is back end, I have it started, yeah, I have it started.
 I'm going to create a route.
 I'm going to index HTML file.
 I mean index.ts.
 I'm going to create a route here.
[00:47:11]
 I'll call it credit.
 I'll just call it credit because we're going to test my credit methods here.
 Credit actions that everyone to call it.
 And create the handler.
 Right there.
 And I'm just going to copy it from this API.
 Now.
[00:47:42]
 And then create it. Now, I'm going to do, I'm just going to get the result from that lead. And that means function that was made.
 It doesn't take any parameters.
 It just returns a result.
 Let me see.
 Does it return it?
 No.
 It's not returning it, so I'm going to return it.
[00:48:23]
 Return login data.
 So this function here, this read function,
 it returns login data, which I capture here
 on the left side of the equal sign.
 It throws it over here, I guess, if you
 want to think of it like that,
 when they function or method returns something,
[00:48:48]
 think of it returns it.
 If throws it to other side of the equal sign
 and a variable catches it,
 and I'm just going to display that variable right there.
 And,
 and you can see the important handler into here properly. Well, it's not going to work.
 Why is it not going to work for me?
[00:49:16]
 Because my API key is wrong. It's just ABC right now.
 So it's not gonna work for me.
 But after the break, I'll show you that it works.
 I'm just gonna put in the correct API.
 I'm gonna put the correct access key into the environment
 variables during the break.
 And then this should work. But if I
[00:49:46]
 try to run it right now and try to visit the this path, it's going to crash.
 It's going to crash.
 And it crashed because the security token included in the request is invalid. So that's basically my API key is wrong.
 So crashed, this is my back end server.
 It was listing on 8,000 and then it crashed
 because I visited the routes
 and tried to connect to DynamoDB with the wrong API key.
[00:50:41]
 So I crashed and it's red right here.
 So we're gonna take a break and then during your break I'm just going to fix the API key but I'll show you my shoulder panel really quick. Here it is. You need to import the AWS.
 Basically, I got it from sandbox level three or level three.
 But the change I made was,
 I got the credentials from environment variables.
 And I plug them into here. Okay. So, the client passed it in.
 It passed the API key into the client.
[00:52:14]
 Got the nice client out of it.
 Made a request.
 Here, I'm reading from DynamoDB.
 We're getting the data data and then sending it.
 So we're taking a break.
 See you after a few minutes. We have their full midst. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And we're going to continue with our AWS topic about CRUD.
[01:01:50]
 So this one will create data in DynamoDB.
 Actually, I think I need to run the previous one.
 Let me just run the previous one first.
 Reading data, I mean.
 Okay, so we created a route. There it is, the CRUD route.
 As we're going to practice our database operations,
 our actions. Here's the handler.
[01:02:37]
 It's calling that read function for us.
 We're just going to get the result and then display it.
 We're just going to get the result and then display it.
 That read function.
 Basically it's just going to get this email from DynamoDB and then display the information about it.
 I mean, return the information about it.
 So I'm going to. I don't right now, I don't have any front end. I don't have any front end running. I'm just using the browser
[01:03:14]
 for this.
 Okay, so let me see, did I did it crash?
 Did I put the right credentials in here?
 I haven't tested it.
 Let me see if this is it didn't rerun. put in the comments here, see if that changes anything. Okay, so it's there, it's
 running.
 We're trying to visit this route. Okay, there it is. So there it is. It gave me an item and this item was the email and the password.
[01:04:33]
 That matched. All I did was search for this and it gave me the whole account information
 there.
 Part of the whole login information. So now going back,
 now we're going to learn how to create data.
 So let's copy this to this one down.
 You can create data from our app.
 Instead of just reading the data, we can start creating it like making new logins in there in the database.
[01:05:16]
 I'm going to share my screen now.
 And I'm going to save this in the notes.
 and say this in the notes. So how do you create data in DynamoDB?
 So we're going to demo this by creating
 this file, create.ts
 and create that module in the DynamoDB folder.
 And then we're going to form the request object.
[01:05:53]
 It's going to have that table name.
 And then an item with a capital I, that's an object.
 Which contains the keys and the values to put in the table. We're going to send that request object with the put method.
 And if it's successful, it'll return an HTTP status code of 200.
 So let's check this out.
 So first step, create the create.ts module.
 Now it's going to be pretty easy because I'm just going to copy the previous module
[01:06:47]
 to read the green one because there's only slight differences in there.
 It's mostly the same.
 So I'm just going to copy this one.
 gonna copy everything and read it. gonna paste it into create.
 Now it's paste it in here. gonna make some changes.
 first one starting from the top. I need to change the function name to create to match the filename. This part is fine where we get the, we create the API key object that passed it in and get the client converted to the nice client.
 This is the part where we need to change.
[01:07:41]
 We need to change the request object.
 This request object should have a
 table name. So, I have a table name here already. That's fine. Then it should
 have an item. That item should be an object that contains the keys and
 values to put into the table. So it needs to have item instead of key.
 That needs to be an object with the key and values
 to put into the table.
[01:08:15]
 So I'm just gonna, let me see what is not in the table.
 Okay, so I'm gonna, I'm gonna create something called new. is not in the table.
 So I'm going to create something called new email. So this one's new.
 A new email.
 And it should also have a password.
 So I'm going to put that password here.
 So this is basically, we're specifying what we want to put
[01:08:46]
 into the table into the login table.
 So I'm going to put in an email and a password that
 password is going to be named.
 So that's the request object.
 Next one, send the request object with the put method. So instead of the get method,
 use the put method like that. And then, if successful, the response will have HTTP status code of 200.
 So what I'm going to do is just going to, I'm just going to delete that one and I'm just
[01:09:47]
 going to send the response for now. So you'll see what I mean. Okay, so this is what
 Postman is doing. I'm not sure what we're doing is putting data into DynamoDB.
 Postman can't, you know, create a client or anything like that.
 But Postman can access our route.
 So to test this,
 instead of running this read function, I'm just going to comment that out.
 I'm going to run the create function and import that.
[01:10:41]
 So I'm in the the current handler right now.
 And I just commented out,
 read because I want to see what create does.
 So if I run this function, it should add this new email and password.
 And then I'm going to get a response.
 And then I'm going to get a response. And then I will display that response for result.
 Okay, so let's try it out. Let's see if it updated. Okay, there it is.
[01:11:27]
 See, the response that we got was an object that has a HTTP status code of 200.
 Okay.
 Oh, no. Okay.
 Oh, no, so.
 So Chris has got, that's a different one. So this is the put and get with, with databases.
 The one with postman is, it's with HTTP or browsers.
 So it's a little bit different.
[01:12:10]
 So these are the actions.
 And so this was the create action.
 We ran that.
 We used the put method.
 And it gave us back this object. We have a CTP status code of 200. 200 when it's a 200 status code, you just need to remember that it means successful. You will see it here. If I look at my DynamoDB here in AWS, DynamoDB, and I
 refresh this, I should see that new email. And there it is. There's a new email, and there's
 a new password. So obviously it was successful. So this status code of 200 means
[01:13:07]
 successful. You might want to put that in your note somewhere.
 Okay. Next one. We are going to. So that's similar wording for databases and for postman, where
 you have the option to do like get post and put in all those things. That's what, you know,
 browser or HTTP stuff, but databases they have,
 they use the same wording, because they're similar,
 but they just want specific to databases.
 So the next one is update.
[01:14:02]
 How do we update data in DynamoDB?
 So this one, we're going to create a new file, a demo file called update.
 Copy this. I think we should put like sample code for our notes.
 At least for the request object, I think that's the hardest part.
 Request object and the method to use. So I'm going to go over here to the notes, paste this one in. Before I do that,
 I'm going to put some sample code here. So I remember how do you create data and DynamoDB.
 And put that sample code for easy access.
[01:15:18]
 That's basically it right there.
 Based in right here.
 So this is basically create that repost object.
 Then pass it into a nice client with the put method.
 The other one, I'm going to put a sample code.
 This is reading from DynamoDB.
 We're getting.
[01:15:50]
 And put the sample code in here.
 That sample code is in the read.ts.
 I want to get the test object and the method here.
 We'll quick access.
 I'm going to paste it into the sample.
 Code block. So for reading, you need to have a table name and a key.
 Then you pass that in using the get method for creating.
[01:16:38]
 We're creating data. You need to set the table name and item.
 With all the information you want to create.
 Put it all in there.
 Then you use the put method.
 Update. Now we're going to do update.
 Add an update data.
 I want to change something.
[01:17:08]
 So in the sandbox, we'll create update.ts.
 And then we'll form that request object.
 It's going to have that table name.
 We need to have a key just like in
 read the key of the data to update. So you remember and read right here.
 We need to specify the key of the data that we're going to read.
 So for update, we are going to specify the key for the data that we are going to update.
[01:17:57]
 That's what this one is here.
 And we need to have an attribute updates property, which is going to be an object with properties or the keys that should update, which are objects with a value property, which contain a new value. So that's a little bit longer, but I'll
 I'll walk you through it. I'm gonna use the update method. The response will
 have an HTTP status code of 200 if it's good. Okay. All right, So we're going to do this one step at a time. Oh, yeah, I should also put a space here for the sample code.
 So I can see like a quick reference to it.
 So update.ts. I'm going to create that here in the module folder,
 DynamoDB folder, update.ts.
[01:19:14]
 And I'm just going to copy that from the read.
 Because it has the same, the same request object almost. So I copy that
 from the read.ts and I'm just gonna edit it. That's the functioning with a
 filename there. This stuff stays the same. That's a PIP that's a client.
 I need to change the request of
 So the request
 needs to have a table name and a key
[01:20:05]
 So here's the table name and the key. So I'm going to edit something
 which one do I want to edit here.
 I'll edit, I'll change the test. I'll change test at email.com.
 I'm gonna change that one.
 So I need to set the key to that.
 So let's say email.
 This is the key.
[01:20:32]
 These are the keys.
 These are the unique.
 This is how you find data in your table using the key or the email.
 These are the emails for people are unique.
 So the email that we're looking for is test@email.com. I want to change this. Maybe I want to change the password.
 Test at email.com and let's see what's next. So we have a table name, we have a key, we need attribute updates.
 So I'm going to start here
[01:21:28]
 and actually update.
 This one actually, let's do this. We're going to do this one here.
 So let's just look at what method we're supposed to use. We's supposed to use the update method.
 So, I want to see what object this should be.
 And, it shows here that it expects
 an update command input.
 So, the object, the request object should be of the type of date
[01:22:29]
 command input. So this request object, we're going to assert it to update command input
 I see it right here. So it can guide me now. So this request object is supposed to be update command input type.
 So whatever this is, it should have a key, it should have attribute updates,
 and some other, it can have other properties.
 But at least one where I'm asserting this, now TypeScript knows what
 properties are valid. So if I start typing here, attribute updates, I can see it
 now. How did I get this class right here? Because this is what the update method wants.
[01:23:26]
 You can see here there's the update method.
 The first parameter here, the first parameter, the variable name is
 R and we don't worry about that.
 We want to see what the type is and it expects update command input.
 So that's what I put here.
 So that this object will be
 what it expects.
[01:23:57]
 So I need to have attribute updates.
 And that needs to be an object. Right here needs to be an object.
 So that's some kind of object whose properties are the keys that should update.
 So which property or which key do I want to update here?
 I want to update this key right here at the
 password. I want to change the password for that. So here I'm going to change
 the password.
[01:24:38]
 Okay, let's look at the next one. So an object whose properties are the keys that should update and that one should be an object with a value property.
 So this one right here should be an object with a value property.
 This contains a new value.
 Okay, so I want the new password to be.
 I want it to be new pass.
 Okay, so I don't need.
 I don't want this one. This one's not going to be right anymore. I'm not going to get an item from that.
[01:25:29]
 I just want to see the response.
 So I'll just return that response.
 If everything is formed properly, there should not be any red.
 If you miss anything else, I can be. everything is formed properly. There should not be any red.
 If you miss anything else, like mainly if I don't
 think if I don't provide a key, it's red.
 Because it knows it's supposed to have a key.
[01:25:59]
 So there's a guide there.
 So send the request object with the update method.
 So I'm meeting the update method there.
 Then if successful, the response will have a CTP status code 200.
 So let's try it now.
 How do you try this update function?
 I'm just going to stick it into this handler right here.
[01:26:29]
 Just going to use update function right here and import it.
 So it's going to run that update function.
 And I'm going to capture the result here on the left side, or I'm going to capture the
 return value here on the left side, and then I'm going to display it, or I'm going to
 respond with it.
 So now we can check it out.
 I'm just going to go to the homepage first, so you can see it change. I'm gonna go to the crud page or the crud path or route.
[01:27:13]
 Okay, while we see H-C-T-P status color in 200,
 so that's supposed to mean successful,
 if I take a look at this and refresh my table,
 what should I expect?
 I should expect this email right here.
 I expect the password to be different.
 What password did I set it to?
[01:27:36]
 New password.
 So if I refresh this, there it is.
 New password. there it is, new password
 okay
 next one
 So this one is the hardest once again. I should probably put the sample code in there.
 So let me just go back and put the sample code. because this one just has an, you see how
[01:28:27]
 I'll sort of thumb z this request object is.
 Well if you think this is thumb z, it's a lot more thumb zer
 with the original d, dine among db client.
 We're using the nice client. So this is like the like the nicer version of the request.
 The nicest version that we can get. If we use a regular client, it's going to be.
 It's harder to memorize because it's going to be like half half of this page.
 The request object will be long. So I'm just going to copy that sample code, put it in here into this box right there.
[01:29:18]
 So it reminds me who it's looking for.
 And I can see side by side. I can see side by side, but this means.
 So the request object should have a table name.
 So there it is.
 Should have a key of the email that we want to update.
 And then it should have attribute updates right here,
 which is an object right here.
[01:29:57]
 Who's properties are the keys that should update.
 So these are, this is a property which is a key that we
 want to update. So these are keys right there, right?
 And then, which, and this one is an object, which are objects here, with a value property right here, which contain a new value.
 So there's a new value. So there's a new value. And we basically have to break this sentence down piece like piece to understand what's going on here.
 Don't just look at it as a whole. If you look at it as a whole, you get confused.
 But you break it down into like two words, three words here and there, and you form it little by little, you will understand it.
[01:31:10]
 And look at the little details.
 Otherwise, you get overwhelmed by so many things happening in one sentence.
 Break it down into little details so understand. Okay so that's updating.
 This is the last one, I didn't delete data. So we're gonna create a new file. We can't call it delete because the
 delete is a reserved word in JavaScript.
 We can delete variables with it, like remove them from memory.
 Actually, delete objects.
[01:32:15]
 I don't really need to do that. And then put a space here for some sample code.
 So we want to create the Dell.ts.
 You can delete the word delete is a reserve word so we can't use that.
 We're going to form a request object. the word delete is a reserved word so we can't use that.
 We're going to form a request object.
 This one's easy.
 Table name and key.
[01:32:52]
 That's it.
 Of the data to leave.
 Gonna use a delete method.
 And this status code is going to be
 200 if it's successful.
 Okay, so let's start with this. In the sandbox create the del.ts module.
 So it's all sorted in this dynamo, the encoder, del.ts module is right there and that one is very similar to the read because that one has a table name and key so I'm just going to copy that, paste it into the doubt. Start from the top, look at what needs to be changed. I see that
[01:33:55]
 read. So this should be changed to doubt. So match the file name. This part is creating an API object,
 saying that object is creating client and converting it to a nice client. Okay, so here's a
 request. This is the thing that might be new. It's find out.
 The request object should have table name and the key of the data to delete the case of that.
 Yeah, I don't want to delete this one.
 I want to delete test.email.com.
 I would get this here, there's test@email.com.
[01:34:42]
 I wanted to leave this one.
 So that's what's going on there. That's my request object.
 Send the request object with a delete method.
 So instead of this method here, please delete method. So I'm sending the request object to delete method. We don't need this one here because it's not
 going to receive an I/O. I just want to see the response. Or maybe I just want the HCP status code.
 I don't know.
 You decide.
[01:35:31]
 I mean, now I just want to see the whole thing, the whole response.
 I can clean it up later.
 So if successful, the response will have status code of 200.
 So here it is. I'm just going to go to the home page or the server page,
 right, like that so we can see something change
 Oh, yeah, did I change the
 I need to use the lead here in the handler
[01:36:16]
 So instead of update I'm going to delete
 There it is.
 It's not called the "beat" it's called "bell".
 There it is.
 So it should call this function, which is going to come in here and specify that it wants to delete this test at email.com
 And I think I have this all set.
 You just love the check. Okay, yeah, it's ready to delete.
[01:37:08]
 And it's gonna, this function will return the result,
 it will have a return value, I'll capture that return value in here.
 On the left side of the equal sign, the node will display that return value.
 So that is in the front path or route. So I'm going to visit that right now.
 KSS, sad is code in 200. So that means it was successful. If I look at DynamoDB here and refresh,
 because I wanted to delete this one, right? Just@gmail.com
 If it worked, it should be gone.
[01:37:48]
 If I click refresh
 and I don't see just@gmail.com anymore.
 All done.
 So it worked.
 You did it all, and now I'm just going to put that sample code in here.
 Anything to explain.
 Here's the request and here's the method. I'm going to put that into the sample code.
[01:38:27]
 It looks like that.
 The great preference is basically I can see here if I wanted the leap data.
 It just needs a table name and key and I use the delete method on the nice client
 All right
 So that covers
 The thread methods we have all four now
 Now we have this TDD read practice. We're just going to focus on read the R and tried. So we're going to use TDD to create a back end route that reads a count information from DynamoDB.
[01:39:28]
 I think I'm just going to copy this here, paste it into the DynamoDB notes for now.
 So I have quick access to it because I'm going to walk you through it. At least some of it.
 Until, great time.
 So, get this copied down.
 copied down. So this is what we use TDD to create a backend route that reads account information from that DynamoDB. And notice I used the word account information. That's because it's not just going to be logins.
 We're going to update it to be account information.
 So when the DynamoDB console add a name and phone to each login. So that's the first step. Next one is
[01:40:52]
 index.ts, define the route, read account and handler for reading the count information. Then in the routes folder, use the handler should not be that should be should change this one to me.
 Right there.
 Then test that and returns an email, password, name, and phone. When given an existing email, test the result, test that the result matches.
 That means that the email in the result is the same as the given email. Test that it doesn't return a result when the email is not in the list.
 And test that it doesn't return the result when the email is an object.
 Code the function signature and the search the return type.
 Code the function according to the test specifications and then code the through one level and until it's a big time.
[01:43:07]
 And may or may not finish.
 So in the dynamo DB console, add name and phone to each log in.
 So I'm in dynamo DB.
 I have three logins, four logins here. So I'm just going to add a name and
 phone to each one. So I'm editing one of the items. I'm going to add a new
 attribute here. A string attributes. That's a name and it starts with a C. So I'll just make it Carolina.
 I don't know. I think you have to do it individually.
[01:44:07]
 So Chris is asking you if you can add it to the whole thing.
 Maybe you can.
 I haven't tried it.
 I just do it individually, because I know they're all separate.
 Let's see.
 So I added it.
 Good to see if I can, let's see if I can edit multiple things here.
[01:44:30]
 Nope, I can't edit multiple things.
 I have to do it one at a time.
 I didn't finish this Carolina here.
 I'm going to add another attribute called home.
 It's a string attribute or maybe number in the home.
 Yeah, let's try that.
 Let's see what happens.
[01:44:57]
 I'm not sure what's going to happen here.
 So the phone number.
 Okay.
 Gonna do that for all the logins.
 I may add a name to the phone.
 The name is a string. This is B so I'll make this knob and then I'll add another add to [no audio]
 see what's a
[01:45:52]
 [no audio]
 and add a name
 which is a string
 start to add a
 [no audio] So let's put A on the handy and then I'm going to add another attribute which is a And one more.
 And one more.
 And a string which is in the name. this is me, so I'll call this N-O-O.
[01:46:47]
 And I'm going to add a number, it's going to be the phone,
 making them all over the case.
 That's very important
 okay they all have email, name, password, and phone.
 So index.ts, define the route, a new route here called read. Need to put that forward slash don't forget that
 or else you'll be able to visit it. Okay, this one's gonna be a, maybe I should
 rename the demos. Read demo. What I'm gonna do is rename the demos. We need demo.
[01:48:26]
 What I'm going to do is rename these demos here.
 Or, yeah, so they don't confuse anyone.
 Just going to add them over there.
 Since I'm going to put the word,
 since I'm going to put them over after each one,
 I can use the the function names. Basically, just rename them to whatever makes sense.
 I'm just adding the word demo to them.
[01:49:50]
 You need to use the rename on the menu, so it changes it everywhere.
 And the reason why I'm rename them is so it doesn't, so you don't get confused with the practice.
 These are going to be different things.
 These are different.
 They're just demos and they are not the practice.
 Then I will be creating a read handler.
 So let's clean that.
[01:50:32]
 And I'm just going to copy the API handler.
 And edit it.
 So there's that.
 And kind of
 import this one.
 And I can test it out to see if
 if then handler is working.
[01:51:15]
 If I put read here it should just return whatever API was returning.
 Yeah, so that's fine. the route is working fine.
 So that's fine.
 So when the routes folder used TDD to test the function we can't.
 So I'm going to change this.
 It should be the module folder.
 Okay, I haven't actually tried this yet.
[01:51:52]
 I just did it already.
 So, so.
 So here's the route. I'm not going to test the route.
 I'm going to create a module called we account.
 And then actually to make a test plan for it to describe the account, read account function.
 I'm just going to for simplicity I'm just going to use arrow functions here. And let's see.
 So in the module folder, you use TBD to test the function read account.
[01:53:13]
 Test that it returns an email password, name and phone when given an existing email. So this applies that it can accept and existing email. So that
 let's just copy that here. What does it do? It does this.
 If it turns an email password name and phone, then give it an existing email. We use an arrow function for simplicity again.
 So in the range phase, what do I need? with my knee.
 Well, I need to give it an existing email, so I should have an email variable.
 And one of the emails that's in that list, so let's, let's, let's, let's, let's
 put some that list.
[01:54:23]
 I think that's all I need.
 And then in the act phase,
 I need to use that function.
 That function is read account.
 I didn't think it yet.
 When I know it's supposed to take in an email.
 By, you know, by just looking at this, I can tell that it's supposed to take in the email, see it's given an existing email.
[01:54:52]
 So it's supposed to return something an email password name and phone.
 So I'm going to get some kind of result here. And I know it's going to be a promise because you always
 have to await the database. And if you want to use await, you need to put a sync here in kind of the function, almost from this. So in the assert phase, I expect
 result, with I expect result, I expect it to have the email property to have property.
 There it is.
 Email.
 I expected to have the password property.
[01:56:02]
 I expected to have the name property and I expected to have the phone property and there's
 some more tests I should be writing here.
 You should do right all your tests first.
 I didn't even write this function yet,
 but I'm going to write the next test.
 I'm basically designing what I want.
 So what else does it do?
[01:56:50]
 So we want to test that the result matches. So the email and the result is the same as the given email.
 So it returns a result with matching email. I guess basically try to word it any way you
 understand. So what does that mean? Let me just copy this here. So I expect the result.email to be the same as email up here.
 Right? Because we want to make sure that this is returning the right one.
 Right? It's not just returning anything, anything
 email. It's returning the right email. So yeah, that's how you get started with this.
 Just write your test first. Read it carefully.
[01:58:08]
 And that's how you, that's how you get started. So we're gonna take a break now. Okay, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And now you have time to work on the assignment and this is a new assignment.
 We had a week for the previous assignment and now it's time for a new assignment because we learn more stuff.
 Tap stone back end accounts.
 So we talked about, you know, adding a name phone to your
 login. So now it's more like an account. It has an email password name
 login. So it's an account. You can even add more properties to that if you want.
[02:09:18]
 But apps don't back end back end accounts. Use the capstone backend to create, retrieve, update, and delete user accounts.
 So, I'm going to skip right here first. To step number eight,
 number eight. This is what I would do. Probably, I would probably do this first, but I don't want to put it at the top because these are sort of related. So, I'm
 just going to skip to number eight right now. Create a branch. Recoding a
 function that returns a DynamoDB client. So, you can, you know how to connect to a DynamoDB,
 and you know how to create a nice client out of it.
 Well, just make a function that returns that nice client.
[02:10:17]
 So create a branch for doing that.
 Step number one, create a branch for defining a custom data type for user accounts.
 So user accounts, those would be objects, right?
 And those objects should have properties.
 Some should be strings.
 Some, the phone should be a number. So create a custom data type for that.
 And just a branch. That's a simple thing to do. We just with a branch, but I want to see it happen.
[02:11:01]
 Step number two. Preferably, you should use the type keyword because with the type keyword
 you can see the data type but if you use a class or interface to create a custom data
 type you won't see the data type.
 You just see the name of it.
 With the type keyword you will see the structure of the data type.
 Step number two, create a branch for using GDD to test the function.
 So you might test the function called create account.
[02:11:40]
 Then you write at least five tests to check if the function properly creates an account
 in DynamoDB.
 And then you would code the function according to the test specifications and the custom
 data type.
 So you're not just going to create a nut custom data type,
 but you'll also use it.
 Like you're going to assert it somewhere.
[02:12:17]
 You could assert it.
 I would assert it here as a return type that the function
 return it. That's what I would do.
 Actually, no, it's not going to return it. The function is going to accept it.
 It's going to accept the data type because it's going to create it.
 All right, so next is create a branch for adding a path and route handler.
 Select the create route.
[02:12:52]
 Then let the route handler send a response with the results from the function above.
 So that would be create route.
 Then repeat or modify the steps above.
 Or retrieving updating and deleting user accounts. So you'll repeat this.
 Or the crud methods.
 C R U V.
 And here's step number eight again.
[02:13:27]
 Create a branch for coding a function that returns a DynamoDB client,
 because this client is used in all of these functions.
 So it's easier just to create a function that gets that client.
 And then you just, you know, instead of just copying that code everywhere just get the function that returns the client
 and it works the branches whenever you finish the branch and you push it to
 get up. I should probably add here push it to, yeah, I'm going to add it here to push it to
 AWS Lambda.
[02:14:12]
 Okay, so I'm going to do some mini evaluations.
 I'll open up the breakout rooms.
 So this will be open for 35 minutes. Okay, break our rooms are open.
 I'm going to check, so three days in this week.
 I mean, there's today and tomorrow for many evaluations.
 And for this week's many evaluations.
 And also for week three, if you want to submit corrections
[02:15:20]
 for week 3 evaluations.
 Let me check if anyone's next. I see that some people are not jaying in the line for the mini evaluation. You're going to end up prepping in the end and we're going to have a long evaluation.
 Like if you want to get these done because we're going to have many evaluations each week.
 And then if you keep skipping many evaluations and you hope that the student success team will give you a chance to do it, even though you never did it.
 Like you're going to do the mini evaluation much later than you were supposed to. Then your mini evaluations are going to
 tie up and each mini evaluation is like one hour long, almost like 30 minutes an hour long.
 So you just count that and are you willing to use up all that time?
[02:17:05]
 I know I don't want to, but, you know,
 I have no choice if the student's assessed team
 decides to let you do your mini evaluation much later.
 But I'm gonna tell them, I'm gonna tell them,
 hey, maybe you should reconsider because those are so long.
 We're gonna get long.
 Anyways, let's see here.
[02:17:43]
 I can do corrections for week three. Or do the mini evaluation for this week.
 If you're wondering why I might not be calling you is because you're not on the lineup
 or the waiting list.
 And if you don't do your mini evaluation, you don't get points.
 And if you don't get points, you don't pass this level.
 You don't graduate.
 Okay, so I see I can do mini evaluation for David for week three.
[02:18:35]
 All right, I'll see you in the evaluation David. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 >> Let me -- David will continue right after this conclusion here. So the breakout rooms are back in conclusion, we learned about the
 CRUD methods or the CRUD actions that you can do on a database, create, read, update, and delete data.
 That's in general, but then we learn specifically how to do those with DynamoDB,
 with the get method, the put method, update method, and delete method. And to reduce you to TDD read practice, that's basically writing the test first
 for a function called read account. And then you'll design it afterwards. I mean, you'll code it afterwards.
 And then we have a new assignment called
[02:51:09]
 capstone backend accounts
 because we're converting our site and our logins
 into accounts.
 So it's not just gonna be like email and password,
 but it's gonna also have the username.
 Like their actual name and their phone number
 and if you want to add address in there, that's fine too.
[02:51:34]
 So you can take your attendance now.
 If you didn't take your attendance earlier in class,
 mark your attendance.
 You have three minutes to do that.
 Other than that, class is dismissed. That's today's lesson on AWS and I'm going to continue the mini evaluation
 with David. Okay, so the breakout rooms are open againause ]

///// FILE: "Level 4/transcripts/Apr 30, 2025 21-4.txt"

Transcript from Apr 30, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 It's week eight, day three of our topic of this week, artificial intelligence or AI.
 Today's agenda in the first hour will take attendance to announce mince review.
 Hopefully talk about some AI topics there new AI topics there otherwise it's going to be
 moved to the second hour.
 But we'll also talk about express. And then in the third hour time for many evaluations corrections,
 working on the assignment. Now it's time to take attendance. If you haven't
[00:01:01]
 taken attendance yet, make sure to head on over to your code X account and
 mark yourself present if you're here right now.
 Now is time for announcements. Then you get that loaded for you guys. Okay. So the class schedule, last day of class, which is about three weeks away, a little bit more than
 three weeks away.
 Would you say like less than four weeks away?
 Final evaluations, they're going to go from the week of Monday, the 12th to the 17th. So, let me pull up a calendar here.
 Calendar 2025.
[00:02:34]
 May. Okay, so in May final evaluations from Monday 12 to the 17th, Monday 12 to the 17th.
 Monday 12 to the 17th.
 So, let's see, yeah, 12 to the 17th final evaluations.
 Actually, we might get a better picture of it here.
 So right now it's week eight. Artificial intelligence, week nine.
 Capstone finale, just, you know, this is about
 polishing our capstone, making it presentable, making it look nice.
[00:03:44]
 Week 10, that's final evaluations.
 So this is week 10 right here,
 12 to the 17th.
 Up here, this is capstone finale.
 Right here is final evaluations right here in this week presentations.
 So, right here, also right there, 19 to the 24.
 So, you're supposed to present your capstone projects to the cohorts, the other cohorts. So
[00:04:32]
 a cohort is, you know, a class like ours, we're in level four. There's other cohorts that doing level one, level two, level three, and there's another one doing level four.
 and there's another one doing level four.
 So you're supposed to present
 your capstone project to the other cohorts,
 you know, talk to them as if you're doing a business presentation or like a job interview
 where you're talking about your project
 and why it's why it's special, why the
[00:05:10]
 why it's useful, the technologies that you use like you use React, you use Express, you use
 Redux, TypeScript, HTML, CSS, SAS, all of these things.
 You can talk about everything that a job interview might ask you about, because this is your
 practice.
 But you'll get a chance to practice your presentations in front of each other in front of me so that by the time you present
 it in front of the other cohorts, you can do it smoothly and securely and hopefully if they ask any
 questions about your code, you can answer that too. So you want to hone your skills so that you can do your presentations because they're going to be looking up to you.
[00:06:10]
 Like what if you were in level one and then someone from level four came and said to you,
 "Hey, hey there, level one students.
 This is what you have to look forward to.
 Right now you're not able to make a website, but then when you get to level four,
 you can make a website like this.
 So, you know, they'll also appreciate it.
 I mean, you could talk,
[00:06:36]
 you could talk about your website
 and all the features point and click,
 all these pages.
 But they will also be interested in the code. Why? It's because
 they're coding too. And if you go to a job interview, they want to know about the code.
 Not just, you know, just the not just the front end, but they want to know the backend. They want to know where it's deployed on AWS Lambda, S3, Cloud
 Front, you're using DynamoDB, Google App Engine.
[00:07:19]
 It's also deployed in GitHub.
 So you're going to talk about all those things, but you'll have practice, you'll
 have time to practice. Okay. And some people will be watching, like some of the supervisors
 of codex, and maybe some recruiters will be watching. So you want to do your best.
 Because there's going to be TA teacher assistant positions available.
 There's going to be internships available.
 So you want to do your best.
[00:08:00]
 So don't let this be a time to slack off.
 It's the time to focus. I know three weeks sounds like a lot, but it's not it's not a lot if if you want to be like comfortable speaking in front of others.
 You need to practice and that takes some time. So three weeks is just right, I think. So don't waste any of that time.
 just so don't waste any of that time. Preparing for the presentations and making sure you get all your grades up to the point where you graduate.
 Because, you know, it's not a good idea to repeat this level because then you're just going to set yourself back.
 set yourself back versus jumping right into a TA opportunity or internship opportunity. You don't need to know your concepts by heart.
 You don't need to know them 100%. They just need to know that you pass the
[00:08:59]
 course and that you can talk about your project.
 And answer questions about it.
 And that's, that'll get you on the fast track to a career and building experience
 when it comes to website development. Besides, when you're teaching other people,
 as like if you're a TA,
 that's when you can really solidify your knowledge.
 Because people will ask questions
[00:09:37]
 that you probably haven't thought about the answer
 in a long time, but then it's gonna come back to you.
 When it comes back to you,
 that's when it starts to sit a little solidify in your mind and it's going to start coding. You're
 going to know it by heart. You're going to start just knowing this stuff because people
 are asking you questions about it. You may like in our previous levels, the TAs are in class watching the instructor.
 So, you know, the TAs are re-learning what they learned before.
[00:10:12]
 So, it doesn't make much sense to repeat this level.
 It makes better sense to pass this level right now.
 And, and graduate so you can move forward with front end development and back end development.
 Because that's where your knowledge really begins. Knowledge and experience really begins at that time.
 Okay, so the survey still in July cohort. Right here.
 So this was introduced on Monday.
 I think.
[00:11:01]
 So make sure you fill this in.
 Everyone should fill it in so they get a good idea.
 So the supervisors or managers of codecs have a good idea of what's going on.
 There's also a question about Google Cloud.
 Basically, you need to install Python to get it working.
 Many evaluations, so make sure to add a submission so you can be placed in the waiting
 list and get that on time point.
[00:11:40]
 Right now, a week seven, many evaluations closed, but it's still open for corrections until Saturday.
 Many evaluations for this week,
 it closes Tuesday of next week for what late credit.
 Assignments, so some of closed now. Redux. This one closes on Thursday before class. I recently
 fixed the, there was a typo here. And the Redux assignment. So it was mistakenly April 29. It's supposed to be May 1, so it's crossed out there.
 So if you still need to make corrections or, you know,
 make changes for this capstone Redux.
[00:12:43]
 And you maybe you turned it in yesterday.
 Don't worry.
 It's actually do may one.
 Let's see what else here.
 And if your points are not high enough,
 you need to have like 80% on all your assignments.
 So contact the student success team.
[00:13:19]
 And if any of the assignments are closed on you,
 make sure you contact them to reopen them
 and let them know the reason
 why you've fallen behind.
 I'm still in the process of submitting grades.
 Yeah, it's like 75 or 80% I forget.
 Somewhere around there. Might be 75. But maybe it's I'm getting a mix up because like the most you can get. For a late assignment, I mean, the assignment that's turning late is 80%. So maybe I'm getting it mixed up with that. So
[00:14:08]
 I'd rather, you know, graduate this class with 80% knowledge than with 75%,
 you know, knowledge. So if you have 75%, try to strive for a higher, try to strive for a higher score.
 Especially if you know you can quickly get a point that you were missing.
 Okay, so let's see here.
 Practice problems.
 They're here on the side again.
 Do you like cohort? Post your questions there.
[00:14:49]
 Hermit is available for mentor meetings.
 Use notebook LM to add notes.
 Your code and also transcript.
 So the transcripts are complete from week one day one.
 There's this transcript from week one day one.
 All the way to week seven day five.
 Transcripts are available.
[00:15:21]
 I haven't made the transcripts.
 I haven't generated the transcripts for this week yet.
 But yeah, you should be able to ask notebook LM, along with when you provide those transcripts,
 it should be able to answer all your questions related to the Capstone project or
 your questions related to the Capstone project or sandbox. Okay.
 And remember, going order when you're catching up on the recordings.
 And now we're going to review, but I'm going to, I might add something new during the review.
[00:16:06]
 So, you know, just pay attention to that.
 Just type in, just type, or take note on anything new that I say, or that you haven't
 taken notes on.
 And to have your microphone ready, when we do many evaluations or if you have any questions.
 Okay, so now time for review.
 So this one was introduced yesterday. this practice, read out sign up practice.
 This is how you can have a sign up button in your project or this is how you can create
[00:16:57]
 a sign up button.
 They will pop up a model where the user can sign up. They should sign up with at least their email in a password
 and then, you know, maybe later on, they could fill in the rest of their account information.
 I mean, that's how I like it. When I'm trying to make a account for a website, I just want to, you know, just get in there
 put in the minimal information just like my email and password and then I'm in and then later on
 the website gives me an option to include more information about myself such as my name, my phone number and those other things.
 of such as my name, my phone number, and those other things. So it makes for a good user experience to just, you know,
[00:17:50]
 ask for the minimum information to create a new account.
 So this is what this is about, how to do that,
 how to use Redux for that.
 There was a question about Redux.
 So I'm gonna clarify it here.
 In the sandbox,
 and you just load this up.
[00:18:23]
 Run and sandbox.
 But also in the notes.
 Okay, so.
 I have any more.
 Okay, so let me just look and notes here about Redux.
 Okay, so about Redux, remember this chart right here.
 The flux, the flux velocity,
[00:19:15]
 1, 2, 3, 4, 5, 6.
 Six phases all in one direction.
 The view or the component creates an action and gives it to the dispatcher. All right, so to make that clear, I'm going to load the home component.
 So this is the home component.
 Right, this is the component right there.
 It's supposed to create an action.
 So here, it's going to create an action right here.
[00:20:04]
 There's the action object. And then this action is
 going to get passive dispatcher right here. It gets passive dispatcher.
 Technically you can just go like this. Technically you can just go like this. Technically, you can just go like this, and it has the same effect.
 But then it's not clear that an action is being passed here.
 Because this thing returns a value, but if you put it in this kind of way, it's hard to know that it returns a value.
 So when you go like this, when you do it this way, it makes it very clear that this set object has a method and this method returns an action object. That action object gets
 passed in this batch. And the way to look at this is basically you're going to set the
[00:21:20]
 home did mount to true. So these are arranged in a way that it makes sense
 when you try to read it in English. But if you try to look at the code, this is a
 set object which contains some methods. So here's one of the methods. And these methods return in action.
 Another way to look at it is the index,
 or in the store file.
 Redux store.
 Another way to look at it is the set object is like a set of it's like a
[00:22:10]
 bunch of actions. That's another way to think about it. The set object is
 like a bunch of actions. That's basically what you're doing here. When you
 use dot notation and you access the
 property, you're basically saving that property in this variable. Think of
 this property as the return value which gets in this variable. So the set
 object is a bunch of actions. When you choose an action, I mean, when you choose one, it returns the proper action
 that contains the new value that you're trying to give it.
[00:22:58]
 Okay, so without confusing, without sounding to confusing, the best way to look at it.
 You wanna set, you wanna look at it in English,
 you wanna set home did melt to true.
 That one creates an action,
 which is then passed to the dispatcher.
 And then the dispatcher gives
 information that needs to the reducer,
[00:23:31]
 which then reduces the state,
 which then the state gets stored in the store.
 So I just wanted to clarify that.
 So it's better.
 It's better to leave these separated in two lines because, you know, you're going to come
 back to your project and you want to make sure that you understand what's going on and you
 have a direct association with this flux philosophy
[00:24:11]
 So that you can better understand and better remember what's going on
 Okay, so this one just makes it very clear that this is where you create the action and this is where you pass it to the dispatch.
 Next thing that we learned yesterday that we get errors bundling when we try to bundle transformers.js.
 Bundling transformers.js will result in errors.
 So we actually we fix those errors.
 Basically it's errors inside of the node modules, not inside of our code.
 Adding new loaders won't work because Transformers.js is different for each platform.
[00:25:15]
 So what I was trying to say here is that if you try to compile the code that's inside
 of node modules, Well, that code is
 Was installed there by Transformers digest and it works just for your computer
 Even if you're able to bundle it and you try to use it on someone else's computer
 It won't work because their computer is different. It's using a different processor a different graphics card
 Back in a work even if you can bundle it.
 So if you do bundle it,
[00:25:50]
 that assumes your code should be the same,
 no matter which platform it's on.
 If you have your code bundled,
 including Transformers.js,
 you're assuming that it should work on someone else's computer, but that's not the case.
 Transformers.js only works because it installed
 things specifically for your computer.
[00:26:17]
 It needs to, when it gets copied to App Engine,
 it needs to install things specifically for App Engine.
 The bundle will, your bundle on your computer will not work in App Engine.
 So, Transformers.js needs to be installed specifically for each platform, and that's because the post install script ensures compatibility with each platform.
 So remember, we did PMPM,
 approved builds that runs the post install script,
 which customizes Transformers.js for your computer.
[00:27:00]
 When we deployed to App Engine,
 App Engine is supposed to run that post-install script
 to customize Transformers.js for App Engine.
 And now we need-- and then we configure Webpack
 to not bundle transformers.js.
 We don't want to bundle it because we need to
 let it install what it needs to install.
[00:27:35]
 So, externals are modules that won't be included
 in the Webpack bundle.
 So here's externals right here.
 And there's the module that we don't want to include. This is the webpack engine.
 Also, external must be imported by the bundle. So remember, transformers.js, we import that, right? It's an external module for our app.
 Let me go here.
 And I'm going to load up the backend. So here, we're importing this is a Nova Transformer.
[00:28:47]
 Okay, so I'm our get answers.ts.
 Is it no which transformers is external to it?
 That's why we need to import it.
 Basically that's what this means.
 Externals must be imported by the bundle because this bundle here in this folder, this
 bundle right here, it's going to have an external module, which will be zenova transformers
 because zenova transformers will not get bundled with it.
[00:29:44]
 Right? It's not going to be included in this bundle.
 It's going to be external to it.
 Therefore, this bundle needs an important,
 so no, the transformers.
 Therefore, we need to tell Webpack how to import it.
 And we're going to tell Webpack, we're going to import it the module
 way. That's what Exertals Type is for Exertals Type. So it'm going to head on over to the back end here.
[00:30:27]
 Look at Webpack and see where we put those.
 Okay, I'm going to add something here. So this one tells Webpack that Zunova Transformers should not get bundled. This one tells webpack
 tells webpack how to import external packages or modules.
 modules. So in this case it's using the module syntax. Use the syntax to import to import external packages.
 So this is the module syntax. Okay.
 Let me see what else.
 Okay, so we can take your webpack for that.
[00:31:53]
 And when we did that, we saw that it worked.
 We were able to bundle the code with one external and we're able to connect to the AI.
 So I'm going to start the server here.
 And this one says NPM run start two. That one will apply any changes.
 I'm going to teach you guys how to configure this so that you can just run it with one terminal.
 Just that yet, I mean, I don't want to add too many new things.
 Right now we're using two terminals to run the server for development, but
[00:32:56]
 there's a way to do things where we just can do it with one terminal.
 can do it with one terminal.
 And here it is, it's
 contacting the back end server and I can contact the
 Aai route.
 And I'm going to ask it what's
 the question is going to be what's my name and then the context is going to be my name is Rolozar.
[00:33:33]
 And so the answer is Rolozar.
 If I change Rolozar here to John, it's going to say John because the question is what's my name and the contact is my name is John.
 I can ask it here what is John.
 What is John? And then I'm going to put in the context.
 My name.
 Let's see, let's see how it answers it.
 I still answered John. What is John?
[00:34:28]
 My name is John. Okay, so it answered John. So it's it's not the smartest. It should have said
 John is your name.
 Okay, so We will get the AI server
 to run after we did this.
 server to run after we did this. Now we're going to start new topics on artificial intelligence.
 Install it external.
 So because external are not bundled, they must be installed separately.
[00:35:07]
 So the app works.
 Okay, so, so we're going to demonstrate how, how or why this works.
 So just copy this down.
 I'm going to demonstrate what happens if you don't install. Okay, so here's a new section here. Make sure the port environment variable is in the disk folder.
 Go to the disk folder and run the bundle app.
 Delete the modules folder and try running the bundle app from the disk folder. And then use npm to install.
 I'll just know the transholders. Okay.
[00:36:34]
 So we're going to run these steps. So make sure the port environment variable is in
 the disk folder because,
 and the disk folder because remember app engine
 as its own environment variables. Next, the make sure the port environment is in the disk folder.
 Actually you don't want to, let's scratch that because you don't want to specify the port.
 Make sure basically, you don't want to specify the port. Make sure basically, yeah, you don't want to specify the port. We're going
 to just correct that here. You don't want to specify the port because App Engine
[00:37:35]
 will specify the port. If you specify the port in the disk folder, you're app won't
 work in App Engine. I want to do that.
 So inside of that, I just got set out.
 I want to do that. Go to the disk folder and run the bundle of app.
 I'm going to bring that from the back end here. So to go to the disk folder, it's all done from the terminal.
 I mean, I know you can see the disk folder from here, but you can't run the app from
 here.
[00:38:22]
 You need to do it from the terminal. So you need to go to the terminal,
 go to the disk folder from there.
 And then run the app from here.
 So it's easy to command to run a JavaScript file
 in the terminal because that's a JavaScript file, right?
 This bundle.
 And then this folder, main.js.
[00:38:48]
 What is the command? It is known. That's the command to run a Java's group file. So we're just going to try main.js. Actually, um,
 oh yeah, it's not going to work. You should, if you try to run it, if you try to run it without
 a port, it says here in local host undefined. So yeah, you should put a port.
 here in local host undefined. So yeah, you should put a port. But this was just for temporary temporary purposes. Fourth would be $8,000. I think I'll put that thing back here.
 I think I'll put that thing back here. Make sure the fourth environment variable.
 I'll change it, so it's temporary.
 Temporality.
[00:40:01]
 Temporarily. and then we'll re-reliate and then we'll re-reliate and then we'll re-reliate.
 And then we'll re-reliate.
 And then we'll re-reliate.
 And then we'll just, after running this demonstration, you should delete the form.
 Or you can, or you can keep it and put a condition in the code.
 So I'm going to rerun this.
 Oops.
[00:40:52]
 Didn't cause the port.
 So we're going to give it a few seconds.
 Chill.
 Oh, wait, now it's open here.
 Okay, try that again.
 So the command to run a JavaScript file is the node command, and then you can run the
 JavaScript file.
[00:41:19]
 That's like a one-shot run. So I'm running the JavaScript file from 48,000 now.
 So let's see if it works.
 So it works.
 It works.
 But what does that mean?
 Why do I need to install the node modules folder if it works?
 And it's not even inside this folder.
[00:41:56]
 It works because it's falling back and accessing it
 from this node modules folder.
 Remember, when you deploy to App Engine, it only deploys what's inside of the
 disk folder. So App Engine won't have a node modules folder outside of the
 disk folder. So to simulate that, I'm going to just delete
 the node modules folder. I'm going to do it from file explorer.
 So I'm deleting node modules now.
[00:42:42]
 So I'm deleting node modules now.
 Taking a second here.
 Taking a few seconds.
 Still going. [no audio]
 [no audio]
 [no audio]
 [no audio] Now that the module is holding it's gone.
[00:43:30]
 So we're simulating how it is sort of simulating how it's going to be in App Engine.
 Basically, App Engine will only have these files in it. Now if you try to run this command again,
 note mean.js, the only thing I did was say the modules,
 that's because App Engine won't have external node modules like we do here. App Engine
 would just have whatever is in this folder. So I'm going to disk folder. Now we go to the disk folder. So you
 disk. So this is basically all that App Engine will see and it's going to try to
 write it. Name.js and it doesn't work. It doesn't work because it doesn't work.
[00:44:26]
 It doesn't work because it doesn't have
 Zenova transformers.
 So if it doesn't have it, then you should do this.
 Use npm to install it.
 Don't use npm to install it. Don't use Pnpm because
 Pnpm it gets it from it gets the packages from a different folder in your computer.
 And it's gonna if you do it that way it's gonna confuse App Engine.
[00:45:02]
 it's going to confuse App Engine.
 So again, this one says use npm, not PnPM, install the transformers in the disk folder.
 So this is going to simulate what App Engine will see,
 because App Engine is going to simulate what App Engine will see. Because App Engine is going to install.
 It's going to install Zannova transformers.
 So all I'm doing is installing ZIN over transformers with NPM.
 With NPM, you don't need to run anything like
[00:45:54]
 approved builds because it automatically runs
 those post install scripts.
 So it's less secure.
 I mean, by default, it runs those post install scripts
 where as with PMPM,
 it makes sure that are you sure you want to run these post
 and saw scripts?
[00:46:19]
 Because sometimes you'll get some malicious packages
 and following some things.
 So, but Zenova transformers is not a malicious package,
 so it's okay to install it,
 to do the posting software.
 Okay, so all I did here was install Zenova transformers.
 Now I'm gonna run the same command
[00:46:47]
 Note
 Mean js. That's where my server is
 If it works fine, I mean if it works
 Then I should be able contact my server. So it looks like it's working
 I'll just close this.
 Real opinion right here.
 And it's working fine.
[00:47:13]
 And this is running from the bundle now.
 Running from the bundle.
 It's running from this bundle right here, which imports this is another transformer
 from here. And we can try that AI around again. So you see that it's taking a while.
 So you see that it's taking a while. The reason why it's taking a while is because it's downloading.
 It downloaded the AI module.
 So you see, look at this package.
[00:48:04]
 This one wasn't here before.
 See, now it downloaded it because we told, we programmed it to download it here.
 Usually, that wasn't into the module, but probably grabbed it to download it right here.
 We already have a copy of this folder though.
 We have a copy of this folder though. We have a copy of this folder right here.
 We already have that copy from our test.
 This copy is for...
[00:48:36]
 App Engine. You can see it from next slide.
 Okay, we can try this, click it a little bit, quick and interesting.
 Alright, so we're able to get running locally on our machine from the disk folder by installing
 one of the trans
 the command.
 Now we are going to deploy the AI to add the engine.
 So take these notes.
[00:49:27]
 You want to make sure a copy of AI models, the AI models folder is in the Disholder.
 It's got download in there when we try to use our browser, but it doesn't have to get downloaded. All you can
 what you could do is just copy and paste it which is the password process.
 Especially if you're working with big models and you should probably copy
 and paste it instead done with it.
 Make sure to copy of the AI models over.
 Using the disk folder.
[00:50:24]
 And then before the disk folder, it's's app engine and then get a response.
 Okay so one thing you should notice actually I'm going to do is I'm going to do is, I'm going to add a line here.
 We will have the center where we port.
 We will just port. I have a test of that, but well I could try it right now with it takes time to you.
 So I'm not going to try it right now because it takes time to deploy it after.
 I don't want to use it after.
 I'm just going to remove the temporary port from the disk folder.
[00:51:36]
 And I also, you should notice that this package, JSON,
 remember, we went into the disk placeholder and installed these little modules.
 Therefore, you should see that dependency here in
 package JSON.
 You've got to put here when we install it.
 Notice that App Engine, when you deploy this, when you deploy this folder, App Engine will
 look at the package that JSON and all the seed folders, dependencies're going to install it.
[00:52:31]
 So that it has a copy of the milling block which is required. So if you look at G-CAD ignore it, it ignores the milling modules,
 which means it will not upload this folder of the milling modules.
 But it will do instead is installed from packets JSON.
 OK, so we should have a script and the other package JSON
 original out to deploy gcloud app deploy.
 OK, so that's the command, but I'm going to use the script right there.
 It's not the server now.
[00:53:14]
 You need to go back to the main folder, or the root folder.
 Then I can run this command over there.
 It's been asked me are these right settings. If you didn't change anything, then they should be the right settings. If you didn't change anything then they should be the right setting. If you did
 change something make sure you might be going back and forth between Sandbox and Capstone.
 So make sure you don't accidentally copy things to the Capstone project that they're long there.
 So the capsule in project that went along there, right now, these are the same boxes on the fourth project.
 [BLANK_AUDIO]
[00:54:16]
 And uploading the eight files to Google Cloud.
 And take a few minutes.
 Let's see what else is in the next here.
 Make sure a copy of AI models folder is in this folder.
 Go to there.
 Deploy the disk folder to App Engine.
 Get a response from the point back in the icenter.
[00:54:46]
 Okay, so we'll get a response,
 we'll get this a chance to deploy.
 And the meantime, we're gonna take a break.
 So, I'll after the break. [BLANK_AUDIO]
 Okay, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 >> Still updating the slides.
 Please hold for a minute here. [ Pause ]
[01:06:21]
 Okay. So we're back from the break and we're going to continue with artificial intelligence,
 specifically going to just finish up what we talked about in the last slide. deploy the disk folder and then get a response from the deployed back end AI server.
 Okay, so it looks like the deployed successfully here and it shows the server right here
 for the URL for it.
 I could put it in here now. This is the URL. It's the
 Poord live. There it says Google Cloud. And I'm going to try to that AI route at AI path.
 And then I'm going to provide a question.
[01:07:29]
 What's my name and then the context.
 My name is...
 All right, I'll make it a little bit longer.
 I'm an instructor at Codex Academy.
 My name is roll is our.
 Okay, let's see if it can get the answer.
 What's my name from that context?
[01:08:11]
 And it should be fast.
 It should get the, it should not have to download the AI model
 because I already have the AI model here in the disk folder.
 So it should have deployed everything in here,
 except the node modules folder.
 It should already have the AI model.
 Therefore, we should get a quick reply
[01:08:38]
 because it doesn't have to read down below the AI model.
 Well, it's still taking time. Well, that's faster than downloading it. to read down below the AI model.
 Well, it's still taking time. Well, that's faster than downloading it.
 So it answered the question properly.
 So we're getting a response from the live server now. Okay, so have you noticed the query parameters special characters?
 The browser may insert special characters into query parameters. So we've been doing this already.
 Sending query parameters to the back end server and it and
[01:09:33]
 notice that the spaces are automatically replaced with
 percent 20 or a plus sign.
 And we just paste this in the notes first. So I'm going to put here, just going to highlight those.
 Again, I'm going to show you here. You can see it already, but I'm going to take this out.
 So the question is, what's my name and the context is my name is I just put John here
 Or Santa your output Santa there's no spaces right now. I mean there's there's spaces in here
 We don't see any plus sides. We don't see percent 20 in there, but when I press enter
[01:11:03]
 It's stuck these percent 20s in there.
 You see that?
 It got the correct answer to.
 So there were these special characters in the query parameters.
 AI interference.
 So the special characters that you saw there in the query parameters,
 they can interfere with the AI. So far, the AI has been doing good.
[01:11:47]
 It's been able to read the question and the context,
 even though there's percent 20 inside there.
 But the AI may not be able to answer some questions,
 or it might respond with percent 20 or plus in some of its answers
 So we don't want that
 The answer the way to fix that is to use the HTTP method post
 to send data as is
[01:12:27]
 Without the replacement characters.
 So let's just copy this into the notes.
 And I'm going to just highlight these special characters again. So we have to use a different way to send data.
 And that is the post method.
 So it's highlighted here post.
 So that we can send the data as is without this person 20, without this plus.
 And it inserts all kinds of other characters.
[01:13:15]
 So we don't want those interfere.
 And we might be able to try it,
 see if it does get interference.
 So, the question, so I've tried this one out here for, um,
 Wiki about California.
 Yeah
 Actually, no, let's go for
[01:13:50]
 Amazon Amazon jungle
 Or Amazon rainforest, okay
 Let's see here actually this one might
 Let's see here. Actually, this one might...
 I'm gonna try the California one, because I think that one broke.
 I mean, it's possible.
 Let's see.
[01:14:16]
 Yeah, because it has some special characters here.
 I'm gonna use that as the context. So what is California?
 And then the context.
 Just going to copy this here.
 I wonder if this will all fit.
 I wonder if this will all fit. I mean, not.
 Let's see what happens.
[01:14:54]
 Yeah, all the way up to 22 there.
 Let's see.
 Question was, what is California?
 It says 20. Okay, so it got messed up with the
 percent and things like that. It thinks California is 20. When I ask you what's California, let me try it with just this paragraph right here
 Take long time select this
 Question is what is California and the context is
[01:15:46]
 Thing I just copied that one paragraph.
 Okay, it was able to get that. It is the most populous US to populous US state. The third largest by area and the most
 populated, populated subnational entity in North America.
 So it was able to get it with a smaller context, with a bigger context, it just got
 the interference.
 And it just said California, what is California, it said it was 20.
 So that was AI interference.
[01:16:20]
 We don't want to put those special characters in there.
 So we need to use the post method.
 So what is that?
 So this is where we go into Express.
 So we're going to start our new notes in the Express MD, but we'll put a reference in AI in the AI section.
 So, we're going to be in this first. you can put a link to the notes.
 So if you look like this. See, Express Md for details.
[01:17:27]
 If I click on it, it goes to Express.
 Again, that's a square bracket.
 Then, parenthesis, then you put the relative path.
 So you're expressing the details. I'm going to get ready for this next slide.
 HCT Post Method.
 I know Chris was already using this method.
 I've been saving it for this no win in time.
[01:18:23]
 Hopefully this lesson gives you more clarity on the post method.
 So HCT method host. So it's a post is an HCT method. So basically it's a way to communicate with servers like the get method.
 So, we've been using the get method.
 There's also something called the post method.
 And they work differently.
 Let's copy this, paste it into the notes.
 And I'm going to highlight post here in, highlight yet.
[01:19:29]
 And so add the AI back in,
 index CS file.
 [ Pause ] It's closed.
 [ Pause ]
 It's as effective here.
 It's essentially closed to demo.
 Add the route and the closed demo the same A response.
[01:20:07]
 Okay, okay.
 All right.
 Let's try it.
 HCT method poses the HCT method.
 So we're going to add to the AI back in index.ts file.
 So let's find that first.
 So I need to reinstall my
[01:20:52]
 no modules also.
 PNPM install because I deleted my node modules from this data.
 We install them. It should be pretty fast because it doesn't.
 You have to download them. It's just copying it from the central place where I store my node modules.
 You have to do a proof so is it over transformers
 Does the post install which customizes trans
 Transform is not JS when I computer
[01:21:36]
 Okay, I guess it did
 So this what the S little balanced for a beat-ass I don't need that one.
 It already installed, which is the transformers.
 Hopefully this is where it installs.
 It says it here in PNPM workspace. It shows, it shows proto-box and sharp.
 So these were required by Transformers.js and this is basically a pre-approval for these installed, these post-install strips.
 So the FPM already knows that it's supposed to be automatically installed these because I've created,
[01:22:35]
 I've previously ran PNP on the proof of notes and I've improved the package.
 So I've re-installed it.
 And now I'm going to go to the index.js file.
 And I see app.post.
 So there's a, an ad here, app post.
 So that's a method, right?
 Literally, that's a, that's a method, a function that's connected to an object.
[01:23:31]
 And I'm going to create a route here called post demo.
 And I'm going to create a matching route handler. Add the route handler post demo to send a response. So let's go. Now let's add the I'm just gonna copy the API route and just change it.
 Just gonna rename to post demo.
 Okay, so again, I copied the API route right here.
 It's basically just providing some data like what the query is, what the query parameters are, what the origin is, and then
 sending that data. And I put, I'm spacing it here and then I just renamed it. So now
 I have a graph handler. And now I need to import it here. I can see that it's gone. It's telling me something wrong so it'll get fixed.
[01:25:12]
 Try to use the browser URL bar to send a request to post
 to both general tab.
 Okay, so I need to start to
 server here on the Tm start. and get to start with Save your gear and then start
 and put in another one
 or start to
 This one's going to cause a team to build Okay, so let's load it here.
[01:25:52]
 And now I'm going to try to visit the post-demo route.
 Okay, you should get an error.
 Why is that?
 I'll show you something really quick.
 If I just change it to get, change this post to get.
 And I try it again.
 We get a response.
[01:26:29]
 We've got some data.
 Same periods.
 The period is here.
 We're basically saying that there's no period for that one.
 But if I change it to Post, I'm going to change it back to post because it's a method.
 It's an HCT method with like a channel.
 It's going to channel one, channel two, communicating on channel one, communicating on
[01:26:59]
 channel two.
 So if you have a walkie talkie and you have both of them communicating on channel 1, they're gonna connect
 But if one is on
 Channel 1 and the other one is on Channel 2, we're not gonna connect
 So this would think the post like Channel 2 and think of this browser here
 It's communicating on Channel 1
 Communicating on the get method
[01:27:36]
 this post method this browser up here is a communicate on the channel 2 or the post method so if I try it again on the post demo you get in there
 there. Okay, so think of it like a different channel.
 Okay, so there's a there.
 And a review on Postman.
 So I hope you still have Postman installed.
 Postman, you remember it's an app that can be used to send requests to a server, right?
 And query parameters can be sent through the URL manually. Group parameters can be entered in the parameter section.
[01:28:27]
 The server response is displayed at the bottom.
 So let's try it.
 Let's just go ahead and see this really quick copy this here.
 And paste it into the express notes.
 Express notes.
 Because we need postman
 Because it can do something that brothers can't do at least not easily.
[01:28:59]
 Rounders can't do it easily. And that is postman can communicate on the post method or post channel.
 Think of it like that.
 It has access to that post channel.
 It's actually called the post-HCT net.
 Okay, so paste it in there and then run the post-map. So it should look like this.
 All right, there's get.
 This means the method or the channel that it's transmitting on.
[01:30:04]
 To get method. This means the method or the channel that it's transmitting on.
 The get method. So I am going to just communicate with the server on the loop path.
 I press set. It's your brick.
 There's the one that says Google Cloud.
 That's the one that says Google Cloud. That's the one that says Google Cloud there.
 If I try to send I can, I can just type them in manually.
 I can type it in here, like, write a question, what is my name.
[01:31:14]
 Or, or I can just select this.
 Which means I call me. which things are forming.
 When I said it tells me that the query parameters contains question,
 what it's up on, and try to
 query parameters contains question, and it contains a context,
 let's see here, question in the context.
 And there's their values right there.
[01:31:57]
 Okay, so that's a little bit of the postman.
 Postman, Post-Request. So the ACT method can be specified for sending your request.
 So we saw that we used to get method or think of it like the
 get channel that's communicating on that channel. Well,
 there's also a post method or think of it like the post
 channel communicating on channel to the lock you talk to
 you. Right now our server is listening in this post demo route or path it's
[01:32:49]
 listening on the post like think of it like channel two the post method
 right it's not listening on the on channel one we get method
 We get method.
 So I copy this and paste it into the notes here. So we will use the post method to use the post method select post.
 So left of the URL bar send the press to the post demo path. that there should be a successful response.
 Okay, so here you can select the channel
 or the method. I'm going to communicate
[01:33:55]
 on or with, I'm going to communicate with the post method.
 Thinking with like channel two.
 And I'm going to try it with the post demo ground. [inaudible]
 All right.
 So I selected.
 I can't even see the dots in the mouth.
 Okay.
[01:34:43]
 On the post demo route. route communicating with the post method.
 We should see a response.
 There it is.
 There's no query parameters, right?
 There's no query parameters here.
 If I try to use get, right now our server is not listening with the get method, right?
 So we get an error here.
[01:35:12]
 But it is listening with the post method right there on the post demo path.
 When that happens, it gets a request there and it gives us back some data about the query.
 Okay, so there was a successful response.
 Post data. So how do we send data with the post with the post method?
 This is how.
 Basically, using the post method to send data is more secure because the data is hidden.
 Which we'll notice is that, well, in the Forabs tab, the data is exposed.
[01:36:25]
 So let's take a look at that.
 And it's a space that's interesting.
 It looks a little bit put some highlights here.
 [BLANK_AUDIO]
 And it grabs town.
 [BLANK_AUDIO]
 And it's met it.
[01:36:55]
 [BLANK_AUDIO]
 And it's a body tab.
 [BLANK_AUDIO]
 And it's one of this.
 [BLANK_AUDIO] here is one of this tab.
 So this is how it looks.
 So there's a statement here.
[01:37:22]
 Using the post method to send data is more secure because the data is hidden.
 So what does that mean?
 Let's look at this first.
 Observe that data in the params tab is exposed from the URL.
 So here's the params tab. Okay, so I can put a key here.
 Okay, I'll just put a question here.
 You see it already popping up. And then the context.
[01:38:07]
 That's the program's path.
 You see it's exposed there in this data.
 There's a question and there's a context of all exposed in the URL.
 Same thing when we try to use the browser.
 We send things to the browser.
 It's exposed here in the URL.
 You could even go forward and back and someone can go into,
[01:38:43]
 like if you're sharing your computer with someone,
 you can press, they can press back and see or into our L history.
 If your password and email are in here, they can see that too.
 I could send the query forever.
 Like, I put email. If my email is here, the I'll copy this.
 Paste it here.
 And I'm going to send that through the API
[01:39:35]
 around just to show you.
 So the server response,
 but my data is exposed here. And the URL, I can go back and forward or in
 back. And I can, you know, if I went on to someone's computer, I can view the history,
 the URL, URL history. And then I might see this, oh, there's a pass, there's an email in
 the past. And that's not secure.
 So with the post method, data should be using the post method, data is more secure because the data is hidden. So this is the post method.
[01:40:17]
 With the post method, data should be sent through the body tab.
 through the body tab.
 So we're not going to send this data here
 through the params tab.
 We're going to send it through the body tab have something to change this.
 Is there any questions in context?
 Body tab and then set data through xww or URL included.
[01:41:04]
 That's this one here. This is where you send data
 right there. Not these other ones. If you look at it down, then look at the different.
 Well, these look similar. But if you pick this one, it's not going to work with one and you need to pick
 this one. The one that's long and weird. See, I pick a question and a context and it
 doesn't show up here in the URL. So observe that the data is hidden and not accessible
 So I'm observing that the data is hidden and not accessible through the request query object. Okay, so I'm going to, I'm going to send this, this is the post method and you know, send a request to post demo.
 It's listening to the post method so I should hit a response.
[01:42:08]
 And I have these checked off right here.
 I should be sending this data.
 I'm clicking on set.
 Set here that the query parameters are empty.
 And that's right. I don't have any parameters here. I don't have
 any data up here.
 So if it's sending data, where is it?
[01:42:47]
 Request Y. So, express must be configured to receive data through the host method.
 And that data is received by the neck ends of written with the press of
 the body.
 So let's check that out.
 My copy is notes. [inaudible]
 Here.
 [inaudible] So request not body, that's code.
[01:43:47]
 Okay, so here I'm going to highlight that too.
 Okay, so this one is code.
 We're going to use a debugger to observe the quest.body and the post-level path.
 Go ahead, learn it.
 And then we're going to add to the index.. file. He's going right here.
 And we're going to have a turn.
 Because the body again.
[01:44:57]
 Okay, let's go through the step by step. We're going to use the debugger to observe that the request.body is not in the post demo handler.
 So here's my post demo handler. I'm just going to write quick and go to the definition.
 There I see it. What do I need to do? It's just stop a debugger on here? I can put a dot here or I can type in the word debugger,
 whichever works for you. This dot works for me.
 But if it doesn't work for you, then type the word debugger in here.
 I need to restart my server and JavaScript debug mode. I left it up here
 to debug and start the server and JavaScript to be the terminal
[01:45:56]
 and can start
 and start Okay, the server is listening on the post demo route. We need to send a request with the post method and express or the handler is listening with the post method.
 So there's a match.
 This walkie talkie here, listening on the post channel.
 And this walkie talkie here, transmitting on the post channel.
 Try to send that.
 And then I see here it's highlighted and stopped here.
[01:46:47]
 So now I can reserve the I can observe the request object.
 So let's take a look at it here.
 I can see the request object is right here.
 If I look at the properties, I don't see anything
 called body. It would be somewhere around here, like a body of body. So that's what
 we did. We used the new public to observe that the the first nonbody is not in the post-demo handler.
 Next, we're going to add to the index.ts file after that views URL and code.
[01:47:38]
 So we're going to go back to the index 8C profile. And we're going to put it in this view section.
 This is for the space you can see there. So app.use. This one is, you can even start typing it and it should... You are out encoding.
 It should pop up and just...
 You are out encoding from Express there it is.
 And it's a function.
 It's other line.
 It's yellow.
[01:48:22]
 So basically just activate that function in there.
 When it's inside here, it returns something.
 I explain to you it's almost similar to this kind of notation where you have const, so it's a kind of result.
 And you're going to pass that result as you can.
 So if we turn something, and it looks like it would
 turn the callback.
 Another way to write that is just put this directly in here.
[01:49:00]
 That's what you'll see in the documentation.
 So it's going to copy that.
 So what is this?
 With this too.
 I decided to even put any comment for this. So of course allows communication
 this one allows data to be received
 data to be received from X, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, the VW, So we have URL in coming here. Basically just enables that. And then it may hold it. So we're going to use the debugger to observe that the
[01:50:35]
 request.body is now in the post-demo handler. So we just added this code here.
 It's going to use this ability to get data from this form URL and code.
 So I didn't change anything here.
 I didn't change anything. only changed something index Ts file now I'll set it activates the debugger
 I have access to the request information
 here is the request object I can inspect it
 with my c I see there is a, there's now a body property, which is an object.
[01:51:28]
 This body contains a context and a question.
 So what does that tell us? It tells us that this gave access to this data right here.
 I can just press clean out.
 Almost down here.
 Just pop it.
 So we'll use the B-B
 to observe that request.body is now in the post-dental handler.
[01:52:07]
 They can do the successfully sent, but we still don't see anything here in the query.
 Why is that? Because the query object only contains information from the query parameters
 that we go into in the URL. But there are the very parameters that we go here in the URL.
 There are the code parameters.
 You're pressed by the data.
 So we're gonna use that data now.
 And then this will be the third dollar.
[01:53:11]
 Okay. So we're going to set a response and includes data from the first stop line. Let's go ahead and click this on our notes.
 Just to finish finish this part [BLANK_AUDIO]
 And you press "ladie" data.
 So it's a weird request,
 "ladie" data. If you look at it, and in English it doesn't make sense.
 But if you think of it like code, it's a request object with a driving
 body property and the data inside there.
[01:54:19]
 We're going to use the debugger to observe the properties of your post-doc body.
 And respond to information from the request.body
 and we're going to use Postman's and either the spots. So let's try that again.
 And this again.
 Okay, it's stopped here.
 I request this came in.
 We can view that request.
[01:55:03]
 Here's the request and this came in
 Or the request object contains all the information about the request.
 That request contains a body property.
 This body property is an object.
 We tune properties.
 Context is a screen.
 Question is a screen.
[01:55:23]
 So we want to respond with information
 from request not body. What I'm going to do, I'm just going to put body here and
 request not body. That way I can see what exactly is inside the body or the body property.
 Why did they call it body?
 Not quite sure.
 But that's what they call it and that's what I'm going to go with.
 And so all I did was just added something to this data object.
[01:56:05]
 This data object will let me see the query parameters.
 And it will let me see the body parameters.
 So let's give this a try.
 So let's give this a try. Send the same data.
 It stops on the debugger.
 I'm just going to press play to let it send that data.
 I see it here now.
[01:56:42]
 Let's make this a little bit bigger. So there it is. The data that was received. So the period object is empty, because there's
 no period parameters here. So we see the body object as question in context which come from this body tab which come from xww form
 URL encoding and here they are question and context and check out if I
 uncheck this context we should expect not to see context in here. I'm going to go ahead and send this and I'll disable this
 debugger and just let it play out. Okay, now I don't see the context. So we know for sure
 that the data is going to be body property of the request object. Okay, in that, you can take a break.
 Now we got a better understanding of the post method, how it transmits through
[01:57:55]
 the separate channel and receive data through a separate property in the request contact.
 Let's talk a great time now.
 Yeah, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break. And now we have time to work on the assignment which is due tomorrow which is not too bad
 cast zone app engine just basically gets your capstone to connect to app engine
 but you can see where this is going because app engine is going to contain it contains our AI
 and so eventually you're going to start using that AI
 with your front end.
[02:09:09]
 But one step at a time, just get your capsule
 working with App Engine.
 And then make branches for whenever you're
 going to make a change, do it in a branch
 so that your main can be in production
 ready mode.
 Because if you make changes to your main, there will be times when it won't run because
[02:09:37]
 you're coding it.
 But if you make a branch, your branch off main and make changes there.
 At least your main, you can, you know, push that to GitHub and it's working.
 Basically what you want in your main branch is something that works.
 And it, and whenever you're going to make a change, go into a branch, make your changes in that branch. Whenever that branch is ready and working,
 push that to main.
 That way, you can push main to GitHub.
[02:10:13]
 That way, main always has something that's working.
 There's never, it's never at a point where it's not working,
 because you're always doing your new coding in a branch.
 Sometimes that branch will work, sometimes it won't,
 but the main should always be working.
 No bugs, no errors.
 So, yes, capstone, App Engine.
[02:10:41]
 It involves front end and back end because they need to communicate.
 I'll start the breakout rooms
 and it looks like we can have them open for 30 minutes.
 I'll make it 32.
 As usual, collaboration room and then room for silence, then a room for mini evaluations. We have any volunteers. list and I'll see you next. [BLANK_AUDIO] Okay, that's you Alexandra.
 I'll see you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so it looks like the breakout rooms open to a little bit early. Let me just open them back up for five more minutes
 Okay, let's go back in there. Alex andra [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Let's just conclude the class and we'll continue with the mini evaluation. So we're back from the breakout rooms.
[02:49:11]
 In conclusion, we deployed the AI backend server to App Engine.
 Right?
 We had basically I loaded the live URL and connected there. We learned
 about the HCT method called Post. Oh, we didn't do this one, Redux account practice. Sorry
 about that one. One minute to mark your attendance. Go head on over to a code X account.
 And then classes dismissed.
 That's the days lesson on AI.
[02:49:54]
 But I'm going to continue.
 The mini evaluation.
 With Alexandra.
 For 30 minutes.
 Going to open the breakout rooms for 30 minutes.
 Going to open the breakout rooms for 30 minutes.
 30 minutes remaining out of the 60 minutes time limit.
[02:50:19]
 Okay, breakout rooms are open. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] And then,

///// FILE: "Level 4/transcripts/Apr 5, 2025 11-40.txt"

Transcript from Apr 5, 2025

[00:00:00]
 Welcome to Codex Academy, level four.
 Good morning class.
 It is week four, day five in our Codex Academy course.
 And we're continuing this week's theme of AWS. the U.S. Today's agenda for the first hour. Take attendance, do announcements, review
 what we learned on Thursday, second hour, new AWS topics, and third hour, many evaluations and time to work on assignment or anything else that
 you need help with.
 Okay, so we're going to take attendance.
[00:00:57]
 Mark, if you're here right now, Mark yourself as present, add on over to your Codex Academy account,
 and Mark your attendance accordingly.
 Now time for announcements.
 So I'm just gonna get it set up for you here. [ Writing on Board ] Okay, so here are the announcements.
 So we're on regular schedule this week.
 Many evaluations so
 so many evaluations that see for this week
[00:02:21]
 was due Tuesday before class.
 Actually, I should put here the closing. It closes Tuesday next week.
 This week three.
 Yeah, that one's already closed.
 So I should update those.
 So I should update those.
 Okay, so we'll have time to do many evaluations for week four or
[00:02:57]
 corrections for week three
 This week, so basically today is the last day for corrections for week 3.
 But we can still do evaluations for week 4 this week and next week, but next week will have week five evaluations.
 So don't let it pile up.
 Hey, assignments.
 They're so in the process of being graded.
 And you'll receive an extension to submit corrections if your assignment is graded too close or beyond its closed
[00:03:45]
 date. The capstone proxy assignment that has have a little bit of extra time to submit this.
 Do April 5 after class.
 And you just look at the time.
 So, basically, when time usually starts, I mean mean when class usually starts in the evening.
 So it's all of these requirements here. Just spelled out a little bit more.
 But there is something I added,
 which shouldn't take too long
[00:04:39]
 and which you should be able to complete
 before submitting this assignment.
 Well, you should still submit this assignment on time,
 because you'll have time to do this part, which is something I added.
 Because I notice that people are struggling with TypeScript,
 especially with custom types.
 So properly create and use a branch for defining a custom data type for the API response.
[00:05:16]
 So this is not necessarily for the API response that you're going to be receiving.
 This is for the API response that you will
 be returning. So here, in this branch, you're creating a function. Actually, you're not
 going to create a judge. You're just doing TDD to test an API function. And that function should return a response from an API.
 So whatever you return, whether you,
 so you might return the response
 unmodified from the API.
[00:05:59]
 So like, for example, you receive a response from the API.
 You might just return that back out.
 Or you might do what I did and modify that response to
 whatever, just the stuff that you need,
 just remove the bloat and just return the stuff that you need.
 So it's okay to return a modified response.
 So whether you use a modified response. So whether you use a modified response or you just receive the response from the API and then you send it back out or you return it as is, I want you
[00:06:39]
 to create a custom data type for that response. So define the custom data type for the return
 value of the API function below. So that's the return value. Whatever you
 return from this function, make a data type for that, assert the data type. And so you're going to, like, basically you're going to create a object in this function.
 You're going to populate that object and assert the data type.
 Also assert the function return type. So, in a function signature, you can assert the return type there.
 So, I just added this so you have until later today to add this,
 but actually you can submit corrections until I grade the assignment.
[00:07:44]
 So, don't forget about this part.
 Okay so practice problems are over here.
 Did I forget?
 Oh, I didn't put the other one about, well, we're going to review it a little bit today. for the read action in the read action.
 So as usual, post your questions in July cohort, especially if you get stuck for
 15 minutes or more.
 You should not be getting stuck for a long time, because I teach you everything you need to know to the bug and solve every solution. But if there
[00:09:10]
 is something that I didn't teach you that you need to know, then it's going to
 take you a very long time to figure it out. It might take you a day and that's a
 one day wasted. So it's better if you get stuck for 15 minutes or more,
 post it in July cohort right away.
 Do not waste your time trying to debug things.
 You should know the answer very soon.
 Like, and if you don't, if you don't know the answer, then you should
[00:09:49]
 ask it here in July cohort. Okay, there's no new post here.
 Again, I emphasize, "Do not waste your time being stuck." Because I'd rather you spend your time actually working on the practice problem or the
 assignment.
 Because if you're stuck and trying to figure out how to debug something, you're not actually accomplishing much.
 You might be trying out all these things, but for a whole day, none of it works.
 So you actually didn't learn much for a whole day. So again, if you get stuck for 15 minutes or more,
 Again, if you get stuck for 15 minutes or more,
[00:10:48]
 post it in July cohort, maybe you'll solve the problem
 soon or maybe you won't, but just post it in July cohort.
 And then when you get the answer, post that too.
 As usual, mark your days green. After you finish the notes and you ask all the questions you need.
 And you receive the answer.
 Mark it green.
 And go in order.
[00:11:27]
 Okay, so now we're going to do the review.
 For the review, you'll need to take much notes, just sort of
 absorb what I talked about or remember what I talked about last Thursday.
 But for the new topics, that's when you should take notes, ask questions, type what I type, and also type what I don't type.
 If the information is useful. Also, just raise your hand if you have a question and have your microphone ready for
 any questions you might have or for many evaluations. So if anyone has a question, just like for anyone has a question about the assignment,
 so it's due later on today.
[00:12:36]
 This one here, you can still turn it in for on time credit later on today.
 Okay, so now it's time for review.
 So yesterday we learned how, I mean, not yesterday, Thursday, we learned how to connect the DynamoDB with environment variables. I'll be sharing my screen for that.
 Okay. took some notes on AWS. Actually, I think we took notes in DynamoDB.
.md.
 I didn't put any sample code, but I guess I can put some here.
 I'll put some sample code in here.
[00:14:12]
 To give a quick idea about what it looks like to die to mo DB with environment variables.
 Let me open the back end part by itself. Okay.
 So, in the back end, we created a, we created a, we had a function, it was a temporary function.
 And we started using environment variables inside of the API key object. We're not importing the credentials
 anymore, because if we import the credentials, if you import the credentials, they become part of the code.
 And if they're part of the code, they get exposed in GitHub.
 But if they are from the environment variables,
[00:15:55]
 they do not get integrated into the code, which keeps them secret.
 Which is what we want to do. So I just copied the part about establishing or creating the API key object.
 Because that shows us how to use the environment variables for our credentials.
 So we use.env.
 Right here, initialize it and then got the environment variables for our region access key, secret access key.
 You had to add these things to your.env file.
 Remember don't use quotations.
[00:16:59]
 Don't use semicolons here.
 It's automatically a string
 when it's in the dot b and v file.
 Your values are automatically strings.
 If you put a semicolon,
 then that semicolon will be part of your string.
 It's like putting a semicolon inside of the quotation marks.
[00:17:24]
 So they'll put semicolons in the dot ENV file
 unless you want it to be part of the value.
 Okay, so that's connecting to DinoDB
 with environment variables.
 to DynamoDB with environment variables.
 And we learned what CRUD stands for.
 It's a programming term, which refers to the actions that can be performed on a database.
[00:18:04]
 So see stands for create.
 That's where you add new data to a database.
 R stands for read.
 That's where you retrieve existing data from the database.
 You stands for update where you change existing data in the database.
 And you might even add new data to the database. And you might even add new data to the database.
 D is for delete, which is when you remove data from the database.
[00:18:57]
 database. We have done this before the R part, reading from the database. So it was a review. We had to, we just reviewed how to read data from the database.
 That should, this part should be in your notes.
 This is where we reviewed reading data from the database.
 And to read data from the database create a request object that includes a table name, whatever the table's name is in your Dynamo
 DB, you put it here as a string, and then the key. That's like the thing that's unique about
 each entry. So every email in your database table is supposed to be unique, so you can find it.
 So when you provide an email like this in the key, it can look in there and say,
[00:19:55]
 OK, I found one email with exactly this.
 It will not have a duplicate. So you should not have two emails the same in your table.
 It's just gonna basically, you know,
 it's just gonna basically look for this.
 That's why it's called a key because it's supposed to be unique.
 One key is supposed to open your house.
 That key will not open another house because your key is unique to your house.
[00:20:35]
 So this key is unique to this table.
 It will not work for any other login.
 So the emails are unique.
 You won't have the look at emails there.
 So that's why we said it as a key.
 If you do end up creating a table where you might
 have the email more than once,
[00:21:02]
 then you can't use that as a key.
 But so far in our table, we're using the email only once
 and it'll only belong to one account.
 And so you read from DynamoDB using the get method
 in the nice client.
 And you should receive an item in the response.
 So let me pull that up here.
[00:21:49]
 So here, we use the getResponse.
 I mean, the get method.
 To get data from the database.
 And then when we get the response, it should have an item.
 So that item is going to have your login data.
 Like the email and password.
 And then we learned how to create data right here. Basically, that's about adding data to the database.
[00:22:31]
 You can add a new, you know, record to the database.
 I'm going to share my screen about this. And this one is going to be here under create demo.ts.
 You should probably add them to the notes,
 which file to refer to.
 Yeah, I think I'll do that here.
 I'll put it, let's see where it might look good.
 In between,
[00:23:24]
 maybe in between, right in between there.
 I'll put here.
 Now, I'll put it down here.
 See.
 The file is read.
 Read demo dot t s.
 For details.
[00:23:58]
 And I could provide a link here. So that will be in the front end folder.
 No back end folder.
 Source modules, time to mode DB and read demo.
 So it has a link. So if you use square brackets, that's what you will display right here.
 It's displayed read demo.ts.
 But that's in the square brackets. That's what you display. And then in parentheses is the link to it.
 So I should be able to just click on this and it'll show me read demo.ts.
[00:24:58]
 So it says see read demo.ts for details.
 I'm going to do the same for, oops, that's the wrong one there.
 I'm going to this one to go in,
 in this one over here,
 for read. And then we have another one for create, see create demo dot t s for details. The For details, the link is going to go back one and it's going to then go into the front end folder. Then the source folder modules folder.
 Right now, that's back end.
 Back end folder. back in, back in folder, source folder modules, DynamoDB, create. So we should look like
[00:26:16]
 this. There's a sample data where you create a request.
 So table name.
 And then you need to have an item property with a capital I, then you just provide an object of whatever you want
 to add to the table.
 Your objects should have the key, which is an email,
 and then any other key value pairs that you want to add.
 You can click on this for the full demo. Here it is.
[00:27:19]
 And then when it's successful, you get an HTTP status code of 200.
 If I start my server here,
 actually I'm not gonna do it here,
 I should do it from here.
 NPM start.
 NPM start.
 To remind me to NPM run build,
[00:28:00]
 so don't just ignore these things because these notes are for you to remember how to start up your project and how to debug.
 Because there's a lot of things to remember. So it's better if you read the notes that you leave for yourself. And this is a note that reminds me to type npm run build
 in a new terminal. And what's the purpose of that? It's to apply any updates that I
 make. If I make any changes to my back end, this will apply it. And it also
 opened up this window here.
 So if I go to, we use a handler to show us what's going on.
 That handler is the code handler.
[00:29:16]
 And we just toggle what we need to see here.
 So I want to see the create part.
 So that's, I have to update the name because I also changed the names here.
 So I want to see the create and it should create a something a login called new email
 actually let me log into AWS.
 I think I already have have it.
 I already have that login.
[00:30:05]
 So we'll see, will it have an error?
 Will it have an error if I try to create this login or will it just do it or just
 override whatever is there? So that is the question.
 Let me load up.
 Find them both db. And I'll share it on the screen now.
 DynamoDB, I have Table, I'm using the logins table here.
 And I need to view the data here in this table, explore table items.
[00:31:11]
 And I do have a new email there that has a password of, well, it has a name, password
 and phone.
 So let's see what happens if I try to run this.
 If I try to run this code and try to create this,
 even though I was already there,
 let's see what kind of response I get.
 Remember, I need to visit the crud handler
[00:31:44]
 or the crud route for this.
 So that's easy. So my server is already running.
 I just put CRUD for the path or forwards last CRUD. Okay, so it didn't break. My screen sharing just froze.
 At least it looks like it on big blue button. So let me retry that.
 Okay, so it shows that a to a status of 200, which is means it's fine.
 Nothing went wrong.
 Let's see how the AWS chains
[00:33:07]
 or how DynamoDB chains.
 So we see here, this is the old,
 what I showed you before.
 I didn't change the password.
 So we won't see any changes here.
 Let's see if it overrides the other information there.
 Yeah, so look at this. The name is gone. The name disappeared and the phone disappeared.
[00:33:36]
 It basically overrode it, overrode the whole thing and erased this information.
 erase this information. Okay, so that's what something you should look out for. Be mindful about. If you try to create something and it's already there, if you try to create an entry and it's
 already here, it overrides and erases whatever information you don't provide.
 So that's something you should take note of.
 We also learned how to update data in DynamoDB.
 So the quick and easy notes are right here.
 I'm going to edit it.
[00:34:46]
 Here's create data. Here's how to update data.
 I'm going to provide the full sample code.
 See, update demo.ts for details.
 And that one's going to go to the back and folder source folder modules folder,
 DynamoDB folder update demo dot ts.
 Okay, so when we want to update something, the request object will look like this.
 I also told you guys, we can find the data type that we need and assert it so that
[00:35:38]
 if we provide the data type, I mean, if we assert the correct data type, then TypeScript will look out for us
 and tell us if we are creating the object correctly or not.
 And the way we get that data type
 is from,
 when you like mouse over the method,
 you can see that the first parameter it takes
 is asserted this data type, update command input.
[00:36:30]
 data type, update command input. And then I just use that same data type over here, because that's what I'm going to put in for the first parameter. So the thing that you need, The update request is table name key.
 The hardest part is just this one.
 You need attribute updates,
 which is an object, which has a property,
 which is the key that you want to change.
 So if you want to change the password,
 you make it the property,
[00:37:09]
 and then set an object,
 which has a value property, capital V,
 and then you put the new value there.
 I'm gonna change that new one from here.
 Actually not from this code. I'm going to do it from this backend here.
 We're going to see the results.
 Update demo.
[00:37:37]
 We saw that when I use the create or was this in create demo, it overroaked the values that were
 already, it basically erased the values that were there.
 So I'm going to put them back with update.
 So which one do I want to update?
 I want to update that new email.
 What was the thing that changed? The thing that changed was the name, it disappeared.
 So I'm gonna add here the name.
[00:38:20]
 The value it was new, I'm gonna put it back in there.
 And actually I'm going to put it back in there. And actually I'm going to
 the other thing that I want to put in here is the one that's missing is phone.
 So I need to set the value here. That was a number.
 It's a expected number, so I'm just going let this handler run this update demo.
 Let's see what happens.
 It is supposed to return an 8 TTP status code of 200 if everything works fine.
[00:39:27]
 And it's supposed to put some values in here
 for the name and for the phone.
 So I'm gonna run it now.
 Okay, so it looks like everything would fine because it's status code 200, which means okay.
 If I look at this in refresh,
 I should see there it is.
 The name is back to new, NOO.
[00:39:52]
 And the phone has been inserted right there.
 All right.
 So that was update.
 Then for delete.
 This one's easy. It's similar to the other one. You just provide.
 You'll recognize the request object.
 For delete, the request object looks like this.
[00:40:25]
 He provides a table and then the key.
 The one that she wants to delete.
 I'm going to put the demo code here.
 Right underneath. see delete demo.ts for details. I'm going to put the path here. And so there's the path so I can easily just click here and then we'll pop up the file
 for me.
 And I need to use a delete method.
 And I should have an HTTP status code of 200.
[00:41:25]
 So right now, let's see, this method is supposed to delete test at email.com.
 Right now, I don't have that because I've already deleted it.
 So let's see what happens if you try to delete something that's already there.
 I mean, that's already there. I mean that's not there.
 So let me update this to run the delete demo.
 Okay, so now it's it should run the delete demo, that's what happens.
 It says everything is okay.
[00:42:14]
 So if you try to delete something that's not there, it's not going to tell you that it wasn't there.
 It's just basically just going to ignore.
 It's just going to say it's OK.
 It's not in there anymore, even if it wasn't there in the beginning.
 So if you want to know for sure if something was in there,
 like if you wanted to know if test@email.com was in here, then you would have to basically retrieve
 it first, because if you can retrieve it and find it, then you know that it was in here,
[00:42:55]
 because delete doesn't tell you if it was in here or not.
 So if you want to know if it was in here before you deleted it, you need to check if it's there.
 You do the get command.
 Check if it's there.
 Check if test@email.com is there.
 If it's there, then if you receive an item, because remember you receive an item here, right? Right here.
 When you read,
[00:43:32]
 right now, read them,
 oh, you receive an item.
 So if you receive an item,
 then you know it was in there.
 If you don't receive an item, then you know it was in there.
 If you don't receive an item, then you know it was not in there.
 So if I try to run this command for test@email.com, I should not receive an item.
[00:44:01]
 And if I don't receive an item, then I know it was not there in the database.
 So I can even try running this.
 Let me try to run this, see what happens if I try to get an item that is not there.
 Okay, so if I run this, should run the read command and give me an item or not
 giving me an item.
 So it didn't give me an item because it's not there.
 Are there any errors?
[00:44:36]
 No, there's no error.
 It just gave me nothing because there it was, it's supposed to. It's supposed to, let me go here.
 So it's supposed to return the item.
 So in this case, the item will be undefined because it's not there.
 Test@email.com is not there.
 It'll be undefined. So it's not there. Test@email.com is not there. It'll be undefined, so it will return
 undefined, and then credit will go in. Where is it here? Credit will get the result and
[00:45:21]
 which will be undefined, And then I will have my
 server will respond with nothing, basically, when it sends undefined
 it responds with nothing. That's when I got nothing. It's just a
 white page here.
 Okay, so there that's how we use the delete method to remove data. We also went over this one, GDD read practice. And let me just pull up the notes here.
 So for TDD, read practice. We added name and phone number to each login.
 That's why you see here in my DynamoDB.
[00:46:37]
 Each login has a name. as an email, this is the primary key. So I can find which row to look up.
 Then every row here has a name, password and phone.
 Before, it just used to be email and password,
 but then we added name and phone
 to each entry here. And then we added the read route. That's right here in index.ts. There's the read route and then the read handler.
 Let's see if we, yeah, we made that already. But it's, it was just a placeholder.
 This was just my placeholder.
[00:47:49]
 This is not the actual code that I want to run
 with this handler, because we didn't get to this part yet.
 We didn't get to what this code should do.
 We were just concerned about defining the path,
 the function, and the file name, they all match.
 They all said, they all say read.
 And then in the module folder, we use TDD to test a function.
[00:48:27]
 So in the module folder here, the test the function called read account.
 That one is, we just made the file.
 We didn't actually make the function yet because we are using TDD, which designs,
 which designs everything first, which designs the function before you create it.
 So let's see here. Test an email password name and phone when given an existing email.
 So we were able to do that. That
 one appears here. Test that it returns an email password name and phone when
[00:49:15]
 given an existing email. So that's what this test is for. That's how we coded it
 right here. Use to have property.
 So if we run this read account function, we should get a result and we expect that result
 to have this property here.
 And to have this property here
 and to have this property over here
 and to have this property here.
[00:49:46]
 And then this one returns a result with a matching email.
 That was the next one here.
 Test that the function returns a result with the matching email.
 So if we request for an email, we expect this result by the email of that result to match
 the email that we provided.
 It should be matching and not giving us some other email.
 Because there could be a mistake here.
[00:50:22]
 You might be hard coding your emails by accident
 instead of using the email variable,
 you might just be hard coding it instead.
 So try it with different values here
 and see if you can pass the test
 with even with different values here.
 Okay, so I'm just gonna add another test before we take a break. So test that
[00:50:52]
 it doesn't return a result when the email is not in the list. So it doesn't return a result.
 If the email is not in the list, that's what I'm going to create the test for it, the range phase.
 So I need to create an email that doesn't, that's not in here, unlisted.
 I just put unlisted email.com because I know that's not in the list.
 And it also represents that the email should not be in the list. In the act phase, I want to use the read account function. And it should take in an email.
 And then return a result.
 I'll capture that result on the left side of the equal sign.
[00:52:20]
 But I have to declare it right here.
 You have to always declare new variables.
 If you're reusing a variable, you can't re- clarit. So if I try to use result again,
 it's going to show me an error because it's const.
 But if I try to read the clarit, it's
 still going to show an error because it's
 tell me there's a duplicate variable. So don't read a clear variable that you already have in the same scope.
[00:53:19]
 And in the assert phase, what do I expect here? If the email is unlisted, I'll decide. You
 as a programmer can decide if that's your task. So if the email is unlisted, what kind expect undefined.
 So if the email is not here, I mean, if it's not in the list,
 then I want to see undefined.
 I want to see undefined result.
 OK, so now time to take a break.
 So that's just how you do the TDD.
[00:54:08]
 I didn't even make the function yet.
 I'm designing the function before I even create it.
 That's how you should do this too. Okay, so we're gonna take the break timer.
 Okay.
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, we're back from the break.
 So new AWS topics.
 This one is about deploying the front end, the AWS.
[01:05:40]
 And one of those things that we need to know about is AWS S3.
 That stands for Simple Storage Service.
 And this basically tells you it's just going to store your file.
 Like GitHub stores your files.
 Think of this like a more like a hard drive where you keep it.
 So some terms that you'll see is bucket.
 Think of that like a hard drive.
[01:06:12]
 And you'll see terms like object will think of that like a file.
 So just take a quick note here, copy this,
 paste it into your Amazon notes.
 copy this, paste it into your Amazon notes.
 I mean AWS notes. And I'll remind you, we'll see these terms.
 And I'll remind you of what they mean.
 So it's not DynamoDB.
[01:06:55]
 So we're going back to the Amazon notes or AWS notes. Because it's not just S3 that will use.
 We're going to use something else.
 So it's better if we just put it in here.
 Right there.
 So S3 stands for a simple storage service.
 And you'll see the word bucket that basically
 means hard drive and you'll see object which basically means file.
[01:07:37]
 See how it looks here. Okay, looks fine.
 Okay, looks fine.
 All right, so what we're going to do is create an S3 bucket. Remember bucket is like hard drive. So basically, we're going to create a hard drive.
 The store are
 front end files. Okay, so it's pretty easy to create a bucket or a hard drive, think of it like
 that. Copy this. We're going to put it in the notes. It's not complete details because hopefully you're familiar with AWS that you can accomplish
 these without too much difficulty, that you can accomplish these steps without too much
[01:08:36]
 difficulty. So you're here in the notes and then if you have a question or you need clarification
 on anything, just let me know.
 Great.
 And S3 bucket.
 So for how do you create an S3 bucket?
 Well, this is an AWS, right? So you should go to your AWS website or console.
 And you should look for S3.
[01:09:16]
 You should be familiar with that process right now.
 So I didn't spell it out this time.
 Because hopefully you're familiar with this process,
 how to find like things in AWS.
 So that's S3.
 I want to create a bucket to create an S3 bucket.
 So what would I do?
[01:09:42]
 I'm in this S3 section now.
 Oh, look at a big yellow button called create bucket. So what would I do? I'm in this S3 section now. Oh, look at a big yellow
 button called create bucket. It's so obvious. Okay, there it is. Next step for the bucket
 name, put sandbox level four. So here's bucket name, sandbox level 4.
 So we're going to store our sandbox files in here.
 Basically, just our front end.
 But it's part of our sandbox level 4.
[01:10:22]
 Hopefully this works because I think no, I already have this bucket because I was testing
 it out.
 So I'm just going to call it the temp for now.
 Then I'll just delete it later.
 But don't put temp.
 Yours will be the actual bucket.
 Leave all the other settings as default then create the bucket so that was pretty easy.
[01:10:53]
 Scroll down, create the bucket.
 Bucket is again like a hard drive.
 So I have, close this one here.
 Where is it here? Okay, so I have sandbox level 4-temp right there.
 That's the, that's the, think of it like the hard drive I just created in AWS.
 Click on that one.
 There it is.
[01:11:25]
 All right, so this is what it looks like when you click into it.
 The next step that we want to do is put objects in the S3 bucket.
 Remember, objects is basically files.
 No, leave all the, leave everything as default.
 So Chris is asking, do we need to give people access to that?
 No, leave everything as default, just put the name for your S3 bucket.
 Oh, for your user, you should be logged in as your admin user. Your admin user should have administrative rights,
[01:12:26]
 and those administrator rights include S3.
 So you should have two accounts that you're logging in with, your root account and your
 admin account.
 Your admin account, the permission for that should be administrator.
 And if you are able to create a bucket or, you know, if you're able to get into S3 and
 create a bucket, then you have, you have the permission to do that.
 If you're logged in as the administrator account.
[01:13:10]
 I'll show you my administrator account here.
 It's not my root account.
 My administrator account is here.
 And we can see the permissions here.
 All I have two permissions, probably can remove this, but you should have administrator access,
 which has permission to create S3s, S3 or buckets. Okay so I'm gonna paste the notes into here.
 Okay so we need to create a folder called front end. So we're gonna put objects in
[01:14:03]
 the S3 bucket. So we're going to think of it
 like we're going to put files in the S3 hard drive. So create a folder called front end
 in the front end folder, upload index 8 CML,
 and then create a folder called "DIST"
 in the front end folder,
 and in that "DIST" folder,
 upload main.js.
[01:14:47]
 Okay, so we're basically replicating our folder structure. So, what we want to do is create a folder called front-end.
 So, here in the bucket sandbox level 4, how do I create a folder?
 Easy right here.
 It says create folder.
 So it should be called front end.
 So that's easy.
 Folder name.
[01:15:15]
 And it says here, leave all upload settings as default.
 So just leave all that stuff.
 leave all that stuff. So now I should see front end in here.
 Let me make this a little bit smaller.
 There's the front end folder right there.
 Next step is create a folder called "DIST" in the front end folder.
 So, okay, how do I do that?
[01:15:48]
 Well, I should go into that front end folder
 by clicking into it.
 And now, I can create a folder called "dist".
 So, I'm basically recreating my folder structure
 for the front end at least. Okay.
 Oh, I forgot to do this step number two in the front end folder upload index.html.
 Okay, so let me go back. We need to go back to the front
[01:16:31]
 and folder. Oh wait no here. I am in the front and folder. Right here it shows
 I'm in the front and folder. Upload index.html so how do I upload a file into this front end folder? Well, there's upload right there
 And I see some options
 Well, I want to upload a file. I guess it's this button right here add files
 So I want to upload my sandbox level 4
 So I want to upload my sandbox level for frontend index.j index.acml file. I'm going to put my frontend files in here for the sandbox.
 So I can try it out.
[01:17:20]
 And that's it. Just upload it.
 It's almost like copy and paste, but just with buttons.
 So it's here index.acml.
 Then we create a folder called this in the front end folder. Okay, so we did that already.
 I'll click on the disk folder. It says here, I'm in the front end folder. Okay, so we did that already. I'll click on the disk folder.
 Says here, I'm in the disk folder.
 In that disk folder, upload main.js.
[01:17:55]
 So your sandbox,
 if you haven't compiled it yet
 or haven't built it yet, you can do that.
 So I click on Upload and add the file.
 So my sandbox front-end has a disk older and it has a main.js. So, let me load the front end here.
 Okay, so the front end is loaded right here.
 If you need to rebuild it, if you don't have a disk folder,
[01:18:45]
 then you should do npm run build.
 And it will build your disk folder and it will make the main JES file.
 Like that.
 After it makes it, then you can upload it.
 I'm going to go there, then I need to confirm it down at the bottom.
 This takes a little bit of common sense, observed the buttons.
 Okay, so that's it. It's uploaded.
[01:19:26]
 There's a close button there at the top.
 That's all I need, actually,
 to get my front end running just those two files.
 Let's see the next step.
 That's it.
 So we uploaded main.js.
 We've all upload settings as default.
[01:19:52]
 That's the only object you need to put for your front end.
 At least for the sandbox for now.
 Unless you have assets, then you probably might want to include those.
 So, next thing that we simple, simple, simple,
 storage service.
 That's like our hard drive.
 Now we need something to deploy our files
[01:20:34]
 or to render our files.
 So that's what we use Amazon CloudFront for.
 So let's copy this here.
 So let's copy this here. So Amazon AWS Cloud Front.
 So that's a service that distributes or
 or actually what it's doing is it's like making copies
 of your S3 objects or basically your files, it's copying them worldwide.
[01:21:11]
 Or actually we're not gonna copy it worldwide,
 we're just gonna copy it to North America and Europe.
 Because if you copy it worldwide,
 like all around the world that it's gonna
 cost a little bit more.
 Or I mean, it won't cost you anything based on our personal usage.
 But if you have a lot of traffic going to your website,
[01:21:33]
 it will start costing something.
 And it costs more if you're disturbing it all throughout the world.
 In front, we'll distribute your website
 to-- we'll set it up to distribute it to North
 America and Europe only.
 The same cost.
 It's gonna, but anyone around the world will be able to access your website.
[01:21:56]
 It's just that it will just have to pull it, like if they are in Australia, well, they'll just have to pull the files from either Europe or
 the United States or North America. So it just takes a little bit more time. So
 let's just copy this over. I'm gonna copy this, paste it into the nodes here.
 So it's a service that distributes
 or copies your S3 objects worldwide.
 Basically your website loads faster because the files are physically closer to your user. So if they are in Europe, then CloudFront will, like if you have someone in Europe looking at your website.
 Well, CloudFront will send them a copy of the files because they need to receive the files to view your website.
[01:23:08]
 So if they're in Europe and where and CloudFront is also making a copy of your files in Europe,
 those people, your customers there in Europe will, the website will load faster for them
 because it's physically closer to them.
 Contract will also make, will have multiple copies. So we're going to copy it in North America and in Europe.
 So, all throughout North America. So it's not just like one place in North America, but it's all throughout North America. So East Coast, West Coast, also in Europe, West
 side, East side. So if you're gonna have multiple copies of your website, so
 multiple copies means if one storage goes down, or it's actually one storage site. If one storage site goes down, or storing it there, if one storage site goes down, another
[01:24:11]
 site can provide the files.
 And from AWS Cloud drive, you can configure which folder and file to render for your website.
 And you can configure for SPA sites.
 So remember, we always had to configure, since we're using a SPA single page application,
 we always have to put special settings.
 And we couldn't really do that with GitHub.
 We just had to go with what they provided.
[01:24:48]
 And there was no direct way of selecting a folder to deploy from.
 But you can do that with CloudFront.
 And you can also set up SPA configurations.
 So you have more control than in GitHub.
 More control here.
 More direct control with CloudFront.
 So let's create a CloudFront distribution.
[01:25:20]
 So they're called distributions.
 distribution. So they're called distributions because it's actually just making distributing your files all over the world.
 If the servicer files all over the world and then
 those files can get rendered into people's browsers. So basically, it's called "Cloud Front," so you need to look for that in your AWS console.
 You should have access to it if you're using your admin account.
 And we're going to start configuring it right now
 by creating a distribution.
[01:26:10]
 That's what they call it.
 It's just the thing that deploys your website.
 Think of it like that.
 A distribution is your deployment.
 I mean, the website deployment.
 So for origin domain select the sandbox level for s3. So
 let's just get into that so it's gonna be here somewhere in AWS
[01:26:54]
 How would you find it? Well, you just it's called cloud front
 so look for it click on it and the create the clue here is create an AWS Cloudfront distribution.
 So it's pretty simple as the first thing that pops up here.
 Create distribution. For origin domain select the sandbox level 4 S3.
 So here's origin domain.
 You should pick the one with your sandbox level 4 S3.
 So mine is the one with temp, but you'll have the actual one.
[01:27:52]
 Okay, let's see what else for the origin path type front end.
 So this origin path right here.
 This is your basically your deploy folder.
 You're going to deploy from this folder.
 So much easier than in GitHub, you know know how in GitHub you have to go to GitHub actions.
 Then you have to create some kind of YAML configuration file and then type in the name.
 Well here, this is your deploy folder.
[01:28:23]
 Just go like that.
 Web application firewall. Do not enable that. So if I scroll down here.
 Web application firewall. Do not enable it. Otherwise you incur costs.
 It sounds like a good thing and it is a good thing but you pay for it. So you probably don't need it, so just do this for
 now. You would need it if your website attracts hackers, then you have a
 valuable website and hackers are going to try to hack you know, if you have a valuable website and hackers are
 going to try to hack into it, then you should get this. Then if you have a popular
[01:29:11]
 website, then this is affordable because your website is already popular and
 making money. You don't need it right now.
 You don't need it right now.
 Set the price class to use only North America and Europe.
 So here is web application firewall. If I scroll a little bit down, there's price class.
 This says all locations.
 Well, I don't want that because this is where it's distributing your files. That means all over the world. And like I said before, it's more expensive when you distribute it all over
[01:29:55]
 the world. We're just going to distribute it to North America and Europe. So that's here.
 For price class, use only North America and Europe.
 That default root object to index HTML.
 So I scroll down a little bit and I see here default root object. So index HTML. So that's the thing that's
 index HTML is the object or file that will load. If it's not specified. Because usually if you type in a website like www.nps, we'll just say this one, the
 npm site.
 Usually you wouldn't have to type in the index a cml file here.
[01:31:00]
 But we don't have to do that.
 We can just load it like this because it's set up to automatically load that index.html file.
 So that's what we're doing here.
 We're telling it, hey, just load the HTML file so that the website visitor doesn't have
 to type it in. That's it. Create the distribution.
 So we have a distribution or the think of it like deployment. We've created that deployment. We're deploying our website with CloudFront now.
 Actually, not quite.
[01:31:51]
 If we, we need to give CloudFront access to the S3 bucket.
 So it actually does not have access to the S3 bucket right now.
 We're telling it, hey, deploy these S3 files, this, these files from this hard drive.
 But CloudFront says, hey, I can't,
 I know you want me to distribute those,
 but I can't access them.
 We need to give it access.
[01:32:22]
 So let's do that.
 How do you give that Cloud front access to the bucket or the hard drive
 that you created? You could even try something out here. Let me just copy these notes first.
 Paste it in here.
 I think I'm going to highlight these words.
 Use only for North America in Europe.
 Index 8 CML highlight these because you're going to be typing them directly.
[01:33:17]
 So it's going to look like this.
 Like we typed in front end there
 for the path. We chose North America and Europe and we typed in index ACML.
 So that's why I highlighted those.
 So why do we need to give CloudFront access to S3?
 If you go like this. so this is the new distribution
 right here that we just made, or think of it like deployment.
[01:33:55]
 And this is actually the website right here.
 Distribution domain name.
 This is the website that will--
 that's-- that it's deploying to.
 If I copy that and try to load it here,
 does access the nine.
 That means it doesn't have access to the S3 right now.
[01:34:22]
 So we need to give it access
 that doesn't have access to the S3 right now. So we need to give it access to the files for our website. How do we do that? In the Origins tab, select and edit the new origin.
 Okay, so look here, there's an origins tab.
 Select and edit the new origin that you just made.
 So this is the one that I just made right here,
 sandbox level 4.
 Select and then edit, there is edit button.
[01:35:16]
 Okay, what's next? Actually, let me revert this.
 Select and edit the new sandbox level for origin.
 So it's more clear.
 Or I don't even have the same new.
 Because that's what we've been working with.
 Select and edit the sandbox little for origin.
 Next step select origin access control settings recommended.
[01:35:56]
 Okay, where is that? Okay, here origin access control settings recommended.
 So I think I should highlight that here.
 settings recommended. So I think I should highlight that here because this is exact wording right there. Origin access control settings recommended.
 Next click on create new OAC when the highlight that too. So it brings attention to it.
 Create new OAC. That's here. Create new OAC.
 And then click the create button.
 So just create.
[01:36:54]
 Oh, AC means original origin access control.
 You can see it right here.
 So giving it access to the origin.
 So if you don't need to know what that means,
 you want to give it access to the sandbox level four.
 That's our origin.
 It's getting those files from there.
[01:37:19]
 So if you just look at the clues around you,
 you can figure out what it means.
 Okay, so we did that. Now click, click, copy a policy.
 You see their copy policy.
 policy and go to the bucket permissions tab. So I should add in here go to the S3 bucket.
 So where would that be? Well that's going to be under S3. So I copy that. You could just click on this thing right here.
 Oh, wait, no.
[01:38:14]
 Right here.
 Go to S3 bucket permissions.
 You can do that.
 Or you can go straight to it.
 I mean, you can manually work your way to it from here. So your choice. This is the
 easy way, but I'll show you the hard way. There's the S3, the bucket that I made as called sandbox level And then it has a permissions tab.
 Okay, so it says here.
[01:38:58]
 Copy the policy and go to the S3 bucket permissions tab. Okay, so I went to that tab.
 Next, edit the bucket policy and paste in the policy.
 Edit the bucket policy. paste in the policy.
 Edit the bucket policy. Oh, there it is.
 There's bucket policy.
 So I need to edit it.
 Something is popping it, popping up here.
[01:39:16]
 Okay.
 And it says paste in the policy.
 So that's what we copied.
 Just paste it in here. And that's it. So you should
 save the changes. I don't have to specify it here. You should be it. It has permission now. So how does this pasting this in
 given permission? Well, if you, so right here, I'm in the, I'm in the the hard drive the sandbox level for hard drive for the S3 and if I look at this
 these are words basically these are words that tells the S3 who has access to it
[01:40:27]
 who has access to it. So it's saying something like CloudFront
 Allow.
 The action.
 It's allowed to get objects here.
 It's allowed to get objects in the S3.
 So that's what we needed to do.
 It's not gonna write, it's just gonna get objects
[01:40:52]
 from the S3.
 So this policy right here is just basically words
 that tells the S3 or your hard drive,
 think of it like that. I know S3 is, you know, the service, but sandbox level 4, the bucket is like the hard drive.
 So the thing that's in charge of the hard drive, you're just telling it, okay, this is, this is, you can give CloudFront access to the,
 to get objects or files from that hard drive.
 So that's what it means, providing the language
[01:41:36]
 or the instructions to give access.
 If I now, let me try to reload this,
 it should reload shift control R,
 but I forget something.
 Should reload.
 Oh, I think it's not finished yet.
 I'm going to go back to
[01:42:13]
 "Pad Front".
 Let me make sure it's deployed. sandbox level 4 right here
 it should be deployed now
 copy that
 paste it here
 okay and it's not deploying.
 Sometimes it takes a while.
[01:42:50]
 Let me double check if I missed anything.
 Can I put it in the wrong one?
 Maybe I pasted it into the wrong policy.
 maybe I pasted it into the wrong policy.
 Permissions, it's here.
 Let me see if I created this in the cloud front.
 it was in origins here.
[01:43:38]
 Oh, I didn't save it.
 I just exited out.
 So, I need to go back into here, select this one again.
 I don't need to create a new EAC, because I already created it.
 It's here somewhere.
 If I try to create a new one, it's going to give me an error.
 It's going to say me an error. It's going to say I already didn't create it.
[01:44:06]
 So I just pick it from the drop down list.
 And then I forgot to save it.
 That's why I didn't deploy.
 Now it's the load.
 There.
 So remember that OAC origin access control.
 Great. That's what we did. We edited it.
[01:44:39]
 And it gave us access to the origin or access to the S3.
 I just forgot to save it at the bottom.
 Okay, so yeah, it's fast. The access was fast. But now we need to do something else.
 I need to teach you something else.
 Okay, so we did this.
 We loaded the domain name in the browser tab.
 Okay, so let's just fix something here.
[01:45:25]
 Let's say copy this and save it in our notes.
 I'm going to set it up to work with SPA's.
 Paste this into the notes.
 So we loaded the distribution domain name in the browser.
 Okay, I'm gonna highlight this because
 this one was, this is exact wording right here.
 Where is it?
[01:46:23]
 Distribution domain name right here.
 That's the website where your website is deployed, where your front end is deployed. Observe the home page loads and the navigation works.
 So the navigation should work. And then observe that loading a page other than root shows access denied.
 So if I try to load this page by itself, like I'll refresh this, or I'll just copy this and load a new tab.
 So I didn't load root, right?
 I loaded the contact page, it broke.
 It said access denied, or even if I tried a refresh,
[01:47:20]
 it's the same thing as loading it, it says access denied.
 Okay, so we're gonna fix that. It's the same thing as loading it. Access denied.
 Okay, so we're going to fix that.
 Just remember I said access denied. That's the that's the key there.
 That's the main point there.
 Copy this one.
 All right, so
[01:48:01]
 this is where we set up the SPA settings.
 So we're going to follow these instructions.
 Copy this.
 Paste it into your notes, how you set it up, so that you can refresh
 the page or go to a specific page without saying, without
 it saying, "Access denied." I'm going to highlight this one, access the nine.
 So it's clear what's going on?
[01:48:47]
 Alright, so in the in error page, I think it's a tab.
 Yeah, it's a tab.
 In the error page tab.
 So where is that?
 So this is CloudFront. We're still working in CloudFront.
 Oh, error pages in the error pages tab. Let me fix that here in the notes. In the error pages tab.
 I'm going to highlight this.
[01:49:44]
 Create, click, create custom error response right there.
 The big yellow button.
 For HTTP error code, select 403 forbidden.
 That's the same thing as access denied.
 Okay, so we're giving instructions what to do
 when it's access denied.
 So we're giving instructions what to do when it's access denied. We're going to highlight this file name here and this one here.
[01:50:16]
 403 forbidden. That's what we need to select here for the error code.
 So when the access is denied or that's what 403 forbidden is access denied.
 We need to select, select custom error response. Yes. Let me, this is going to highlight the
 word yes here,
 because we need to pick yes right there.
 And then for response page, type index HTML
 with this last in front.
[01:51:02]
 Response page path, yeah, response page path index.acml.
 So basically what it's saying is load that acml file when there is access to 9.
 And then for a CTP response code pick 200, okay.
 This means that, hey, we know we're handling it, it's not really a error.
 So just, just send that it's okay,
 because normally it would say it's an error,
 but it's not an error.
[01:51:39]
 We're saying it's okay.
 And that should be it. I should be able to just reload this now. It reloads a contact page by itself. And I can refresh it. I'm refreshing it. So notice I didn't copy over redirect.js or anything like that. It's because the root path is
 Is correct. It is the root. It's not adding like
 React navigation or capsule level forward, right here. It's just goes straight to the root just like in the my local machine
 I mean, it's just right there on the root path
 machine. I mean it's just right there on the root path. Doesn't add any extra path to it. Okay, let me see what's the next slide here.
 They have to teach you one more thing because otherwise your deployments, your updates won't work.
[01:52:58]
 If you update your site, they won't update here unless I show you how to do that. So, deploy updates to AWS S3 and CloudFront.
 So, objects must be invalidated to trigger CloudFront to redistribute them.
 So, basically, when you make updates to your website, and you want to deploy them in
 CloudFront, you have to tell CloudFront, "Hey, I made changes to my files.
 You need to go and redistribute these changes all around the world."
 And the way you do that is invalidating the files. So basically you're
 telling confront, hey, the files that you just distributed, those are old files,
[01:53:51]
 invalidate those, and then start distributing my new files. So copy this.
 So copy this. Paste it into the notes. Okay, so let's see.
 Uploaded an updated main.js file through the S3 disk folder.
 So I'm going to just make a slight change to main JS.
 And validation's tab.
 Testing here. Okay.
 All right. So let's do this.
[01:55:08]
 I'm going to update the main JS.
 How would I update it?
 Well, let's look at it first.
 So in this home page, I just put hello world.
 I'll put the words hello world in the home page.
 I'm going to edit my front end here
 and in the homepage,
[01:55:30]
 I'm just gonna put hello world somewhere.
 I'll put it in page three.
 Hello world.
 Okay.
 Now I need to rebuild it.
 NPM run build.
 So this will create a new main JS file.
[01:56:07]
 All right, so it's created.
 Now, if I go in here into the S3 and.
 And then I copy over my, my new main JS file.
 I need to go to the disk folder.
 So the instructions right here say upload
 and updated main JS file to the S3 disk folder.
 So I use my disk folder.
[01:56:37]
 I'm gonna upload my main JS here.
 I've uploaded it right there. And then I would think, hey, that's all I need to do, right? Well, let's see, it's uploaded. And if I try to refresh this page, nothing happens.
 And if I try to refresh this page, nothing happens.
 It's still like that.
 I don't see any changes. That's because CloudFront doesn't know
 that there were changes made.
 It just took what it saw at the first place.
[01:57:21]
 It just looked at S3, got the files
 and then started distributing them.
 After that, we made a change.
 Well, CloudFront doesn't know.
 We needed to tell CloudFront, "Hey, we made a change to the files."
 So that's what we're going to do.
 In CloudFront, in Validation's tab, so let's go to that first Cloudfront. Well, I have to pick my, I have to pick my
[01:57:52]
 distribution here. In validations tab. Oh, I highlighted the wrong thing here. Let me fix this highlight.
 And I could, in the CloudFront distribution--
 in validation, because I had to select the distribution, right?
 So I added that there.
 And I picked the invalidations tab.
 Great invalidation.
 This is basically how we tell CloudFront,
[01:58:33]
 hey, we changed some files.
 So we're gonna tell it which files did we change.
 Oh wait, this is, I thought I'd put the other one.
 It's supposed to be the other way here.
 Like that.
 So you could put a specific file like you changed
 "dist.main.js."
[01:58:59]
 You could tell it that.
 But instead, I'm going to tell it, no, I change everything.
 That's what the start means.
 I change everything.
 That's the easiest thing to do.
 So that's what this means here.
 Just type that one, which means it invalidates all objects or
[01:59:19]
 all files in the S3.
 So it's invalidating them. It's in progress. It's basically getting a copy of the files there in your S3 because you just told CloudFront, "Hey, I changed these
 files." Okay, then now CloudFront is saying, "Okay, I'm going to go back, get them, and then I'm going to distribute those changes all around the world.
 So as it's complete, if I press reload here, let's see if I press reload.
 Yeah, there it is.
 Hello world.
 Okay.
[02:00:06]
 So we learned how to manually deploy.
 And now it's time for a break.
 So let's do that. And then just set up the break timer.
 Okay, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Alright, so we're back from the break. And now you have time to work on the assignment,
 our new assignment is this one right here.
 I introduced it on Thursday.
 Part of it is TDD. Create a branch for using TDD.
[02:11:27]
 The test of function.
 So it would help if you do the practice that I also introduced at the TDD.
 Read practice.
 If you do that first, it'll guide you. This assignment right here will be easier.
 All right, so if you're going to do something right now, I recommend
 do the TDD Read Practice. Finish that. And then when you get, when you do this part
 that and then when you get when you do this part where your capstone it'll be easier.
[02:12:15]
 Okay so now I'm going one for the many evaluations.
 Just going to put everyone in a room.
 You don't have to go to that room. That's just the only way I know to make sure that you can see the rooms.
 And the rooms will be open for 35 minutes.
 Okay, brick our rooms are open.
 Do we have any volunteers that want to do
 week four of many evaluation or week three?
[02:13:10]
 Okay.
 All right, so Chris is volunteering.
 So let's go ahead.
 I'll meet you there, Chris, in the mini evaluation room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, let me just conclude the class here.
 So the breakout rooms are back.
 In conclusion, we learned about AWS S3.
 Again, that stands for simple storage service where you create buckets or think of them as hard drives
[02:48:32]
 or drives and you also create objects, think of those as files.
 We also learned about AWS CloudFront. That's the thing that distributes your front end files all around the world and deploys them as a website.
 You also have to remember you have to invalidate.
 You have to create an invalidation if you whenever you make updates to your front end.
 Because CloudFront doesn't know that you make changes to your front end.
 Unless you tell it that those files that you just sent out there, they're not valid anymore.
 You need to come back to the S3, get the updates,
[02:49:27]
 and then distribute those instead. We also, oh, I didn't get to teach you this yet.
 AWS CLI deploy commands. I'm going to do that next week. Basically, we can automate
 those that whole process. Instead of doing it manually,
 we can automate it with CLI commands, but I'll go through it next week, or you can try to figure
 it out this weekend. But we did learn to deploy the front and to AWS, at least manually for now.
 Okay, so if you didn't get a chance to take your attendance,
 you should do it now.
[02:50:10]
 You have three minutes to take attendance
 in your code X account.
 Class is dismissed.
 That's today's lesson on AWS.
 I'm going to continue the mini evaluation with Chris
 right now.
 So I'll start up with breakout room.
[03:50:52]
 Okay, so Chris, I'll meet you in the break, Aaronause ] I have to restart that. Well, we can just continue.

///// FILE: "Level 4/transcripts/Apr 7, 2025 20-53.txt"

Transcript from Apr 7, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four week five day one and this week's theme is Redux.
 If you haven't heard about it before, you're going to you're going to know a lot about it this week.
 So today's agenda,
 would take attendance,
 do announcements, review what we learned last Saturday morning,
[00:00:40]
 and then just going to finish up an AWS topic
 specifically about deploying
 to land the function
 with just, I mean, deploying to the deploying the front end
 with a command, with a command line,
[00:01:04]
 with the CLI.
 And then in the second hour,
 that's where we start talking about Redux
 and third hour, many evaluations
 and time to work on the assignment.
[00:01:20]
 So Mark your attendance and on over to your codecs, Academy website or account in Moodle,
 and Mark yourself as present if you're here right now.
 And now time for announcements. Let me get that loaded up.
 Okay.
 So many evaluations, remember you need to use the add submission button to be placed
[00:02:11]
 in the waiting list for the mini evaluation.
 And the only way you can get the on time point is to make the submission before the due date.
 So there's many evaluation week five.
 That's due Tuesday before class. Right here, mini evaluation week five.
 So it's do April before class.
[00:02:55]
 April eight before class.
 That's Tuesday.
 Late credit until April 15 before class.
 Whoops, I forgot to fix this. This one should also be April 15 before class. Whoops. I forgot to fix this this one should also be April 15
 Okay, so if you want to qualify for this point
[00:03:20]
 You should submit the evaluation on time
 Like I said here You should submit the evaluation on time.
 Like I said here, add the submission button.
 And you should also complete it by the end of this week.
 And remember, time slots for many evaluations are limited, so best to get it out of the way and volunteer.
[00:03:51]
 So the questions are here.
 Properly explain and demonstrate how to use environment variables to hide access keys.
 So we use environment variables to hide access keys for DynamoDB.
 What file contains environment variables, what module is used to access those environment variables.
 How to initialize the module.
[00:04:21]
 What can you say about the process object? How to access environment variables.
 So those are just things to get your thoughts flowing.
 Let's see, properly explain and demonstrate how to code the solution for TDD query
 practice.
 There's a link there, but it's also here on the side, TDD query practice. this. So it involves tests and following these instructions.
[00:05:18]
 I'll probably explain and demonstrate the purpose and use of the declaration file.
 So there's something in TypeScript that we use
 called the declaration file.
 What is the purpose of the declaration file?
 How to use it for assets,
[00:05:37]
 when and how to use it for modules.
 And the last one properly explained and demonstrated how to deploy a repository folder in GitHub. So in GitHub, I showed the class how to deploy the front end folder. But the reason why I had to show you that is because
 there's a default file and folder structure to deploy a GitHub repository. So what is that default file and folder structure?
 And how do we get around that using this part up here?
 How do you configure the 404 file redirect index, the index file and the nav bar, for navigation in GitHub deployment. For when you're deploying for a folder, a different folder, different from the default. So I can
[00:07:07]
 add that here as a, you know, an extra detail.
 Just let me know if you have any questions about these otherwise I'm just expecting that you
 understand what I'm trying to what I'm asking for here. Besides what I'm I'm just expecting that you understand what I'm
 asking for here.
 Besides, I sort of walk you through the answer sometimes.
[00:07:34]
 If you-- if I think that you sort of know the answer,
 I'll try to walk you through it.
 But if I think that you didn't study at all, then I, or maybe, if I don't think that you
 don't really, that I can't walk you through the answer, then I'll have you go back and study it.
 So the next one is, so that's for week five.
[00:08:11]
 And these are mostly things that we did two weeks ago, so we should know these already. So, I'll close this.
 And I can still do the many evaluations for week four this week so that the corrections for this.
 So, if you want to submit corrections for week four, Make sure you add a submission for week 4
 by Tuesday before class.
 A assignments. So, capstone TypeScript is closed, capstone back end is closed,
[00:09:26]
 is closed, capstone backend is closed, capstone proxy, that closes Thursday before class. Let me show you turn that in. The student success team, so contact the student success team if an assignment has closed
 and you're interested in making a submission.
 Let them know which assignment that you want to submit and the reason why you have
 fallen behind, it says here C slack for contact info for the student success team.
 Let's let me open that up.
[00:10:01]
 So the student success team.
 So the student success team, the contact information can be found in Canvas, or if you're on your mobile device, maybe it's just a piece of paper icon like that.
 It might not say the word Canvas, just the icon that looks like paper.
 You can see the student success team. Mostly Melanie, but she was out of the office.
 Then it became Andrea Torrey. And now I think she's out of the office. Let me see here.
[00:10:39]
 Yeah. Andrea Torrey is out of the office. So it's going to be a lillian.
 I'm just going to update this one really quick.
 So it's going to go in this order, contact Melanie first. And then let me see if I can change this bullet point.
 If I can put it in the order of priority.
 I don't see how to change it right away. It's just going like this.
[00:11:34]
 Andrea Torrey.
 Then Lillian.
 So this is the order.
 Priority is the top here.
 I wonder how it changes to--
[00:11:51]
 oh, there it is.
 OK.
 So yeah, try to go in order.
 See if you can contact Melanie.
 I think she's out of the office.
[00:12:01]
 And I think Andrea Torres out of the office.
 But try it anyways.
 Maybe just contact all three of them.
 If so contact the student success team if you need to get points on closed assignments.
 get points on closed assignments.
[00:12:31]
 Practice problems they are right here on the side as usual.
 Make sure you do them.
 Mark them off as green when you finish that assignment.
 That way you don't have anything to worry about.
 One thing you should do though when you finish an assignment or a practice,
[00:12:49]
 you should put comments in your code
 so you know what you did.
 Otherwise, if you like, if you finish this
 last week, you might forget what you did this week
 so right now is week five, but this was last week, you might forget what you did this week, so right now is week five, but this
[00:13:06]
 was last week. So if you did this last week, you might forget how you did it, so it's
 good to have comments to explain your code and your solution. Remember, your mini evaluations are open notes are open
 book so feel free to look at your comments and your notes while doing the mini evaluation.
 Let's see and remember if you get stuck for more than 15 minutes, ask your
 question in July cohort, don't waste your time, don't waste a whole day trying to
[00:13:51]
 fix a bug. That's the waste of time I'd rather than you learn new content
 for a day instead of fixing a bug for a day.
 So where is it here?
 Okay, so there's a question by Raylon.
 So did you get that fixed Raylon?
[00:14:20]
 Your GitHub wasn't updating.
 Did you figure it out?
 Basically, the suggestion was to build the front end,
 and then push it to GitHub.
 I think that's your typing. Okay. So remember, GitHub renders index HTML of the root folder. So you have index HTML and your root folder. For the folder specified through GitHub pages,
[00:15:06]
 that's in this case, your front end folder
 should have an index HTML, which GitHub is rendering.
 And that index HTML renders the bundle in the disk folder.
 It doesn't look at your type of profiles or anything like that. If you look at your index HTML, it's just
 loading up the disk folder main.js.
[00:15:38]
 So the disk folder is only updated when the bundle is recompiled.
 So if you want your website to update,
 you need to update the bundle in the disk folder by building.
 Remember that Webpack Dev Server doesn't compile through the disk folder.
 We're using Webpack Dev Server to view our website locally.
[00:16:07]
 Web site Dev Server does not build.
 It just loads everything into memory.
 So no files are updated with Webpack Dev Server.
 It's all in memory.
 I mean, no bundle is updated with Webpack Dev Server.
[00:16:23]
 You need to run the bill command separately.
 As usual, mark your days green.
 Only after you've taken notes and you've asked the questions that you needed to ask for that day and you got the answers.
 Markovum Green is only for your own reference. Don't cheat yourself by marking a green even
 though you didn't take notes. Use it as your own reference You keep track of what you learned and what you still need to know.
[00:17:10]
 Okay, so now it's time to focus.
 In the review part, you don't have to take what's notes, but you should take notes if I say anything that that's new or that
 you might have missed. But for the Redux part you should definitely take notes
 type that I type, use the OCR to make it easier to take notes. Also, have your microphone ready.
 Especially for many evaluations or
[00:17:51]
 submitting corrections for last week's many evaluations.
 Remember, you cannot pass this course
 if any of your grades are 75% or lower. If any of your assignments are 75% or lower,
 if any of your assignments are 75% or lower.
 And some of your assignments are lower than 75%.
[00:18:17]
 So I suggest you get that taken care of as soon as possible.
 Because otherwise it starts piling up and when they
 pile up you get stressed out. So if you don't want to get stressed out, take care
 of things as soon as possible. Okay, that's enough for announcements unless there's any questions. We're going to move on to the review.
 Yes, many evals, they are assignments.
[00:19:02]
 Remember, many evals is just like a full evaluation, but
 broken up into smaller evaluations, so you need 75%. So for all assignments, so
 many evaluations are assignments, because an evaluation is an assignment.
 You get scored on these assignments.
 So many evaluations and capstone assignments,
[00:19:32]
 you need 75% at least for all of those. The standard meetings, as long as you did your standard meeting, you got three points for it.
 Yeah, the standard meeting before.
 You got three easy points for it, but the mini evaluations, they're
 obviously a lot different than the stand-up meetings longer, more detailed.
 So yeah, make sure you have all your points at least 75% for your assignments.
[00:20:31]
 And I think you should try to get the highest grade you can, you know, just for your own knowledge
 and, you know, to challenge yourself to do better. But we're going to do the review now. So last Saturday was, you know, the last day of our AWS theme and we talked about AWS S3 and that's the four simple storage service. That's why it's
 called S3 because there's three S's right here, S S simple storage service and one of the words that you'll see related to S3's is bucket.
 Think of that like a hard drive or disk drive.
 And you'll see objects think of those as files, but they just call it object.
[00:21:41]
 And buckets think of those as hard drives.
 Then I showed you how to create an S3 bucket or think of it I can disk drive or hard drive.
 I think it's mostly like a disk drive.
 There's a difference between the hard drive and disk drive.
 Hard drive is like the actual,
[00:22:11]
 like the actual piece of hardware,
 by hard drive, because it's hardware.
 So I think S3 is more like the hardware,
 like the think of it like a huge hard drive,
 think of S3 as a huge hard drive.
[00:22:30]
 And then this drive are like, you know,
 like you can see C drive, D drive,
 E drive, Z drive, and like when you go to your computer
 and you see these drives, that's what a disk drive is. So hard drive is
 the hardware. This drive are the letters that you see in your computer and usually
[00:22:56]
 it's a C drive, but you might have, you can have multiple letters. So C drive, A drive drive B drive.
 So when we created an S3 bucket,
 we set up the bucket name for this drive name.
 Actually, no.
 Yeah, this drive for we set it up as sandbox level four. So instead of a disk drive being like just a single letter, you know, see drive, a drive,
[00:23:33]
 be drive, we can just, we can assign a, a full name to it.
 So that would be sandbox level four.
 And it's pretty simple because as long as we set the name to sandbox level four, we just leave all the other settings as default and then we create the bucket.
 So let me try logging in and just let me get that loaded up first.
 And we created the sandbox level 4 bucket.
[00:24:16]
 Still loading it here.
 Almost there. Can I share my screen now? Okay.
 Okay.
 S3.
 So in the S3, we created the sandbox level 4 bucket.
[00:25:01]
 I called mine temp because I already had a sandbox level for that I was
 experimenting with.
 And we should also have notes. So let me see, let me load up the notes for AWS.
 You should have notes like this or your S3 bucket. So then next time when you create another S3 bucket, you'll
 know that it's pretty simple to create one because there you'll get a lot of
[00:25:58]
 options when you try to create an S3 bucket. When you try to create a necessary bucket, you get a lot of options.
 And you have more options here. So, all you need to know is just put a name here and then
 create. Even though there's all these other options, you don't need to worry about those right now
 Next we put objects in the estuary bucket objects remember our files, but they just call it objects work
 with the s3, okay
[00:26:53]
 So we created a folder called front end and in that folder we put index.acml and we created the disk folder in the front end folder. And then we put in there main J.S. Everything else,
 we left it as default. So here's a, I'll show you the file structure. So there's the sandbox level 4 bucket, or think of it like this drive.
 It has the front end folder.
 If I click on it, I see that the front end folder has index HTML file.
 And it has the disk folder. And that this folder as actually, I put all the files in here, but it's
[00:27:54]
 able to run with just the main JS main.js. The map here is only used for debugging, which you don't want to need for something that's deployed live,
 because if your customer is doing your website, you don't want the website to stop on
 a debugger.
 So I can actually delete these.
 All you need is main.js.
[00:28:30]
 From the image, the, you have to confirm it.
 So now I just have the main.js file in the dist folder.
 And that's all that's all you need to deploy your fun and website index HTML and all the code that's bundled in main.js.
 And okay, before I go to this Cloudfront, let me just point out something here. So when you're creating a folder,
 you can put in the name here, but you have some other options.
[00:29:32]
 You would leave that as default
 and just create the folder.
 And then when you're at,
 when you want to upload a file,
 you can add a file. We didn't add a folder. If you add a folder, it's going to
[00:29:50]
 add everything inside of that folder. What we did was just select specific files and and sandbox level for front end.
 So the files that we selected was just the index HTML.
 Even though this is my local front end folder,
 as all these files, all we need is index.html.
 So something like that, just click it.
[00:30:24]
 And then there's other options here.
 Just leave these alone, leave them all as default, and then just click upload.
 Okay, that's what I'm just going to cancel this.
 That's what it's meant here, by leave all upload settings as the
 alt, and then we talked about AWS Cloud Front, which is a service that
[00:30:59]
 distributes or copies your S3 objects worldwide. So remember S3 objects or your files,
 your front end files. Your front end files are in the S3 simple storage service.
 You can't deploy from that directly, but then it's just going to be in one place.
 Go and if it's your going to deploy, if you're going to deploy from the S3,
 you can't set up like SPA stuff. You need CloudFront to distribute the the files or your front
[00:31:37]
 and all around the world, more specifically North America and Europe. So that when people want to see your website,
 it'll just load the copy that's closer to them,
 and it loads faster.
 That's what CloudFront does.
 It's distributed to your files all around the world.
[00:32:01]
 And your website loads faster,
 because the files are physically closer to the user.
 And since there's multiple copies of your files going all around the world,
 if one of the cases where it's stored goes down,
 another one that's close by can provide the files.
[00:32:24]
 Another one that's close by can provide the files.
 And with CloudFront, you can configure which folder and file to render for your website.
 So we eventually told CloudFront,
 we want to render the folder, the front and folder.
 And we eventually configured CloudFront to serve the files as if there were
[00:32:51]
 SPA, single page application. Just like we've been doing with Webpack Dev Server and live server.
 We have to configure it for an SPA, because SPA is low differently than multi-page websites.
 And they're called distributions, but you can think of them as deployment.
 If that's how, if it's easier to understand, you can think of it as an deployment,
 but they're called distributions in front because your files get distributed, distributed everywhere.
[00:33:38]
 But you can also think of it as your deployment. So if we, if I load up
 CloudFront
 I have
 some distributions,
 some things I was trying out.
[00:34:07]
 These, think, but, you know,
 they call it distributions,
 but think of them as deployments.
 So in this case,
 I wanted to deploy sandbox level for temp.
[00:34:19]
 I have a deployment for sandbox level for, right here,
 or distribution also.
 All the distributions.
 And when you click on it, that's where you see tabs and you see information.
 This is right here is the website address of where it's deployed.
[00:34:47]
 Can just type it in.
 Oops.
 I think I found this other one and we load up the temp here.
 This one is temp.
 This is the one that was working properly.
[00:35:03]
 That we worked on last week on Saturday.
 So the notes, let me see, did I, would Slans yet? Yeah, okay. So for distributing them,
 Let me see, did I, it slides yet? Yeah, okay.
 So for distributing them,
 we need to set up a origin domain.
[00:35:34]
 Basically the origin domain is,
 where do you want the files to come from?
 That's why it's called origin,
 like where something comes from.
 And the domain is like the link, like the URL link to your S3.
[00:35:54]
 So origin domain.
 So if you can't figure out the meaning of this, just by the words, and I suggest you
 write it down, origin is where your files are coming from. Domain is the link to
 that origin. So let's see here. Here you can load it up and see the origin.
 So there's the link to my sandbox level 4 or temp. That's the link.
[00:36:34]
 That's the origin domain.
 That's where the files are coming from.
 That's where the files are coming from. That's their origin.
 Then origin path.
 We set up the origin path.
[00:37:01]
 That's how we specify which folder we wanted to deploy from,
 or which files that we wanted to distribute all around the world.
 And it's going to distribute the files that are in the front end folder.
 We had to put web application firewall.
 We have to set it as do not enable.
[00:37:28]
 You have to choose either enable or do not enable.
 And you don't want to enable it because you don't need it.
 Because if you do enable it, you'll pay extra.
 You only need it if your website gets a lot of traffic and you might
 your website is under risk of getting hacked or like a target for getting hacked.
[00:37:53]
 And maybe if your website is already like a up and running business, you don't
 want any hackers to be able to get in there in
 Hackett. So you would enable web application firewall because your websites are already making
 money. So paying for this wouldn't be a problem. But for now, our websites are just for testing
 our websites are just for testing and personal the personal projects so we all need that so go and enable it. Price class we set it at to deploy in North
[00:38:37]
 America and Europe because if you try to deploy all around the world, which was the other choice, then you could get charged more.
 But again, you won't get charged if you're just doing personal projects that barely get that much traffic.
 You'll get charged if you get, you know, a lot of traffic going to your website.
 you know a lot of traffic going to your website. And you'll get charged more if you're deploying it all around the world
 instead of just North America and Europe. And we want to set the default
[00:39:18]
 route object to index HTML. That's that's one they load up your website and and the root path like that is just a slash it'll automatically load the index
 HTML. If you don't set if you don't set this part right here. If you don't set the default root object to index HTML,
 you need to manually type index dot HTML.
 And then if you manually type it, then browser router will know what you're talking about
 because there is no route for index.html.
[00:40:09]
 If you look at your browser router, you see your routes, right? And you see index for route, maybe contact page, about page,
 but you don't see a route for index.html.
 So you might get an error like this.
 See, because there's no route for index.acml.
 But if you set it up so that it loads from the tier, the default root object, then it will work properly. And then, yeah, we told CloudFront that we
[00:40:54]
 wanted to load. We wanted to distribute those files in the front end folder. We
 wanted to distribute those in North, all over North America and Europe. But Bob Run didn't have access to the S3 bucket
 or that sandbox level or hard drive. So we had to give it access and follow we had to follow these steps.
 We had to follow these steps. Basically, in the Origins tab, so you have, right here, you have the Origins tab.
 And there you would select your origin, which was sandbox level 4 and edit it.
[00:41:46]
 That's how you can get permission.
 And then, um,
 either it took a while to load.
 You had to pick origin access control settings.
 So this is, if you just look at the words carefully, origin.
[00:42:07]
 That's the S3 bucket. access, you want access to it, and control.
 This is, are we going to control the access?
 And we also see that it was recommended.
 And we see here bucket can restrict access to only cloud front.
 So these are all crews that tell us, "Hey, this is how you're going to get the connection
[00:42:31]
 between cloud front and your S3 bucket."
 When you do that, you can create origin access controls OAC here
 It's basically just a JSON file and it it gives you the
 It gives you
 It provides the instructions on how to provide on how to control access. It's a JSON
[00:43:06]
 JSON file or JSON string.
 When you do this, when you pick this for the first time, you have to remember to save the changes.
 That's what I forgot to do the first time.
 So pick this first, create a new OAC.
 It'll just go with whatever name it does that it gives you and then save the changes and then you can
[00:43:31]
 Go to your s3
 Pick the s3 so that was
 For me it was level 4 10 and
 Then permissions For me it was level 4 temp. And then permissions.
 That's how you give permission, right?
[00:43:48]
 Permission to access.
 So naturally you would go through the permissions tab.
 And you just have to remember it's the policy that controls the permissions.
 We edit, we click on edit and then we paste then we paste the permissions here, which is basically
 just this JSON. Basically this JSON describes that we want to allow the Cloud Front,
[00:44:29]
 the cloud front, the ability to get an S3 object.
 And remember, objects are files in S3. And this was the link to the S3 right here.
 This was the link to the S3 right here.
 I mean, this is the name of the distribution that we are giving, or this is the link to the distribution. The CloudFront is the link to CloudFront. Your distribution or the deployment. There's the link and it's telling the S3,
 hey, this guy, this distribution has access to the files in this S3.
[00:45:21]
 Okay, so we pasted that in,
 which gave it permission.
 And then we were able to render the website using that distribution domain that I
 pasted into the browser.
 And the homepage.
[00:45:42]
 It should load your homepage page and the navigation should work, but then the
 root and loading anything else other than the root shows access denied. That's because
 it wasn't set up for SPA. So then we had to set it up for an SPA.
 SPA settings for AWS CloudFront distributions.
 So remember when it's not set up for an SPA, it's 404 error.
[00:46:19]
 Or not found.
 But in this case, with CloudFront and S3,
 you get a 403 error, which is forbidden or access denied.
 So we had to adapt that.
 So what we wanted to do is basically, when we get that 403 error or access denied error. We wanted to load the index HTML file
[00:46:50]
 and just override it and say, "Okay, there was no error."
 Never mind, there was an error.
 Provide the 200 status code.
 200 means, "Okay."
 403 means forbidden or access the nine.
[00:47:05]
 So we change that instead, okay, no, there's no problem.
 But we're just, that's, it's supposed to be like this.
 We want to load the index, ATM mile and we want to load index,
 ATM mile file and it's totally okay.
 All right, so let's see what else.
[00:47:32]
 And we had to invalidate.
 We had to tell a confront.
 Hey, we've made updates to our front end. You need to go out there and
 invalidate all the files that you've already distributed because now they're old. Those are the
 old version. We've just updated new versions of the front end. So we had to trigger a like a refresh.
[00:48:07]
 Cloud front had to go back to the S3, get the new files,
 and then distribute those all around the world.
 And the way we trigger that is with an invalidation.
 Basically, we're telling Cloud front, hey,
 these old files are invalid.
[00:48:27]
 Go back and get the new files and distribute those instead.
 So in CloudFront, I'll show this right here.
 Click on the distribution.
 That means to redistribute the files.
 Here's invalidations.
[00:48:58]
 That's where Intel CloudFront pay.
 The files are old.
 Time to replace them with the new ones. So you create invalidation, and you can specify which file you want to
 replace, like maybe you just want one file, so that would be main.js, maybe that's
 the only thing you most likely that's the only thing we're changing.
[00:49:23]
 Main.js. We're not changing the HTML file that's usually just once that we're changing, main JS.
 We're not changing the HTML file.
 That's usually just once we set it, we forget it.
 Same thing with the, actually there's only two files we're using here at index
 HTML and this one, the main JS.
[00:49:37]
 So we could go like that or we could just put, hey,
 just replace all the files.
 That way we don't have to worry.
 Just in case we make changes to that HTML file,
 at least the file front will take care of it.
[00:49:54]
 But if you just put here just main,
 it will only replace main.js.
 But if you made changes to the html file it will not update
 those unless you tell it to and the easiest way to do that is to say hey just
 replace all the files that's what the star stands for. Just a wild card that
[00:50:17]
 means everything all the files in the s3 files and S3. We had to create that invalidation for the changes to take
 place after making changes to the front end. And you see what's the next slide here.
 Okay, so we can take a break. I'm gonna go over how to deploy by CLI after the break.
 And let me get a break timer. Going here. Okay, I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, just waiting for the files to load, slide the load.
 Alright, so we're back from the break.
[01:02:06]
 And I'll start our new AWS topic. It's just one, which is how to automate the deployment from the CLI.
 So last week, we learned how to deploy the front end of our sandbox level four to Amazon S3 and
 upfront we did that all manually by going through the console clicking on the
 buttons but now we're gonna now that it's all set up all we have to do is just push files to the S3 and invalidate files and then that should
 that should basically, you know, deploy a file once we can once we know how to do that through the
[01:02:56]
 CLI that'll deploy your front end. So when I am attach policies to the CLI user,
 pull access to S3 and CloudFront.
 So we made a user for Lambda, if you remember.
 That was the user that we used to deploy the back end to Lambda.
 We used to access key from that user. through the steps here.
[01:04:00]
 Going to the AWS notes, going to paste this in here. We're going to automate the deployment.
 We're going to automate the deployment.
 Let's see here, here's some code. This is the code.
 And this is also full code.
 All right, so I'm going to run through this.
[01:04:31]
 Alright, so going to run through this, we'll look at the, let's look at our user, our CLI user in IAM, identity, access management.
 IAM, you can, you might have an icon for it, or you can or if you don't have that icon, you can just type "I am" and it should be there.
 And you should look at your list of users here.
 And the one that she used for
 vlogging to CLI.
[01:05:19]
 It's going to be called lambda. I got which one I used. Well, I just picked test. You need to add
 permissions to it. So right now you might just have, so I clicked on the user,
 right? I clicked on my lambda user. It's only has console CLI access.
 It doesn't have access to this kind of console,
 like with the icons and everything.
[01:05:51]
 It only has CLI access and has some access keys.
 By the way, I'm not using this access key.
 It's never used.
 is never used. So your lambda user should have dynamo DB access and lambda access. Now you want to add some access to, would you want to add access to, you want to add access to the S3 and CloudFront,
 so grantful access to S3 and CloudFront,
[01:06:31]
 do that by attaching policies.
 So go here and permissions.
 There it is. It says attach policies.
 You want to attach them and then search for it.
 So I'm looking for S3 permissions.
[01:06:55]
 There it is.
 There's S3 full access.
 So I'll check that one.
 The other one was CloudFront.
 So I want to give one. The other one was CloudFront.
[01:07:05]
 So I want to give full CloudFront permissions.
 There it is, CloudFront Full Access.
 Basically, these are just JSON files
 that provides instructions on what type of access to give.
 But don't worry about that. Just click on the description or
[01:07:30]
 this pay attention to the description.
 Found front full access and then the other one was
 S3 full access. Click next. After you checked off those two and then you'll see a summary.
 See, this is a summary of what I just added.
 Amazon S3 full access.
[01:07:53]
 Cloudfront full access.
 So let's add those permissions.
 So you should see here that your Lambda user, you could create a separate user for your
 front end.
 Basically our back end was Lambda.
[01:08:18]
 You could make a separate one, but then you'll have to log in with a different set of
 API keys every time. but then you'll have to log in with a different set of APITs
 every time.
 So maybe I could rename this to a full stack user
 for a CLI user.
[01:08:37]
 Might be better, more descriptive.
 Now that we know that it's gonna use a CLI for DynamoDB, S3, lambda, and
 front-end, you can rename it to whatever makes sense.
 So let's see if I can rename it here.
 If you can't rename it, then you might just have to just make a new user.
[01:09:09]
 Yeah, let's see.
 If you want to make a different user with a more accurate name, like full stack or CLI
 user, I think that's the only way is create a new user for it.
 But right now it has access.
 right now it has access and now let's look at the AWS CLI documentation.
[01:10:14]
 A lot of options here.
 The one we want to pay attention to is S3.
 Let's do S3 first.
 So I'm just going to look here for S3 because that's what
 I want to control right now. I want to access S3 with the CLI. So I see the documentation for it.
[01:10:52]
 If I keep scrolling, I can see the different options.
 The one we're looking for is CP.
 That stands for copy.
 And there's other options here like move this remove.
 But we need CP that's for copying files.
[01:11:13]
 We're going to copy files to the S3.
 So I'm just showing you this if you want to see the full documentation and you want to see what other commands are available to you.
 So how do you use the CP command or the copy command?
 Let's see if you can see an example here.
 here. Here's an example. I scroll all the way down to the example area., CP, the file that you want to copy to the S3, and then you provide the link to the S3 and the name of the file that you wanted to be in the S3.
[01:12:37]
 Okay, so, but in our case, maybe you don't want to just copy a file.
 Maybe you want to copy a folder and
 everything inside of that folder.
 Let me see if it has...
 Here it is.
[01:12:54]
 How to do it for a folder.
 AWS is the command and S3 is one of the parameters.
 Cp is the other parameter.
 This is where you put your folder.
 So the folder would be the disk folder, usually.
[01:13:11]
 And then we specify the folder in the S3.
 So it's going to be the link to the S3 and then front end.
 And then we need specified recursive. We
 don't need this one because we don't need to exclude anything. So there that
 gives us an idea what we need to do. So here's that command, AWS S3 CP.
[01:13:47]
 For copy.
 There's that this folder.
 You need to provide the link
 to your S3 front end this folder.
 So how do you get that?
[01:14:14]
 Go to your S3 here. You might have it up here already, or you can just search for it.
 If you click on your S3 and then you click the folder that you want to upload to. So I'm going to go to the front end folder here.
 And it's just smaller. That's only like an access. So front end and I want to put things into the disk folder.
 put things into the disk folder.
 Because I'm not changing index 8, so now I'm just changing
[01:14:49]
 the inside of the disk folder.
 I see here this folder. I can see here copy S3 URI.
 I didn't put that in the notes here. So, you might want to take a note on how to do this.
 Basically, go to the folder that you want to copy to and then copy the S3 or I.
 That's going to be part of this command.
[01:15:29]
 So I would put it here.
 The S3 URI builds here.
 We need to paste it here.
 For me, it's dash temp, but then yours might not have that. And then you need to add dash dash recursive.
 There should not be a space there. Let me fix that.
[01:15:58]
 And there should not be a space here. There should not be a space here.
 here there should not be a space here.
 Okay so it looks like this. Mass-das recursive so my website looks like this right now.
 It has hello world there.
 I'm gonna change it here.
[01:16:27]
 Open the button project. And I'm going to start the server here so I can see what it looks like locally and
 PM start.
 Okay, so the server has started now. I can look at my website.
 The way it looks here on my local machine.
 So it has a little world on a change that.
[01:17:18]
 So I'm just going to remove.
 I'll just put it. I'll change it to amazing road.
 If I look at the website now, this is local, amazing road, it says local host.
 I want my website on this one here in the
 conference to show amazing world. The first step is to use the CLI.
[01:17:58]
 I'm going to open up the terminal here. It's like I'm using CLI.
 I'll use the CLI here.
 And I'm gonna put in that command.
 Right here.
 So this will copy my disk folder.
[01:18:20]
 Actually it's not gonna live on work
 because I didn't build it.
 Right, I'm using Webpack Server right now.
 Look at this command is Webpack Server.
 Remember it doesn't build any files.
[01:18:37]
 If you want to build files, you run whatever build command you have.
 For me, it's in this script.
 Maybe you're just typing your build command manually.
 It's easier if you just put it onto the script,
 and you don't need to remember anything else,
[01:18:54]
 except that you could always use the build script.
 My build script builds it in production mode.
 Right here, production mode disables the debugger.
 And it also compresses the files so that they're smaller.
 And when they're smaller, they load faster,
[01:19:16]
 or they can be uploaded to your customer a lot faster.
 So I've been built in my just folder is different now.
 The main JS has changed.
 Now I can use that AWS command to copy my disk folder to use nbox level 4 temp, just holder.
 And you need to put recursive, otherwise, and what more.
[01:19:49]
 You can try it with and without recursive,
 you're not going to break it,
 but basically, whenever you're working with folders,
 you should be working with cursively.
 Oops, not basically. You can go to the front end, [BLANK_AUDIO]
[01:20:10]
 Here, if all works properly,
 then it should copy the files to the S3.
 Actually, I'll do this, I'll delete it from my S3 first.
 You don't need to do it, I'm just gonna do this, I'll delete it for my S3 first. You don't need to do it.
 I'm just, I'm just gonna do it.
[01:20:28]
 So, no for sure that it's been uploaded.
 You don't delete mine first, my main J.S.
 This is in the disk folder.
 Gonna delete that.
 You don't, again, you don't need to delete it.
[01:20:52]
 I just wanted to delete it so that you can see that it's gone and then the CLI will
 put a mainjs into here.
 Okay, so this is the best folder has nothing in it.
 I'm going to run this command.
 Okay, so that's it.
[01:21:22]
 So as it didn't, so I'm just just gonna go and check if everything works fine if everything works fine
 I can just refresh this here and
 It copied my whole this folder
 Instead of just main j-s because I I told it to copy the whole this folder
 the whole this holder. Actually, it's probably better to just copy the main JS because that's only 300 kilobytes whereas this text is, well that's
[01:21:55]
 one kilobyte. The map is big. That's 1.5 megabytes. Probably don't want to include that map.
 So you can edit, you can edit. The drop back is, you know, if you include that map,
 you can exclude it, just like we saw here.
 You can exclude the map file.
 You can do that because sometimes you'll have asset files in this folder and you want
[01:22:31]
 to copy those over. the map file. And then we'll get here in the notes.
 Next, we would follow map files. Okay, we're gonna try that again just to make sure it works.
 Let's go back to here the S3. We need everything in there just to make sure.
 just to make sure that they got uploaded properly. Now I'm going to run that command with X-
 delete.
[01:23:37]
 Because I don't want that map going there.
 It's too big.
 I mean, it's just one one megabyte but then that's one
 megabyte save that didn't have to go to distribution. Okay so I'm now
 I'm gonna try it with the X2 flag. Okay so that looked like it works. I'm gonna refresh this and there it is.
[01:24:15]
 It's just the main JS and this text file, which is that's okay. It's this one.
 This is one code by, but you could also exclude that.
 You can also exclude the text file if you want.
 So I think I'll stick with this.
 Looks good.
[01:24:34]
 If I refresh my website, it's still going to say hello world.
 Why is that?
 It's because CloudFront doesn't know that I've changed the files.
 It's supposed to be amazing world.
 CloudFront doesn't know I changed it.
[01:24:52]
 Do you remember how to tell CloudFront
 that I changed the files?
 You do that with
 invalidations.
 So I'm going back to the documentation here.
[01:25:09]
 I'm going to go back and look.
 There's S3.
 I'm going to scroll up and look for CloudFront.
 So we can see the commands for CloudFront.
 There it is. I see a CloudFront.
[01:25:27]
 I can look for the commands in there.
 What do I want to do?
 There's the thing about invalidation.
 Create invalidation.
 That's what we want to do.
[01:25:41]
 There's a lot of commands here.
 See a lot compared to the S3.
 The one we were focusing on is created in validation. You can see the options here.
 And maybe you could just look at an example.
 Let's see. It's controlling. It's scrolling.
[01:26:02]
 Let's see. Let's see.
 It's going.
 It's going.
 All right.
 So here is here it is, AWS, and then CloudFront, and then create invalidation.
[01:26:14]
 Don't worry about these lashes.
 They just mean everything should be on the same line.
 We need to provide a distribution ID.
 So that's the ID of your distribution or
 in deployment. If you go to child front, you can see the distribution ID says here ID.
[01:26:47]
 Just pick the one that's the right one.
 So for me it's this one, I can just click on it and they'll still show up right here at the top.
 That's the distribution ID.
 I would paste that in.
 I'll paste that into here. You should put your own distribution ID.
[01:27:19]
 And then, looking at this documentation, hands. So remember when we created an invalidation,
 there's this one, object hands.
 So again, you can put just one file, like this main.js.
 That would be your path.
 Or the easy way is just all files.
[01:27:46]
 Just replace all, remove all the files.
 So that's what that looks like.
 It's a slash and a star.
 But when you're specifying it, you need to have quotations around it.
 See there's quotations here.
[01:28:09]
 Otherwise, it won't work.
 And you can experiment with and without quotations.
 So I'm just going to copy this now.
 It's basically going to tell CloudFront,
 it's renew all my files. We distribute them.
[01:28:32]
 Go to S3, get the files there, and redistribute those, because I've changed those.
 I paste it here. If this works, we should see the updates.
 This should say amazing world.
 Okay, so it gives me a list of information here.
 I can just press space bar to get to the end of it.
[01:29:03]
 And it doesn't look like there's any errors.
 Let's look at this part here.
 And we go back to this distribution.
 It might say that it's in progress.
 It received the invalidation here it is.
[01:29:22]
 And it's in progress right now.
 I'm in invalid progress right now. I'm in validation right here.
 So I just need to wait for this.
 Then when this is done, we should see amazing world
 instead of the world.
[01:29:37]
 I mean, it might be already updated.
 But I'm just gonna wait for this.
 Okay, we'll keep seconds.
 Let's see.
 Okay, still the update.
[01:30:01]
 So I need to wait for this.
 In progress, if you're going to buy a refreshes page, it should not break it.
 If I refresh this page and I want to make sure it's just not stuck.
 Yeah, it still says it's in progress.
 We have to wait for this.
[01:30:32]
 I'm on, we have some time we can take a, I can move on to the next topic.
 Oh, actually, let's do this first.
 Let's add NPM scripts.
 We're just going to assume that these work.
 So let's add the NPM scripts.
[01:31:10]
 So I'm going to go here to the package JSON.
 And this is the front end.
 I'm going to start a deploy script.
 Get push.
 Do I want to put get push on it?
[01:31:31]
 Probably not.
 I'm just, I'm going to erase this for now.
 So what command do I want to deploy?
 I'm going to split this up into sub commands here or subscripts and I'm just going to put a separator like this.
 So what is that subscript? First one is S3 upload and I'll upload it to s3
[01:32:11]
 And I'm going to copy the command for that
 Remember you should be using your whatever link you have for yours
 Right there right there. So that's what I want to do for uploading to the S3 upload.
 And I want to do something else.
 What is that something else?
[01:32:52]
 I want to invalidate files. Or you can call it trigger refresh.
 Because when you think of invalidate files, it might, you know, can fuse you. Maybe here, refresh, refresh, cloud front.
 Or cloud front update.
 Whatever makes that scene, update cloud front.
 Maybe that makes update cloud front.
[01:33:44]
 Makes sense. But remember, it's an invalidation that's your triggering.
 Okay, and I'm going to have to change the quotations here.
 I'm gonna have to change the quotations here.
 So on the outer quotations, I have double quotes. And then the one around paths,
 I just put single quotes, otherwise they conflict.
[01:34:17]
 If I put double quotes for everything.
 So that's the two things I wanna do.
 I wanna do NPM run S3 upload and NPM run update
 conference.
 Let's see.
[01:34:44]
 So that's basically my script for the point.
 Let me see if this is, oh, it's still not done.
 It's taking a long time. Okay, there, it's done.
 It just got stuck there.
 So if I refresh this it should say amazing world.
[01:35:07]
 And right there it is. I have to press shift control R to do a hard refresh. Shift control R. Otherwise if you're if you're refreshing and
 you're thinking, "Oh, I don't, I don't see the changes." You could just load it in
 the private window or in copy your window and then that's the same thing as a
 hard refresh. But remember, hard refresh is control shift R. I'll put it here in the chat control plus shift plus R.
 That's on the Windows machine.
[01:35:54]
 I don't know for a Mac, but this lookup hardware refresh.
 The regular refresh is just basically you just reload the files that are saved in your browser.
 Hard refresh means get the new files from this website and load those instead. Okay, so we see that it worked.
 I'm gonna change this again, and I'm gonna try my deploy script.
 So I'll change the, and a nice day.
[01:36:54]
 And as usual, I need to be built because I've made changes.
 And if I want to push upon those changes to apply, I need to build them.
 Because when packed live server doesn't build your files, it just renders them.
 Okay, so I've rebuilt them.
 If everything works well,
[01:37:25]
 I should be able to run this before I script.
 And let's see what happens.
 So I'm supposed to upload things to the S3
 and then it's supposed to update CloudFrot.
 Okay, so there's an error here.
[01:37:50]
 So it doesn't like these single quotes.
 So I need to...
 Let's see if I can...
 Take a snap. Maybe if I reverse them, I reverse these.
 Have double quotes here.
[01:38:21]
 Is it like that? No.
 J-SOT files don't like the single
 quotes on the outside. Jason only wants the double
 quotes on the outside. So we have no choice but to use the
 skate characters. The skate characters is just the
[01:38:39]
 slash right there. It escapes and says use this character right next to it. I have
 me to put another escape character here. Escape, it basically escapes and says
 put a double coat here and escape here and put a double quote there. But don't
 actually use those double quotes for don't actually conflict those double
 quotes with these powdered quotes. So basically I used the escape characters
[01:39:21]
 there. So I'm just gonna rerun that deploy script.
 It's okay if it's gonna write to the S3, the same files.
 That's okay.
 Okay, it looked like it worked.
 I'm gonna use those escape characters.
[01:39:48]
 If I go back to here and I refresh, I should see an invalidation running.
 It's done already.
 It finished.
 Okay, let's see.
 Okay, so it's having a nice day.
[01:40:12]
 I didn't even have to do a hard refresh there.
 It's having a nice day.
 So that worked.
 So I'm going to, I guess I'll put it here in the notes at npm scripts and then to those npm scripts
 Actually, let's see how to I just put some bullet points down
[01:40:40]
 Hard refresh
 Is control hard refresh is control plus shift plus R and escape characters.
 Or the escape character. That's this slash there.
 So I need to put it here.
 Actually, this is the command.
[01:41:21]
 You don't need to put escape characters in the command but in the script you need to.
 I'm going to put a note here.
 Hard, use hard refresh to reflect website updates basically that just redown loads the files
 I need a lot of models.
 Use the escape character or your
[01:42:22]
 end-game scripts for your NPM scripts, for NPM scripts that require double votes in them. Okay, and I'm pretty much almost used up the whole thing. I didn't get to get into the
 Redux. Let me see, let me see if I should even get into it.
 to it. I have to get into three slides. I can think, yeah, I think I can do those three slides as an introduction. Yeah, I'll do three slides as an introduction to Redux right here
 introduction to Redux right here before the next break.
 So Redux, we're going to start a new set of notes for Redux.
[01:43:40]
 Redux.md. All right. So Redux. That's that MD.
 All right, so Redux.
 What is Redux? So Redux is a JavaScript framework.
 So it's still JavaScript.
 You know, like React is a JavaScript framework.
[01:43:55]
 It's React is still JavaScript,
 but it's like a JavaScript you've never seen before.
 It's like it has all of these rules.
 You need to use these functions, these objects.
 So that's what you mean, that's what we mean by a framework. It's a set of functions and rules.
[01:44:14]
 That's what a framework is. It's a set of functions and rules. But Redux is a framework where I set a function in rules for managing state variables.
 Okay, so let's copy this.
 Because we need to learn how to manage state variables.
 Right now it's pretty easy because our project is small.
 But then when you work for a company, they will have a big project.
[01:44:52]
 And most likely, they'll be using some kind of state management framework.
 Like Redux, which is the most popular one. We're going to use Redux to manage state variables. the new set of notes for Redux, MD.
 This one, the H1 will be Redux.
 I'll put this part on an H3.
 I'll just rename this to what is Redux.
[01:45:55]
 Okay.
 So in Redux, state variables are stored in a central location instead of individual components.
 So, you know, how you had state variables in your component, like in a home component or a contact component,
 or a about component, though your state variables were in there.
 You made those state variables were in there. You made those state variables inside of there.
[01:46:31]
 You can see those state variables were created there.
 Well, with Redux, state variables are stored outside of your component.
 So instead of your state variables being created
 inside of your home component or contact component or
 about component. Redux will create them outside of those and whatever component you have like the
[01:46:57]
 home about or contact they will have access to state variables in that central location.
 to state variables in that central location.
 By doing that, it eliminates the need for parent components to pass communications to callbacks,
 communication callbacks to children.
 So remember if a child component wants to communicate
[01:47:21]
 with its parent component, the parent had to give it a call back.
 So here, let me show you what I mean, or let me give you a refresher.
 Here, remember, we're going to review communication between parent and child components.
 So we have the assign an area that was the parent component.
 It had these two children components. Sign in model and sign out model.
[01:47:56]
 And we had to pass in callback functions. These are callback functions.
 You know it because they're yellow,
 and there's no parentheses next to them, meaning we're not activating them. We're just passing them in here.
 This is the way for the child component like sign in modal is the child component.
 It has to use this callback function to communicate with a parent component,
[01:48:28]
 which is signed in area. So let's copy these notes here just so we remember what we did before
 what we did before and what we will start doing moving forward because we're gonna go away from this pattern. We're not gonna communicate, we're not
 gonna establish communication between parent and child this way anymore.
 I'm going to share my screen. Nice to note in here. Okay, so let me just put some hind lights around these.
 And I should probably put that like a code demo right here.
[01:49:47]
 I'll do that later.
 You saw it there on the screen.
 Sample code, I'll put that later.
 So we saw that a callback function is passed.
 So the child component can communicate with its parent. So sign an area, that's the parent, right?
[01:50:08]
 That's the parent component that passes all-back functions to its children.
 And I guess I'll start typing those. So there was sign in area, a signed in model, signed in model, and there was And they had on sign in at equal to something.
 And this one had on sign out.
 So usually that's a handler, right?
 Because when you have on like on submit on click, you have a handler for it. A handler is a function. In this case, it was
[01:51:07]
 a handle signed in. The other one was handle signed out. And these were children of sign in area.
 It wasn't exactly like this, but it lets you know that they were children of sign in area. So, cyanide area provided these callbacks.
 Cyanide model, that's a child component that activates the callback on cyanide.
 So cyanide model activates this callback when there's a sign in.
 Sign out modal, it activates the callback when there's a sign out.
[01:52:10]
 Here it is, the sign out modal activates the callback, this callback on the sign out.
 So, the purpose of the callback is to change a state variable in the parent component.
 Do you remember what this call back did? It just basically changed
 one of our state variables. It changed is signed in. So, signed area is signed in.
 This one changed is signed in to true. This one changed is signed in to false.
[01:52:52]
 That's how we communicate with, that's how the children communicated with its parents by changing the state variable with a callback function.
 with a callback function.
 Okay, and then now get this one.
 This is how Redux changes that
 or
[01:53:21]
 redoes it.
 So that's why it's called Redux. It's like redo, that means redo.
 And it's redoing the way we use state variables and redoing the way we communicate between parent component and child component.
 We see that the parent component can access central least stored
 state variables and the child component can access
[01:53:51]
 central least state storage state variables.
 So sign an area how to state variable called is signed in.
 Well, the child component can go in here and then change it and say, "Is signed in equals
 two?"
 Then the parent would know.
[01:54:11]
 Or the child component can change is signed in to false and then the parent would
 know because they both have access to this.
 There's no more need to pass and call back from the parent anymore.
 So let's copy that and paste it into the notes. And you see it's this same, okay, that's a different one, that's a new slide.
 I don't have a picture that I'm going to paste in here yet.
[01:54:55]
 I guess you guys can can paste that picture in there, in here to give you a visual.
 Again, the state variables are essentially stored.
 Child component can change the state variable that the parent uses,
 and even the parent component can change state variable
 that the child uses.
[01:55:24]
 So parent and child components can communicate with
 centrally stored state variables instead of callbacks.
 So that's how we're gonna redo the way work with state variables and that
 should be enough for today. We're going to start the break. Then
 we're going to get into many evaluations.
[01:56:03]
 I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And in the third hour, you have a chance to work on your assignment or any of the practice
 problems. Again, look up your practice problems on the sidebar of your
 codecs account. But here, I will post the recent assignment, which is
 Calfstone backhand accounts. So this one is due on Thursday. I didn't put it in the announcement.
[02:07:06]
 I should put that.
 This one is due on Thursday before class.
 Capstone back end accounts.
 Now I'm going to start the breakout rooms.
 30 breakout rooms as usual.
[02:07:26]
 One for collaboration.
 One for silence.
 One for many evaluations.
 They will run for let's see here.
 40 minutes.
[02:08:11]
 Oh, I need to assign people to a breakout room because I forgot to do that. Otherwise, you might not see the breakout rooms.
 Okay. So feel free to volunteer in the chat.
 If you want to submit corrections or do the week five evaluation.
 Otherwise, I'll look up the next person in the waiting list. [ Pause ] [BLANK_AUDIO] Okay, so I can do, let's see here. [ Pause ] Okay, so what happened? Yeah. So I can do corrections or Rayline or Chris.
 Anyone want to volunteer?
[02:11:39]
 Many evaluation corrections for Rayline or Chris. [ Pause ]
 >> Okay, so Chris is not going to be available, so how about Rayline?
 Okay, I'll meet with you Rayline and the Mindy Evaluation Room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, let's just, let me conclude the class here.
 I'm just going to conclude the class, and then I'll continue the, uh, many evaluation with Raylon.
 The breakout rooms are back.
[02:49:36]
 So in conclusion, we learned how to deploy with AWS CLI. Specifically, we learned how to deploy to S3
 and deploy through cloud front. And then we got a quick introduction on Redux.
 If you haven't taken attendance yet, you can head over to your code X account.
 You have four minutes to mark your attendance.
 four minutes to mark your attendance.
[02:50:09]
 Other than that, class is dismissed.
 As today's lesson on Redux, I'm gonna open the breakout room
 so I can continue the mini evaluation with Rainlon. Okay, break our rooms are open.
 Okay, Rayline, I'll see you in the breakout roomause ] Okay.

///// FILE: "Level 4/transcripts/Apr 8, 2025 20-48.txt"

Transcript from Apr 8, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 This is week five, day two. And this week's theme is about Redux.
 Today's agenda in the first hour will take attendance,
 do announcements, review the new topics from yesterday, then I'll go over a tip, then in the second hour,
 go over new Redux topics, then third hour, we'll do many evaluations and you'll
 have time to work on the assignment.
 on the assignment. So now is the time to take attendance. Head on over to your codecs account. Mark yourself that loaded for you.
[00:01:38]
 Okay, so remember, if you want to qualify for the on time points for many evaluations, you need to add a submission. So today, if you wanted to qualify for the on time points for many evaluation week five,
 you should have added that submission before class today.
 Otherwise, you automatically missed that point.
 But just because you add that submission, does it mean that you will get that point. But just because you add that submission,
 does it mean that you will get that point? To get that point, you need to do the
 mini evaluation for week five this week. And just to see it again, many evaluations for week five, they're here.
 And these are the questions.
[00:02:41]
 These are from basically two weeks ago. So if you don't know the answers to these,
 then you might be two weeks behind
 because you should know these already.
 Probably explain and demonstrate how to use environment variables to hide access keys.
 I'll probably explain and demonstrate how to use environment variables to hide access keys.
 Well, this one I think was from last week,
 but this one here, this is from two weeks.
[00:03:17]
 And declaration files, that's from two weeks ago.
 How to deploy a folder from JIT Hub, that's from two weeks ago. So the
 newest thing here is about environment variables. I think this one's a pretty easy
 mini eval, but it's not going to be easy if you didn't do this practice, this will be probably the hardest part about it.
 So this one's about about environment variables,
 TDD query practice. You need to be able to explain and demonstrate it.
 Declaration files and deploying from a GitHub folder.
[00:04:15]
 The assignments, we have some closed assignments.
 We have proxy, assignments. We have proxy capsule and proxy that's
 That can be submitted for late credit by Thursday or
 Corrections can be submitted by Thursday
 Assignments are in the process of being graded
 You will be given an extension to submit corrections
 If your assignment is graded too close or beyond its closed date.
[00:04:51]
 So there are some back end assignments I haven't graded yet.
 So you will receive some an extension for capstone back end.
 for Capstone back end.
 Okay, the student success team. If any of these things have closed on you and you need to raise your points,
 like if your points for many evaluation, we two, I didn't put week one here.
 Because it's closed,
 but everyone got full points on that.
[00:05:27]
 It was basically just review on level three.
 It was a review of codex level three.
 So everyone got full points on level one.
 But I mean week one, but week two and week three are closed. If you
 don't have at least 75% on any of these or basically you need to have at least 75% on
 everything, your mini evaluations and your capstones assignments. If you don't and these
 assignments are closed, you can contact the student success team and they're the July cohort.
[00:06:27]
 And if you click on Canvas, they are listed in the order of priorities. So the students
 success team first tried to contact Melanie if she's not available, then try to contact Melanie if she's not available then try to contact Andrea
 If Andrea is not available then try to contact Lillian
 Again, this is in July cohort
 And this at the top
 If you need to
 Increase your points for any of the closed assignments So if you need to increase your points for any of the closed assignments. So if you need to contact them, let them know which assignment that needs more points
[00:07:16]
 and that you're ready to submit or make a submission and tell them the reason why you have
 fallen behind.
 And then, um,
 practice problems there.
 As usual, they're listed here on the side only mark them green.
 After you've completed them, after you've fully understood
 them. If you've finished a practice problem, but your confused or you're not sure if you
[00:07:52]
 did it right, don't mark it green. What you should do is ask questions about it. Ask questions
 during class and say, "Is this the right way to do it? And then I'll either say yes, or I'll say no.
 And I'll clarify.
 And mark your days.
 Well, we don't see anything here for any new questions
 in July cohort. But as a reminder, do not get stuck on anything for
 more than 15 minutes, because if you get stuck for more than 15 minutes, it's possible that you
[00:08:37]
 can get stuck for a day. And that's really bad, because that'll just be a day of waste and time.
 That's really bad because that's just be that'll just be a day of waste and time
 Instead of just trying to figure out how to
 Get unstuck you could be
 Just learning new things and keeping up with the class, but if you're stuck, then you can't keep up with the class
 You just waste it a day
 So ask your questions if you get stuck
[00:09:11]
 For that if you get stuck for 15. If you get stuck for 15 minutes, ask your question in July cohort, and then just get your answer and get caught up.
 Don't get stuck for a day, because that's like the worst thing you can do.
 And I would also say, if you do get stuck, because you're like just trying to learn something
 that I'm not teaching in class, don't do that either, because I can't help you find answers.
 Or basically, it's harder to get support for something that I'm not teaching in class. I'm already getting answers for that.
 Because if you're trying to do something,
 I'm not teaching in class like different functions
[00:09:56]
 and different methods or just different ways to code.
 And then you ask that question in July cohort.
 They probably might not know the answer. But if you are following the way that I'm teaching
 things in class and using the, you know, the functions and the methods and the coding styles that
 I'm teaching in class, then July cohort is more likely to be able
 to answer your questions.
 Don't straight too far from the path that I'm creating for you guys.
[00:10:42]
 The time that when you should start straying is when you graduate,
 that's when you should go in any direction that you want,
 when you graduate, but when you're in this class,
 stay on the path and you won't have any problems like that.
 But if you just go off on a tangent and then just get lost and
 get stuck trying new things,
 that'll slow down your progress. and just get lost and get stuck trying new things.
[00:11:07]
 That'll slow down your progress.
 And the goal is to keep up with this class
 and to get all the points that you need for each assignment
 so that you can graduate and then when you graduate, you're free to learn whatever you want.
 Because then you'll have a stronger foundation. You'll know the principles and you can apply them to whatever framework you want to learn, whatever coding style you want to learn.
 learn, whatever coding style you want to learn.
 Here I'm trying to teach you a, trying to build a good coding foundation for you guys.
[00:11:55]
 And yeah, not teaching all the techniques
 because if I teach all the, you know,
 tool and advanced techniques that it just might be too advanced. So I'm just
 teaching some techniques so that it's not too hard and not not over overwhelming you guys.
 And, and I don't want you to, you know, overwhelm yourselves by, you know, just trying just trying too many new things.
 I mean, it's okay to quench your curiosity now and then,
 but don't go too far off that path where it causes you to get stuck. Okay, so days, mark your day's green, only after you've taken notes, only after
[00:12:56]
 you've had all your questions answered for that day. Because if you just mark a green and you didn't take notes, you're just cheating yourself.
 Okay, so now it's time to focus.
 I'm going to review yesterday's topics.
 If you took notes for yesterday, you might not have to take any notes during the review.
 All you have to do is just
 absorb. But if I say anything during the review that you might have missed, then definitely type it
 down. Or if I start adding anything new during the review, definitely type that down.
[00:13:49]
 the review, definitely type that down. And also have your microphones ready for the
 mini evaluations later. Anyone want to volunteer to go first and just get it out of the way for the mini evaluations. Just post it in the chat if you want, okay, so Chris will go first and do level two corrections.
 That one might go fast, maybe just a few minutes, but then if anyone wants to go
 after him, just post it in the chat.
 Otherwise, I'll just go in the order of when you guys joined the waiting list.
 So that's it for announcements.
 Now it's time for review. Okay, so this one's about AWS.
[00:14:48]
 I'm just going to prepare the sandbox notes.
 And these were written in AWS.md.
 If you pull up those notes, you should see this where we talk about automating deployment.
 And this one is not, this was the slide by added things to the slide.
 Like for example, this was just right here, A, B, C, X, Y, Z, that's
 just a sample distribution ID. But I put an actual distribution ID in line. That's over here, just growing down.
 Like this one, an actual distribution ID.
[00:15:53]
 Even though you see my distribution ID and you want to try,
 if you want to try invalidating my ID,
 my distribution ID is not going to work because this AWS is connected to my account.
 And only distribution IDs in my account can be accessed with my account.
 So, and same thing for you guys, if you share your distribution IDs, it doesn't,
 there's no security risk unless you're logged into
 that person's computer, then they can access your distribution IDs and they can access your
[00:16:34]
 S3s with commands like these if you are logged into someone else's computer.
 But if you're not logged into anyone else's computer, then these commands are safe.
 Because your S3 location might be exactly the same as mine, or maybe without this
 temp, it might be exactly the same as mine.
 But this is for my AWS S3.
 You have your own.
 You might have the same folder structure,
[00:17:08]
 same S3 name.
 But when you're logged into AWS CLI,
 you only have access to your stuff.
 And nobody else has access to your stuff.
 So automate the deployment. And nobody else has access to your stuff.
 So automate the deployment.
 We had to attach policies to the CLI user.
[00:17:36]
 Oh, I forgot to log into AWS. I need to do that really quick here.
 So in AWS, you need to be logging in with your administrative account, not with your
 root account.
 That's just for security purposes.
 It's better if you're using your administrative account instead of your root account because
 if your root account gets hacked, then you won't have access at all.
 You're AWS and your root account can be hacked if you're using that anywhere and you
[00:18:20]
 accidentally leave your credentials somewhere on someone else's machine or someone
 takes your computer or someone takes your phone and they have access to that. Then they can
 do stuff to your AWS account. But if you're logged in as administrator, as an administrator account in AWS. They have less privileges.
 All they can wipe out your account.
 They can just wipe out other users in your account,
 but they can't hack the accounts.
 So if your admin account gets hacked,
[00:19:02]
 all you have to do is just change the password for that or just delete that admin user and create a new one.
 But what I was saying here is give your CLI user.
 Administrative access.
 To.
 S3 and Cloud Front. So, I think I did to Lambda.
 So, our CLI user was called Lambda.
 And here are the four access, four full access policies that we gave.
[00:19:49]
 Amazon DynamoDB, Amazon S3,
 AWS Lambda and CloudFrontful Access.
 Then we looked at the commands at this website and we found out that we can give commands
 to AWS S3.
 If we put the AWS command and put it S3, we can copy.
 That's what CP stands for.
 We can copy files to the S3.
[00:20:24]
 Here you can provide the folder, the source folder.
 So this is saying, I want to copy the files in my this folder.
 And where do I want to copy to?
 I want to copy it to my S3 in the sandbox level for temp bucket or think of it like hard drive or disk drive and into the front end folder
 this folder. And when you're working with folders you need to have the recursive flag or recursive
 option here looks like this - recursive and I added this one exclude the map
 file. If you look at the the map file in sandbox level 4 So here's my folder structure.
[00:21:28]
 I can zoom in here.
 Oh, I have to change the resolution to zoom in here.
 Never mind. I'm not going to, but, let's see. front end. That's, we uploaded files from the front end.
 If you look at the map file,
 it is 1.5 megabytes or 1.1,500 kilobytes.
 But 1,500 kilobytes. And the main JS file is 326 kilobytes.
 So this one is like this map file is five times bigger
[00:22:18]
 than the main JS file.
 And you don't even need this map file for your front end
 to run.
 This map file is only for your debugger.
 And we don't want our debugger to run
 when a customer is on our website, on our public website.
 All we have to do is open the dev tools,
[00:22:40]
 and then we have access to the debugger,
 and we have access to all your code. That's why you should be bundling your main front end here.
 Almost there.
 Okay, so remember when you build your front end, build it in production mode.
 This makes your main J-S file smaller by compressing it.
 This main J-S file, 326 kilobytes.
 If you don't compress it, or if you don't do production mode, it's probably going to be like
[00:23:44]
 twice the size or a
 little bit more. The benefit of having a smaller bundle file because it's compressed, the
 benefit is that is that your user can load your site faster because there's a smaller file to transfer to the computer and load.
 So, in production mode,
 build in production mode which disables the debugger
 and also compresses your main JS file for faster loading.
 And also exclude that map file because it's not necessary and it's five times bigger than the JS file. So that's another reason why not to include it.
[00:24:41]
 reason why not to include it.
 In other command, so this command automatically copies our files.
 If we just run this command, it'll copy our files to the S3.
 Then we found out that AWS has a Cloudfront command
 called create invalidation.
 Remember, we have to create an invalidation, which tells Cloudfront, hey, those files that you just distributed all around the world, they're invalid.
 Why are they invalid because I just updated my front end? And so you need to go and distribute
[00:25:22]
 my new front end all over the world. So this what this command
 does, we need to provide the distribution ID or think of it like this is this is what
 you're deploying, think of it as your deployment and provide the things to invalidate. So you can provide specific
 file names or you can just put all. You need to put all, I mean it's easier if
 you just put all, but if you have a huge project, a huge file, then you might need to just specify just like a few files to invalidate.
 But so far, our projects are not so big, so it's okay to use this to invalidate all
 files.
[00:26:18]
 There needs to be double quotes around it. When you do that,
 the child front will show that it's invalidating your files.
 And you have to wait.
 You have to wait while it's invalidating.
 Oh, another thing here.
 How do you get this link?
 So going back there. So going back to the S3.
[00:26:55]
 Click on the bucket that you want to upload things to.
 And then click on the folder that you want to upload things to.
 So there's the front end folder, there's the disk folder.
 So I see here I'm at the disk folder.
 If I look across here, I see copy S3 URI.
 That's going to give, if I click on this, it gives me this link here to that to get the S3 link or URI. Select the bucket.
 Select the folder for folders. And then at the top, the S3 link or URI will be at the top left or the selected folder.
[00:28:48]
 Or here, instead of select
 select and or navigate
 to the target folder.
 There. So I just added this. So make sure you add this too. So you don't forget about it. Or you can put here, click the button. And you see what it says. Copy, well that's going to be very obvious.
 Copy S3 URI.
 Let me see if there's any other obvious place where it might be.
 This is the most obvious. Okay, so then finally we put those, we put these commands into a script and npm script.
[00:29:55]
 The way we did that was first we separated the mount.
 So here's this first command called or here's a first
 script called S3 upload. This is the script that upload update cloud front, which is just a nice way of saying invalidate the files that are currently out there, which triggers cloud front to distribute the new files.
 But you need to put these escape characters so that
 you can use double quotations inside of that script. Escape characters, this is
 the only way you can use double quotations inside of a script. NPM script.
 Use escape characters.
[00:31:09]
 And you should see it here in the notes.
 Escape character.
 Here.
 Use escape character for NPM scripts that require double quotes in them. And okay here. Yeah. And, okay, here, yeah, this was another one.
 Art refresh, control shift R.
 So when you're invalidating or updating CloudFront,
 sometimes your website might not look updated.
[00:31:42]
 It looks like your updates are not being applied.
 Well, if the invalidation is done and you see CloudFront apply the invalidation,
 like, where is it? I'll go to CloudFront. If your files are still being distributed all over the world, it's going to say somewhere
 here, where does it say?
 Think maybe somewhere around here that will say something like the point.
 You just have to wait for it to finish and then that's how you would load what it finishes.
 You would then load your website by copying this link here, pasting it.
[00:32:39]
 And if you don't see the changes there, even though CloudFront finished deploying the updates.
 If you don't see the changes there, that's when you would press Ctrl+Shift+R.
 It will cause your browser to get the new files for the latest updates.
 So you use hard refresh, use hard refresh to reflect website updates.
 I should probably change this so it makes more sense.
 Use hard refresh to reflect website updates.
 Hard refresh, green downloads,
[00:33:34]
 the website files.
 It makes more sense when I split it into
 few sentences here. Okay, so we did that.
 We are now able to deploy our front end website, the Amazon S3 and Amazon
 Confront with a single command line.
 So I started talking about Redux.
 React Redux.
[00:34:20]
 So Redux is a JavaScript framework.
 So what is a framework? It's a set of function and rules.
 That's what a framework is. Like React is a set of functions and rules.
 You had to use use state and use effect and set did mount.
 Create a component did mount function.
 Those are all rules.
 It's all JavaScript, but those are all rules.
[00:34:49]
 And they make up their own rules.
 And if it works, you go with it.
 So like, for example, if you want to track the component
 did mount phase, well, the only way to do that is to return a function
 from something that looks like the mount phase.
 That's a rule, and you just have to follow it
 to track the unmount phase.
[00:35:22]
 So that's a framework.
 A framework is just a set of function and rules.
 And it react with JavaScript.
 So it was Redux, it's JavaScript.
 But Redux is a set of rules for managing state variables.
 A framework for managing state variables.
 I haven't shown you the real benefit of it.
[00:35:46]
 I mean, I was alluding to like how, you know, the variables, the state variables are global and
 everything has, you know, the parent component has access to it and the child component has access to it.
 the child component has access to it.
 Well, it's even more than that. And it'll help with debugging if you use
 this kind of structure or if you use Redux,
 it's just a little bit harder to set up
 because it's so easy to use state variables, right?
[00:36:22]
 You can just create a state variable on the fly in a react component,
 and you have access to it, and you're really familiar with it. Whereas Redux, well, you can't
 do that, or if you're going to follow Redux rules, then don't use local state variables, use global state variables,
 manage by Redux, just a little bit harder to use, but you'll get the benefit of
 being able to manage and debug your state variables even better,
 which I haven't shown you yet, but you will learn it this week.
 They variables are stored in a central location instead of individual components.
[00:37:26]
 And when you do it like that, it eliminates the need for parent components to pass communication callbacks to children. So that's when I reviewed this. These were children components and they were given these callbacks from their parent I'm going to load up the notes for Redux here.
 And I have a sample for that. I wonder if I put HTML here.
 I wonder if I put HTML here. You have a little bit more color.
 XML.
 JavaScript.
 Okay, so if you like, you can sort of change the colors here.
 If you like boot, you can use XML.
[00:38:26]
 Or if you like the colors of React, green components are there.
 So, this is not how the code exactly looks but it gives you an idea Sign in area is the parent and then you have these child components
 If you remember handle sign in
 It changes a state variable
 That stored in sign in area
 What what state variable does it change?
 That variable is called is signed in.
[00:39:08]
 So handle sign in.
 It sets is signed in the true.
 Remember is sign in is stored in here, not in here.
 So that's basically the child component is changing a state variable in the parent component
 using a callback that the parent gave it. And sign out model changes.
 The state variable is signed in to false.
 And it used this callback function.
[00:39:58]
 Which calls.
 The setter for is signed in and sets it to false.
 the center for is signed in and sets it to false and that state variable is signed in is contained in here.
 So it looks a little bit complicated using callbacks just so that the child component can change the state.
 That's inside the parent component can change the state. That's inside the parent component.
 Oh, wait, these are the wrong colors here.
 You just try to extemel instead.
[00:40:40]
 Okay, that looks better.
 Okay, so, yeah, so the main purpose of the callback is to change the state variable in a centrally stored location. So Redux centrally stored state variables.
 So we see some arrows here. We have a parent component.
 And arrow pointing to centrally stored state variables.
 So that means this basically means the parent has access to state variables right here.
 And then here we have a child component.
 And this arrow means it has access to the state variables here.
[00:41:47]
 So if the state variable is in here, like is signed in, then the parent component can
 just monitor it and just check. Hey, this is signed in the same that it changed. Just let
 me know if it changes.
 And then the child component can just go in here and just say, I'm gonna change the is signed in.
 The parent didn't have to give it a call back at all.
 It's just gonna access the centrally stored state variables
 changed is signed in to true or false
[00:42:23]
 and then the parent will know about it.
 change is signed into true or false and then the parent will know about it.
 The Redux state variables are centrally stored and the child component can change the state variable that the parent uses and the parent component can
 change the state variable that the child uses. So if this child has something called,
 I don't know, like message, a message state variable, well the parent can come in here and change it.
 Well you're the programmer of these components, right, And you'll program them what they need to do.
 So you're going to trust these components.
[00:43:10]
 It's not like this parent component is just going to randomly
 change a state variable just to annoy the child component.
 I mean, they have access to these state variables, but you control these components and you will control what they have access to.
 They can trust each other because you're the one programming them.
 So parent and child components can communicate with centrally stored state variables instead of callbacks.
 So that's what we're going to learn today.
 But before we do that, I want to share with you a tip that I came across, which I think
[00:44:00]
 will help you find information about our topics a lot easier or a lot faster.
 And that's with the help of AI.
 And have you ever heard about Google Notebook LM?
 Thumbs up if you did or thumbs down if you didn't.
 I just found out about this today. And it's a pretty awesome thing. Basically,
 it's an AI that's free to use that answers questions about notes and other media that you provide.
 So I know there's something in VS Code that does that already. But I think having an outside source,
[00:44:47]
 there's some benefits to that.
 You can have both, like, you can have your VS code AI
 and answer questions about your code.
 But this one is about your notes.
 So we can try it out, but actually let's copy this first so we don't know, co-pilot.
 Or Gemini.
 So that's, I think this one's gonna be more useful
[00:45:38]
 when it comes to finding things in your notes.
 And I'll show you.
 We could make a new AI set of notes because I will be teaching you about AI I think next week. So this is artificial intelligence.
 So you definitely want to stay caught up and not fall behind when I talk about AI
 because it starts to get fun when you start using AI.
 But don't get hooked on it.
 Don't get dependent on it.
[00:46:30]
 Just use it to help you with your education,
 but not to give you, you know,
 it won't help you remember how to program,
 but it will give you more information about programming.
 The only way you'll know how to program is to just practice it.
 Now I'm going to go to this website, no book LM.
 All you have to do is search for that. I'm just going to pick an account here.
[00:47:12]
 Pick an account that you want to log in with.
 So that was the next step here.
 Log into your Google account.
 You probably have one.
 You should have one. And then create a new notebook.
 They're at the bottom. You don't have to put anything in this window.
 You can just look at this. This is the main window. You can just ignore that pop-up.
[00:47:41]
 So, add notes, videos, text and websites in the left panel.
 So, here's the left panel.
 What am I going to add?
 I'm going to add all my level 4 notes.
 Actually, I can add all my level 4, level 3, level 2, level 1 notes.
 So, I can find them easier. But I'm just going
 to upload my level four notes for now. So it's all in the sandbox here. Notes. So here are all my notes. Just going to select them all.
[00:48:27]
 And click here.
 There, they're all uploading all my notes from level 4.
 You can upload all your other notes from the other levels.
 That way it's because this AI is going to help you find it.
 Help, help you find the information you're looking for, which is in your notes. So this is a benefit
 of taking notes, taking accurate notes because the AI will give you answers that you have in
 your notes. If you have wrong answers in your notes and the AI will give you wrong answers. So I can ask a question here.
[00:49:07]
 Like how to deploy a folder in a GitHub repository.
 If you try to search for that on the internet,
 you're not going to find an easy answer.
 What is it, Tory?
 But this one will give you an easy answer.
 Why will it give you an easy answer?
 Because I taught it to you, and I told you
[00:49:41]
 to put it in your notes.
 So this gives you a step-by-step.
 Okay, it might be too small, but basically here's the step-by-step on how to do it. And
 it has this, like these numbers here, shows me where where it got this
 information from. So if I click on that number it tells me it's in github.md.
 That's really useful right it's in github. Now I know which file so I know if
 this AI is hallucinating or not, I know that is not making
[00:50:27]
 stuff up because it's getting the information from my notes, my GitHub.md file. That's
 these numbers here. It's giving references. And this is the correct answer. This is the correct answer here.
 So basically this is an AI that answers,
 that gives the answers that you have, that you kept for yourself.
 It's not an AI that's searching the internet for wrong answers or,
 or answers that are very old.
 This is all relevant answers to the class.
[00:51:10]
 And if you put all your level 1, 2, 3 and 4 notes here,
 you'll basically have a summary.
 And this AI basically will just find what you're looking for.
 Like if you forget how to, if you forget your ARIA stuff.
 Well, I don't have any ARIA notes in here, but if you put all your level,
 one, two, three, and four notes here,
 you can get all your ARIA notes here.
[00:51:34]
 And if you had like a GitHub.mp,
 but it's in different levels, different files,
 well, your AI will put it all together for you
 and find the answers that you need.
 One of the cool things is this right here. It'll generate an audio which summarizes
 all your notes and you can speak with the AI and ask it specific questions,
 and it will talk back to you.
[00:52:11]
 But I've played around with it too much
 that I've lost my ability to create more audio.
 But you can try that on your own time.
 But I wanted to share this with you because I want you to be able to find
 the answers that you need and not spend so much time looking for it. The AI will do
 the looking for you. So you basically just ask the questions in the sensor panel and it'll answer it for you.
 And it just doesn't have to be just your notes.
[00:52:47]
 You can click on Add a source.
 In this source, you can add websites.
 You can add YouTube videos.
 You can paste in text.
 Oh, but by the way, you could only put 50 sources here. So I'm using 11 files right
 now. So if you're level one, two, three, and four, all your files together, they're less
 than 50 files, then it'll fit. But if you have a lot of files more than 50, then it won't
[00:53:28]
 be free anymore. I mean, if you want to exceed 50, you need to pay for this. But the
 limit for using this for free is 50 files. If you want, you can just basically put all your notes into one file so you'll never exceed your limit.
 You know it can also take PDF, well it will be useful if I can somehow convert
 the Bluetooth, I mean the big blue button videos into YouTube videos that way it can
 Answer questions about my videos, but I haven't looked into how to convert the big blue button videos into YouTube videos
 I mean, that would have been you know, that would be great for you guys, but, you know,
 it's beyond that right now.
[00:54:28]
 Yeah, I don't know if it'll caption it, but I mean, I don't know if it'll provide the
 captions for us, but I know it will analyze that video and answer things about it.
 So you make, basically, you would make the provide the link to a YouTube video
 and somehow it will gather all the information when I'm saying there, what it sees in the video,
 and it will answer your questions based on what's in the video. So we'll basically teach you
 almost how I would teach you. And so that's why I really wanted you guys to know about this because this is how
 you stay focused on what I'm teaching you in class by using an AI that knows everything
[00:55:16]
 that I'm teaching in class basically.
 This is notebook LM by Google. And when you get a chance, maybe after class or during the break,
 play around with this and you'll be surprised because this is all AI on this side.
 Just this part right here, generate and you will be surprised what you will hear.
 Unless you, well, you could, what is it called when someone ruins the ending for you?
 What is it? I forgot the word. Spoiler, yeah.
 You could, you know, you could spoil yourself by looking, looking at it, looking it up in the YouTube video, but I think you should just just try it. Click on the generate button and see what happens.
[00:56:21]
 All right, so it's time for a break, went over time.
 Okay, I haven't even tried that yet.
 The study guide, but the audio part, that will surprise you.
 So let's take a break because you could even talk to it.
 It's great.
 All right, so then minutes break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break.
 Maybe some of you had a chance.
[01:07:41]
 Well, I see Chris had a chance to try out that audio AI feature. It's
 really impressive. Anyway, so this one is our new Redux topic. And we're going to talk
 about the Redux store. So store is the Redux object that stores state variables.
 So they call it--
 and Redux is called store.
 That's where--
 I mean, it sounds weird, but it's not like a shopping store.
[01:08:17]
 It's more of a storage where all your state variables
 are stored.
 It sort of makes sense because it stores things that they call it a store.
 To get started, we're gonna install Redux
 and it's gonna be a dependency
 'cause we need to import it.
 So make sure you copy this here.
[01:08:47]
 So make sure you copy this here. We're going to import it using NPM.
 I didn't put the exact instructions there because I expect you to know how to do that already.
 And we're going to continue this in the Redux notes.
 Right here.
 right here.
 Can I just highlight this package? There's a file here, a file here.
 This is code right here. So this is how I will look
[01:10:07]
 When it's all highlighted
 Okay, so we're gonna install Redux JS slash to kit
 This one's gonna go in the front end because Redux is for the front end, it works with React. So I'm in my, the front end workspace right now of the sandbox.
 I've opened it in a separate VS code.
 And I'm gonna PNPM install.
 This one is Redux. It @redux.js/toolkit.
 It's not saved F. It's just a regular dependency.
[01:11:15]
 Okay.
 So, one, one of what happened here.
 Looks like it's frozen.
 You see moves.
 Usually it's moving around here.
 Like scrolling or something.
 Scrolling through stuff.
[01:11:49]
 Unless I already had it, no, I didn't have it installed.
 I'm gonna try again, I'm gonna cancel this, hopefully it doesn't break.
 Taking too long. Okay, that looks better. So, it's installed step by step.
 It's not step by step.
 It's sort of just have to pull out the meeting there.
 So if it's a module, it should be in the modules folder.
 And if it should be in the Redux folder,
[01:12:43]
 that means I should put that Redux folder in the Redux folder,
 that means I should put that Redux folder in the modules folder.
 Just like that, and then I need to create a file for that TS.
 for.ts. Actually it's not going to be a function. So it's a module because I'm going to just change this, create store in the modules folder.
 There, that's sort of backwards order,
 but at least it's more detailed.
 Import, configure store into store.ts.
[01:14:04]
 So how do you import? you just do the import command? Configure store. Configure store.
 It's lowercase right here. it's a named import.
 Name imports, remember you have to import them by name.
 It's not a default import.
 And then add this code, "cotstore="
 Okay, so I'm just gonna, let's use this.
 I'm gonna type it up like this first.
[01:14:52]
 Configure store.
 So it's color yellow, so it's a function.
 What do you do with functions?
 You activate them with parentheses.
 And then it says it's missing something.
 It needs some options.
 So we're not really sure what those options are.
[01:15:16]
 So I'm just going to put a variable in here called store options.
 We don't know what it's supposed to be yet. And then this thing, it
 returns something, it returns a store. So we're going to capture that in the
 left side of the equal sign. So configure store returns a store object. So when a function returns something,
 you capture it on the left side of the equals sign.
 And you also have to declare a,
 declare a new variable.
[01:15:58]
 If it's new, declare it.
 And then it's going to get stored into this, the return value will get
 captured into this variable.
 Okay, so that's fine for now. Yeah, there's an error here. We haven't defined this variable yet,
 but we'll figure it out.
 Okay, the next one is the store options. So that's that unknown variable that we just added into the parentheses.
 So basically it's an object. And the data type for it is configure store options,
[01:16:50]
 which has a reducer property. So what does that mean?
 So we'll take this one step at a time, copy this,
 paste it into the notes,
 then I'm going to share my screen. So I'm going to highlight this because this is code right here.
 Configure store options.
 This is code.
 This is code.
[01:17:50]
 And this is code.
 And I'll walk you through this so we understand what's going on here.
 The options object is the data time. Configure store options, which has a reducer property. So this sort of walks us through. So const store options
 equals an object. So store options is an object. So we can start with that. For options is an object. And since it's a new variable,
 we need to declare it. If it's read like that, it says, "Can I find names or options, that's because I didn't declare it. You need to declare it or in this case, initialize also.
 If you use const and you don't put a value, you get an error.
 What is that error?
[01:19:01]
 Content declarations must be initialized, which basically just means if you have a constant,
 you need to give it a value. You can't give it a value later on because if you give it a value
 later on, it defeats the purpose of making it constant because you're changing the value later on
 like on this line. So that's why you need to set the value for
 initialized the value when you declare a const. So there's
 still an error. And we can see here it's looking for the
 type configures or options. Yeah, there's other stuff going on here, but I see here ConfigureStore options.
[01:19:50]
 Let me see if you can do it from here to ConfigureStore. And let's see where it is here it is. So all this stuff here is
 TypeScript. This is where the function starts and this is the parameter options. We see
 options is configure store options. That's the type. So this part right here assert the type to
 configure store options. That's how we do this is how we do it configure store
 options. So I'm just going to click here and it will automatically import it. So now it's telling me there's something wrong with this object. The
 property reducer is missing. Okay, so it needs a reducer. So what is it
 supposed to be? So they're still in error. We're not sure what it's supposed to be.
[01:21:06]
 I'm going to leave it blank for now. Maybe I'll just put question marks here.
 It's obviously not supposed to be a string because it's saying, hey, it's not supposed to be a string. String is not assignable to type reducer, so it's not a string, but I'll just put it here
 for now.
 So basically just use logic to fill in the gaps.
 So that's what we did.
 We added the reducer property, but we don't know what it's supposed to be yet.
 Okay, so let's now that begs the question, what is a reducer?
[01:22:10]
 Can I copy this down and answer the question? A reducer or the reducer is a function that can change
 state variables in the Redux store.
 So we made, we were like creating a store, right?
 With a configure store function.
 I guess that's where we're gonna put the state variables.
 Well, we need a way to start changing those state variables.
 So we need a function to do that.
[01:22:42]
 Well, it's called a reducer.
 So, my company just called it function.
 Well, it's a framework.
 They have words for it, but actually,
 reducer is a JavaScript term.
 It's not just for Redux.
 The user, I didn't put the, like the general description for the
[01:23:11]
 user. The general, the general description for
 reducer is a, is a function that takes, many values, and then it takes in many values and it returns one value.
 So it's reducing.
 It takes in many values, returns one value.
 It's reducing what the input into something.
 So for example, if you have ingredients like like
 Bower and water and butter three ingredients
[01:23:51]
 You run it through a function called oven and it comes out it returns bread. So those three things that you put in there
 Bower water and
 that you put in there, power, water, and butter goes into a function.
 One thing comes out.
 So, yeah, we finished my, I need to paste it in the new notes here.
 That's why it's called a reducer because it's reducing three inputs to one output.
 And this is a more specific definition for Redux.
[01:24:55]
 That actually, this is a keyword for that project that this thing here, it's actually supposed to be,
 if it's supposed to be a function, then it should, it should also be called a method
 because it's inside of an object. So the reducer is a function,
 I've fixed that typo there.
 The reducer is a function that can change state variables in the Redux store.
 So I'm going to highlight store here because we have a store variable. Properly create a reducer
 That's gonna highlight
[01:25:54]
 To probably create a reducer that Redux expects
 Use the function create slice
 slice. Okay, so this is a function that we will use, create slice. So we're going to go over that in the next slide. And there's no easy way to explain why they call it slice.
 That's just what they want to call it.
 But I guess you think of it like when you think of a pie graph, you have slices on a pie graph. and one slice, like if your application is represented by a
 paragraph, one slice is for views, another slice is for
 modules, another slice is for assets. So they call it slice because it's like a slice of your app.
[01:27:09]
 I think they could figure out a better name, but that's what they call it, and I have to stick with it so that it can make sense in a documentation.
 It's a slice of your app that contains state variables.
 Okay, so the Redux slice, so a slice is an object that contains state variables and reducers that change them. So remember, reducers are functions or methods.
 And they change the variables because we need to be able to
 change state variables, right?
 So that's what the reducers do.
 So copy this part down.
[01:28:10]
 part down. Then I'm going to highlight the word slice because we will create a variable called slice.
 So we're going to create a function called create slice. Then we're going to run this code, use this code, I mean.
 Again, a slice is an object that contains state variables
 and reducers that change them.
 So if you think of your app, it's like a
 paragraph and a slice of it contains state variables, because your app contains
 different things like views, state variables, modules, so a slice of your app
[01:29:17]
 has contains state variables. So in that slice, you need reducers or functions to be able to change those state variables.
 So we're going to import create slice.
 Actually, you don't need to import it directly.
 I mean, I don't have to type it.
 And I'll put it up here at the above the store.
 I'm going to put it above the store because the store will depend on it.
 It creates slice.
[01:29:53]
 If I type it, I should see it pop up here.
 So it imports it for you.
 We see that at Jello.
 If it's a function,
 probably we need to activate it with parentheses.
 Now it's going to tell us it needs something,
 but does it need, it needs some options?
[01:30:18]
 We can also see it here.
 There's the function then creates LICE,
 and if we go past these
 angle brackets, all these types, we see a parentheses, that's the beginning of
 the function signature. The first parameter is called options and the type is create slice options.
 But I think I jumped ahead there.
 We're just going to do this first.
[01:30:54]
 We didn't even make the options object yet.
 So let's just do this.
 Let's use that function.
 It's going to, I know it needs a--
 it needs slice options.
 I don't know what it should be yet,
 but this will also return a slice.
[01:31:14]
 If a function returns a value, how do you capture it?
 You put a variable on the left side of the equal side.
 But you also need to declare it.
 If it's a new variable, so that's how it looks for now.
 So as you can see, it's a, all this setup for, I mean, we're not even done setting it up,
 but just to use centrally stored variables, we're setting up all this stuff.
 So Redux is better for larger projects where it makes sense, but if you're just making
[01:32:01]
 a small project, you don't need state variables.
 I mean, essentially, stored state variables, but you will be working on large projects
 if you're working for a company. And then, almost it looks like. And Redux is not something that's easy to learn on
 your own. So that's why I'm teaching it to you guys. So the slice options object. So it's an object
 So it's an object. It defines state variables and reducers. So in this object, we're going to use this object
 to tell Redux, "Hey, these are my state variables," and these are the reducers or the functions that are going to change these state variables.
 So let's copy this and paste it into the notes. Let's see here.
[01:33:32]
 Here's some code where we create the object.
 We're going to get a data tag for it. And we're going to add some properties to it.
 And here's some code right here.
 Okay, we're going to go through this step by step.
 Fonts, slice options.
 So we're going to make some options object.
 So we need, there's an error here because Y cannot find slice options.
[01:34:18]
 Y cannot find it because I didn't make that variable yet.
 So I'll make it here.
 Vice options is supposed to be an object.
 Why is there an error here?
 It's because it cannot find slice options.
 That's because I didn't declare it yet.
 I'm gonna declare it now as a constant
[01:34:41]
 'cause I'm not gonna change it once I make it.
 And we see here it's red.
 It needs to be create slice options.
 If I mouse over this one, I see the function is called create slice.
 And if I skip through all these angle brackets and this green stuff,
 these are types.
 I see the first parentheses here, which means it's the beginning of the function signature.
[01:35:10]
 This is the first parameter, the slice options.
 And I see that the type is asserted,
 to create slice options.
 And that's what I'm gonna assert this,
 create slice options. And I see here I'm going to assert this, create slice options.
 And I see here, I'm going to click on it.
 And that's what we did.
[01:35:34]
 We asserted the data type to create slice options.
 You might want to include in here some notes
 about how to find these data types.
 Like how I just showed you, I just do some, I just use whatever clues that pop up here.
 If you just read the popups, you can find out some data types. It gives you a lot of information.
 That's a TypeScript pop up.
 So, add these properties to the object.
[01:36:08]
 Name, initial, state, and reducers.
 How do I know I need to do that?
 If I see there's a red line here, TypeScript was telling me something.
 It's missing.
 It says it's missing some properties. And if I can just get through the extra stuff,
 I see that it's missing a name, initial state, and producers right there.
 Yeah, that's the best way you can sort of read it. Type the object is missing the following properties,
[01:36:47]
 and then I can see, I can read this part easily,
 name initial state and reduceance.
 So this one needs name.
 I'm just gonna put question marks here as a placeholder.
 Initial state.
 I'm just gonna put a question mark there
 because I don't know and it needs reducers.
[01:37:12]
 I'll put a question, I'll put some question marks there.
 We can fill in one of the question marks.
 Let the name describe the state variables.
 So, name should be global.
 You can put any description here that you want.
 It's describing the state variables.
 So, I'm just going to put global, why?
[01:37:43]
 Because they're global or central state variables.
 I think global is a word that describes it in a way that I understand it better.
 But it's global that all the components will have access to it.
 You could put central or central to the stored. I like the word global. It's
 short and simple. You can call it whatever you want. Let's see what else. As long
 as it describes your state variables. I could put a comment here.
 Subscribe, state variable, or describe the state.
[01:38:35]
 It's global. Okay, next one.
 Initial state.
 So the initial state declares state variables with key value pairs.
 So this is an initial state. Will be our state variables.
 So like did mount if I want to did Mount state variable and I want to set it to false
 initially.
 This is how I would do it.
[01:39:17]
 If I want to be able to count clicks, like how many times they've
 button is clicked, I'll start it at zero.
 I want to have a message, I'm going to start
 it as hello world. So these would be my state variables, but it's going to be all contained
 inside of an object. And these are the state variables that the components will have access to.
 that the components will have access to.
 This is not the best way to organize them, but it's the simplest way to understand them.
[01:39:54]
 You will later figure out how to organize them better.
 Or maybe you'll come with your own strategies to organize your state variables.
 I'm going to paste it into the notes now.
 So the initial state declares they gremels with key value pairs.
 Okay, so I had a code, I had a code block there.
 So I'm going to put something here.
 Just to remind me, some bits in code. So in the Redux folder, create a file called
[01:40:50]
 state gribles.ts, and export an going to I'm going to walk you through this.
 The reason why I am going to create a new file.
 Because I don't want to put everything into one file. This is going to
 make this file messy. This is the store. This is where the store is supposed to be.
 I want to have a different file for all my state variables.
 Well, I mean, you could technically put all your state variables in this file, but I think it's better to keep them separate.
 And I can see a bit easier like this, state variables, TS.
[01:41:56]
 This one tells me, "Hey, this is where I'm keeping my state variables. So I created the file state variables that TS,
 I'll export an object of state variables as key value pairs.
 So I need to export an object.
 I'll call them state variables.
 So this is like a module, right?
 Or this is a module.
 I'm exporting something the same as the file name.
[01:42:29]
 So the state variables is the file name.
 That's what I'm going to export.
 It's a variable, so I need to put const here.
 So what are my state variables going to be?
 So did mount?
 That's a common one.
 And I want the value to start off as false.
[01:42:54]
 Okay, another one.
 I want to have another state variable called clickCount.
 Basically, I want to complex how many times the buttons clicked start with zero. And another one is
 message. Let's have a message. What do I want it to start off as? I want it to start off with a low world.
 So this is where these are the state variables I want.
 Maybe I want them.
 I want, eventually I will put all my state variables in here,
[01:43:40]
 but right now we're just to work with just a few.
 So you can understand how this works.
 So we're going to export it.
 We actually can put it in here now that I have the code.
 Now that I have the code. So this is our state variables,
 key value pairs. This is the key,
 this is the value, key and the value.
[01:44:19]
 That's why it's called key value pairs.
 This is a pair. This is a pair. This is a pair
 Okay, I am supposed to
 Import state variables into store JS
 So let me do that first
 Import So let me do that first. Import state variables right there.
 Into store for that TS.
[01:45:01]
 I put js there.
 I'm doing the exact should be TS.
 And set the initial state through the state variables.
 So I've imported the state variables right here.
 I'm going to put them in here.
 State variables. No, this is, yes, so Chris is asking is this is this word for asserting the answer is no and this is why because it's an object and
 the object the colon is used like an equal sign. So here name basically equals global.
[01:45:59]
 Don't mix up, don't mix that up with a colon that is used for asserting.
 Because this is not using as an equal sign, because the equal sign is here.
 So if you want to assert something in an object,
 use as the colon is already taken.
 You don't need to assert initial state because it knows the shape of the object already. I mean, it's inferred. Remember what inferred means? It knows.
 See, I just mouse over it, and it already
 knows because I defined the object.
[01:46:52]
 So it's inferred TypeScript is saying,
 oh, you gave me an object.
 It has this now ticked number and message.
 And I see that the amount is--
 it looks like you're using a Boolean there. And click count. it looks like you're using a boolean there and
 click count. It looks like you're using a number there and that message looks like you're
 using a string there. That's what TypeScript already inferred this stuff. It sort of just
[01:47:16]
 knows, but just by looking at it. So you don't need to specify the, you don't need to assert
 the type here, TypeScript already knows. The only time you need to assert the type here is if TypeScript is wrong.
 And, and maybe you're doing something else that TypeScript is not picking up on.
 So far, TypeScript is right when it's asserting all this stuff. We don't need to, I mean, you could say that it's state variables as an object that has the mount and that is a number but TypeScript already knows this stuff and message
 which is a string. So here it's not an object. This is what when you're using
 the word as here it's not an object. You're now asserting a type.
 But when you're inside an actual object here, the colon is for assigning or is acting like an equal sign.
[01:48:36]
 Basically, you escape the colon by using the as keyword.
 And then that's where you jump into TypeScript on this side.
 So remember like when I said, you'll know when to use as,
 because if I try to use this as a, you know, a certain as any,
 or like if I try to assert this like that and there's an error here.
 So if I want to use any, I can't confuse myself with this colon.
 And I can't put this equal sign inside of an object. The colon acts like an equal sign inside of an object.
[01:49:28]
 My only choice is to use as if I want it to be any.
 Okay.
 So that's why I meant when I say you'll know when to use it.
 Basically, you use as when you have no other choice.
 All right.
 So the next one.
 Okay, so we did that.
[01:49:52]
 We just, we, we imported it and we set the initial state to state variables.
 So we're telling, with this code, we're telling Redux.
 Okay, you're going to have
 centrally stored state variables.
 Okay, this is how they're,
 this is the ones, these are the state variables I want,
 and this is their starting values.
[01:50:14]
 That's their initial state.
 So now that's all that's left is reducers.
 We need to figure that out.
 Well, before I, we can answer that question. We need to know about reducers,
 slice reducers,
 'cause that we were setting up the slice options, right?
 is that we were setting up the slice options, right?
[01:50:55]
 Lights options include the state variables and the functions that affect the state variables or change the state variables.
 As you remember when you have, when you're in react,
 Remember when you have when you're in react and you're using u state
 You're not supposed to
 Change the variables directly you're supposed to use a setter
 Basically you have to use a function to change the state variable. Well, that's what your reducers are there are functions that are meant to change
 your state variables.
[01:51:43]
 I'm sharing my screen, kind of copy that piece of new notes into here.
 Slice reducers.
 So this one is not code right now.
 It's just basically defining the term a slice reducer is a function, there's a typo there. A slice reducer is a function that accepts a state
 and action object.
 So there was a code sample there.
 So it's a function that accepts a state
[01:52:23]
 and action object. So this is just a function that accepts a state and action object.
 So this is just a function signature for now.
 Let me see.
 Why is it not changing colors?
 It's supposed to be the nongoose function.
 Okay, so I'll go on the chat. Oh, that's fine.
 There.
[01:52:59]
 Okay, so it's just a function signature.
 I'm not putting the code block there.
 I will put a, I'll put this
 because we're going to use these words or these variable names. I'll highlight
 these. Because if you look at the documentation, they will use these names. So
 just to prevent confusion, I will use the same names that they do
 So basically the function will change
[01:53:37]
 Whatever function we specify it will change the state based on the action
 So it will change the state based on the action.
 So like the state will think of the state as like did mount.
 And what's the action? I want to set did mount to true.
 So the state would be did mount.
 The action would be set did mount to true. So the state would be did not, the action would be did not the true. I mean that's not exactly what it is because these are objects. I'm just trying to give you like like a overall meeting of why they call it state and action there. The state object will contain state variables.
 So your state variables will be inside of this object.
[01:54:32]
 And they'll be key value pairs.
 And then the action object right here,
 the action object will contain the new value for your state variable.
 And it'll also contain like a string for a string that describes the action.
 But we don't need to worry about that.
 Because it's just going to confuse us.
 I'm going to teach a different way to use that string.
[01:55:11]
 The state and action objects will be provided by Redux.
 The Redux is going to come in here and provide these.
 We don't provide these ourselves. but it's good to understand that way we'll be clear
 that we don't, we're not the ones supposed to call a slice reducer.
 We're not the ones that are supposed to, because we're going to be defining functions
 and these functions are reducers, remember a reducer is something,
 well in redux it's a function that changes state variables. We don't call them directly,
[01:55:57]
 redux will need the one you call these. But what you should take away from this is that a reducer gets all the state variables.
 Well, it's a function.
 It gets all the state variables and then it accepts an action.
 And somehow it's supposed to perform that action on,
 like at least one of those date variables.
 So did not this gonna be somewhere in here.
 And the action is gonna say,
[01:56:33]
 "Hey, change did not the tree."
 Okay, so let me see what's coming up next.
 This was a good place to, yeah, I guess I have to stop here.
 All of this setup for essentially stored variables.
 We barely did any coding.
 But you need to learn this when you're working with bigger companies. Okay, so I'm going to start up a break now that that's basically it for Redux for today.
 This is the kind of start to timer here.
[02:07:59]
 And see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from a break. And for this third hour of class, you guys have a chance to work on your assignment.
 So here it is again,
 capstone back end accounts.
 You also have a chance to work on your practice problems.
 That's posted in the sidebar of your codecs account, or you can look over many evaluation
 for week five and see if there's anything there that you need to freshen up on.
 I'm going to start the breakout runs down and they will be a collaboration.
[02:09:07]
 And for silence.
 And a room for the mini evaluations. I just need to put your guys into any room.
 You don't have to go there.
 I just want to make sure that the system will let you see the breakout rooms.
 Okay, so I've started the breakout rooms and Chris, you're going first.
 Anyone else wants to go after him?
 Just put it in the chat. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] >> So I had to-
[02:16:09]
 >> Chris, Chris, you're raising your hand?
 >> Yeah, you know,
 in a mini-eval state right now.
 So maybe we should just make a run at the week five and just see what I...
 Okay, yeah, we can do that. Okay. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] I can, we'll finish the mini evaluation, maybe it's just going to take a few more minutes.
 So let me just conclude this.
 So we're back from the breakout rooms.
[02:51:00]
 And oops, I forgot to update this.
 What do we learn?
 We learned about notebook LM.
 And we learned a few more things about Redux.
 We learned about the Redux store,
 and we learned about the slice and some other terms.
 So these terms are things that you're not used to. and we learned about the slice and some other terms.
[02:51:25]
 So, you know, these terms are things that you're not used to,
 but you should get used to them because there's like,
 there's otherwise it's gonna be hard to communicate
 and talk about Redux if we're not all using the same terms here.
 Three minutes to take attendance, if you haven't done that already.
 Other than that, passes dismissed. Remember, we have only a few more days for that many evaluations. So that's four more days.
 So, find out to stress yourself out by doing your many evaluations too late.
[02:52:17]
 I'm going to continue the mini evaluation with Chris.
 And then if anyone's left in here, after the mini evaluation with
 Chris then I can do your evaluation. Okay, I'm gonna start the breakout rooms There they are.
 And Chris, I'll see you in the mini evaluation roomause ] And yeah, can you hear me?
 Can you hear me?

///// FILE: "Level 4/transcripts/Apr 9, 2025 20-14.txt"

Transcript from Apr 9, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level 4 week 5 day 3 and the theme of this week is Redux.
 Today's agenda in the first hour will take attendance, do announcements, review what we learned yesterday. And there should be time to start some new Redux topics.
 Second hour, continue with more Redux topics.
 And then in the third hour, we'll do many evaluations. whether it's for week five or week four,
 or maybe if you were approved to do many evaluations
[00:00:50]
 from previous weeks,
 you also have time to work on the upcoming assignment.
 Now, take your attendance,
 make sure you head on over to your Codex account, and mark
 yourself as present.
[00:01:13]
 And now it's time for announcements.
 Let me get that loaded up for you. Okay, so for the announcements.
 Okay, so if you haven't already submitted your mini evaluation week five.
 It was due on Tuesday.
 It will close on Tuesday of next week.
[00:01:49]
 And let's see here.
 So many evaluations like corrections for week four.
 That closed on Tuesday before class.
 So if you want to submit corrections for week four, you should have submitted it,
 submitted, and made a submission for week four.
[00:02:21]
 And then I'll call your names.
 You can volunteer and if you volunteer,
 then you can choose which one you want to do.
 Week four or week five.
 Otherwise, I'm just going to call.
[00:02:36]
 I'm going to prioritize week five first for many evaluations.
 And then if there's nothing to choose from there, I'll call on week 4 corrections.
 Okay, so assignments. So your assignments are in the process of being graded. And you will be given an extension to submit corrections.
 Let's see here.
 Okay, so.
[00:03:16]
 Capstone proxy closes for corrections on Thursday.
 Capstone back in the counts. is due this Thursday before class.
 Back in the counts is posted here.
 Capstone back in the counts is right here under week 4 because that's when they were
 first introduced.
[00:03:39]
 Capstone back in the counts. And it includes the description that you've been seeing in class, but it also includes more details. So as long as you were working on this and you should be well along your way.
 But there if you need more of a guide, here are the details.
 So submitting it on time is three points.
 So make sure you submitted on time so that you can get these three points.
 Your project should render without errors. This should be easier now.
[00:04:36]
 Now that you know how to use environment variables and you can even deploy the back end server to
 Lambda to be easier to render without errors.
 And, oh, I should, I should, I should, I should fix this thing here. Not the, I need the GitHub repository link and the lambda, the lambda link so I can try the, so I's see here.
 So I move this one.
 This one was number eight on the list.
[00:06:01]
 So if you remember here, what happens to it?
 Oh, here.
 So number eight, where did you go here?
 Number eight on this list, create a branch for coding a function that returns a DynamoDB client. I put it higher up in this description because it's
 useful if you start if you code it first and start using it. So basically this
[00:06:39]
 function that returns a DynamoDB client. You should not accept any parameters.
 It should use environment variables to create a DynamoDB client.
 This is all in the backend and I thought you had to use environment variables to hide your secret access keys. Not just in the back end. I mean, not just locally, but I showed
 you how to do it for lambda. Return a Dynamo DB client. So that's what the function return type.
 So in a function signature, in the function signature, you know, when you define a function,
[00:07:34]
 you use the keyword function and in the function's name, and then the parameters,
 where you can assert the return type right there, right after the parentheses. So assert the function return type.
 Probably create a user branch for defining a custom data type for user accounts.
 So your user accounts in DynamoDB, they have, it's a table.
 And the accounts, they should have a, you know, should be asking for an email and a password.
[00:08:16]
 And then, you know, you might ask also for a name and phone number or address or what's
 their favorite color, whatever you want,
 whatever you want to include for user accounts,
 create a data type for it, a custom data type.
 So define a custom data type for user accounts
[00:08:43]
 So define a custom data type for user accounts.
 And use this data type in the branches below.
 Okay, so this one should be a pretty easy branch to do.
 So basically you would.
 So you're going to define a data type.
[00:09:05]
 I would use the type keyword.
 And what I call it, I would call it maybe user account with a capital U.
 And basically the user account would look like an object that has an email which is a string. It has a password
 which is a string. It has a name which is a string and it has a phone number which is a number
 or it has a phone which is a number.
[00:09:52]
 Next, we'll create a branch for using TDD to test the function that creates accounts. So that branch for that function might be called create account.
 And we can call the branch create account.
 So the functions should create an account in DynamoDB and return a result based on the response from DynamoDB. So when you create an account in DynamoDB, DynamoDB
 will return a response. So this function that you create here, this function,
 will also return result based on the DynamoDB response. So you can return the DynamoDB response as is,
[00:10:50]
 or you can modify it,
 so you just include the information that you really need.
 I usually just modify it because you don't need all the information there.
 So no, no, there's no need to confuse yourself with too much information.
 DMI, just return the information that you really need.
[00:11:20]
 And remember you're designing this.
 When you're designing it while doing TDD,
 you can sort of decide what you want this to return.
 You could return, you could set it up
 to return a Boolean like true or false.
[00:11:40]
 Did you, did it create the cat successfully or did it not?
 Or maybe you just want to send the response from DynamoDB.
 You never, it's up to you basically.
 And then you should have at least five tests.
 The function according to test bestifications, assert the function return type there it is again the function return type.
[00:12:13]
 But at the top next to the function signature.
 What is it going to return as it going to return a Boolean is it going to return an object, is it going to return a string, it's up to you,
 you decide, whatever makes sense. Then assert the data type of the function
 parameters as a custom data type. So this function creates accounts, right? So what kind of information would this function receive?
 Basically you would
[00:12:49]
 You should receive a email and a password. That's the bare minimum
 You need an email and a password
 Maybe you'll also receive the name and phone number or our age, their address, whatever you,
 whatever you want. So just insert that data type.
 You have to function. The function will take in a parameter.
[00:13:19]
 So insert the data type of that parameter. Then you'll create a branch for adding a path and route handler
 for the account creation function. So the route might be like slash create.
 The message is an example. You do whatever makes sense. So the route or the path, that would be the path.
 If this is the path, then your route handler should also be called create and your file
 name to the create.ts.
[00:13:57]
 They should match.
 That's the naming convention.
 Just let them all match.
 Then the route handler should send a response.
 The route, your route handler.
[00:14:14]
 Basically it might be called create.
 It will send a response.
 And what will that response be?
 It will be the results from the calculation
 function above. So your calculation is going to return a result and then your
[00:14:33]
 route handler is going to send that as a response.
 Also your route handler will be receiving information.
 Your route handler will receive, like, it needs to receive at least an email in a password.
 It can receive it by the query parameters.
 So when your route handler receives query parameters,
[00:15:15]
 assert the incoming data.
 So that's an example, for example, that's the query.
 Assert that query object. So what do you expect it to have?
 So, you expect it to have at least an email and password,
 so you should assert that query object
[00:15:33]
 with a custom data type.
 So, you need to know how to get queries
 before you can even assert the data type.
 And you need to know how to make your custom data type.
 Basically that's why this is the first one here.
[00:15:56]
 One of the first ones, the finite custom data type. The other one is, you know, TDD for a function that retrieves accounts.
 I was walking through this, having a retrieve an account.
 I could probably do that today, finish walking through it, so you did a better idea. And maybe that's what I'll do. Yeah, I think I'll just finish that
 walking for one of those practices and see what that practice was. re-read practice. I'll finish the walk through for that.
 So again, do similar things for basically I'll walk you through this part,
[00:16:55]
 like T&D, that retrieves accounts. And a path and route handler for account retrieval.
 There's TDD for function that updates accounts.
 And a path and route handler.
 Oops, I forgot to.
 This is for account update function. It takes this to the account update function.
[00:17:39]
 Yeah, I forgot to update the
 just copied and pasted that update.
 got to update the discompreated and pasted that update. The so also TVV for a function that deletes accounts and a path in route and handler,
 that's a fixed as to.
 So path in route and handler for that meet the cat function.
[00:18:07]
 Again, there should be a live link to,
 so I need to fix this because you're going to have live site.
 We'll not, we'll not render this assignment. It's named up, signed to the changes.
 And I'm looking here.
 But yeah, I just wanted to give you a heads up.
[00:18:35]
 I, yeah, I know I have to make some fix a few typos here,
 but at least I give you some clarifications,
 which need for this assignment. And maybe you finish that assignment soon or or maybe already done with it or almost done with it.
 Maybe you need more points in anything that closed, either mini evaluations or
 assignments, caps and assignments. By the way, these mini evaluations are assignments too.
[00:19:22]
 They're graded like assignments, so you need at least 75
 percent for higher to pass these assignments. So these are assignments. So, you know, and you
 should also know that it's an evaluation so, you know, evaluations are not taken lightly.
 That's the thing that decides whether you pass. It's one of the major factors.
 So you need extra points on things that have posed. You need to contact the student success team and tell them you're interested in making a submission.
[00:20:09]
 On assignment that closed, let them know which assignment that is
 and the reason why you felt behind.
 Practice problems are here, on the side.
 Let's see if there's anything new.
 Any new questions in July cohort.
[00:20:30]
 Last time I checked there was any,
 but I was just making sure.
 Yeah, nothing new in July cohort,
 but remember to ask your questions there
 for clarification on anything.
[00:20:52]
 Again, mark your days in order.
 Mark them in order so that, uh, you'll be, um, you know, caught up in a systematic way without any holes in your knowledge, because
 each day is built on knowledge from the days before.
 If you skip the day or you didn't learn everything in one of the days, you're going to
 go into the next day with holds in their knowledge.
[00:21:28]
 So, going order.
 And so, we're going to review now. Make sure you take notes during the review of you.
 Just anything, but definitely take notes when I start teaching the new stuff
 and have your microphone ready make sure it works for the mini evaluations
 and just feel free to raise your hand if you have any questions.
[00:22:12]
 So for the review, we're going to start with Google notebook LM.
 I'll show you guys the AI.
 It's artificial intelligence from Google.
 And we will be using Google for another backend deployment.
 We will be using Google for backend deployment, not just Lambda. Lambda, we're using Lambda, AWS Lambda for
[00:22:47]
 backend deployment. We will also learn how to deploy a backend with Google. Why is that?
 It's because Google is another popular service
 that can run your back end.
 And it's different.
 You can run a back end with Google without getting charged.
[00:23:13]
 But if you run a back end with AWS,
 you will get charged, even if nobody visits your site,
 or even if nobody even contacts your back end server.
 So at least with Google, you could run something and it won't get charged.
 And this will be the traditional way of, it'll be the traditional way of
[00:23:36]
 deploying the back end. Whereas, Lambda was, you know,
 a sort of a different way of going back in.
 So that's why we're taking a look at Google Now,
 and also AI, because I'll be teaching AI later,
 at least how to implement AI into your websites
[00:24:04]
 and how to use them in your websites.
 And notebook Lm is an AI, artificial intelligence,
 so I'll help you at least get answers to your questions
 about what I'm teaching in class.
 So let me show you.
[00:24:22]
 And let me show you.
 And let me get it loaded first.
 So if you didn't get a chance to try this part, I'm just going to press generate right here.
 I don't know if you'll hear it or not.
 But if I click on generate, it's going to just create some kind of audio file or audio that
[00:25:00]
 summarizes all of my notes here because I showed you that you can just
 upload all of your like level four notes
 Here's ai.md a ws.md, dynamo vb.md
 I'll let that generate
 One thing I haven't tried is uploading some of my code
[00:25:26]
 Because all of your notes I mean some of your notes are in your code. Like for example like
 TypeScript, some of that code, I mean some of these notes are in your code. So
 let me see if I can try some of this right now. I'm gonna try to upload some types of code that
 demonstrates some types of topics.
 So we have here read-ups notes. Let's see here.
[00:26:12]
 And the... is it in the back end?
 It might be in the front end when we have some TypeScript notes.
 Modules. modules, call back types, call back types or custom types.
 So maybe I'll give it those two, call back types and there's also return types.
 I'll give it those three. Let's see what notebook I'll have.
[00:26:47]
 Can you tell me about type two.
 I don't see here, let's see if it can take these types of files. It doesn't naturally take these types of good files.
 I had to pick all files here. So let's see if we can talk about custom types,
 fallback types, and return types.
 See what happens.
[00:27:37]
 Only the file types are supported.
 So if I did want to give them, give it the code, I'll just basically make a copy of this.
 Let's see if it works.
 Copy this.
 Paste it in.
[00:28:18]
 And then rename it.
 And then rename it. I'm going to start with the fire glue. and the car is hard to tell.
 Yes, totally.
 (inaudible)
 (inaudible)
[00:28:55]
 (inaudible)
 (inaudible)
 (inaudible) here. Here it is.
 I'm just going to rename this.
 So, I'm going to rename this text.
[00:29:16]
 We name it to text.
 We name it to name it to name it to name it to name it. So that's callback types text and custom types.
 And you need to make types and just copy this piece here and it's renamed it. to the text.
 This changes the extension here to the text.
 Okay, so now this should be contained.
[00:30:20]
 There it is.
 Gonna upload a vote.
 Hopefully it can do something about it. You need to see what it'll say.
 Okay, so I'm going to ask you the question about
 return types.
[00:31:03]
 Let's see if it has big concerns and code.
 Yeah, there's some sample code here.
 And it's good.
 This function has a return type of void.
 That does not return any value.
[00:31:22]
 So that's good.
 This one shows that it has a return type of string and it even explains that it expects the string.
 Let's see if I click on this number 4. Yeah, it has some, it has the code reference here. That's all you can click on in here.
 So it's in return type dot text and it shows me the code.
 My sample code there.
[00:31:48]
 So if you want to put some sample code, you just have to rename it to the text file.
 And we have player. This one has t.c. So that's return types. So that's return types.
 So that's good.
 It's accurately showing the code samples for return types.
 I wonder if we'll tell me what this ensemble is. What does the symbol, what does that symbol mean? And return types. In
[00:32:49]
 let's see.
 So it says it's a union type. That's correct. I never really explained it as that. But this one, I try to explain things in more English terms.
 So here it is.
 It can return a value of either of the types listed.
 So that's correct.
[00:33:16]
 So when we see a return type of string and then the symbol and then void, this function
 returns either a string or a void or either of these types.
 That's what the, so this kind of a AI is more accurate because it's based on, you know,
 information I already gave you guys. So basically it's almost answering the way I went and I'm an answer. This will answer with more detail and it puts everything together.
 So yeah, it's very useful. Very useful. That's why I'm wanting to introduce this to you guys.
[00:33:55]
 Are you able to hear this audio right?
 Thumbs up if you can hear it. Thumbs down if you can't.
 Can you hear it? It comes down if you can't. Can you hear it?
 It's playing right now.
 No?
[00:34:10]
 I wonder if I can somehow do that.
 Sure.
 Also, share it on you.
 Okay.
 Okay. Okay, okay, I can do it if I share a tab.
[00:34:29]
 [BLANK_AUDIO] Okay, let's try this. And here on our foundational cloud tech. and get a little pretty blue. OK.
 Let's try this.
 And here, now--
 foundational cloud tech.
 Today, we're going to connect some of those dots.
[00:34:51]
 Give you a practical handle on how they can really
 boost your workflow.
 Yeah, we're looking at two main areas-- first up AI,
 specifically--
 So this was generated from my notes.
[00:35:03]
 And it sounds like real people, but they are not real people.
 That's AI generated.
 And if you listen to them long enough,
 you will know that they're not real people, because instead
 of saying AWS, they pronounce it, and they say,
[00:35:19]
 ours or ours.
 And instead of saying, dot e and the, they say dot in the.
 So, um, you know, real people don't do that.
 But you can also interact with, you can also interact with it.
 If you play it, welcome to the deep dive.
[00:35:38]
 We've got quite a mix of information here with us and our mission, like always is to pull
 out the key insights, get you up to speed fast.
 If you click on this join button,
 pretty powerful tools and foundational cloud tech. Today,
 we're going to connect to your practical handle on how they can really
[00:35:55]
 boost our workflow. Yeah, we're looking at two main areas. First up AI.
 Oh, hey, our listener wants to join in. What's up?
 What can you tell me about the function return types?
 That's a great question. Return types are all about clarity. Yeah, think of it as making a
 promise about what comes out of a function. Our notes have some good examples. You see things like
[00:36:21]
 so, if you don't like to read you can just ask the questions
 It's like a interview like you're you're calling in to a podcast and you're asking questions
 Okay, so it's it's very cool
 Okay, so
 Yeah, it's an awesome tool and it's gonna be a great tool for your education.
[00:36:48]
 So if you're not caught up yet, maybe this tool right here will help you catch up.
 Or, if you just stuck on some things, maybe just tool up and get that stuff.
 It's almost like having, it's almost like having me answer your questions anytime of the day.
 Because it's basically the notes that just all depends on your notes.
 If you're able to keep up with the notes, it's going to answer pretty much the way I would answer things.
[00:37:30]
 All right, so Redux, what do we learn about Redux?
 We learned about the Redux store.
 Store is the Redux object that stores state variables. So with Redux, we're going to change the way we work with
 state variables instead of keeping them inside of components, we're going to put them in a
 central place that's called the Redux store. That's where we'll put our state variables.
[00:38:01]
 or we'll put our state variables.
 And I showed you how to create the need of store.
 It's not complete yet, but we got it started.
 And let me just pull up the notes here.
 And that's the score. It's going to be the net. And the net of strength. [BLANK_AUDIO] [ Pause ]
[00:39:18]
 My audio is not looking.
 Thank you. [ Pause ]
 All right. So here it is again. Thank you.
 All right, so here it is again. We created, I mean, we installed Redux.
 We have to use this as some app Redux,
[00:39:36]
 and then smash toolkit.
 And then in the store.ts file. I mean, you created that in the front end.
 So let me just open a separate VS code for the front end here.
 Because I don't know if I'll use the green bug or not.
 And it's complex less if I have a hook-ing and hook-ing.
[00:40:09]
 And then you different.
 Yes, come in.
 So we have modules folder.
 And inside that, we have a read-up folder.
 Inside that, we have a read-ups folder. Inside that we have
[00:40:25]
 store.ts and then we import configure store. That's here we imported it
 right here that's coming from read-ups to need us to kick right there and then we put in this line of code here to get
 it started right here and give your store giving it some store options Is there another question? So the next one, store options.
 So the readout store options, we share my screen about that.
 So the readout store options.
[00:41:44]
 That's the data typeup store options. That's the data type configur store options.
 So, right here, right here, there's score options.
 It's the data type configur store options.
 I showed you yesterday how to get that data type. And we just set it at the beginning.
 We just set it as a empty object.
[00:42:12]
 Right now it's not an empty object.
 When we set it up as an empty object, we didn't know it.
 We went inside a bit.
 When it's serious, we set the data type with this.
 It told us that it needs a reducer property.
[00:42:27]
 So that's when we added a reducer property. There's question marks here because we're not really sure what it should be yet.
 But we know that it should have a reducer property. So I have been quite gone to you explaining
 what the value for this will be.
 And we'll get there.
 We also learned about the reducer.
[00:43:02]
 So the reducer is a function that can change state variables in the
 read-up store. So reducer is a JavaScript term. It's not just for read-ups. It's basically
 a reducer is a function that takes in multiple inputs. And then it returns a single output. So somehow it combines
 whatever you put into it and then it turns it into one or less than whatever came in. So the
 analogy I gave before was like ingredients for bread. Yeah, flour,, water and butter, maybe, kind of like bread, but maybe some yeast so like to say
[00:43:50]
 both are four things. You put it into a reducer. You can introduce multiple things into one thing.
 When it's a function, a redux that's a function that can change state variables in the
 mean dot score.
 So how is that a reducer?
 Because actually, this reducer will take in.
[00:44:24]
 It'll take in all of your state variables. It takes in all your state variables and then is going to send back one thing that's unique.
 And let's see here. The property, to properly create a reducer
 that Redux expects, we need to use the function create slice.
 So it's not easy to create a reducer.
 That's why we have this question mark here.
[00:45:08]
 We have this question mark here, because we can't really make one.
 We have to sort of get it somewhere.
 And it starts from create slice.
 So the re-nuts slice, so as you guessed, it's the function is called create slice,
 so it should be creating a slice.
[00:45:40]
 And so what is the slice?
 A slice is an object that contains state variables
 and reduces that change them.
 So if you think of, I gave this sort of analogy
 or visualization, your app is like a pie chart
[00:45:59]
 or a pie graph.
 And a portion of your app consists of state variables. So that's like a slice of your app.
 You know the portion of your app also is made out of you know modules and another portion of that pie is made out of assets. the slice that redox needs it contains state variables and the
 reducers that change that change them that's the slice and red we came up with this line here.
 Okay so there's the important phrase slice from Redux JS toolkit. We use it here.
[00:46:59]
 We have to give it some slice options. This one returns a slice, so we capture it on the left side of the equal sign.
 We assign it to a variable here on the left side of the equal side.
 When we turn value, it gets assigned to the spirit, which will be a slice.
 So this will be a slice, a slice of your app containing state variables and reduced source.
 For again, producers are functions that in this case will affect your state variables.
[00:47:40]
 Like, I'll take them, change their values.
 Okay, slice options. So we didn't really know what kind of options we needed.
 But the options object defines state variables and renderings. So that's what the slice options is about.
 And so just to get our understanding of it, we set it as a empty object.
 And then we assert the data type as create slice options.
[00:48:30]
 Yesterday, I showed you how to get that data type. I'll do know what kind of data type is supposed to put here
 with data type you're supposed to assert.
 And then when you assert it, you find out
 that you need to have some properties.
 Let's see here, slice options. So after you assert it, as a create slice options object,
[00:49:02]
 we find out that we need to add a name in this list date and
 reduces property. So we added it here, name initial state and reduces.
 Then let the name, let the name, I said, "frey"
 It's like something named. So the name is Axel Poppery, so I don't know if you'll like that. And let the name describe the state variables. So I put global because the state
 variables are going to be global. You can put any description on here, whatever the
[00:49:56]
 make sense. And I didn't put any comments next to this because of the sort of suffix mandatory until one time you need this part.
 Initial state. The initial state, the pairs, state variables with g value pairs.
 state variables with g value pairs. So right here, I have an object called state variables.
 So if you think this object will contain, it should contain state variables. So here they are.
 It's just, we don't have people's signs or anything like that because we're just storing them as key value pairs
[00:50:51]
 This state variable I'll did now we start with a value of all this
 state variable that
 Calling click count will start with a value of zero this state variable that we're calling message will start with a value of
 And we did that, or we put that in a file, and put that in a file in state variables. And we export it right there.
 And then we import the state variables.
[00:51:41]
 Here we are importing the state variables in there.
 And we set the initial state to the state variables.
 So the state initial state is the state variables. [BLANK_AUDIO]
 Reduce the last slide that I talked about,
 slice reduces.
[00:52:21]
 Because that was the last piece of information that we needed.
 All I had a chance to go over,
 was just the introduction to reducers.
 We have here a property that we need to reduce our results.
 It's called reducers and we don't have a value for it.
[00:52:47]
 So, I'm starting to talk about that. So, a reducer is, or a, one of the reducers
 would just say a slice reducer is a function that accepts a state and an action object.
 So, here is this example of a anonymous function and accepts a state and an action
 object and that the function changes the state based on the action.
 So maybe like a did-mount state.
[00:53:20]
 Maybe the action was somehow say change did mount the truth.
 So that only just gave me some kind of concept with these objects contained.
 So the state object will contain state variables as key value pairs.
 And the action object will contain the new value for the state variable.
 And state and action objects will need to bind the line
[00:53:49]
 of Linux.
 So you never call this country self.
 You never call it the self.
 Linux call it.
 So it looks like we can take a break, 1000 last one, and see what else.
[00:54:11]
 That makes sense. [BLANK_AUDIO]
 >> I think you have to take minutes [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] All right, so we're back from the break.
 And what I'm going to do is just going to go over or walk through the
 the practice, this TDD read practice. We finished it up to the point I think to
 number four, I think we'll see.
[01:05:41]
 I'm going to load this up.
 Should be in the DVD practice.
 I can go ahead and click no, that's not it.
 I think I put it in a build somewhere.
 Oh, I just remade it then. unless it's part of Express might be part of Express.
[01:06:29]
 So pull that up. [ Pause ]
 >> Steve here at Foxy.
 Can you see what was that question about again?
 >> Yeah.
 >> It was about dynamo DB.
[01:07:01]
 Okay, so it's going to be a DynamoDB. Anything. Yeah. So I'm just going to scroll down so I can follow along here.
 And this is going to be in the back end, so I it is in complete.
 Let's see, in DynamoDB console, add name and phone.
 Okay, I remember I did that already.
 In index.ts, define the route read and the handler
[01:08:07]
 we're reading that account.
 index.ts is right here and, there's the handler right there.
 Here's the handler.
 It just has some placeholder data right there.
 In the module folder, use TDD to test the function read account.
[01:08:47]
 So there should be a function in the modules folder called read account.
 There it is.
 Test that it returns an email password name and phone when given an existing email.
 Okay, so let's see.
 Where should I create the data type?
[01:09:31]
 I think I can create the data type.
 Like I'm expecting some kind of result.
 And I'm expecting a name, email, and password, and phone number.
 a name, email, and password, and phone number.
 Well, maybe I'm not going to assert the data type here, but I can just write my test at least.
[01:09:58]
 So, I have a test for that, and I have a test for the result matches.
 Here's that test.
 And we're here with returns a result with the matching email.
 So basically the result, the email that comes in the results should also match the
 email that I specified here.
[01:10:30]
 The results should also match the email that I specified here. Test that it doesn't return to result when the email is not in the list.
 So here's that test.
 It doesn't return a result if the email is not in the list. Okay, so I expected it to be undefined.
 Or I can make it since I'm expecting an object anyways.
 Maybe I can let it be an empty object.
[01:11:03]
 Now it's easier to just let it be undefined.
 It's easier to check that if it's undefined.
 If it's an empty object, then we have to check if it's harder to check if something is an empty object.
 It's not that hard, but it's just easier to see if something is undefined.
 So I'm just going to do it that way.
[01:11:33]
 And test that it doesn't return a result when the email is an object.
 Okay, so this is one of those cases where, you know, we're testing unlikely cases.
 It's going to copy this over here and then just edit it as necessary.
 So it doesn't return a result going to make it an object and then check and it should,
 we're going to run that function, read account should should take in that email, even
[01:12:22]
 though it's just an object and the result should just be undefined
 because it shouldn't find the match for this. So I just, all I did was create the test.
 I didn't even write the function yet. You look at here. It's empty. I have nothing here.
 I've basically designed it right here. I designed what I want it to do.
 Now I can go in here and start typing up the function or coding the function according to the we'd account.
[01:13:10]
 And it's supposed to take in an email, which is a supposed to be a string.
 And it's supposed to return something. It's supposed to return an object, some kind of object, but instead of just defining that object here, I'm going
 to call it something.
 I'll call it a, it's going to return an account.
 So that's a custom type I haven't made it yet.
[01:13:42]
 I'm going to create it, but I'm just specifying
 that this is what is going to be the account type.
 I don't know what that is, but then I know eventually I'll return it into account. So let's see what will this account be?
 So this account is a custom type.
 I'm using the type keyword.
[01:14:38]
 I'm saying this account object that I'm going to return.
 It's going to look like an object that has
 an email, which is a string. And it has a password, which is a string. We should have
 a phone. Actually, then you put here before that. It should have a name, which
 will be a string. And it should have a phone that should be a number. Again, this
[01:15:14]
 looks like an object, but it's not an object. As soon as you put it in TypeScript
 mode, basically when you put TypeScript, you put it in TypeScript mode, basically when you put TypeScript mode and in TypeScript, the
 colon becomes the thing that lets you assert.
 You can assert when it's in TypeScript mode, but when it's in Object mode, the colon
 becomes the thing that assigns a value.
[01:15:45]
 So if I was going to create an account here like const account,
 this is in object mode or JavaScript mode.
 It wants to create an object.
 So if I put this one and then I put string,
 that's not right because it's not in TypeScript mode.
[01:16:03]
 It's an object mode or JavaScript
 mode. It's expecting a value after this colon. So maybe that value is like hello,
 like a, a, a, but here it's in TypeScript mode that colon becomes the part that makes the assertion.
 But here in object mode, the colon does the assigning signs values.
 Colon here asserts, so there's a difference between the starting and the signing.
[01:16:51]
 So here's the account and now it's defined right here.
 So this way this reader account should either return an account or undefined.
 Using this return function return value.
 Okay, so I just got that set up. It really doesn't do much right now.
 I'm gonna set up the script for it.
[01:17:28]
 Test would be, by the way, you can all you have to do is put the name on the test. You don't even have to put the path.
 Just will look it up for you.
 It's called read account.
 You don't even have to put that test.
 You don't have to put any extensions here.
[01:17:39]
 Just will find it for you.
 So it's going to look for the meat account and try to run it.
 I'm going to put it, I'm going to try to run it and see what happens. You can expect
 a lot of fails here. Four fails, which is fine. But I'm just starting. I'm just getting
 I'm just starting. I'm just getting started.
[01:18:04]
 I don't expect it to pass.
 I didn't even code it properly yet.
 So it's failing partly because I didn't import it.
 Now I'm importing it.
 Let me put this in watch mode.
[01:18:21]
 See if I can.
 See if I can put in a watch
 but it doesn't take watch like that.
 So I'm going to just click watch over here.
 They says some test cast
[01:18:54]
 let's see which one's cast.
 Well it doesn't really look best if I'll hear it is.
 Doesn't return a result if the email is not in the list. While these might change, as I'm coding my function,
 those might change.
 So this should be watching for changes.
[01:19:15]
 I might have to stop this.
 Yeah, I'm going to put it in a JavaScript debug terminal.
 a JavaScript debug terminal.
 It's in the JavaScript debug terminal so I can put great points.
 Okay, which one should I start with? Okay, so this one is...
[01:19:44]
 should I start with okay so this one is
 doesn't return in email all this one's easy. Does it return here?
 It doesn't return a result if the email is an object.
 That's easy I think I'm going to get started with that.
 If I can even just check it here before you need to get started with that. If I can even just check it here before you even get
[01:20:09]
 started. So, you have to remember your type of. I taught you guys that at a long time
 ago. Type of. If type of email, basically it's going to tell me if this email is a string, a Boolean,
 an object.
 So if it's an object, I want to just return because it's undefined.
 I was even put here on the find.
[01:20:50]
 So it was just a major clear.
 Okay, so that, that should take care of the last test.
 Okay, it ran already.
 And the second to last test
 does it return if the email is not in the list?
[01:21:17]
 Or does it return in a result if the email is not in the list?
 So I need to get some kind of I need a DynamoDB client
 to even
 You got an email
 So let me see if it's coded somewhere here
[01:21:42]
 Where is my dynamo do you find okay, we're having read them out?
 I have this dynam demo. I have this kind of movie client right there. This pasted it in here, I need to import things into import these. So I just basically we type the last letter as the last this way.
 I need to get these environment variables.
 I need to invite, I need to get those by getting.env.
 getting.env. There it is, and I need to configure it.
[01:22:36]
 I need to do that to get the environment variables from the e
 and v file. I should have my in your file here and there. So it's going to get my my region access
 key and secret access key from the environment variables. I'm going to create a DynamoDB client and then it's going to check if I don't have an email. So a nice client
 is going to use the get request. Actually, I need to set up the request.
 Here's my request when I'm going to request. I'm going to request the table log-ins and I'm going to
[01:23:39]
 which email though I wanted to pull. Not this one. I don't want it to pull that email.
 I wanted to pull this email up here.
 So I'll put that there.
 If that confuses you, then, then I can just rename this.
 Target email.
[01:24:02]
 So target email.
 So target email. That way it doesn't confuse you with this
 key right here.
 I'm property.
 So I have these. Now I need to go and
[01:24:20]
 use that request.
 This one is to read them to go and use that request.
 This one is to read them over that TS.
 It shows me how to read data.
 So I need to use the get method and pass the request to it.
[01:24:37]
 And that's going to give me a response.
 And then the uni so that nice client is going to use the get method and the request. I need to await that.
 I need to await the async here to make the await work.
 Because if I don't put async here,
 then await has a red line underneath.
[01:25:22]
 You can put async to enable it there. since this is a sink, I need to
 await this over here. Actually, this is not the one I'm testing. So let me skip this right now
 and I'll skip this one for now, too.
 I'll run both of those.
 I need to wait this one because I just put a seat in front of it.
[01:26:04]
 There's a ready here that means I don't have
 a sink right here in front of this arrow function.
 So it happened in the fact that it's material. So here, these things going on here.
 You can count.
 I know I need to put up.
[01:26:41]
 I need to have to wait there.
 Put any right here.
 Reason why is because TypeScript is expecting a string, but I'm giving it an object, so
 I'm just going to override that and tell a TypeScript to react.
 I can put any object in there, anything I want.
[01:27:08]
 And TypeScript will say, "Okay, go ahead."
 Maybe just shows this file, 'cause it should be,
 should not be shown in the,
 this three dots here. You can't. You should have waited.
 This will be something.
[01:27:36]
 There's four basing of the count.
 Oh, that's why.
 So now I'm actually not returning an account and undefined.
 I'm returning a promise.
 I'm returning a promise right here, which has a result value of account for undefined.
[01:28:03]
 So this is something I haven't specifically
 taught you guys so all you have to do is put a promise here because when you
 have a sink that means your function will return a promise. So this one is asserting that I'm returning upon this, but I should also put here
 what that promise contains. We see what happens if I take that out. If you
 don't specify, if you don't specify the type, that's what a t stands for.
[01:28:51]
 So you need to specify the type of the resolved values. So it's going to, or think of them as your return, because it just looks like the return return here.
 because it just looks like return here.
 But actually, this is the result value.
 So that's the proper way to do that. So now there should not be any three dots here.
 Because I properly asserted the return type here as a promise. Return type here is a promise.
[01:29:39]
 And then we'll just go down here.
 and scroll down here.
 When they both passed,
 doesn't return a result if the email is not in the list.
 Okay, so it actually doesn't return, I don't even set it as anything.
[01:29:58]
 So it's not returning a result at all.
 I'm returning an account,
 but then I never set that account to anything.
 So let's fix that. So this response should have an I.M. If the email is correct, maybe I should do that first.
 And we see what it looks like when it gets a correct email.
[01:30:35]
 So let me skip this one first.
 You've got to read and fix it.
 I got the last one.
 So that last one was if it's an object, I already fixed that last one. So that last one was, if it's an object,
 I already coded that part.
[01:30:50]
 Maybe try this one here.
 This one says, it should return an email,
 password name, and phone, or an object that has those properties.
 So let's try this and see what this one and see what kind of response you get.
 This should have an item in it. I can't need to just put in some things here so this water can be run.
[01:31:33]
 It stops on the debugger.
 That's not where it can be built in. [BLANK_AUDIO]
 And so it's not beyond the welcome factory, so I'm just going to put this code right there.
 [BLANK_AUDIO] So the response came in.
 It's, I see that it has an item.
[01:32:14]
 So that account right here should be the item.
 Account equals response.
 Not item. response, not INUP. As I see that item, as a password, email, name, and phone, and this
 account here, should have a password, email, phone, and name. There's just this part right here this as, I don't know what this is. What the error is, so I'm just gonna let it run.
 Let's see what this TypeScript error is.
[01:32:52]
 So in this case, I need to assert it.
 What I'm gonna do is, let's see if I can go like this.
 It still complains. So in this case, in the flip is back, as the count. So again, if it doesn't work when you assert here at the front, then assert it at the this exiting.
 Again, if you put the account here and you don't put this one back here, it doesn't like it.
 It's saying it expects a record type. So instead, I'm just going to take this out, put it at the back.
[01:34:24]
 And the reason why I put the output constant now, but I'm eventually going to change
 it to that.
 So this one should pass.
 Not going to be the only that people here.
 I'm going to stop there.
[01:34:44]
 I'll press play, and it passes.
 Why?
 It's because it has, it's gonna get an object back, and it has these properties in
 an email password named own, and that's what I was testing for here. Next one, this one should work fine also. It returns a result with the matching
 email, matching the easy. I think that's going to be solved by itself. So here's the response.
[01:35:48]
 the item is all there and those? So let's see what happens if I try to activate that.
 So this is what I'm trying to focus on.
 It doesn't return a result if the email is not in the list.
 So I don't have this on the list.
 Let's see what happens.
[01:36:11]
 Just going to press "Play to
 on the
 okay so it works fine. Everything passed. So that's good to go. Make sure you check your measuring check that your tests are correct. I can put the proper values in the
 range phase. Make sure you're running the act phase properly,
 and make sure you're asserting the correct things
[01:36:49]
 in the assert phase.
 You should, because we're doing a lot of copy and pacing,
 and when you do copy and pacing,
 you can have a lot of typos.
 Just like that.
[01:37:03]
 Capstone, capstone, back in accounts.
 I had a lot of time closing there because I copied and pasted it.
 So when you're copying and pasting your text, your tests, make sure you check them.
 Any questions about this?
 So basically what you saw was that I did the test first and then I coated it later.
[01:37:40]
 And then I chose which one of the tests I should start trying to fix first.
 And I chose the easiest one basically, which was the last test.
 Okay, so we have a little bit of time for Redux.
 So let's get some new notes for that.
 So this is a continuation on the...
[01:38:21]
 Actually, did I finish?
 I'll finish this.
 Oh, the route handler. I didn't finish the route handler.
 I need to go back to the route handler here. So I finished the the function, the read
 function. Now I need to finish the route handler here. This is the route handler
[01:38:53]
 and instead of sending this data, I want to send something else with what I want to send? I don't know yet. I know I want to run that test to read
 account and that one takes an email and it's a promise so I should await that. I can see it's in return to promise when I put
 this print to see here. I returned the promise so I should await that and if I
 need to await that I know I need to put a sync up here. This one needs an
 email where I'm not gonna get that email from. I need to get it from the request.
[01:39:47]
 This request object.
 Well, I already know where it's going to come from.
 It's going to have a query object.
 That query object is going to have a email in it.
 So that's my email that I'm going to take into here.
[01:40:35]
 And then you can put that email, you're going to pass that email to me to count. So I need that email to be a string.
 There's a type to get error.
 See, argument of type string or parse or all this weird stuff.
 I know it's supposed to be a
 string so I could try asserting it right here. If that work, no it didn't work so
[01:40:50]
 I'm going to move this through the back over here.
 So I'm going to suppose to get some kind of account result from here should be an account.
 So I should assert this that account yet. I should be exporting it somewhere.
 I'm not going to use it.
 It's stuck inside of here.
[01:41:39]
 Inside of this function file.
 So I'm just going to create a different file for this.
 I'm going to do a different way and I'm going to try to move back to it. [no audio]
 There it is.
 Right here.
[01:42:20]
 So there's a new file called the
 count. I'm exporting it. The reason why I put it into a new file called account. I'm exporting it.
 The reason why I put it into a new file is so that it can be
 in module all its on its own.
 And I could import it into here.
[01:42:37]
 That way any function that wants to use this account type,
 this custom type, it has access to it. So you thread here. Any function
 that wants to use it. It's right here. It's access to it. Instead of being stuck in this function.
 And I'm going to send that account.
 I can test this right now. So, and we start the back end.
[01:43:21]
 I should have needed people to get in.
 I can start.
 I can start.
 I should also to test it.
 Now it's going to which route.
[01:43:54]
 It's going to the read route.
 And I'm going to send three parameters to it.
 So there's a question mark.
 And I'm going to send an email.
 What is that email going to be?
[01:44:15]
 Actually, maybe I should put a few other things. you can see it coming.
 So I'm starting this server in a JavaScript one, too. We have a few points here.
 Thank you. I have this ground there set up and I'm that it has a query object right there and that query object has a female and that female is AAV@ AAV.com. So I can, if I run this line, this one should have correct value.
 There it is.
 I'm gonna try to get that count.
[01:46:02]
 If I run that file.
 Let's see if the account fits.
 Okay, that's good.
 It has email, name, password, and file.
 And that can send a response to the data account information.
[01:46:17]
 If I look at the browser and show them the font for you. and it's still from this contrary unit.
 If I sent the account.
 All right, so there, that finishes that. It doesn't give me less time to work on the read-ups.
 I'm like, talk about Redux.
 Let me see here.
[01:46:56]
 I guess we can do two signs of this.
 We're going to talk about the reducers, we're in the middle, um,
 making other reducers are going to be a function that changes the state variables.
 We define these functions.
 We just won't call them.
[01:47:38]
 It's not us who calls them, but we define it.
 So what we're going to do is we're going to find them, define them as being a setter.
 So, you know, in React, you had used the code called UState,
 and then on the left side of the equal side,
 you had, you know, you captured the value,
[01:47:57]
 and we also had the setter.
 So, we're going to replace that setter
 with our, with a reducer here, and we're going to replace that setter with our with a reducer here and we're going to define them.
 We're going to define them as setters.
 These functions.
[01:48:16]
 We're going to make our own setters basically.
 When we use the use when we use the help called "UState", it gave us the center.
 But in this case, we are going to make our own center.
 So let's copy this.
 And it's pretty easy to set values.
[01:49:07]
 value is [wind blowing]
 [wind blowing]
 [wind blowing] We're not either too able back. [wind] You can see that's here. [BLANK_AUDIO]
 [BLANK_AUDIO]
 So we will program the producers to be setters.
[01:50:44]
 You can see there will be some examples over here.
 And then the setters are functions that set the state of a variable.
 Set the value of their state variable.
 And the function name, since we have to have
 functions, the function name, what we're going to do differently is the
[01:51:12]
 function name will be the name of the state variable instead of starting the
 root set. You know how setters we're using start_end of the word set. We're gonna do something different and just call it by the same name as their state variable. So we'll create a basically an object.
 so let's in the front end
 and mix it all the other redox stuff
 state centers
[01:52:07]
 and then just export export into the object. Export state setters.
 It's just going to be in empty object from now. [ Inaudible ]
 Okay, so we need to add state variables.
 All right, we now have methods.
 We need to add methods that match the state variables. So these are our state variables.
[01:52:48]
 There's this did mount the count message. So let me just go back here. So there's this mount. And these are supposed to be methods.
 So there needs to be some kind of function.
 There needs to be some kind of function.
 So I'm just going to put here a function like that.
 And there's a quick count.
[01:53:21]
 And there needs to be some kind of function for these are methods and there is also
 messy. So these properties here are basically methods that match their staying variable.
 So I'm going to put here.
 State settings are methods that match the current.
 So, we are methods because there are functions and connect into an object, we're inside an object.
[01:54:19]
 You just don't know what these functions can be right now. Let their values be unknown.
 So let these values right here be anonymous functions.
 So that's what we have right now anonymous functions.
 That accepts a state and an object, state and an action object. [ Inaudible ]
 And an action object.
[01:54:52]
 [ Inaudible ]
 What does that look like?
 It's the beginning here.
 So they are anonymous functions that accept a state and an action object.
 And same here here.
[01:55:12]
 And I mean the same here.
 And I'm just going to copy this. and on this being popping this press
 inside this, put it back in
 it's getting in here
 right
[01:55:47]
 right, going from here sure, when we set up I can just put it here. I can just put it here. I can just put it here.
 I can just put it here.
 I can just put it here.
 I can just put it here.
 I can just put it here.
[01:55:59]
 I can just put it here.
 I can just put it here.
 I can just put it here. I can just put it here. I can just put it here. And then we let the values of these, the anonymous function, that accepts the state and
 the action order.
 So that's the setup for now. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
[02:07:11]
 And now you have time to work on the Simon.
 Here it is again, the capstone back in accounts, but now you have more description.
 I mean, it's described in the sidebar of your codex account.
 So more description or more details about it. And I also ran through the
 the walkthrough or the not the create but the retrieve retrieving a user account.
[02:07:48]
 So that should give you a better understanding
 of what you need to do for updating the leading
 and creating a user account.
 I'm gonna open the breakout rooms now.
 As usual, one for collaboration, one for silence, and up for 40 minutes.
[02:08:35]
 Any volunteers?
 Otherwise, I just have to fix someone from the list.
 Let's go with week five.
 If you volunteer, you get to choose your week.
 If I call upon you, then it's going to be week 5 that we're going to do.
[02:09:14]
 And you'll only get the on time point if I call upon you and we do with the many evaluation.
 Okay so it looks like Alex and you have to grow up.
 [ Writing on Board ] Hopefully she's here.
 I like Sandra are you there?
 Put a message here.
[02:10:15]
 Sandra, okay.
 >> Okay.
 >> With one.
 >> Amazing.
 >> Oh, your mic was on.
[02:10:21]
 Okay. I'll see you in the MIDI evaluation room.
 >> Uh, for which evaluation?
 We, uh, this week.
 This week? Okay. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 And let me just leave the file first.
[02:48:41]
 I mean, can we have the answers?
 >> I'll be capping while you do that.
 Okay.
 Okay, so the breakout rooms are back.
 Okay, the breakout rooms are back and we're going to conclude the class.
[02:49:07]
 All I was able to teach about was Redux, LICE, reducers.
 Basically, we were starting to code the function.
 What else did I teach?
 Oh, we went over the TDD read practice.
 So, I should add it here.
[02:49:29]
 We went over TDD practice.
 We finished it.
 The back end and also the route.
 So, that gives you a very good idea of how to do the assignment that's due tomorrow.
 I mean, you should have already gotten started
[02:49:51]
 and you just need to do some finishing touches
 after, you know, seeing how I
 showed you how to complete the TDD read practice.
 Now we're gonna, you have a chance
 to take your attendance or mark your attendance.
[02:50:10]
 You have three minutes to do it.
 And class is dismissed.
 That's today's lesson on Redux,
 but I'm gonna continue the mini evaluation
 with Alexandria, and I'll open up the breakout rooms. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 10, 2025 20-0.txt"

Transcript from Mar 10, 2025

[00:00:00]
 All right, good evening class. Welcome to this first day of class in Codex Academy level four.
 And today is week one, day one.
 And our theme is review. Basically, we're going to review some things
 from previous levels to make sure our foundation is strong
 for this level, because I want to teach you
 some really cool programming concepts,
 make sure which will make your programming
[00:00:44]
 more efficient and more powerful.
 But you can't do that.
 I mean, you can't learn it if you don't have your
 foundation strong.
 So we're going to review and hopefully you will,
 you will remember the things that you learned from the previous levels.
 Okay, so in the first hour, we'll take attendance, dependencies and a programming language called TypeScript.
[00:01:30]
 Then in the third hour, there's something new I want to try, called many evaluations,
 which I'll, I'll discuss it later on. Oh, wait.
 Now, I'll discuss it here.
 So many evaluations, so the evaluations that I did for level three,
 they took very long.
 So I want to see if I can just do many evaluations
 throughout the week, just a few questions.
[00:02:04]
 And then once I ask them and then once you,
 you know, once I ask you questions and then you're able to explain the answer,
 then I basically, I don't have to ask those questions again. I'm just going to trust that you'll
 remember the concepts that were reviewed in many evaluations.
 So that, you know, basically, you know, how you build on your capsule and project little by little.
 These many evaluations will build on, build on each other.
 Basically, just asking you questions that you learned like the week before or some topics that we already learned.
[00:02:50]
 And then the next week has different questions about more new topics and so on and so forth to week, just basically four questions.
 Maybe four or five questions that will be asked in these many evaluations.
 So that by the time we get to the end of level four, I still just don't, I still will
 just ask you four or five questions because I will count all the previous questions as
 I'll that I've asked in the previous weeks I'll count them as answered. So this
 should spread out the evaluation time more evenly and make the evaluations a a smoother process, I hope.
 Alright, so make sure you take attendance and on over to your code X account and mark yourself
[00:03:56]
 present. We're all here. This is the whole class. There's only five of us. I mean, five
 classmates. Only five of you guys were able to make it through to level four.
 And I'll do my best to help all five of you finish level four.
 You don't see an option.
 Okay, let me double check.
 Okay, it think I'd let you check this. [BLANK_AUDIO]
 >> Just a little check in.
[00:05:34]
 Oh, I see.
 Alright. You should be able to check it now.
 Okay, thumbs up if you're able to take attendance.
 If it's working now.
 All right.
 Okay, so let me load up the announcements yeah so the hand picture is actually for raising the hand and then the face picture is for your thumbs up
 So, uh, we'll go up the announcements now. All right. Alright.
[00:06:50]
 I made it bigger. So welcome to level four.
 Congratulations you guys.
 Thanks for your hard work and dedication. Keep up the good work.
 We just got back from a one week break.
 I know I didn't have a one week break.
 I had to do evaluations and some other things.
 And hopefully you were able to rest during your break,
[00:07:16]
 but hopefully you didn't rest too much.
 And I hope you even took the initiative to keep working on your capstone and make sure that you met the past requirements.
 Like from level three, whatever you got a zero on.
 I hope you were working on that and making sure you, I know you, I mean, you're not going to get graded for those
 passive assignments, but it's for your own knowledge. If you can, whatever you got a zero
 on in level three, for your cap zone, you should challenge yourself and still try to get
 one point on it, even though it was not being graded anymore.
[00:08:06]
 You know which ones you work on and which ones you need that need work basically.
 The last schedule is the same as before.
 I think there's only one official holiday which is in May, which we may or let's see March.
 People, we may or may not get to this in the scene.
 We might finish before this.
 Okay, so survey in July cohort, there was a survey posted, so please take the time to submit your confidential answers.
 So it looks like this into the like hole horn.
[00:09:07]
 This is up here. It's close to the bottom.
 There it is.
 Make sure you take the time to fill that up whenever you get a chance. Again, it's confidential answers.
 I won't know who said what for the who's specific re-answered questions.
 I'll know this in general with the results are, but not any specific names.
 Practice problems have been posted in the sidebar. So the practice problems from level 3, so right now is weak.
 What? These are the practice problems from level 3 right here.
[00:09:59]
 Oh, here. And also this, I forgot to put it in the announcement.
 So many evaluations.
 So the first many evaluations should be very easy.
 Five points complete the evaluation before the due date. So basically, we need to complete
 the evaluation before the end of the week. Saturday, March 15. And, first one,
 properly explained 3HC and L tags that should only be in the body tag.
 So, you know, there's a body tag in when you write in fix.hcl and there should only
[00:10:56]
 be 3 tags that go inside the body tag.
 If you're applying good, uh, good, are you principles? There should not be any H1s
 in the body attack. There should not be any dims in the body attack. No, the R tags, no
 H R tags, there's only, there should only be three kinds of tags or three tags that you can put in the body tags.
 So that's what this is about.
 Probably explain these primitive data types.
 So primitive data types.
[00:11:38]
 So you might hear that now and then.
 These are called, these are primitive data types.
 Numbers string and Boolean.
 And you can compare, they are compared to object data type,
 data types like arrays and objects.
 So, so things that will be talking about like numbers.
 I can go to strings in some numbers.
[00:12:11]
 Strings.
 And when you, when you use a single quote, when you use a double quote, I make a Teched string. We'll talk about Boolean variables and naming it convention,
 especially for Boolean, because there's no name it based on what they represent.
 So, like if a number, like if you want a year, then you should name your variable year,
 or if you want age, then you should name your number variable age. So this
 basically, name your variables based on what they described. And then here, why can't
 their values change after declaring them as constant? So if you have a number string or a boolean,
[00:13:26]
 I can't the value change after the kind in this class.
 It should be easy answers for you guys.
 Now properly explain these object data types, arrays and objects. So like what's the array syntax? What is,
 how do you get the length of an array? What are items in an array? How do you expect the item?
 What's the object syntax? What are object properties? What's the documentation, with the bracket documentation.
 I do add properties before you create an object.
 You can add properties in the object before it's created
[00:14:15]
 or during this creation.
 You can add properties after you create an object. great the knob yet. And why can they be declared as cons but their values can change.
 Like you can make a array called colors and use a cons. Clons colors equals an array and then you just put in some colors and then you
 can go in later on and change the color in the first position even though it
 was const.
 Why is it?
 You can do that. And properly explain functions. So what's the syntax of functions? What
[00:15:11]
 are parameters? What's the code block? What's the return value? What's a not in
 the functions? Are the functions inner, or anything about functions.
 So this is just an easy, mini evaluation,
 just to get you warmed up.
 And we'll be doing mini evaluations later today
 and for our week until we take all new
 evaluations done.
[00:15:53]
 More than a minute since the days are back. 1, 2, 3, 4, 5, 5 days of past this week.
 Mark, your days dream only when you mastered the topics and that were discussed on those
 things and going older.
 When jump around, around, so you get lost, but you should feel that already.
 You don't have anyone doing this in this class, I think.
 And as we can use recordings to catch up.
 And we can use the reference guides to find topics.
[00:16:39]
 So I have reference guides for level 2, 3 and 4 here.
 We haven't started this yet, so it's going to be empty,
 but we have all the topics we'll level 3 right here.
 Basically just click on it, read a reference.
 There it is. There it is.
 This search for any keyword that you're looking for.
 For example, if you want to learn how to isolate the
[00:17:18]
 Mount phase, the update phase, and m-mountees.
 Then you look for the word isolate.
 When you can see here, there's five results.
 There's isolate the mouth phase.
 Isolate the update phase.
 There's isolate the mouth phase.
 You can go and hit melt.
[00:17:44]
 you can go on with the mouse.
 Here's isolated on-mail bass.
 So that's the reference guide there. If you see the mini evaluation and there's some things you're not sure about,
 or you need reminders about, then go ahead and look them up either in the videos, or you can just do the general These are general principles.
 And we're not really specific to how IT thinks,
 because these are all general principles about JavaScript
 and read similar.
[00:18:40]
 But you're preaching, you have the recordings
 or just search for the answers. You just get a refresher from searching on the internet.
 Okay, so we're gonna get into the class now.
 So get ready to focus on the class, make sure you take notes,
 don't just sit there and listen to me like
 like on a podcast but I'm actually following along you need to tackle that type
 and you know raise your hands if you have any questions take notes on what I'm saying.
[00:19:25]
 Like, even if I don't text some things,
 but if I did useful, make sure you take notes,
 mark it down and hopefully you're able to focus
 while you're in class,
 'cause if you can't,
 then you should walk to recording during a better time.
 And at least have your microphone ready for the evaluations,
[00:19:50]
 the many evaluations later today.
 The, just basically have to finish them anytime this week
 to get the, the on time points.
 I mean, they have, we have to finish the mini evaluation during the third hour class.
 What it possibly after class, but it'll make me do that if you know the answer you should respond to here and you'll have to get that in the evaluation out of the way.
 Okay, so the announcements are done.
 Now we are going to work on our Deep Sandbox.
[00:20:41]
 Sandbox is basically where we take notes and experiment code.
 So we will make a sandbox level 4.
 More space.
 So if you haven't done that, let's go ahead and do that.
 We can even take notes here
 you should copy this down and actually when you just create the sandbox
 first and then
[00:21:18]
 in the sandbox
 you can on my screen. Next hole. Next hole. Next hole. Next hole.
 Next hole.
 Next hole.
 Next hole.
 Next hole.
 Next hole.
[00:22:00]
 Next hole.
 Next hole.
 Next hole.
 Next hole.
 Next hole. Next hole. Next hole. Next hole. Next hole. So I'm going to start from scratch here.
 Alright, so to create your sandbox, first create a VS code workspace for sandbox level core.
 base for sandbox level core.
[00:22:32]
 Easiest way is to just go to file and then open the folder. You might not have that folder, but that's okay. We're going to create it.
 So the easiest way to create a workspace is to just open the folder. and
 the There it is. It's created. I can select it. Once you open your folder, it'll look like
 this, and it'll have the name of the folder up there, but we wanted to be in a workspace. So we need to go to file
 and then serve save workspace as
 and just accept whatever
 suggestion name there is.
[00:23:37]
 It's basically going to match the name of the folder.
 And now you have workspace.
 The benefit of opening a workspace versus opening a folder is that in a workspace your files are connected.
 So if you name something in your workspace, but you're importing it somewhere else, then it will also rename your import.
 But if you're in a folder, your files are not connected. And if you rename something here, but
 you're importing it over here, it's not going to update your import. It's not
 going to change the name in your import. So I'll use the workspace. So your files
[00:24:17]
 are connected. And they're synchronized. It's that if you rename something the the name changes all around your project
 Now we're gonna copy a react template into sandbox level 4
 Find a template it's better to do it with
 find a template. It's better to do it with, better to do it with copy of the disc holder, I don't want to copy
 it in the middle of the module's holder.
 Okay, so I got this one here.
 There's some stuff here, I'm gonna teach you later.
[00:25:27]
 Yeah, I'm gonna copy this now.
 Actually, let me go to a level 3 reaction box.
 I mean, yeah, I tend with here.
 Copy this.
 I don't need a disk. I don't need a source control.
 Anything else is fine?
 'Cause I'll just reinstall the modules.
[00:25:59]
 It's faster to process the family.
 But now I'm gonna copy this
 and then put it into sandbox
 level 4. There it is. Paste it in.
 Okay, I see it all here.
 I'm going to create a section for notes.
 Sandbox level 4.
[00:26:42]
 And it puts notes here.
 And. and then I'll paste in and we're making the sandbox little more. This is the new
 same box for the core
 for the previous code UPS code, root space, or sandbox, or copy, or react, template into sandbox, Okay, so then those are our first notes just like that.
 I put in review.md on that really short section is going because I want to basically Okay, so we have that.
 Go to the next slide now.
 So, clear your following along and you have your sandbox level four ready. I'm going to go to the next part here.
[00:28:27]
 So review what is JSX?
 So basically, you know this already.
 Java script.
 JSX stands for Java script XML.
 So that's the JavaScript syntax that looks like HTML. You can take notes on this.
 You have these on the reference.
 I'm going to try using the Windows 11
[00:29:18]
 Snipper.
 Windows 11 has a snipper and it has an icon for text actions, it looks like
 an icon with a three lines on it or a paper icon and it can all you do to select
 things on the screen and then it's
 running the text. It's facing here now. here. Go on it there.
 So we are going to rename component files from JavaScript to JSX.
 So if I need my that, and you're template, you should have some components in it.
[00:31:01]
 I got to have a views folder and I have my pages in here.
 I even set it up with hand-blowing refresh.
 So I'm just going to rename these components from.js to.js. dot j s to j s x.
 There it is. And you see that there's a high column there. It's a react icon.
 I'm going to do the same for my other files here. Plant under components. [BLANK_AUDIO] [BLANK_AUDIO]
 [BLANK_AUDIO]
 [BLANK_AUDIO] [ Inaudible ]
[00:32:19]
 I noticed that the icons changed. Going from JS to JSX to icons change.
 Because, you know, because we act, use this JSX.
 So that's the best icon to use for JSX.
 And now let's try to run the app.
 See if it works.
 Your sandbox should work. Not in the app. See if it works. You're a sandbox should work out of the box. I mean,
 you're this since it's based on the react template. You should have a template So it works.
[00:33:14]
 Okay, so something made in render.
 Oh, I forgot to install. I forgot to install every.
 So I need to install everything.
 NPM install.
 Since this was a template, I didn't copy the node module if you type NPM install it'll
 install everything that's have in your package, JSON file, it will install it.
 You can just type in the pinky on your file. [ Inaudible ]
[00:34:47]
 >> Where your audio is.
 So I must say I would say that.
 >> Okay.
 [ Inaudible ]
 >> So I think it works.
 See if I can rotate this. Here's the open mirror. [BLANK_AUDIO]
 [BLANK_AUDIO]
[00:35:35]
 [BLANK_AUDIO]
 Well, I forgot.
 Oh yeah, that was a point.
 It's not supposed to work.
 It's not supposed to work because we need to do some things.
 So in the notes, try to run the app and it won't work.
 It won't work because we rename these things and now I'm
[00:36:06]
 getting these errors. Can't resolve, handle refresh, can't resolve the
 amount page, can't resolve the contact page. So I'm getting some errors so we're're going to fix it. That's a clue already.
 The error is a clue about what we need to configure Webpack.
 So you can handle JSX files because Webpack, it was worth your find when we were working
 with JavaScript files, but now we are working with JSX files and Webpack is not configuring for that.
 So now we will configure Webpack for JSX.
 So copy this here.
[00:37:27]
 Again, I'm using the Glipping tool.
 When you use that,
 it looks, it basically just looks like this, and then you
 show my screen now.
 It looks like this, and then I can click on, this icon that sort of looks like paper. I have a pumpkin on my knife.
 With three lines of text.
 And I cut in that text.
[00:38:10]
 And then I click on "Copy Alt text".
 And then I paste the paper here into the nose.
 So Webpack does not process JSX files by default. So we need to let Webpack look for JSX files. When file extensions are not specified in import statements.
 So what does that mean?
 For example, in the home page here, I'm importing a nav bar from nav bar file, but I didn't specify the extension.
 So we need to let webpack look for JSX files. when file extensions are not specified
 in the import statement.
[00:39:27]
 So this is an import statement,
 and it's specified the extensions.
 So we need to tell webpack
 to automatically look for JSX files.
 So first, let's do this. Let's add j's x to the map will load this section. So we have the map will load her and basically just put a parentheses around this and then use that for a symbol or like a type
 it's called the type I think but think a bit like four and then for JSS. In JavaScript, in JavaScript, usually the OR symbol is two of these, but this is not,
 this format right here is not really JavaScript, it's called "brightX". So it stands
[00:40:36]
 for OR in this case, but in JavaScript, it's a simple as two. So there's that, you need to do that. And then that means these JSS files will go to
 the Babel loader, which is fine because Babel loader, my JSS file still looks the same.
 I didn't change anything in here. I just basically changed the extension. So this means that
 VABL loader will take a look at my JS files and my JSX files that are imported.
 So I'm importing some files here and I'm here. This one should be a JSS file now. So that's going to go through.
 And now the load is going to start converting.
 So I'm converting this into JavaScript.
[00:41:36]
 Instead of JSSX, it's converted to regular JavaScript.
 So we added that we added jsx to the gravel load section. Next step is specified resolve extensions.
 So I'll show you how this looks like.
 So that's the bottom here. We have the bottom result, which will resolve and then make it in
 empty object.
 So that's what that means. It's resolved and then there's a dot.
 And then extension.
[00:42:36]
 So it's the dot notation right now.
 So there's a resolve, there's an object.
 And I'm going to put extensions here.
 So that's what that means.
 Resolve dot extensions.
 When you have an object and you want to access the property in that object,
 you use dot notation.
[00:43:01]
 The result is the object and it has a property called extension.
 And it's supposed to be in array with our extensions in there.
 So in array and so basically this means webpack will automatically look for JavaScript
 files or JSX files when we don't specify their extensions.
 So remember before we have to put JS here or JSX, what we don't have to do that because
 Webpack was already automatically looking for JS as JS files.
 But now we want to do it for JSX files.
[00:44:03]
 So now we have to be explicit about it, and now we have to specify it called.
 So we're telling Webpack, we'll take a pretty little specified expansion.
 We find out if there's a JS version of it, or a JSX version. We'll add these to basically check these file names for these extensions.
 Basically, this basically just adds the extension and if you find it, if you find
 this file good, but if you don't find this file, try the other extension.
 If you find this file, then use it.
 If you don't find it, then it was an error.
[00:44:48]
 So that's what Webpack is doing.
 It's just basically inserting those extensions
 and checking these files are really in folder.
 In this case, there is no.js file anymore.
 It's JSX.
 So the next thing Webpack is going to do is put Jsx here
 and try to look for this file.
[00:45:10]
 And it will find it, because I'm
 going to name her be component to Jsx.
 So that's what we resolve means.
 It means resolve meaning figure out what these extensions,
 what the extension is.
 That's why it's called resolve.
 resolve means is like,
[00:45:34]
 figure it out.
 Find out which is the right extension.
 And I'm looking forward.
 And we're getting it piece of tooth poison.
 Okay.
 Well I'm here, I guess I'll put the code block right here.
 For the crown of the spear.
[00:46:03]
 I can put the console JS and put the JS axis here. for the the the
 the
 the
 the
 the
 the
 the the [ Pause ] Alright, so that's something.
[00:46:50]
 Now we're going to get into something called TMPM, which I think you guys will really like.
 You will like it because
 it's a package manager to replace NPM.
 And packages installed, but basically, why do we want to replace NPM and packages installed by basically,
 why do we want to replace NPM?
 Because packages installed by NPM take up this space
 when they are installed in projects.
[00:47:16]
 So if you have multiple projects,
 then every time you install those node modules
 they're taking up space.
 But with PNPM, it's safe space by storing packages in a central location.
 So it's going to save these packages somewhere and then projects share them.
 So if you have multiple projects, they're just basically sharing those
 the packages that's in the central location. Whereas when you have NPM and you're installing
[00:47:54]
 it, then each project has its own, you know, installation package. And so like, if that
 installation was a little packages,
 there was 500 megabytes in this project.
 And then you have another project that's another 500 megabytes.
 Then you have another project and if that's another 500 megabytes,
 but they're all using the same packages.
 Basically, you use 1,500 megabytes, even though these three projects are using the same packages.
[00:48:29]
 So basically, that's a bigger light. More than a bigger light.
 Well, with PFPM, it just installs those packages in one spot, and then those three projects that are all using those
 same packages, they'll just use it in that one spot, so it's just basically using 500
 megabytes for your package. Even though you have three projects, three separate projects,
 they're all using the same packages, but they're all just drawing it from the central location.
 So PNPM, that's for performance node package manager.
 I'm just going to copy this here and paste it. [BLANK_AUDIO]
[00:49:50]
 [BLANK_AUDIO]
 >> Yes.
 [BLANK_AUDIO]
 >> Yes, I guess we should see that the project
 is working with the the PAP options. So let me paste that in real quick and I'll check these
 check it for the pack works now.
 I mean if the project will run, it's going to be a
[00:50:34]
 nice lot of pack.
 You start with the pack.
 and then we start with the pack.
 There, we compiled successfully and we start the ground right here.
 There it is. Pretty simple.
 Just kind of, you know, a very basic reactant.
 And when you help it to recognize
[00:51:30]
 JFX5 will be resolved and we'll double loaded it. Okay so I think we can take a
 break and then we're gonna continue with P&PAM after the break.
 But feel free to look over this information and bring the break. Okay, take a 10 minute break and I'll see you. See you soon. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break. Did anyone get a chance to try out PNPM during the break?
 So again, PNPM here's a slide.
 It has a website.
 PNPM.io. let's check that out let me just hit it loaded up here
 Okay, so here's the PNPM website.
[01:03:30]
 Does it fast? Discefficient package manager.
 It's two times faster than NPM.
 It's efficient files inside node modules are cloned
 or hard linked from a single content
 addressable storage. So that's what I'm talking about is central storage. We're all there and then the
 project share them. As built in support for multiple packages in a repository.
 We're not really doing multi packaging.
[01:04:12]
 So P&P creates a non-flat node modules by default.
 So code has no access to arbitrary packages.
 So you know how some--
 some node packages, they require other packages.
 And even though you didn't download those other--
 like, you didn't-- even though you didn't install those other packages, you still have access to them.
 So like say, for example, you download the React package, but React uses another package called,
[01:05:05]
 I'm just gonna make it up.
 Maybe it uses another package called,
 to Camel case.
 So even though you didn't install to Camel case,
 you still have access to that.
 That's if you're using NPM.
 But with PNPM, whatever you install,
[01:05:32]
 that's the only thing that you have access to.
 So it makes it like more efficient.
 You don't accidentally access packages.
 That are not in your list.
 So PNPM make sure that if you're going to have a package, if you're going to use a package,
 make sure you put it on your package.json.
 So that is really clear that you need those packages. So I'm going back to the notes now.
[01:06:13]
 So PNPM there it is and just going to put this to these into bullet points right there save it then we'll go to the next slide now.
 So we're going to install packages with PMPM. Okay, so these are the instructions,
 so I'm just gonna copy them.
 Now I'm gonna show my screen. Okay, so we're going to install packages with PPM.
 So we need to use this command here.
 And PPM install.
 There's no space there.
[01:07:39]
 There's no space right here.
 Dash, dash, global Pntm. So let's do that first.
 I will end this up with hack here. But for some of you, if your computer is not running fast,
 then you can just open a new terminal, just leave Webpack open.
 But if you make any changes to the Webpack file,
 then you have to, actually, we're going to install other packages.
 That's going to affect the impact.
[01:08:27]
 So I think I'm going to stop going back right now.
 So it's a stop-up pack.
 And I'm going to type in here, NTM installed, installed dash dash global PN Pm. I already have it installed.
 So, it's there maybe there's enough data. So that's the first step.
 Now, delete the node modules folder.
 The node modules folder was installed by NPM. And when it's solved by NPM, it means not taking it.
 It's not taking the files from a central location.
[01:09:36]
 When you're from the logs of scolders right here.
 It's being deleted now. Now the next step is install with PNPM. So we just kind of twist command right there.
 It's like NPM installed, but we just put a P in front of it.
 So what's going to install all the packages from just package.j-side. It's going to look in here, package that J-SIDE, and install these packages.
 When you set up installing it with NPL, I'm going to install it with PNPL.
 Just like that. You should be able to just type in that command
 and then just start working and installing the files.
[01:10:52]
 It says command.
 I don't know.
 Maybe. You can't use it. You can use it. You can use it. You can use it. You can use it.
 You can use it.
 You can use it.
 You can use it.
 You can use it.
[01:11:09]
 You can use it.
 You can use it.
 You can use it.
 You can use it.
 You can use it.
 You can use it.
 You can use it.
[01:11:16]
 You can use it.
 You can use it.
 You can use it.
 You can use it.
 You can use it.
 You can use it.
 You can use it.
[01:11:23]
 You can use it.
 You can use it. You can use it. You can use it. You can use it. You can use it. Can you go with casting? [BLANK_AUDIO]
 Maybe if you're trying to be starting.
 [BLANK_AUDIO]
 Yes, code.
 Anyone else having the,
 [BLANK_AUDIO]
[01:12:03]
 Did you install it with dash dash global, it needs to have dash dash
 global on it.
 Okay, you can try restarting VS code. [BLANK_AUDIO]
 [BLANK_AUDIO]
 And we find that little bit of a very thin
 skin that we affected.
 [BLANK_AUDIO] So, that one.
[01:13:07]
 When you try to delete, you want to delete it from one drive, yeah, you should delete it from
 one drive.
 That'll save space in one drive. space and we have new credentials.
 If you ask for your admin credentials, go ahead so that it can
 allow you to delete.
 The modules, it's a big folder and you don't need it all,
 especially if you can get your package to get your projects to share the package with
[01:13:51]
 instead of installing those same packages over and over again per project. Okay, so it's something that has to do with the pads.
 Let me see if you can see a particular case.
 But you can probably search, you
 can do a search on how to troubleshoot that.
 But you should be able to maybe in PX.
 PNPM is called.
 Yeah, you should probably be able to NPX and until you figure out how to use it.
[01:14:47]
 You can NPX.
 You can probably do NPX, PNPM install.
 Because it's possible that you just have to restart your computer and if you
 restart your computer you're going to disconnect.
 So the for now you can then Px, Pn, Pn, install. It's like this.
 Next step.
 Delete the package lock Json.
[01:15:41]
 You need to delete this one becauseNPM has its own lock file. This
 one will, this package lock by Json will interfere with it.
 So find that one. So the package lock by Json will delete that one because yeah, it makes its own right here
 We'll have fun to like to keep people in the room [BLANK_AUDIO]
 It's possible I'll extend it that you might not have to just make such a computer,
 but you could probably do that during the break.
 So you don't need any time here.
[01:16:51]
 So when you get PFTM installed and running properly,
 just use it to install and uninstall packages in that one.
 You can go back to your other projects. If it's working properly for you, you can go back to your other projects, delete nodes modules from there.
 And actually, if you're not even going to open those projects,
 we don't even need to reinstall the modules.
 Just reinstall them when you need to look for those projects.
 But yeah, you can go back to the product projects and install,
[01:17:43]
 I mean, delete those load modules that was installed by
 NPM and then reinstall them with P and P.
 Okay, so that one's that.
 Okay, can we do something with depth dependencies? So if you were not able to get PFT at working, you can still do this part with regular So, them depend on the seniors.
 So them depend on the seniors.
 They are packages that are only required for development purposes.
 And more specifically, they are packages that are not important by your project.
[01:18:47]
 So for example, Muntac, does your project import to a pack somewhere in it?
 No, it's not your projects don't directly import Webpack.
 Does your project directly import Babel?
 I know they don't. So, if your projects are not directly importing
 some packages, but you still need those packages for development
 then those are called dev dependencies. So Webpack and Babel, they are dev
 dependencies because you need them for development,
[01:19:28]
 which your project doesn't import them directly.
 And this is using directly.
 So this is copy of this part right here.
 And then we'll go the step by step. and we'll show my skin down. I'll bring it back to the other screen. [BLANK_AUDIO]
 [BLANK_AUDIO] We don't close this window until you get to text copy.
 Like those window and then I realize that text is in copy and copy properly. Use of double pen and see if it's going to change
 use of lower points.
[01:21:13]
 So we're going to categorize our packages as dependencies
 and dev dependencies.
 If we look at our package JSON right now,
 we have dependencies.
 We're going to have another section here for dev dependencies.
 So right now there are everything's in dependencies.
 So what we want to do is, let us call dev packages.
[01:21:42]
 So if you're using P and P and E, then just use this command, but then it can be like one
 pack for the battle.
 Click the name of the, that's just an example right here. here and then reinstall as the dependencies like this.
 Again, if your PMPM is not working, you can do this part of an NPM for now. So I'm looking at, I'm looking at my packing this year. A lot of them, pretty much
 most of these are both of these are the dependencies. Let's start with webpack here, Pm and install
 no-pack. And then I'm going to reinstall it into the the dev package is section so p and p and m install webpack
 But I'm going to put here the flag save them that means it's going to save it into the dev
[01:23:16]
 dependency section
 Here there's deputencies and there's webpack that's added there. And it's not here anymore in regular dependencies.
 Again, dependencies should be packages that are imported by your project.
 The technical agencies should be packages that are not imported by your project, which is still needed for development.
 So I'll get the other one.
 The Webpack CLI.
 Yeah, all the battles.
[01:24:01]
 Everything will add symbol here.
 So yeah, just work on it right now, I'm going to change the
 position, and then it's going to
 change the position, and then it's
 the same thing.
 And basically, I'm just going to
 go over here and use my way up.
[01:24:47]
 And then you can add an install, install loader.
 My project is not reporting that.
 I'm not reporting that loader later that you still use it.
 So, I'm just going to press the app arrow, make it pop up to the last commit,
 dial changes to install, and I'll change it to save that. and then the one and then the fall fast over here. I'm just basically loaded.
 I just press up on size C, that one is all from there and then just changing the
 package.
[01:25:56]
 Then, just up again. and then you can install and then save it in the depth of head and see.
 So my app does use React Router and it does import the app down and app doesn't import to just.
 But the test file is not my app.
 There is just test file except from the app.
 So I'm going to do the just and install just.
 And then reinstall it as a dependency. So there's CSS logo and that will be one there.
 So basically I'm just installing them. I mean, I'm installing them and we're installing them
[01:27:15]
 one at a time.
 So I don't want to do anything. [BLANK_AUDIO] So basically, I think my project just uses three packages.
 The rest of them are the dependency.
 And now you start to see that,
 you start to see that there's a lot that you need just to develop the program.
 And what I mean is, like in the back in the back seam, in the background here, using a lot of packages, [BLANK_AUDIO] You can do multiple at the same time, but you have to, you should remember which one
 they are. I don't miss anything for us. You might have a hard time, um,
[01:29:28]
 I have a hard time figuring out what to miss.
 I'm almost done.
 Just need three more. [BLANK_AUDIO] [no audio]
 So you have some time to view this today.
 I'm just moving all my files to dip the pinion seeds.
 Actually, actually that was the hard way. I could just cut in paste.
 Actually, you could just cut in paste and then move them into the dip the pinion seeds section.
[01:31:19]
 And then install after type npm install.
 Okay, so we see the Lv in here.
 Okay, so that's it all of them in the dependencies.
 You only want the ones that you don't import in them, the dependencies.
 I mean like in your main app.
 So the only ones that I'm keeping here are React, React DOM, and React Router, because
 those are the ones that I'm using in my app.
[01:32:13]
 The other ones like Just, I'm not, that's not part of my app, that's part of testing.
 So testing is part of development, not part of the actual app.
 Yeah, at just Google.
 So what you might want to do is update your sandbox
 within the you want to include your testing packages in there.
 So those are the depth dependencies.
 And now we're going to start going to get an introduction into TypeScript.
[01:33:04]
 So for now, you can just leave your packages where they are and you can get back to them
 later.
 Now we're going to talk about TypeScript. with my so you want to know my prison
 here
 here
 -2.12 for me.
 If you want to update mode, you need to go to the Node.js website. And then the Gs.
[01:34:09]
 And then there's the download button there.
 There's a download tab right there.
 I will get the Windows installer if you have Windows.
 Just use the window to install it. You need to pick your operating system here and then your CPU.
 Usually your CPU might be at x86.
 If it was any of these other ones you would know.
 I think.
[01:34:51]
 You have 23. Okay, yeah, I have a update.
 Since here, 22.14, that's the latest stable one.
 That's the one I usually get the latest stable
 addition. When you're on 23.9, that one is like [ Silence ]
 And so I'm going to kind of move the screen about it.
 Back to this slide.
 We're going to talk about TypeScript down.
[01:35:35]
 So what is TypeScript?
 [ Noise ]
 So TypeScript is a programming language
 that enhances JavaScript.
 So we see here there's a picture.
 TypeScript is blue, JavaScript is yellow.
 We see that JavaScript is inside of the TypeScript circle.
[01:35:59]
 That means that means TypeScript includes everything that JavaScript has, but it provides more.
 So that's what this picture represents.
 Basically, another way to look at it is
 TypeScript is a superset of JavaScript,
 or you can figure it the other way.
 TypeScript, JavaScript is the subset of TypeScript.
 We'll just think of it like TypeScript is
[01:36:32]
 JavaScript with superpowers or more features
 that you can think of it like that.
 But you should know that browsers
 don't understand TypeScript, so you can't use TypeScript language
 directly, you have to convert it to the back to JavaScript or browsers to work.
 It's more like a... so this kind of relationship where there's a superset is more like SAS and CSS.
 So SAS includes everything that CSS has, but SAS is like CSS and superpowers.
[01:37:14]
 SAS is like CSS with more features.
 So it's similar.
 So basically JavaScript, if you write a JavaScript file, it's also a TypeScript file.
 Basically, valid JavaScript is also valid TypeScript.
 But if you want to start using extra features, then you need to use TypeScript.
 extra features, then you need to use TypeScript. So basically, TypeScript allows data types to be specified
 and verified.
[01:37:51]
 So JavaScript, you know, really, you can't really
 specify data types.
 So far, I've been teaching you how to use default values
 to sort of specify what kind of data type you want.
 Like, when you use an image sample here. [ Pause ]
 Okay, so I have an output file.
 So here this default value right here, it's empty.
[01:38:40]
 It's an FPV fault value.
 It's not active.
 It's not actually being used as a default value.
 This is more of a default value where if a out-the-tag is not specified, then this would be the value of it.
 And basically the user doesn't have to specify the out tag. But if they do, then they can just override this value.
 But this one is-- we're using this default value as more
 like a data type.
[01:39:14]
 We're saying we want the message to be a string.
 But we have a empty string here to represent that.
 So what I'm saying with TypeScript is you can do it properly now.
 You can directly specify that you want this message to be a string without
 setting a like a false default value.
 But this is not really using a default value
 the way it's meant to.
[01:39:48]
 This is the real way it's supposed to be used.
 We're just using this as like an indicator
 that we want to string, but it's not really
 a default value that we want to do.
 You don't really want to use a thank you screen.
 So, time script will let us
 specify the data types.
[01:40:15]
 And when data types are specified,
 bugs can be avoided.
 And I'll show you more about that as we learn about the types here.
 And specify data types that provide a pop-up intelligence menu of available properties.
 So it would be nice if you didn't have to like I see there in the chat like new event
 You read people's event. Well, that's how we got the pop-up properties like Intellisence pop-up properties
 But we had to actually instantiate a new object there or create a new object
[01:41:02]
 What with TypeScript? You don't have to create X. You don't have to actually create a new object. But with TypeScript, you don't have to create
 you don't have to actually create a new object.
 You can just say, "This is the event type."
 And I want to see what properties are available.
 So, with TypeScript, you don't use the equal sign.
 And you don't have to create a new object like that.
 When you create a new object, it basically takes a memory.
[01:41:32]
 It's going to be a small piece of memory for that new event there.
 But you don't have to, if you can use TypeScript and just specify the type without creating a new object, then your, your program is going to be taking up the space and memory.
 So, it makes it more efficient. So, this is the website. TypeScript playing.org. Let's check that out.
 Because if you ever want to learn more about TypeScript
 and it's up the available options,
 it's in this website.
 So, TypeScript is JavaScript with syntax for types.
[01:42:22]
 You can see it here.
 See. Hmm.
 Hmm.
 Hmm.
 Okay here.
 Hmm.
 Hmm.
[01:42:40]
 Hmm.
 Hmm.
 Hmm.
 Hmm. Hmm. Hmm. Hmm. Hmm. Well, this one's useful, like when you create an object, like a user object right here,
 it has a first name, last name, and role.
 And then if you try to use that object and then you try to get the name, well there is
 the name here, right?
[01:43:02]
 There's no name property.
 Type, type, we'll tell you right? There's no name property. Types of types will tell you, hey, there's no name property.
 What are you doing?
 So that way, it'll help you find bugs.
 Like, you might be tapping in the property accidentally,
 like maybe you're going to put--
 instead of camel case, you probably might put all lower case.
[01:43:25]
 Well, TypeScript will tell you, hey, there's a type over there.
 And this can put a red, red, red, red, red, red line.
 So TypeScript is a strongly typed programming language that builds on JavaScript,
 giving you better tooling at any scale.
 So strongly typed meaning you can specify the data types and it also
 sees like it also keeps track of the object properties. So it can tell you if you're using and then we're going to pop it in.
 So I'm just going to pop you this side right here and make sure that it sits in the notes. [BLANK_AUDIO]
[01:44:30]
 [BLANK_AUDIO] I think I will just touch it has a lot of stuff that itself.
 So I'll make a new section to type, I'll start a new one for type script.
 So instead of review.md, I'm going to rename it from review.md to
 the tips.
 to
 if you were elected please can
 rename this
[01:45:28]
 these files
 to
 JSX
 so I'm
 I'm
 rename it to tips. I'm going to make a new one for
 attachment because that one has
[01:45:40]
 not a stuff like so. So, we're going to have a good time to get into TypeScript, but I'll get to the slide where you can sort of So we need to configure
 Babel for TypeScript. So we're going to switch from
 Babel to config.json to Babel config.js. And we're going to do some other steps. So I'm going to from the channel. [inaudible] So now you can figure out your travel for a type of security.
 So you're going to rename that file.
 You can click file.
 Actually, this part is not necessary, but I'm just going to do it to stay, to make it easier for us.
 So we're gonna set it easy.
[01:47:55]
 Now, we can take that JSON, just gonna rename it to JS. There it is. We're gonna name it to JS. Here you have it.
 You're going to name it to JES.
 Now, I need to export the default, because this is not a good job of scraping syntax.
 You need to do something that you're going to use job of scraping,, then you should do something with an object, and you're going to do here is export the object.
 Okay, so I'll extend it as it says it was a little bit different. So yeah, probably PNPF is not compatible with that beta version.
 Did you have that beta version?
 Did you have the 23.5?
[01:48:57]
 Or did you have a very low one?
 - No, I had 23.5.
 The current beta is 23.9, though.
 So, but I don't even know where the 23.5 came from.
 I think it upgraded automatically,
 who are always trying to fix it, I don't know.
 I think that was the previous beta version.
[01:49:18]
 So, you deleted, I mean, you downloaded the beta version,
 then it just, they updated it two times.
 So now it's like 23.7.
 Yeah, but I don't normally download the beta version.
 So I think I must have not paid attention to the version, when I downloaded it.
 Yeah, you probably just accidentally picked the highest version. And so, yeah, I've changed my Babel config to JS file,
 and I just put an export default right there.
[01:50:02]
 And next step, install the preset, that's app_bubble preset type tool.
 You can install that.
 Remember this is going to be a dev dependency because we're not going, we're going
 to get, we're going to download a Babel preset.
 Remember, remember we have some Babel presets here, right? [BLANK_AUDIO]
 So we have some battle presets.
 We're not using these directly in our app.
[01:50:57]
 So these are dead dependencies.
 We're gonna get another one to type script.
 NPM install.
 Apple, Apple.
 $0.2 times.
 And same.
 Now we'll save it into.
[01:51:21]
 They live with NCC.
 And if I double check, I should see it in the package file.
 And then the pen to see is that it's type good.
 Now we need to add the preset to the Bible-
 for big jazz.
 And then we're back to the Bible- for big jazz.
 And then we'll add the preset there.
[01:52:06]
 I think the order doesn't matter here. So far it doesn't crash the program, no matter what order it is, but I'm just going
 to just put in the order that you started using it, and it shouldn't hit.
 So I'll try to do that right after I do this.
 And so those three presets now.
 Remember, this TypeScript preset is to compile TypeScript into JavaScript,
 especially the TypeScript, especially the types where you're specifying text. This React one is for converting JSX
 into JavaScript. This one is for converting the import
[01:52:56]
 export syntax that we use into the old style. Okay, so let's use that.
 And we've got to configure Webpack.
 We have to change some files into the TypeScript files, so that's what we're going
 to compare to the new here.
 We're going to leave this second.
 Let's do that.
 It's copy this here.
[01:53:47]
 We're going to tell the road pack to the process.
 Time to be close.
 Let's copy that.
 I'm going to use the screen shape. [inaudible] So we need to add Gs and TSX to the BAPOLODR section.
 So we should have the pattern by now basically just open that to the right back configuration
 file. just open that here, go ahead and pack configuration file and whenever you want to
 babble loaded to take a look at, just stick it in here with the type operator in between.
[01:54:56]
 So it's going to look for Type 3 files and TSX files. So that's like JSX with 18.6.
 Like JSX files, but it's going to be having some type of input.
 So that's a map will load a section and then in the resolve section.
 to map a loader section and then in the resolve section.
 If we don't want to specify the
 extensions, we want to be lazy and let Webpack
 put the extensions for us. So that's what we're gonna do here.
[01:55:39]
 In the resolve section, we're gonna tell Webpack,
 okay, if I don't specify any extensions and try these of these informee.
 Okay so that's that.
 So I added the extension to Baba Lower, which types of open T-SX files. That's just basically you see how they mirror it in the JS and TypeScript and then there's
 JSX and there's TSX. So there's just basically the type that thing on the back. And we added them here into the dissolved extension
 to automatically fill in the oxygen.
 OK, let me see what's next.
[01:56:52]
 Okay, so it's just two more slides. So, we're gonna do this.
 We'll take a break and then you can copy this
 and we're finding a little bit during the break.
 This is just renaming files.
 During the break this was just renaming files
 Js the TS and not Js X to TS X
 So I'm just gonna pop this really quick and then we'll take a break
[01:57:27]
 You can work on this during the break Okay, so I'll be back to this halfway again. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, we're back on the break.
 And we're going to continue with TypeScript. But before I do, I see some questions here.
 Rename that one, because that's in the source folder.
 We are renaming things in the source folder.
 So let me just load up the next slide. Yeah, rename files in the source folder from.js to TS.
 And got JSX to TSX.
 Okay, and then reinstall the React router.
[02:09:24]
 So yeah, you should reinstall the reactor ground.
 So, yeah, you should reinstall everything when PMPM,
 but make sure your react router is in dependencies,
 because your program uses that.
 But style loaders, those would go in depth dependencies because your program does not
 import that.
 That one's done in the background.
[02:09:50]
 It's used in the work on the slide now.
 So we're named files in the source folder from JS to TS.
 So let me do that.
 Source folder is here.
 There's the JSI file.
 Here's one.
 Tds.
[02:10:35]
 You'll notice some errors happen right away. Look at that.
 Even though those errors were not there before. And then I'm gonna rename these.
 T-S-X. [no audio]
 Yeah, that's fine.
 I'm mentioning there.
 [no audio] and zero the TypeScript errors.
 So we're just TypeScript errors here.
[02:11:33]
 Program will still compile.
 That's just TypeScript being picky.
 We're going to get around that.
 Basically TypeScript is saying what happened there.
 That's TypeScript being picked in your hand.
 Basically, you want to use your full TypeScript powers.
 There's so much you can do to enhance JavaScript with TypeScript and TypeScript is saying, "Hey, why are you not using your powers?"
[02:12:28]
 You're not using your TypeScript powers. So that's what those red lines are.
 We're going to tell TypeScript, "Hey, I don't want to use all my powers.
 I don't want to use all my TypeScript don't want to use all my type to take powers because I don't have any right now
 I'm going to learn
 In the meantime
 Don't put all those red mines
 I want those red mines
[02:13:03]
 There so I you name the files I want to go through the lines there. So I renamed files.
 Also the JSX.
 I renamed those.
 So I should see a lot of areas.
 So if I go to the home page here, I see some here.
 I don't see any there. I can't see that there is this most level between j-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d-d- Okay, and then, now run the tap.
 So you see a lot of type of areas with the apps to run.
[02:13:54]
 It was running for it when it was, when it was good. So there is an error.
 We are going to fix that, but we want to recognize that error.
 Okay, so here it is.
 Index.ts.
 Build failed.
 Syntax error.
 unexpected token.
[02:14:39]
 Right there. Basically, it caused this error.
 It's TypeScript and Web Packard together and TypeScript says, "No, this one.
 This one, this one I can't let go.
 If they're going to use their TypeScript powers, they need to have VCs up for this.
 And what is this power? Basically, whenever you're using JSX in your file,
 you need to have it in TSX. So, we name index.ts to index.tsx.
 And now it's compiled. Successfully. And I should be able to,
[02:15:41]
 put in my website. So, what I did there to fix that error was just rename index.js.
 I renamed it to index.ts.
 Then I saw that TypeScript doesn't like it.
 Why is that?
 It's because there's some JSX for some, some of that HTML
 looking code in there and then TypeScript says, hey, if you're gonna have that kind of code,
 you need to be a TSX file. So we look get index J s. I mean index, there's, you know, there's that 8 standard looking code.
[02:16:32]
 A whole type of says, you can't do that.
 If you're going to use J s x, then you should have a TS x extension.
 So that's the only one that was very picky with, wouldn't let us move on.
 Okay, the next one, so I'll be able to run the app and just add to properly rename the files. Even though we still see errors as so runs, those are the TypeScript errors, which don't really, it's really
 with them always stop the program. Here's the next one. Now we're going to
 continue your TypeScript to be less strict. So we don't want so many errors popping up on our page.
 Then just type, do TypeScript errors.
[02:17:32]
 And I think that you guys will feel too fresh
 that you see so many TypeScript errors.
 You're not gonna like it.
 But that's this TypeScript kind of push you to actually use
 TypeScript in every opportunity that you can. So copy that file and copy that So we're going to create kind of a good, I mean,
 just can take that JSON.
 So so far, the only problem is this one,
[02:18:22]
 even though there's no problem here. I'm using all the style
 Maybe you guys don't have that problem
 Let's see, I'm gonna put this
 Maybe you don't have this error
 Well, I'm gonna fix this with a quick body attack
 [BLANK_AUDIO] on the feet.
 One another file, there's a lot of air. There's a lot of touch compared. [BLANK_AUDIO]
[02:19:26]
 If you try to conduct your capital,
 you'll see a lot of times greater than or so.
 But I'm gonna save you the trouble and
 just configure your time scripts.
 So then, we won't see them.
 So we're going to create TS config at JSLod.
 Next, you can make other config files.
[02:19:55]
 So here's Babel config.
 I'm going to create TS config. that Jason.
 Next one.
 Next one. Next one.
 Next one.
 Next one.
 Next one.
[02:20:16]
 Next one.
 Next one.
 Yeah.
 So we see handle refresh.
 I don't know if you have that in your
 Okay, we have some here too in the home page.
 So you get more areas the longer to make that TS config file. And then the kick snap.
[02:20:47]
 I'm just looking at my pages now and then it's running by the page.
 Actually, I have errors.
 So I'm going to see the object with compiler options,
 that JSS is observed.
 So it is happening.
 So we have the created object. This is in JSON file. So we have an object and then I can add an option here.
 Compiler options. See, it's popping up.
[02:21:41]
 I can see the available stuff. Remember when you're in a JSON file,
 you need to put quotations in every property.
 Okay, so there's that, and then now it's saying the
 Quads in Object.
 So if we look at this notation, the next property is
 called JSX.
 So, we're going to go to here, but remember, it works around it, JSX.
[02:22:13]
 And the value will be preserved.
 Notice how these values are popping up automatically. So that's a type script thing. Type script
 lets these values pop up. So if you can use your type script powers it makes
 coding easier. Like pop up here the things that you can like the options that you have. So there's that one. The next one is observe
 tachka pairs. Okay so I'm gonna, okay a lot of it disappeared. I don't see it again anymore.
 I don't see anymore areas.
 Okay, that's good. But I'm going to add one more.
[02:23:09]
 So this one's about modules.
 You may or may not get this error, but I'm going to just tell you this one so that
 you can, you won't have to worry about it finger.
 So compiler options module is heard.
 So I'm in compiler options and the notation tells me that there's a property right here. The documentation tells me there's a property called
 Monterey. There's compiler options and then a property called this one is the capital P. If you just say, "Well, So if you're curious about what these lines, what effect they have, then you can disable
 a line or I'm being deleted, because you can't comment things out.
[02:24:34]
 I guess you can't think of a thing that's type of a plot.
 And you can't see that means the case one.
 Then we see how it comes at the south, and then there's the eastern areas of the area.
 There is again, but now it's over it. I see cannot use jazz, and the x-9 is provided.
 9 is provided.
 So that doesn't really tell you much about how it gives a problem.
 So I'm letting you know this.
[02:25:15]
 So now we can fix it right away.
 So I've activated that. Now I'll be fair to go here.
 Next one. Alright, so I think this is the last line for a tight grip for today.
 So we can just copy this slide.
 And then we just place it in the first.
 Try to chance to
 put it in your notes. So you can use TypeScript to specify data times.
[02:26:31]
 Like, you specify data types with a colon.
 Like, if you're going to set a color, you can specify that it's a string with a code.
 Or if you're specified parameters that don't have default value,
 like an x will be called value, you can do like this.
 They've been very bolded in that event class.
 Specified data types for class properties.
 So if you create a class and you have some properties,
[02:27:09]
 but you don't set a default value for them,
 then you can set the data type for those.
 But if you're not sure what the data type should be,
 just change it to any.
 So if you don don't you can change
 straight into any if you're like like a complicated data type for you. But um yeah.
 So I'm gonna give you an example here. and So, now I have this message variable and I'm saying a default value of empty string.
[02:28:29]
 Well, I don't need to be that anymore.
 I can specify here that I want the string.
 Done.
 That's it.
 Now I'm not saying a big default value here.
 And if we mouse over this, we see that message
 we expected to be a string.
[02:28:53]
 And then we see here, these are the question mark
 assignment that means they're optional.
 Are they optional because they have what we call value?
 They have a default value. And if you've been using the output function,
 you know that you don't have to specify these all the time,
 because these default values will automatically get applied.
 So there's one.
[02:29:24]
 And we've been-- one and see what else events.
 So do I have a handler here?
 I probably don't have a handler here.
 I don't have a handler yet, but you can change those
 handler into the vent. If I had a hand here, like, when it was in the right hand, it was in the vent.
 Not.
 T.S.
[02:29:56]
 I don't think it'll be any of the J-S-X in here. So x4 and we'll submit and it's going to take a function.
 We're going to take it in the event variable.
 But instead of setting a fake default value, I'm just going to say it's an event. And now if I use the event variable,
 I can see the properties that come with.
 And there's the one I use, we use,
 for event default.
 Even in I just put it on so far.
[02:30:56]
 So there's another example.
 If you're not sure what it should be, you can put any.
 But if TypeScript was not giving you any errors, then just leave them.
 Try not to use the word any.
 But if TypeScript is like it's not, it's giving you problems and it's not letting you move on and it's always just marking things red and you're not sure what to be then any
 If there is something that
 Is not causing any type to your problems and you type your pairs and you can read or run
[02:31:44]
 Only use the types try to use the type that you know.
 Okay, so I think that's it, I think it's the easiest one to check.
 You type your place, yeah, that's it.
 Type sure you can do a lot more than that,
 or comment. That's the gist of it. Try to do a lot more than that. Go to that.
 That's the gist of it.
 So for practice, this one was from the last week of level 3,
[02:32:17]
 the react feedback practice.
 See if you guys can, if you guys didn't do this already then we got it
 Otherwise, we can start using your
 TypeScript powers on your
 On your capstone project with make sure you make a branch for it
 Or you can practice
 You can practice on the
[02:32:44]
 Like this on the practice, so like the example.
 This react practice, when you're doing this one, convert it to TypeScript.
 So you're going to make a JavaScript file, and you might have a component.
 So you're going to make a TSX file, and a TS file, and you'll put some types
 in it. So do it for the other practice files. So in the new, I will put it in the new box on the floor.
 Make sure to check that out, try to do that with TypeScript.
 I'm going to start some break-out rules. You know, I have a good time, but this is gonna start them anyways.
[02:33:46]
 And...
 See if anyone wants to do their mini, mini eval.
 For 15 minutes,
 we'll pay our little view for 15 minutes.
 So I can do a mini eval for 15 minutes.
 So, I'm just gonna put everyone in a room you may or may not want to be in there,
 but I can sit from the anyways, that's the only way you can see the rooms.
[02:34:44]
 Okay, alright so Chris wants to do a clean heat out.
 I'll meet you in the whole room.
 Meantime you guys can start working on some TypeScript on these promises.
 I mean on these practices try to apply TypeScript to them. [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO]
 Okay, so it looks like the code X website or the code X account is down right now or
 reloading.
 We started with our servers.
[02:37:19]
 >> It's backup.
 >> Those are backup now.
 >> Yeah. >> And then double check. It's back up. Those are my couple.
 Yeah.
 I think.
 I think.
 I think.
[02:37:37]
 I think.
 I think.
 I think.
 I think.
 I think.
 I think.
 I think.
[02:37:44]
 I think. I think. I think. I think. I think. have with the grades of your small two
 to have
 yeah
 I think
 you do a hard
 hard
 you
[02:37:57]
 you
 you
 it's not Okay, so when the meantime I'm just going to work on this React Feedback Practice, I see some of the guys are in the breakout rooms. Let's see what's going on there. [BLANK_AUDIO] Okay, React feedback practice. [BLANK_AUDIO] Okay. We have feedback practice. I have here sandbox level 4 and I'm going to make a new page or yeah I'm going to make make an engage for React Feedback Practice.
 Do you see?
 React Feedback Practice. Oops.
 Here's X.
 And port react.
[02:41:51]
 Is usual. And then export the function and I'm just going to return an empty string right now. I'm gonna empty element and I'm gonna take on Maki Practice page or practice notes.
 I don't have to keep going out of the slides, going back and forth from the slides.
 Practice MD. Practice on MV.
 I accidentally copied these here, so I'm just gonna delete these.
 When I practice notes, this is react.
 Feedback. Practice. back, feedback, practice. Then I'm just going to paste it in here. properly.
 I need to copy this
[02:43:47]
 Okay, I'm the React component,
 great, a state variable called,
 oh, good, in the cache, Oh, it didn't catch it. Promo message. Okay.
 Promo message.
 Okay.
 So, I'll just start with you.
 State first.
[02:44:34]
 Oh, I didn't copy it properly. Except in.
 Name and email.
 You got cut off.
 Name and email, you got cut off. Name and email. When the form is submitted, let it call Okay, I'm going to go back.
 So it's most likely going to be a string because it's promo message.
 So there it is from a message.
 You state I need to, it's underlined because I need to import it.
[02:45:38]
 Oh, it's actually, okay, I have to tell you, I have to, it's not picking it up properly here.
 I guess I'll tell you guys this tomorrow.
 Oops, I'll fix it tomorrow.
 I'll show you guys how to fix it so it properly imports it.
 Okay, so I need to create an inner...
 Okay, render problem message
 and they form that accepts the name and an email.
[02:46:31]
 Okay, so I'm going to just put main here in the form. I'm going to accept a name and an email.
 So that's the easiest way to do it.
 And it's going to render
 Chrome will message.
 So that's what it means render_pro message and the form. When the form is submitted, let it call a handle submit and inner function.
 So, on submit here, it's not popping up the, not popping up the, oops, no one had to import that.
 This not popping up the, the properties.
[02:47:42]
 I need to show you guys how to fix that tomorrow.
 The, I need to, I need to make an inner function for handle submit.
 So, this is inside of the component. using that takes an event. Because the form provides a event variable.
 And now that I have TypeScript, I can just put event here.
 Okay, the next one.
 Create a module function called get promo message.
 Okay, so that's what that means is module.
[02:48:39]
 I don't have modules here, so I'm'm gonna make one.
 Get promo message.
 That's
 yes, I don't know if there's gonna be any JSX in there.
 So TypeScript or dot TS there.
 Export the function get promo message so I don't know what's supposed to be inside yet sort of my copy got cut off here
 cut off here.
[02:49:36]
 Proemesis.excepts and Event Object. So this one accepts an event object and I can use TypeScript right there. that accepts the object.
 The rest, I'm going to take some time, so I'll leave it like that. I got you guys set up here.
 So that's the setup for now, but I'm going to conclude the class. So let's do that.
 Let's do the conclusion here.
 So I'm just, I got steps 1, 2, 3 and 4 for you. Let's see what you can do with the rest of the steps.
 We were not able to do the breakout rooms, but I can conclude the class now. We worked on
 creating the new sandbox for level 4. We learned about using PNPM to save space on our computer,
[02:51:09]
 because our projects will all use the same packages
 stored in the same essential location.
 Instead of installing those packages over and over and over again,
 per project.
 solving those packages over and over and over again per project. We learned about dev dependencies and how those packages are just for development.
 They're not for our app to import them. So like testing and compiling those
 are mostly our dev dependencies.
[02:51:47]
 We've learned about TypeScript and we've worked on the practice.
 So make sure you take your attendance if you haven't done that.
 Other than that, class classes dismissed. Congratulations, you made it through the first day of class.
 And this week's theme is just reviewing what we learned
 in the last part of Level 3. [ Pause ]
 I'll stick around for a few minutes just in case anyone has questions, to computer problems. [ Pause ]
 >> That's good, very long.
[02:54:07]
 You're able to catch up. If you're able to catch up, that means I was going slow. I see.
 I shared notes. [ Pause ] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 11, 2025 19-56.txt"

Transcript from Mar 11, 2025

[00:00:00]
 Good evening, welcome.
 Good evening, class.
 Welcome to this Codex Academy course, level four, and it is week one, day two.
 And the theme of this week is review.
 The tail end of level three, but at the same time start applying some new
 principles, some new topics, concepts, especially TypeScript. Today's agenda.
 Attendance announcements. We're going to review what we did yesterday, get into some new TypeScript concepts.
[00:00:47]
 Second hour, talk about TypeScript, and finish that practice we were doing yesterday.
 Third hour, we'll do many evaluations and start the new practice day two.
 And we'll have break our rooms for that, and then conclude the class.
 So make sure you take attendance.
 Looks like everyone's here, just mark yourself present.
 And I'll go over to your Codex account.
 Now time for announcements.
[00:01:36]
 Announcements. The same is yesterday.
 Again, welcome to level four.
 We have a regular schedule this week.
 There is only one scheduled day off, which we may or may not get there.
 We'll see.
 So March, April, we probably won't get there.
 But that's there just in case.
[00:02:10]
 If I miss any holidays between now and
 the expected eight weeks of class, just remind me.
 Again, there's a survey in July cohort. Make sure you take the time to check it out.
 Let me just pull it up here.
 Okay, so here's the survey.
 And make sure you click on it and fill in the answers honestly because your answers are confidential.
 I won't know what your answers are.
[00:03:04]
 So you can be honest with it.
 Oh yeah, there's also a thing here for student of the day.
 We have a student of the day.
 One of your classmates, Chris.
 So congratulations there.
 And let's get back to the announcements.
 The practice problems, all the practice problems are listed here in the bar in the sidebar. And remember to mark your days.
[00:04:00]
 Mark and Green only when you have mastered the topics discussed on those days.
 Make sure you go in order. So day one, day two. So right now we're on day two. The one market green yet.
 Only market green.
 After you've mastered it. So you have to manually market as done.
 After you're maybe after you've taken all the notes for the class,
 and you pretty much understand the things talked about,
 you can market green.
[00:04:36]
 And especially after you had all your questions answered.
 So if you had any questions about the concepts in day one,
 don't market green until those questions are answered.
 Okay, so now we're going to get started on class, make sure you take notes,
 type what I type, follow along, use OCR to copy the notes
 and make your note taking faster and
 more convenient. But also if you're busy right now and you can't really focus on the
[00:05:12]
 class, remember what's recording during a better time. And you should have your microphone
 ready for the mini evaluations. I should put an announcement here. So again, just gonna quickly show you the mini evaluation.
 I didn't get the chance to do it yesterday.
 We ran out of time and also code X was,
 the code X account was running slow.
 But yeah, basically I'm just gonna do mini evaluations
 Basically, I'm just going to do many evaluations per week, or more, just depending on how easy they are. On a regular basis, the evaluations will be't have to do a big evaluation at the end.
[00:06:07]
 And these questions are really easy right now.
 But the next one, the next mini evaluation will be the new topics.
 So, you know, we're going to practice these topics. So, you know, we're gonna practice these topics, so it shouldn't be too hard.
 Next, we need evaluation, it shouldn't be too hard.
 Okay, so that's enough for announcements. Any questions about the topics from yesterday?
 I'm gonna review them now.
 So if you remember anything that you need clarified, it's a good time to ask it during this
[00:06:57]
 review session. So these are the topics that we talked about. So we created the workspace sandbox
 level 4. That's where that's where we'll be taking notes and then we just pull
 it up here on the side.
 up here on the side. Just so you can see it. And make sure you open the sand box. I mean, open the workspace instead of just the folder. So when you open it, you should see workspace here.
 Because when you see workspace there there that means all your files will
 be linked together if you rename something like the function name or the component name,
 if you rename it using this one right here, then it will rename everywhere else that report this.
[00:08:25]
 Yeah, but if you don't have this workspace, if it doesn't say workspace here, then your files won't be linked. And if you rename something here, if you rename it here,
 you'll have to manually rename it everywhere else.
 Okay, so the next one.
 All right, and oh yeah, that sandbox was based on a React template.
 So the guy should have created the React template in level 3 and we're using it now.
 He should probably start updating our React template. Okay so we talked about JSX that's then tested for JavaScript XML. Okay, so this one right here are these three dots. There's no quick fixes available.
 But yeah, this is what we'll be doing.
[00:09:51]
 And I'll just walk you guys through that.
 So that you understand why it's like that.
 I'm going back to here, JSX, that's
 where JavaScript XML.
 So the X stands for XML.
 And we started renaming our components from.js to.jsx.
 You won't see that in my sandbox the sandbox. So this is a confusing, but that's what we did.
[00:10:37]
 And then we started continuing Webpack. We added JSX in there.
 Well, I can show you that. This web pack by default doesn't process JSX files.
 So you have to add them there.
 So here, we want Babel loader to look at those JSX files.
 It's just the extension that changed.
 It's still JavaScript.
 All we did was change the extension.
[00:11:10]
 So, yeah, Babel loader can still run through Babel loader.
 Because before the extension was JavaScript or not JS,
 then all we did was change the extension. So yeah, number
 will be looking at that. And then this one right here, resolve. We added these
 here. This means that Webpack will automatically add or check for these extensions.
 So, like this, okay, like a homepage. I'm recording something from the snap bar file. Well, you don't see any extension here.
 That means Webpack's gonna look for.
[00:12:10]
 Js or not.
 JsX.
 That's what this part means.
 So we're gonna start, let's put a comment here about.
 Make sure you put a comment about what this means.
 Make sure you put a comment about what this means. Make sure you put a comment about what this means. Make sure you put a comment about what this means.
 Make sure you put a comment about what this means.
[00:12:38]
 Make sure you put a comment about what this means.
 Make sure you put a comment about what this means.
 Make sure you put a comment about what this means. Make sure you put a comment about what this means. Make sure you put a comment about what this means. and that's over and I put it in the tip section
 so it means all
 you can put these notes in there
 so that's very easy to find
 so like this one right here, I can just copy this, paste it in here, like that.
[00:13:16]
 And then paste in the other one.
 So that it's all in one place.
 I know it makes the webpack file a little bit messy, but once you've memorized this
 stuff, you can start deleting these comments.
 But when you put the comments in like this, at least it's, you know, the information is easier to access.
 And you can use it for evaluation. See, the web packet for JSX files, when file extensions is not specified in the input
 signal. So we'll go back to that.
[00:14:09]
 So let's look for those extensions.
 Okay, the single values.
 [INAUDIBLE] OK, the customer is about travel.
 We need this.
 So we did about--
 we didn't do it.
 Oh, no, we didn't do anything different from travel.
[00:14:41]
 That would say the same.
 OK, for this one PNPM, we started using something called PNPM,
 called best-
 as for performing node package manager. And that lets us use
 packages from a central location instead of downloading them to each
 project that we're working on. We just have one
 central location and each project just looks at that one location. Now we're not just constantly
[00:15:12]
 downloading is all in multiple copies of packages. We're just installing one copy of each package. And then the package and then our projects are just using that one copy.
 And so this is how we installed it. You should install PNPM with a dash dash
 global flag. You can put this flag or parameter you could put it before or after,
 it doesn't matter, as long as you put it in there.
 When you install it globally, you don't need to put NPX in front of the word there, or a command.
 Like when you run this command, PNPM install,
 you don't need to put NPX in front of it. That's what the purpose of global does.
[00:16:13]
 It makes it so that it's like an app.
 Like when you install something on Windows, it's like an app by itself.
 But when you don't put this global then
 you need to put NPX in front and it's like you're just running it from
 within another app. So for example
 And so right here. Like Webpack.
 I can't just type Webpack.
[00:16:50]
 Maybe I can.
 Yeah.
 So I can't just type Webpack.
 I can type NPX Webpack.
 And it'll work.
 Remember Webpack is a package that I installed. And it'll work.
 Remember, Webpack is a package that I installed, everyone installed here.
[00:17:15]
 And Pntm, that's also a package.
 So usually we would put Npx, Pntm install,
 like CSS folder, something like that. we would put NPX, PN, PM install, like CSS order,
 something like that.
 But because we installed it globally,
 we don't need to put NPX in front.
 It becomes like a standalone app.
[00:17:37]
 But when we put NPX in front, it's like this.
 It's running as like a inner app inside of the terminal.
 Whereas when it's like this, it's like a standalone kind of app,
 where you don't depend on the program to run it.
 When Npx is in front, that means you're calling this program to run this program.
 And so that's to run this program.
 And so that's like a inner program. But when it's like this, it's like a program running by itself.
[00:18:13]
 David, do you have any questions?
 Yeah, I wanted to actually, should we move the AWS packages out of the dependencies and put them into the dev ones.
 They have the pins.
 No, I didn't do that because I didn't have them in here.
 Yeah, I didn't have them in here, but I got them on my practice thing.
 I didn't know if I should.
 So, so package JSON, mine doesn't have AWS in here.
[00:18:45]
 Actually, I'm going to move this one.
 I'm going to put them next to each other.
 Package JSON, you can, it's just a JSON file.
 So it's okay to move stuff around.
 Just a mess of it's type there.
 So AWS, like DynamoDB packages, those would be dependencies.
 Why is it? It's because your apps are importing them directly.
[00:19:14]
 The dependencies are things that your app was not imported.
 Does your app import SAS loader?
 No, it doesn't. Does your app import? Babel CLI, no it doesn't.
 But your app imports AWS,
 valuable DB. So you should put it in dependencies.
 Remember dependencies are things that your app imports.
 And that was a question here in.
[00:19:45]
 So I cohort.
 And I saw that.
 Make sure, I mean, don't let the app science fool you.
 Don't let these app science fool you.
 Because I know most of, most of, like all the ad signs eventually
 went into the dependency right here.
 But in this case, it's not a dependency.
[00:20:16]
 It should be a dependency because our app imports it. And it uses it. It uses commands inside of it.
 And this one was this one. We talked about this in the thread here. It was mistaken.
 We placed there. If you don't use the global flag, then it will end up curing your dependencies.
 There's PNPM. It should not be in your dependencies. You should install it globally.
 Like this.
 And then it won't appear inside your clear dependencies.
 So there's no PMKM anywhere here because it's more like a standalone app.
[00:21:24]
 So what else do we do? Yeah, we installed PMPM globally, and then we deleted the node modules folder.
 The reason for that is because we want to use the packages in a central location.
 When you're using the node modules folder from NPM
 It just install it right directly in your in your project
 Well when you're using pnpm it installs everything in a central location
 Then your project just you know just looks at it from there
 So we had to reinstall everything with NPM right here with this command and we had to delete the lock file.
[00:22:11]
 The package lock file.
 So we'll conflict with the NPM lock file.
 And then you know just copy, I mean repeat these steps for your other projects so that you can save space on your computer.
 Then we started separating things out.
 Dependencies and we categorize them as dependencies and dev dependencies. Remember, dev dependencies are things that are not being imported by your app,
 but you still need them to build your app.
 Like, Webpack and builds our app or compiles our app.
[00:22:56]
 So that's in dev dependencies.
 What our app directly imports React.
 So React is in our dependencies.
 So here's react and this one is for browser router.
 So there's an appendices and here's Webpack our app doesn't import Webpack.
 So it's in dev dependencies.
 We still need Webpack for our app to run. So we put it here and categorize them separately.
[00:23:36]
 Now we start learning about TypeScript, which is just basically JavaScript
 with superpowers. It includes everything that JavaScript has,
 but just adds to it.
 It's like CSS.
 SaaS and CSS.
 SaaS is just like CSS would see for powers.
 SaaS includes everything in CSS,
[00:24:00]
 but you can do extra stuff with SaaS.
 but you can do extra stuff with SAS.
 So to get types of going, we had to configure Babel.
 We turned Babel into a JS file.
 And we had to put export default.
 And then we use Pnpm now.
 We're starting to use Pnpm and we did save dev because Babel preset TypeScript is something
[00:24:35]
 we don't import into our app.
 We need it to compile our app.
 So we went into the dev dependencies. And then we added it to
 gobble preset. I mean, we added that preset to our gobble file. So the
 gobble file should look like this now. We should have three presets in there.
 This one's for testing. This one's for React and then this one's for type script.
 You should write now that it's
[00:25:13]
 now that it's
 in
 now that the
 configuration file is in JavaScript, you've even put comments here.
 You can put comments, mix of these.
 Basically, this TypeScript file, I mean this TypeScript
 presets, it removes the extra stuff that types of, basically it removes all those types so we can be adding
[00:25:55]
 data types or JavaScript file in TypeScript but this one just basically removes them so that it looks like JavaScript. So it removes timescript code [BLANK_AUDIO]
 Now the one we acted in a converts JSX to JavaScript. another one in groups the new import export syntax
 and I'm sure you'll run into that whole export and for syntax if you're searching for things on the internet, you're going to run into that.
 I probably don't need a TCTU. You'll see it and you'll understand what it does, but we're not using it.
 It uses the word "
 "
 " "
[00:27:29]
 And it uses
 "
 "
 " "
 " "
 "
 "
[00:27:35]
 "
 "
 "
 " "
 "
 " "
 "
[00:27:42]
 "
 "
 " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " And we also had to configure Webpack for TypeScript.
 So we added TSX and TS to Webpack.
 And so here earlier.
 So here, we're passing TypeScript TS files and TSX files to novel loader.
 Because now, that baloder has the ability to process those.
[00:28:09]
 Remember, we gave it the ability right here.
 To process.
 And we added these so that.
 So that Webpack will add automatically and the extensions after our file names here.
 Okay, so you should be updating your React template and renaming your JavaScript files to TS files and
 your JSX files to TSX. So if you have a template maybe I would create a separate template for level four. I'll leave the level three stuff alone.
 And I'll copy and paste a new template for level four.
[00:29:19]
 And then we just open the new template right here. I'm finding it.
 And I'll start updating it,
 especially what that looks like.
 And so here's a, here's a, here's my react template.
 It's still JavaScript, I think, because we've only been changing files in the sandbox.
 So it's good practice.
 When you convert your react template to TypeScript, you'll have to practice when you just learn.
[00:30:09]
 So make sure you start converting your React template.
 Make a separate copy for a level 4 and start converting it to TypeScript.
 That's going to be in the next mini eval converting your React template to TypeScript. That's going to be in the next mini eval converting your react
 template to TypeScript. That's a good way to practice and make sure it works
 because once you convert it and change it to TypeScript and it runs then that's
 good. That means you successfully converted it to TypeScript. But if you're
 converting it and it's not ready,
[00:30:47]
 then you're missing something.
 So it's been practiced.
 You can hurt your reactant with the TypeScript.
 And also, you need to configure TypeScript, so it's not so strict.
 Otherwise, you're going to see what ones have red lines on your apps, because TypeScript
 wants you to use the full power of TypeScript.
 And since you don't know the full tower of TypeScript yet,
[00:31:25]
 you don't want to be bothered with all those red lines,
 which basically that TypeScript saying, "Hey, you're not using your full TypeScript power."
 And these options right here, it starts removing those red lines so that you don't have to be bothered by those red lines and you can just focus on
 things that you already know. But when you know TypeScript better, you can remove these options
 to see if you're fully utilizing your TypeScript algorithm. But for now you leave them there,
 they're like training wheels.
 You leave them there until you figure things out.
[00:32:13]
 So that's what it looks like this.
 We have to create a type of GS config file.
 Right now I'm gonna send off to our space.
 And to make a GS config file. Right now I'm in Sandbox workspace. You have to make a TS config file.
 Right here, TS config, that's JSON.
 There's an object. This is JSON, right?
 So it's using JSON format. You don't need to export anything when you're using JSON format.
[00:32:48]
 Yes, basically, you could look like an object,
 but you have to use rotations around each property.
 And this is how that will look.
 We're setting the compiler options.
 We want to preserve the JSX and we want to preserve the modules.
 If you disable these, let's see.
 By disable this JSX here, it's holding pages.
[00:33:19]
 We're going to start showing stuff.
 OK, there.
 So as cannot use JSX unless the JSX flag is provided.
 So basically we enable JSX by doing that. So basically we're telling
 types of JSX is allowed. Don't worry about that. Apple will take care of that for us.
 And we see, I don't think module will affect anything right now.
 I should probably just introduce module later on when we really need it.
[00:34:00]
 It might affect yours if you're template and include more stuff.
 Then you might need this.
 But for now, my template doesn't have anything at conflicts or shows errors.
 With that.
 Can you see here?
 You can't hold your touch.
 you can't hold your touch.
[00:34:31]
 Yeah, I don't think anything else will conflict.
 I'm facing the off. But you'll run into it eventually.
 I'll tell you when something is affected by this.
 Okay, so with TypeScript you can specify data types.
 You just use a colon.
 Like if you have a, you're setting a color, you can, you can say that you're expecting a string.
 If you're, like, when you take an event variable, you can put a colon and instead of using a default value,
[00:35:13]
 you just put a colon and put the event class there, and it's going to capital E.
 And you cannot serve which type to use in the games,
 but any, because types of your client,
 types of your client put a red split wheel on,
 because you're not, you're,
 the most basic part of TypeScript is specified the data type.
 Well, variables. That's the most basic.
[00:35:44]
 And I didn't disable that part.
 Sometimes people want you to specify the data types of variables.
 So you might see friends where you line soon.
 And then we started going over the feedback practice.
 And we got it to line number four.
 We're creating a function called get polynomial message.
 It's supposed to accept the independent object.
[00:36:19]
 And so we can look at that.
 And how I look at that.
 And how I started coding that.
 So I made a React component called React Feedback Practice.
 And there's handles of MIT. And and accepts a event object.
 So I'm just specifying that the type is an event.
 I'm not using a default value anymore.
[00:36:56]
 We use empty default values.
 The reason why I had to use empty default values is to prepare you for TypeScript.
 So now that you know TypeScript, you don't need to use empty default values.
 You just set the type right next to it and we call them.
 And then get promo message is a module.
 Same thing.
 And we're going to send it a event object.
[00:37:36]
 And you can already guess what it's supposed to do.
 This is supposed to do.
 Get promo message.
 So remember we wrote a landing page and it is supposed to do. Get promo message. So remember we wrote a landing page,
 and it's supposed to provide a promo message.
 Like discount code or something.
 That's what that's supposed to do.
[00:38:00]
 You basically see it when you finish the practice all the steps.
 That's why these steps five to ten are great out because we didn't do them yet.
 We'll go get to those.
 And now let's add some TypeScript concepts.
 So get ready to take some notes in your sandbox.
 So it was a nice time.
 We have to go to have some of the files open.
[00:38:39]
 Okay, so here it is.
 TypeScript convenient imports.
 So TypeScript provides intelligence, pop-up venues,
 for objects and exports.
 The files that I need to be open for TypeScript
 to get information.
 So let's just test that out. So our sandbox, level four, is it should be in TypeScript now. And for us to import anything, usually we have to have the file open.
[00:39:22]
 The good TypeScript, you don't. You don't need to have your file open, but with TypeScript, you don't.
 You don't need to have your file open because now if everything that's attached to your file, it basically just,
 it knows, it categorizes everything for you when you turn it into TypeScript file.
 So here's the home component.
 Actually, no, I don't want the home component.
 I want the React feedback.
 So that's the only file that's open.
[00:39:59]
 What if I wanted to use that function, get promo message.
 I see it right there.
 I didn't even have to open the file.
 I can just click on it, that currency of TypeScript.
 When you're using TypeScript, it knows the TypeScript files that are in your project
 and you don't have to have them open anymore,
 which is important.
[00:40:30]
 So TypeScript automatically imported this one.
 When I checked on the top of menu.
 Just going to use this later on.
 So I'll leave it there for now.
 And then copy this so that you can take note.
 So that's what I meant by convenient import.
 See how many files open. and then objects in there. The objects and exports.
[00:41:22]
 So the objects and exports should be in TypeScript files.
 They have to be in TypeScript files for TypeScript to know about them.
 Otherwise, you'll have to open them so you can export them for it.
 Basically, you have to open the files.
 If they're not TypeScript files, you have to open them so you can import them.
 But if they are TypeScript files, TypeScript nodes, and you can import them. But if they are type-tier files type-tier
 nodes and you can import them even if the file is close. And so that's
[00:41:50]
 what we did. We tried doing an import from the file that's going to
 so I'm just going to paste this into the node really quick.
 I'm just going to convert this with blue notes here. Blue note 11.
 And I'll paste it into the touch clip notes. So you have nice inputs, convenient inputs and Nice imports convenient imports entire script Next
 There's no built-in TypeScript support for React so that's a question that you've been brought up before
 So TypeScript cannot provide intelligence pop-up for JavaScript files
 React was written in JavaScript
[00:43:05]
 So React was written in JavaScript. So let's copy this, and then we'll follow the steps
 as inside here.
 And I'm going turn last video.
 We'll not face the name, open it up.
 So React was written in TypeScript. So we see these, I mean React was written in JavaScript.
 No TypeScript.
 So we see these three dots here.
[00:44:08]
 And that's why this says, "Could not find declaration file."
 And when you try to import useState,
 like if I remove this here,
 I remove UseState there.
 If I try to import it right here,
 and I click on this, well, this is not even correct. It's just, see, it tries to do an default import from the app.
 So that the Habscript doesn't keep track of JavaScript files.
[00:44:40]
 So that we can fix that problem.
 We fix that problem by doing this.
 This is just an example.
 So from the TSX file, try to import React.
 So that's what we tried in D.
 And we actually didn't use this.
 I tried to import React.
[00:45:07]
 Import React.
 So it doesn't have any options to automatically import React.
 Because, you know, when you're in the JavaScript file,
 it'll pop up something, and then you can import React,
 and it shows you the whole,
 I mean it puts a whole statement for you. The TypeScript won't do it for you. You have to
 manually do it. But when you're in the is type in the first few letters. So that's one of the
[00:45:49]
 inconveniences right now that you see with the inside sort of affected. They're mostly affected if they're coming from JavaScript files. So we're going to fix that.
 So we need to get React data types.
 The declaration file, that's basically telling TypeScript, basically it's making a like TypeScript version of React, but one of the most part is just data types.
 You'll understand what I mean
 later on, but for now just just think of it like it's
 it's providing a TypeScript version of React.
 So we're going to install a's providing a TypeScript version of React
[00:46:49]
 So we're gonna install a package that provides type of support for React
 So copy this and we're gonna paste it into the notes
 So we have quick reference'm going to do it. Let. This is the command right there.
 You can put the saved depth in the front or in the back of the package.
 So I'm going to, so we need to get app types react.
 So this package basically provides touch-up support code. Pnpm installed at types/react and you need to put that save them, save them
 black because we're not going to import this into our app is going to just be used automatically.
[00:48:32]
 OK, so there it's saved. I mean, it's downloaded and installed.
 Now, try to automatically import React,
 use date, and use effect. So all I did was
 install this. So let's see if I can import React now.
 Import React. I see it there. You pop that.
 Yeah, it's good. It popped up. It has that automatic import.
 And let's see if I could import UState.
[00:49:07]
 Yeah, it's something pops up here.
 And it correctly puts it as a name import right there.
 If I wanted to use the fact I see it here,
 I can click on it.
 And it correctly puts it inside of the name
 import. So that's basically all I did was install that package and
 TypeScript automatically had support for rehab. Without that package then you're going to have messed up reacting ports.
[00:49:47]
 That's what usually happens. If there's files that were written or if there's
 packages that were written in JavaScript like all these reactums, they're written in JavaScript, then you just have to get
 usually it's called app types, react or at types, it's used again to start with at types and then the just was written in JavaScript.
 I think this one that we installed
 it also provides JavaScript support.
 Let's see what else to do.
 So we were automatically able to import these.
[00:50:47]
 So that's good.
 Okay, we could take a break now.
 Let me just double check this in the next slide here.
 Different topics.
 different, different topic.
 Yeah, it's a different topic, so it's a good time to take a break right here. So let's do that, and we just put a more,
 put a more, right there, and then start up with the drain.
[01:02:06]
 OK, I'll see you in a minute. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, we're back from the break and we're going to continue our topic on TypeScript. All right, so get your notes ready.
 Copy this down.
 So TypeScript primitive data types.
 So these are pretty easy if you're trying to,
 if you want to set a color and it's going to be a string,
 you just put a colon and a string. Or if there's a year and it's going to be a number, just put a colon and a number, Boolean. Oh, this is a typo here. It should be a small B.
 And there's also other data types like null and undefined.
[01:02:45]
 We don't set variables to null and undefined,
 or at least that usually.
 We'll use them for other reasons.
 Actually, we do set variables to null at first, some of them,
 and react.
 But it's not often. So let's copy this part, but we have to fix that
 typo where the Boolean has to be over placed.
[01:03:21]
 I'm going to start switching the screens here now.
 Okay, so TypeScript, premium data types. So I'm going to show you, like for a function,
 I'm going to make some functions here,
 like the addition function.
 I'm going to make a TS this time instead of JS.
 TS should not be TSX because there's not going to be any XML in here.
 But I'm going to export it just in case I'll need it.
[01:04:45]
 The addition function is going to take in x and y,
 and then it's going to return x plus y.
 So we see here that there's some dots here.
 parameter x implicitly has any type.
 But a better type may be inferred from usage.
 So basically what that's saying is it
 has any type like this, any, like, if you put any,
[01:05:17]
 now these three dots are gone.
 That's good to say, OK, you want to put it?
 You want to take it anything?
 That's fine. But you okay, you want to put it? You want to take it anything? That's fine.
 But you know that it's not anything.
 This x should be a number, right?
 So we just put number here.
[01:05:34]
 And this y should be a number, just like that.
 If we had another function, like what other functions, okay, like that output function,
 I think I showed you that, right now.
 You chose here.
 Message, that's a string.
 The other ones that have default values, you don't need to
 specify the type. You only specify the type for the ones that don't have a default value.
[01:06:14]
 The reason for that is because TypeScript knows that it's going to be a string. See that?
 It knows it's going to be a string because you put a string there. And TypeScript knows it's going to be a boolean because we put a boolean here.
 So TypeScript is just, that's what it means by infer.
 If I remove this, a better type may be inferred from usage.
 So that's what these are. It's inferred.
 So TypeScript knows that we were expecting a string because we put a string here as a default value.
 So TypeScript is inferring or it's assuming that we want to put strings in this variable.
[01:07:03]
 So that's what infer means.
 put strings in this variable. So that's what infer means.
 But here, TypeScript can't infer anything,
 because we're not giving anything.
 TypeScript doesn't look at the variable and say, oh, OK.
 And I think he wants a string here.
 Now, TypeScript doesn't do that.
[01:07:20]
 If you don't specify a type, then TypeScript
 is going to say any.
 But it's going to put the three dots just to like, like remind you, hey,
 you're not using your powers here.
 Use your TypeScript powers at least.
 Tell me what you want here and then put us and then you want to string. So I just put a string.
 Coal in string.
[01:07:41]
 That's the type.
 It's not the value.
 It's not a default value.
 If you're going to set a default value. If you're
 going to set a default value, you use the equal sign. But if you're going to set a type,
 a data type, you can use a colon. You could put a string right after and say my default
 message is a little world. With TypeScript already knows that's a string.
[01:08:05]
 You don't even have to put string here because it's going to say,
 "You see here a message is expected to be stringed." Well, if I delete this,
 message is still expected to be a string.
 So there's no point of putting string here because TypeScript already knows
 because it is TypeScript inverted from the default value here. That's why if you
 use data, use the data type if you're not using a default value. Okay, so that's string and number and if I'm under the boolean then
 I'll just put boolean here like this but I don't want to boolean but just show
[01:08:56]
 you boolean. Notice that you can't notice what TypeScript did here shows an error.
 Operator, the plus operator cannot be applied to number
 and Boolean.
 So TypeScript already helped us find the bug.
 And it says, hey, if you can't add a number plus a Boolean.
 So it's helping you find bugs before even, you know, as long as you're using your
 type, your powers' type script will look out for you and help you prevent bugs.
[01:09:40]
 So that's Boolean.
 If I try to put null here, like it's supposed to be null, there it is again.
 I'm sure it's going to say you can't be adding a number in a null.
 And the other one was undefined. We're not going to really--
 why would you want to undefined variables?
 So--
 and you see the same error.
[01:10:10]
 You can't add a number and undefined.
 So we don't want to string here.
 We know a string can come in here.
 You can add strings, actually.
 See, there's no error. You can add strings with JavaScript or TypeScript, that they just basically concatenate, like if X was cat and Y was
 dog, if you add them together, if you add these together, they will be cat dogs. So you can add
 strings together and you can add a number and a string. Oops, you can add a
[01:10:56]
 number and a string. Basically if there was a one plus dog, it would be one dog like that.
 And there's no error with that.
 That's probably not what you want with this function.
 But it's just the type you're saying, hey, that's now the code.
 If that looks right to you, then that looks right to me.
 Okay, so yeah, those are the permanent types there.
 Now, if you want to specify a raise, this is how you do it.
[01:11:48]
 You use the colon and use array with a capital A, like almost like a class.
 And then you type what the array is supposed to contain. So this array is supposed to contain strings.
 But there's another notation. You know, like, you know, how arrays are we represent arrays
 with square brackets, where you can also do like this string array. I prefer this one right here because it's less confusing because you can expect an array
 and it should have a string.
 But when it's like this, there's a symbol here.
 When you're using symbols, then you have to know what they mean.
[01:12:38]
 This one is like closest to English, but this one is using a symbol.
 So if you're gonna use
 symbols you should know what they mean and how to use them but if you're using
 words they're easier to remember and easier to understand so let's copy it
 copy this one here and put it in our notes.
 Here's my screen now.
 So I'm string array, that will just be, I should put, we can connect it around it because that's actually code.
[01:13:35]
 This is also actually code.
 Same here, release. the beast. Actually, there's an excellent code.
 This is also a code.
 We saw this in the parameters.
 These parameters here, you can just put a name of a variable and then the type.
 So that's what we see here, the name of the variable and then the type.
 Okay, so we'll go back to this one.
[01:14:28]
 Like that. And this one will be like this.
 And then we'll get back to this.
 And this one will be like this.
 And this will be like this.
 And this will be the top of the nation. So let me just start with the first one.
 If I was just going to do it, I was going to give this an array of numbers instead,
 like numbers, instead of x and y, but I want to give it in the ray instead.
[01:15:07]
 So this would be an array of the number of times.
 So what do I expect this to look like?
 So I could use a piece of addition.
 And then it's going to put some numbers in here.
 And it's a host.
 And I'm going to expect it to add it up.
 And I can just quickly put more of a random.
[01:15:54]
 So I would expect this addition function to add up numbers in this array.
 So there's a ray. If I'm going to call the function, but it's going to take in some strings, so maybe get a region. And then I get an array of readings.
 So, I wanted to be an array of string type of the string data type.
 So, that's how that works.
 If you want to have an array of something, let's just use capital A and you need to use these angle brackets and then
 put whatever is going to go inside of that array. So if I was going to use We resolve two equals get green and then we now give it a ray of strings like a level
 high
[01:18:08]
 and then there's also a Boolean. So the other way to write this is so instead of a rating number, you can put a member like that and then put the erase of book. I think that's a little bit more confusing. So this sort of looks like a,
 like a variable and you're trying to get the position from that variable.
 trying to get the position from that variable. This one here you can instead of putting a ray string you can put string array. Again I think that's
 a little bit confusing but I just want you to see the familiar of this
 notation. It's the same thing but just a different way to write it, but I prefer it as well.
 It's in the rate of strings, and this one will be an array of numbers,
 number of data types. This one's in the rate of string data types.
[01:18:59]
 And if you want to do combination, combination array, you can just put the data types,
 but then just put a type between each one, just like in the webpack file.
 And then this webpack file.
 and then this webpack file.
 Then we put a pipe in between each one. That means port.
 Looking from JSS or I mean looking for JSS or JSS which yes.
 So that means port.
[01:19:40]
 So you can do that here.
 So you can do that here.
 So if I want this to be in a array of numbers and and strings, then I can go like that.
 So I can also put strings in here, maybe I could put a 5 right there, and a cat right here.
 So now I can take an array of that contains numbers and strings.
 And if I try to put a Boolean in here, that's what happens if I try to put true.
 Boom.
[01:20:29]
 You see that?
 Touching the saying, "Hey,
 you're not giving this what you said to you.
 If you said that you were expecting,
 so Boolean is not a signable to type the string or number.
 So I'm expecting an array of numbers and strings.
 But here I'm giving it a Boolean and so that's why I type the same thing.
[01:20:55]
 That's not right.
 Well, if you change your button and you want a Boolean, then you put the Boolean here.
 Now I'll type the same thing.
 Okay, you want a Boolean?
 All right, you specified it. Okay, I'll let it pass. I'll let it all and say, "Okay, you want to move it?" All right, you specified it.
 Okay, I'll let it pass.
 I'll let it do it.
[01:21:09]
 But if you're absolutely sure, you don't want the Boolean,
 then they'll put a Boolean there and then talk to you.
 It's going to say, "Hey, I think I found the Boolean."
 Except, and that's how you fix it.
 Maybe you went, maybe Maybe instead of Boolean 2, you
 meant the string tree. So that's how you can
 compile combined data types with an org symbol.
[01:21:44]
 Or the pipe. This helps say or.
 But don't get confused because in JavaScript if we're going to use it for
 conditions like the if.
 If this or this, you have to use double.
 Double pipe.
 But your TypeScript and in between types.
 If you least use.
[01:22:04]
 One which I think there'll be an error
 if you try to use two, they'll show you there's an error, and any of this.
 Pretty simple.
 If it tells you there's something wrong, there's nothing.
 Okay, so there is that.
 The opine.
 So the radiance has the opine.
[01:22:32]
 So that means or if result 2 equals hi then console log.
 [INAUDIBLE]
 [INAUDIBLE]
 [INAUDIBLE]
 [INAUDIBLE] I'm not returning anything here. [BLANK_AUDIO]
 I'm not returning anything here.
 See, Tech Trip says there's a bug here.
[01:23:32]
 Why is there a bug here is because I'm not returning anything.
 Get breeding, it's not returning anything.
 So result two is not even gonna contain the string.
 It says avoid.
 Or basically gonna be in the string. It says avoid.
 We're basically going to be in the fine.
 See, this comparison appears to be unintentional.
[01:23:52]
 Intentional.
 One intentional because the types of void and string
 have no overlap.
 So I'm saying I want to compare result 2 to the string.
 But this function doesn't even give me a string back.
 It's actually does nothing, but if I return, I'm creating 0.
 Reading 0 is supposed to be a string, right? It's going to sit in a ray and it's going to contain strings.
[01:24:26]
 So here's in a ray that contains strings.
 So the 0 position is right here.
 So now that it's fixed, TypeScript sees that get reading returns a string.
 So that means result 2 is going to be a string and now I can compare result to
 To a string if I try to compare it to a number
 Type script says hey, that doesn't look right
 You try to compare a string and a number
[01:25:12]
 Because the Type script already knows that result too should be a string. So, this is a TypeScript error. This will still run as JavaScript,
 but JavaScript doesn't care what you're trying to compare.
 But TypeScript cares. TypeScript says, hey, I think I have a bug.
 Let me, uh, send you a happy with that.
 So here's how you fix it.
 TypeScript says, um, you're expecting a string.
 So you should, you should all be comparing it to a string.
[01:25:40]
 Not too long to.
 OK. not too long.
 So that's the double pipe. It means "or" if you're using it in the condition,
 but you use a single pipe if you're separating
 theta types.
 data types.
 Okay, so now we're going to practice.
[01:26:14]
 And we're going to continue this one here, feed back practice. Hopefully you guys got this done so that it doesn't have to take too long for me to work on this.
 this. And this is in addition to this function, let me just clean this up. I don't need all this other stuff. This is just a package here. But you could keep this for reference. But I'm going to clean it up.
 Excellent what are going to be numbers here.
 But actually, it could take strings, so I'll put forth.
 Remember our string.
 And then, and then I would have to fix it, like, remember how we fix it?
 We had to put results in people's number of x plus number y.
[01:27:10]
 And then we'd return the result.
 And then we'd return the result.
 And then we'd return the result. So, so if we didn't know a number when
 we were coding this, we weren't sure. Like we did was just x plus y. And we were, if you Why?
 And we were-- if you already specified to TypeScript that you're expecting numbers and strings
 to come in here, TypeScript, what I already told you
 is a bug in your code.
[01:27:59]
 But when we did this in TypeScript, I mean, when we did this
 in JavaScript, we didn't have to put those types.
 So that it looks like there's no bug, but there is a bug. And we later found out
 when we did testing. So if we were testing this and we're creating this for the first time and we specified
 that we're expecting strings and numbers to come here.
 Then times it would have found that bug and we could fix it before he even did the testing. And then when you do the testing,
 you eventually come to this point right here.
[01:28:53]
 So, this part I'll just comment it out for now.
 So what I was doing was working on the practice.
 So that's what Chris is saying there was a narrow, but that's a TypeScript parent.
 It's separate from JavaScript.
 So, TypeScript parents won't necessarily stop your JavaScript program.
 So, we see an error here.
 The reason is, let's see.
[01:29:53]
 Okay, so form a handler. So yeah, this is a,
 so this is a type that's not expecting this type right here.
 Expecting a, you can basically configure that like this.
 And we have this clip here. This one is the type right here. This is the correct type that is
 expecting. We have got form event. So that's what it's looking for. That's what
 it's looking for. I do that and then I put handle submit in here no more error but look how
 that looks now that's like that's the correct one to use that's the exact one to use
[01:31:02]
 but this one one we put event area was it was good enough because we had to get the event
 dot event people. But I get for react.
 It's not enough because the type ship wants you to be more exact.
 So, again, to figure out what exact type you want.
 Put an arrow function in here and then when you put a variable event like event because
 basically we're using a arrow function to represent this function here because
 we could actually here let me just do this. I'm just copy and paste this here.
[01:32:06]
 It's the same exact thing.
 Okay so I will remove this part because this one is wrong.
 Now it's right.
 If I want to know the correct one,
 I just mouse over this and it says react for a element.
 And you don't know this notation yet.
 So if you're not sure about the notation,
[01:32:42]
 just put any like that. So I'm gonna sure about the notation, just put any like that.
 So I'm going to change this back to handle the bed.
 I mean, handle some bit.
 And I put any and we don't see the error anymore.
 But if you want it to be right,
 then it's going to be form.
 You can actually do it like this form.
[01:33:07]
 And then you can use the arrow to come some way.
 Form event.
 So I'm going to put form event here.
 And I can actually import that.
 So it's imported here, it's form event from So I could import that also.
 If you see a male form event,
 you can perform element.
[01:33:56]
 We see a male form element.
 So if I mouse over this, we see react.form event a female form element. So that means
 it's coming from the react object. That's the react object. It's about notation.
 So I could do it like this without importing, because I've already imported React.
 I've already imported React.
 But if I just try to do this, there's an error because it doesn't know where it comes from.
 So I just need to import that individually like this.
[01:34:47]
 So now it's imported right here.
 This one is built in ACML form element. Now when it's lifted, it's so there's
 high-class, high-class, high-level needs to import that.
 So this is the correct one, at least it's a little bit easier to meet, because getting
 into more advanced TypeScript.
 So this one's handles to meet.
 And we're now, if you don't want to get this, then you just continue.
[01:35:21]
 Eventually you're going to come back and replace any with the correct value
 or the correct data type. Okay, so we'll be the practice, go back to the practice. this.
 Stop on with the floor.
 Accept an event object.
 So we get promo message.
 Accept an event object.
 I put event here. We're going to see a look there.
[01:36:19]
 Actually, we won't get enough to do it with any.
 actually the moment. We won't get enough to do it with any. So it accepts an event object.
 It'll probably, now it won't show a bug if I put the event here either.
 Let's see if it shows a bug if I put the effect. Now, form event.
 Yeah. So, these are different kinds of data types.
 This is different from this, but we know there's an overlap with TypeScript is saying they're
 not the same. You're not getting the correct data type in there.
[01:37:12]
 So, the easy way to fix that is just put any until you figure out
 counting. Until you get more proficient with your types of powers and then you can click the correct mode.
 So to make it less complicated, I'll just leave them like that.
 It works. So we get promo message, it takes in an event.
 That's what it said here.
 Let the promo create a module function called get_problem_message
 that accepts in event object.
[01:37:48]
 So, that's what we did.
 Let get_problem_message extract the values
 from the form in the event target.
 So, it's going to get an event and we know that.
 Let's see, what we usually do is we put event.
 So let's see that.
 And notice that we lose the intelligence.
[01:38:22]
 So maybe we'll just take care of this. So we have the
 intelligence in here, we can put event for the data type. But in here, we don't have Intel a sense because we put any.
 When you put any, basically disable type check.
 And it disables like type.
 All right, so we're going to prevent the default action and we need to get the event target and this target is going to be a form, right?
 It's going to be a form.
 We know that because of this.
[01:39:22]
 See, the form is going to submit. So the target is a form.
 Okay, so now and bug remember it's this target will actually look like an array of inputs.
 This target will actually look like in a way of inputs. So let me show you what I mean.
 Put a debugger here. [BLANK_AUDIO]
 Put the sides.
 [BLANK_AUDIO]
 [BLANK_AUDIO]
[01:40:34]
 [BLANK_AUDIO]
 So I can't access the site because I did put it in my page in words.
 So I'm going to create a page that we needed to change it to the text.
 For this React feedback, I think I want to make it it's on page.
 I'm going to make a page for it.
 I'm going to the correct feedback.
 You can experiment here and learn how to make a bootstrap drop down so that all your practice problems are all in one section.
[01:41:47]
 If you're now mis
 side by side. So in that bar
 you should have reacting back and
 Now I need to add it to what you know about that tomorrow. Alright, see you back.
 Okay, so I'm going to go into that page. So there's a two other two inputs.
 So that doesn't really help much.
 So let me fix my page here. and put an H1 back, D back, back this, and then,
[01:43:34]
 this one up.
 Okay. [BLANK_AUDIO]
 This is not the right way, basically, you should be putting in a label here.
 All right, let me just do that one.
 Now, here, what's in the Good habits.
 [BLANK_AUDIO] and
 you
[01:44:14]
 feel
 feel feel it's ever had this whole thing and I'll just let the engine distract the
 thing
 and certainly
 So this is what it looks like. Like not past it.
 Enter name and email.
 So I should have a, I'm not having a, so make a thing here.
[01:45:07]
 So I'm here to, what?
 You can use a butts of element, or you can just use a butts of input.
 These are, they aren't big, they're all, yeah, that's fine.
 I can use an input on it, I guess actually, [inaudible]
 [inaudible]
 [inaudible] And now it's assigning the base of the button to customize it.
 And so what I'll do to show you is, I need to be able to go here and then get into film message.
[01:46:26]
 This is the last one that you hear.
 Enter the name, I just click, click, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, hit, and we have two feet over here.
 Four looks like-- it looks like an array here, 0, 1, 2, 3.
 So the name is in position one, and the email is in position two.
 So I'll just call this one inputs.
 So it looks like an array of inputs.
 And then the name is in inputs position one.
[01:47:27]
 And I'm just going to get the value. So I'm changing it right there.
 And the, and the, and the detail is in inputs.
 But you can see it here, I'm also here with it.
 I change the file so now it's not going to make it.
 So let me reset this.
 Put a name and email.
 Let's see the debugger, my mouse over inputs, and I open it up.
[01:48:08]
 I see position 1 is the name.
 And position 2 is the email.
 And if I mouse over here, I see that the name is correct.
 It's Bay, a.
 The female is also a.
 A.
 So those are extracted.
[01:48:33]
 [INAUDIBLE]
 I see what else we need to do.
 Extract the values from the form.
 And the event target.
 So that's what we did. And we got the form in the event target. So that's what we did.
 And we got the form in the event target.
 Then we were extracting the values.
[01:48:54]
 We could use the value property to get the value.
 Next, create a promo code message that includes the values from the form.
 From the message here.
 [no audio] your life so it stops working
 like what happens is it does it like down here?
 does it just stop?
 so you can see the mic keeps going right here, my legs are great."
[01:49:47]
 So thank you, and I'm gonna put your name. [ Inaudible ]
 There's probably a button if it just becomes a blank page or maybe you need to put your
 you probably don't have this in your web pack.
 Tomorrow I'll show you a different way to do things but in web pack you should have a type of delay if one second is enough and if one second is enough,
 then increase the volume of the second. about your web pack is your web pack on.
 Your web pack should be up on
 the bottom of the screen. We will take a look at it later.
[01:51:18]
 I'm not sure what's going on here, so it's going to take a deep in there.
 You can look and can hear that.
 All right, so we did this one. We created a message that uses the values from the form.
 Next one, the promo message.
 That get promo message return the problem message.
 Let's return that message here.
 It's going to return it.
[01:52:07]
 Then in handles submit,
 call get full message and get us with the amount already
 and score the return value.
 So here's handles submit.. I'm calling it "Pogo Message" and after this score, there we turn value.
 So close to the MS is coming in here.
 Then use a setter to score the return value in the form of message
 so set problem message
[01:53:07]
 Okay, I didn't do this properly. I'm going to use destructuring.
 I'm going to have destructured in.
 This one is storing the item in position 0.
 This variable is storing the item in position what? That item happens to be a function, that's why it's yellow.
 And I'm going to call that function here, total message.
 almost that here the rest of it render a formal message in a bootstrap alert
 okay I think you guys can figure that out
[01:53:56]
 kind of do that but we should see it work now
 so I'll leave step number 10 up to you guys.
 I can't show you everything here.
 It'll be too easy.
 So if you buy it a little bit of a challenge. All right, so let's see if it works. I'm going to put a name here and
 the email here. I'll put it on sign me up in a word instead and then put the chat over.
 So we see what we did here. We created a function. It takes in the input and it gives us an output
[01:55:02]
 right here. So it's testable. We can test this, we can test this, this function.
 And that's what you want to do.
 It gives us an input, it gives us an output.
 And we, we take that output and put it here.
 We render it right here in the React element.
 So that's how we, that's how we output the React way by saving the output in the state variable and then rendering it right here.
 here. Okay, think that's it. So I'll leave number 10 up to you guys. We're gonna take a break now.
[01:56:10]
 And then after the break, we'll do meeting emails. [BLANK_AUDIO] [BLANK_AUDIO]
 Can you see that, didn't break?
 [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break.
 And to start this third hour, I'm just going to introduce this next practice.
 Well, before I do that, I see that you can point it out, then react dumb.
 There is a similar issue there. So let me point that out. So it's
 clear. You understand what that means. So in the index JAS file, where you have the browser
[02:07:19]
 router, if you scroll up, you have React DOM and it has three dots.
 But it's suggesting how to fix it, but don't use NPM.
 You need to use PMPM.
 I don't use the I flag.
 I use, I just type in the full name install.
 If I get a second quickly do that, that's React DOM.
 Just stop this. Actually, I can leave the web pack running there. Start a new terminal here P and PM install at types
[02:08:10]
 react Save no this one's not safe that
 We're actually using it importing it into our app so this is not safe that
 Let's see if this goes away, it goes away.
 Basically now we will have, like it will suggest to us some things, like if we didn't
 have a, here.
 It will suggest to us the props. Now I can type your element and it says, okay,
 there's a prop that I'm looking for. And that was the home page here. So it suggests to us the props that are available.
[02:09:07]
 Okay.
 All right.
 So now back to this.
 Practice.
 So this was another practice, AWS.
 IAM practice,
 get out of quarantine and apply a stronger least privileged policy for more security.
[02:09:33]
 This one will prevent,
 it will prevent GitHub from like slowing you down
 when you have a,
 when you're trying to push your access keys.
 You'll still have to, you know, your permission because you're still pushing access keys to get hub.
 But this one will make it so that your access key can only
 read your database. It cannot make new,
[02:10:00]
 it cannot make new databases. It cannot make new databases, it cannot add more records to your database.
 I can add more log in to your database.
 You might have three logins there already, but no one will be able to use your access key to add more. If you follow these instructions here,
 as opposed to just give read only access, which is right here,
 read only access. That way, it's, it's only allowing the access that our
 program needs, which all our, all our program does right now is just green to the database. So that's the only access that we need.
 And we prevent any other security breaches and misuse
[02:10:53]
 by limiting that access to this re-building.
 So go through these steps while I start up
 some breakout rooms for the mini evaluations.
 I'm going to have a brick out room for collaboration as usual. One for silence and then one for the mini evaluations
 and I'll just put everyone into a room, you don't have to go there, but
 that's the only way to get around this bug where you can't see the rooms.
 Okay, Chris, you still want to volunteer? Yeah, sure, yeah.
[02:12:12]
 Okay, I'll see you in the meeting room.
 So the rest of you guys just work on this practice, and if you've already worked on this then you can start updating your react template
 or changing it to TypeScript. Maybe you can improve your template to make it look a little bit
 better also. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] So, we're going to take a few more minutes after classes to finish up the mini eval.
 I'm going to conclude the class now. So let's see. So we're back from the breakout rooms and in conclusion we learned
 TypeScript primitive data types that string number Boolean and there was also a null and
 undefined. We also learned about the array data type.
[02:49:45]
 You need to use the capital A and then angle brackets and then whatever that array contains.
 And then we had time to practice.
 So if you haven't taken your attendance yet, make sure you head on over to your code X account and mark yourself present because everyone here was present.
 But then in that class is dismissed, but I'll continue to finish the mini evaluation
 with Chris.
 I just, just working on one more question at the last question.
 And then if anyone has questions after his
[02:50:26]
 eval, I'll stick around. Otherwise, I'll see you in there. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Alright, I'll see you guys tomorrow.
 Does anyone have questions or I'll see you guys tomorrow?
 Good night. [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 12, 2025 20-1.txt"

Transcript from Mar 12, 2025

[00:00:00]
 Welcome everyone. Welcome class to this Codex Academy level four course.
 And it's week one, day three. And I change the theme of this week to TypeScript because that's what it's looking to be. It's more of TypeScript,
 because that's a new thing that we're learning.
 So it's better to make TypeScript the theme
 than review, even though we are reviewing,
 it's better to make the theme, the thing that is new.
 And today's agenda
[00:00:54]
 And today's agenda is, we'll take attendance, do announcements, review, and I'll show you something about Webpack, some new concepts there.
 Then second hour, talk about new TypeScript concepts. If there's time practice, but I
 think there will be time. But definitely in the third hour there'll be some
 more practice available. And we'll be doing many evaluations.
 So make sure to take attendance head on over to your codex account and mark yourself present. You're all here and considered on time so you could mark yourself present.
 And now time for announcements.
 It's pretty much the same as yesterday, so I'm just going to go through it quickly here.
[00:01:55]
 So regular class schedule. No days off. No extra days off anytime soon.
 time soon. There's a, remember there's a survey posted in July cohort. I haven't had a chance to check the new poster either, so sorry about that. So the survey is here, literally in post in the survey. So if you haven't had a chance to fill it in yet,
 make sure you do. It's confidential, so you don't need to worry about your answers.
 Like, you just be honest there. Practice. So practice problems. There's a copy of it here in the sidebar.
 There they are, all five of them.
 And remember to mark your days, mark your days green when you have mastered the topics that were discussed on those days.
 Make sure you go in order. Make sure you go in order and
[00:03:12]
 don't watch a recording for day three if you didn't master day two.
 So don't trick yourself, don't fool yourself. Make sure you go in order and mark it green only if you've been just taking notes and you think you master the topics for that day.
 And there's reference guides here.
 I only have the reference for the first day.
 I think I've only had a chance to make the reference for the first day. Or day one.
 I think this is all day one.
 This.
[00:03:51]
 We covered a lot of things.
 We got to put the date here.
 So I'll have to double check if this was all day one.
 Okay, so now let's, oh wait, I see some posts here in Delacohord, some questions.
 So let's see if there's anything new.
 Okay, so there's a type error here.
 Yeah, so this was the notes where I was just creating
[00:04:43]
 functions and the result here
 Let's see this is kind of small so maybe I can make it bigger
 I think it already though. I was missing out turns statement. That's why I was getting the void comparison things
 Okay, yeah, that's right. There's no return statement. So
 Basically your function was returning void. So the result here
 Well, where's result to add or?
 Okay, yeah, basically
[00:05:21]
 You can't be getting a string here because your function was returning nothing.
 So, TypeScript said, "Hey, your function is returning void."
 [
 Your function is not returning anything, so it's impossible for you to get a string.
 So, that's why TypeScript says, "Why are you trying to compare your variable to a string
 because it's impossible for you to get a string.
 Okay, so that's good.
[00:05:56]
 You just solved it.
 What else is there?
 Okay, so you probably said you solved it down there.
 Yeah.
 Well, that's a good part of review anyways,
 which we can get into right now.
 Time for the review.
[00:06:17]
 So if you have any questions during this review,
 just raise your hand or if you need clarification
 on anything, raise your hand or if you need clarification on anything raise your hand
 something is not clear raise your hand
 okay so
 TypeScript convenient import so we learned that we can use TypeScript to automatically import modules,
 and we don't need to have those files open to import them. Because when we were working with
[00:07:00]
 just JavaScript, we had to have the files open so that we can get automatic imports.
 But with TypeScript, as long as our files are TypeScript files, it provides automatic imports.
 So, let's see, the objects and exports should be in TypeScript files.
 If they are in JavaScript files, then you won't get the automatic imports.
 So basically, what you should be doing is converting your whole project into TypeScript, not
 just partially converting it. Basically it's pretty easy to just, you know,
 make sure you install TypeScript and set up Webpack and
[00:07:55]
 notable, and then start renaming your files.
 Okay, so we were able to import something when the file was closed or actually, yeah, when the file was closed.
 React did not have built-in TypeScript support. We were trying to import, like,
 use state and import React from React.
 And it was not showing up on the IntelliSense
 pop-up menu.
 That's because React was written in JavaScript.
[00:08:44]
 That's because React was written in JavaScript. So if you want TypeScript support,
 then you have to do something different.
 You have to download the React data types.
 So for a lot of packages, You have to download the React data types.
 So for a lot of packages, some packages,
 they already include data types in them.
 Basically, that's like a think of it like TypeScript support.
[00:09:18]
 So this package right here at TypeScript,
 it provides TypeScript support.
 So a lot of packages, they do have TypeScript support built in.
 You don't have to download a separate file sometimes,
 but a lot of packages, the TypeScript support is in a different package.
 It's not even that big.
 So I mean, it would've been easy for them
[00:09:48]
 to just add TypeScript support to their package
 so that we don't have to, you know,
 download this separately and make our,
 where we basically, whatever we download a package,
 it's like, we have to download it twice,
 like we have to download it twice like like we have to
 download React and then we have to download the @types react. This one here.
[00:10:12]
 So it's like it's our basically our, oops, something that...
 Basically, our package.json is filling up with packages because, let me show you guys here, You just love this sandbox for you.
 So voting, I think. Okay, I'm going to share my screen.
 Okay, so the package JSON file.
 Again, pretty big.
 It's getting bigger. We have React here, and we also had to download types React. So with each package, it's like doubles in size when you have types good.
 But good thing we installed PNPM, because even though we have so many packages and so many projects, the
[00:11:51]
 packages or these modules are only downloaded once and then each package
 or each project that we make just shares these modules or these packages.
 Okay, so to set up types, we just installed types, add types, react, and then magically it was able to import react, use state and use effect automatically.
 Here's the typo here.
 I'll fix that later.
 And then we learned about TypeScript primitive data types.
 Those strings. So if you want to set a variable to a string it
[00:12:45]
 looks like you know like colors the variable then the colon and string. Here is the
 for a number here is the variable. There's a cola and we're setting it to a number. For boolean
 is for sale is a variable. Then we set a colon and this one should be lowercase.
 I forgot to fix that typo.
 This is how basically it would look in like if these were parameters in your function.
 So it just looked like that.
 And then there's also null and undefined.
[00:13:24]
 I just wanted to put these get these out out of the way, so you know about them,
 but we're not really using them that much.
 I mean, you could use them for, like, return values.
 Like, for example, if you're not able to authenticate someone,
 you can return undefined if you wanted to.
 But if you were able to authenticate someone, then you can return true.
 Something like that.
[00:13:59]
 I mean, it's up to you how you return your values.
 We also learned about array data types. So if colors was a variable,
 and we wanted to set it to string array,
 then it would look like this.
 Basically it's an array, impose the string items.
 Another way to write it is like string array. I mean the
 these square brackets basically mean array, the array type. But like I said yesterday, I
[00:14:39]
 recommend using this format even though it's a little bit longer, at least it's easier to read.
 this format even though it's a little bit longer at least it's easier to read. But I wanted you to get familiar, just be familiar with this format.
 You don't have to use it or you could use it if you want.
 So I just wanted you to be familiar so that if you come across it, you know what it means. Here, years is the variable and it's going to be an array of numbers.
 Is for sale is the variable, then there's a colon, then there's going to be an array of
 Boolean values.
 And then if you want a combination array, so like my data is a variable and there's a colon. So it's an array that contains
[00:15:32]
 strings, numbers, or Booleans. For each item, I mean each item can be a string,
 number, or Boolean. I mean like this item like item zero can be a string and then item
 the next item can be you know might be a Boolean the next item that might be a number. It's just
 you know the whole array is just filled with strings numbers and Boolean.
 And then we finish the feedback practice. And let me see, let me just get it loaded up here. Npx. We have pack.
 Oops, I need to install everything.
 I forgot I uninstalled everything. I think.
[00:16:39]
 Yeah. Pnpm install. If any of you experienced your PM is malfunctioning, like it's not installing the packages,
 then just post it in July cohort right away because I know the answer because I experienced
 it yesterday while I was trying out some stuff.
 And I was constantly deleting and re-insiling node modules and I guess it crashed P&P
 and it like corrupted some data and it was not functioning properly anymore.
 So I know how to fix it now. And it's not as simple as just
 deleting those modules and then re-installing because it got to a point where PNPM
[00:17:36]
 wouldn't even install anything anymore. So yeah, fix it. So just let me know.
 Or just post it in July code for it anything like that ever happens Perfect here.
 It's browser.
 So I have a thing here for feed back practice.
 I can type in a name here.
 I'm marlin and I can put in a name here, like Marl, and then I can put an email at email.com.
 I can click on Sign Me Up.
[00:18:32]
 And then it says, "Thank you, Marl, your promo code
 was sent to Marlback email.com."
 This was all done with the React way of putting messages.
 None of it was using inner HCL.
 So I want to make sure you guys are not using HCL.
 If you're using React, then use React.
 Because if you write to enter HTML, you're sort of like,
[00:19:07]
 you're like going around React and cat fully keep
 track of the element that you just wrote.
 So when you're doing it like this,
 and you're doing it the React way,
 then React can keep track of everything. So when you're doing it like this and you're doing it to react way, then reacting
 to keep track of everything and it's not going to, it's not likely to crash on you.
 We're not asking you all of our dependencies for the react package.
[00:19:39]
 This is the hackpad.
 We had a it for reasons.
 So I think you're not what you're asking is.
 I'm just going to install that wrong section.
 And we'll move that one.
 This one that should be down at the bottom here.
 this one that should be down at the bottom here because this is a dependency. We need to add types reacts because we imported we imported on the home page here.
[00:20:28]
 We have this one, we have React.
 And we also needed App types React DOM because we are using React DOM in the index file.
 Right here.
 Yeah, come here.
 So not every dependency that you, I mean, not every module for react will leave this like a it will not
 everything will need a at-type file
 so I'm just gonna
[00:21:47]
 So again, the reason why we install these is so that we can get Intel a sense pop ups and also automatic imports
 So I see I've uninstalled this right so that's for browser router
 I think this is for browser router
 No browser router browser router is react router and this and notice that this one is not complaining this one has three dots on it this one says
 I'm trying to play mouse-width version of the earthy right now
 I need to use the side of the computer to create We have the problem here.
 There's a three dots, there's three dots there, but there's no problem with browser
[00:22:35]
 router.
 It came with TypeScript support.
 It's just this one here. So we're going to reinstall that, but in the pen and the
 pen and the C's, we can install at plants yet. So you can sometimes you want to put
 that in front of this because you might
 forget to put this in. You might forget to put this and then you install it and
 then you say, "Oh, I forgot to put save that." So sometimes it might be even
[00:23:18]
 better than you put it in the front just so that you can forget.
 that you can forget.
 So here now, that types react gum, in the depth dependencies.
 Why is that?
 It's because I'm not directly importing that type's
 react gum.
 I've been importing react gum, but not at type react dump.
[00:23:47]
 But now there's no more three dots here.
 Okay, so what I was talking about was
 out putting the react weight and the key here
 is to have a handler that can take input. So this is the handler, but I mean, I change
 it already. I change the name, but attacking like a handler, it takes it an input and then it returns an output.
 I can use that output. So, I'm using it in this component right here.
 Here's the form.
[00:24:37]
 I have a callback right there.
 When the form is submitted, this callback for this function is called, which is here.
 So this is basically a controller. It doesn't have handle in front of it, but it's a controller.
 It's basically just taking a place of this.
 And this is an instead of justatively writing all the code in here.
 I just separated it out into a function.
 I put it in controllers or
[00:25:14]
 modules. I put it in controllers.
 I mean, I put it in modules.
 Well, I guess it's fine here in modules because it's not actually calling other modules,
 but if it is, if it were calling other modules, then it's more of a controller.
 Like, you know how you do unit testing and integration testing.
 So controllers are more of like integrated kind of, your modules are integrated.
 Whereas modules are just standalone.
[00:25:51]
 Yeah, so Raylon was asking so that that type should be the
 dependencies that is true.
 Because we don't actually download.
 I mean, we don't import at types at all in our app. We only, the only things that we,
 again, the only things that we put in our dependencies are the things that we import in our app.
 Our app starts at index HTML and we see the things that I import, there's React, there's React, and then the rest are components.
 So the packages that I import, either through index, or maybe it's from one of my pages here,
[00:26:38]
 anything that I import in my app should be in the dependencies right here.
 Everything else should be in dev dependencies.
 Even though I'm not importing these in my app,
 doesn't mean I need them.
 I need these to build and test my app.
 So going back to reacting back.
 So when the form is submitted,
[00:27:12]
 here's get problem message. I'm calling it.
 I'm giving it the event.
 And then I'm getting back a message.
 When I get that message, I store it in a state variable called promo message.
 And then I render it right here.
 Promo message.
 Did anyone get a chance to output the promo message as an alert. Thumbs up if you were able to do that.
[00:27:52]
 Anyone?
 Nobody, nobody changed it to the alert.
 I guess I'm going to have to ask you how to do that in the mini one of the mini evaluations.
 So make sure, make sure how you figure out how to do that. It's pretty easy. Basically store the
 you get a message here and then store the JSX in here.
 So basically put your bootstrap alert here,
 put the JSS code, or in this case, it would need GSX code.
[00:28:41]
 Like, this is JSX, right? If I put an H1, well, instead of putting an H1,
 put the message inside of, put the message inside of a alert. The reason why, why do you
 think there's a squiggly line here? I can't mess over it right now.
 It's not working.
 I'm gonna lie.
 I might have to restart.
 But the reason why it's a TypeScript,
[00:29:15]
 this is a TypeScript area.
 It'll still compile.
 Let's see.
 It'll still compile.
 Bob again. Bob@email.com, send it.
 Thank you, Bob.
 You're coming with sent to Bob@email.
[00:29:37]
 Did it update?
 Oh, I didn't save it.
 Okay.
 Trying again.
 [inaudible]
 [inaudible]
 [inaudible] [no audio]
[00:30:07]
 [no audio]
 [no audio]
 [no audio] So we'll be working now.
 There it is.
 Whoops.
 Message.
 I should have put a,
[00:30:38]
 I need to escape this here.
 It's a job of script.
 So it can use the, the variable. Again there's a
 red squiggly line. It's a TypeScript error, then I can't see it right now.
 But it'll still compile and it'll still run. There it is, there it is, that needs one.
 was still compiling this still run. There it is.
 There it is at each one.
[00:31:05]
 The reason why it's a TypeScript error
 is because TypeScript expects me to put a string.
 I started with a string here.
 There's a problem message.
 I started with a string.
 So TypeScript expects me to put a string down here.
 But this is JSX.
[00:31:23]
 So I'll just put here. I'll just put some JSS in here like
 MP, MP text. So now the problem message started as JSS and now TypeScript is
 not complaining because I put JSS here. Basically TypeScript to just the same A and U, we created a JSX variable.
 So, I expect you to put only JSX in that variable, or in this case TSX.
 So that's how you fix it.
 Again, if you leave quotations here, typeScript expects you to put a string.
 If you put anything else other than a string, TypeScript says,
[00:32:10]
 "Hey, that doesn't look right."
 So let it match, let the data type's match.
 So this is GSX or XML.
 This is also XML.
 X or XML. This is also XML.
 Okay, the next one. Was anyone able to get this done?
 You had about 30 minutes yesterday to get started on this. Thumbs up if you got this one done.
[00:32:46]
 You should be doing this to get familiar with AWS.
 And securing your account.
 You should do this and this one's not really something I can go over because it's all just like point and click and stuff.
 So it's not really coding.
 And I see a lot of you have been able to do it on your own.
 So it's not that hard.
 So I'm not going to go over this.
[00:33:16]
 I just expect you to do it.
 I'll probably ask this in a mini evaluation
 that you do it.
 So now the new topic is about Webpack.
 And specifically it's about Webpack Dev Server, which is a feature rich server that's integrated with webpack.
 So basically, we're going to use dev server, webpack dev server, instead of live server.
 So we've been using live server since the beginning. So you should explore what's out there.
[00:34:09]
 And another thing that's out there is one pack.
 That server.
 You should be used to using extensions,
 but you should also be used to using servers that's
 in the terminal.
 used to using servers that's internal.
 And that's what that is. It's fast because it runs a memory opening.
[00:34:32]
 It's going to be faster than live server.
 Because live server depends on files to be re-bundled.
 But with Webpack, it writes
 bundles, but not to the hard drive. It's all in memory.
 When it's in memory, it's faster. When it's on hard drive and it's
 writing to the hard drive, it takes longer.
 So, and basically, you use the Webpack configuration file to configure the Dev Server.
[00:35:08]
 There's so many features.
 So make sure you copy this, and then I'll show you
 the features.
 There's a lot of features that you're free to explore.
 Make sure you put this in your notes.
 I think I'm going to make a new webpack file.
 Webpack notes, because there's some things, a lot of things that's just directly related
[00:35:36]
 to webpack. I'm going to just copy this, put it in some notes.
 I'm going to just start a new webpack file here.
 Webpack.md in the notes. Oh, yeah. Webpack, actually, webpack and novel.
 Webpack, novel.
 These are related.
 So webpack, that looks good.
 And a webpack.
[00:36:24]
 That will appear for the title and then
 you guys can just take the time to
 move some notes which you think are appropriate that belong here in this section.
 Again, it's going to be fast and you'll see. Then it runs faster.
 We can look at this one side here.
 I'll paste it into the chat, or you can just do a search
 for a webpack web server.
[00:37:19]
 But if you look at, there are so many options here.
 Look at how big this is.
 How long this page is, so how are you ever gonna figure out how to use it?
 Well, it's not an act,
 ultimately even with all these options,
 you don't have to know them all.
 You just need to have a teacher that knows how to,
[00:37:40]
 the easy way to use it.
 And that's what I'm gonna show you. So many features there.
 So this is, we're going to get started using Webpack Dev Server. So copy this into your notes.
 Then I'm going to start screen sharing. So we'll use Webpack Dev Server instead of live server.
 This is the command here.
 We need to install Webpack Dev Server first.
 And we're going to save it in Dev Dependencies.
[00:39:01]
 Also, there's no space there.
 There's two dashes and no space, so
 it's this dash dash save that is basically one word. We're gonna use PMPM to
 install it. I'm gonna stop one pack right here. We're not going to use that command anymore to run our server and all the
 next things stop my server too.
 And my browser.
 So the command was pnpm install webpack dev server and you need to save it in the dev dependencies.
[00:39:52]
 Why is that?
 That's because we're not going to import webpack dev server into our app.
 We are going to use it.
 We're going to use it to serve our app.
 Anything that is not imported by our app, but we still use it, goes in the dependencies,
 and to put it in the dependencies, you need to put save that. Okay, next one.
 Npx webpack server so we can run it now. Just try running it. See what happens. So I'm in the sandbox.
[00:40:47]
 sandbox over for it.
 I've stopped my live server.
 I've stopped Webpack.
 Now I can try running it.
 Npx Webpack Server.
 That's a pretty easy command. We used to just write Npx Webpack. But when we did that, it
 re-bundles and rewrites everything. But with Webpack server, it's supposed to do everything in
[00:41:19]
 memory. Let's see what happens. Okay, looks like everything compiled.
 Open the displayed URL and the browser tab and then observe the result.
 So this shows a URL here.
 For me, a local host, 8080, HTTP local host 8080.
 You can control it, you can press control and click it.
 But I'm just going to--
 I really have something that's open support
[00:41:55]
 to any angle right there.
 And you should get this result.
 Can not get.
 Let's see what the error is.
 The server responded with a status of 404.
 Not found.
 Okay, so what's the reason for this?
[00:42:18]
 We're going to fix this because we're going to fix it right now.
 We can even, even running.
 So leave it running. We're going to fix it right now. We can even leave it running. So leave it running.
 We're going to fix this.
 So we saw that result was coral for not found.
 We just basically installed it and then ran it.
 And then we got got 404 not found.
[00:42:47]
 The reason is for that is folder structure.
 Webpack Dev Server uses a slightly different folder structure.
 It's copy this here.
 here. Copy that one then paste it into your notes. I'm going to share my screen now. So Webpack the observer folder structure, create the public folder called public on the same as a source folder. So I need to do that. You just basically click on sandbox level four here,
 the top level.
 And then if you create a folder from inside,
 you need to click on the top level.
[00:43:59]
 Then you can add a folder from there, called the public.
 There, it's on the same level as source.
 It needs to be the same level.
 Go to work with these default settings.
 Next copy, index HTML into the public folder.
 I'm gonna copy the next HTML right here. There it is.
 Just copy this.
[00:44:39]
 Then paste it into the public folder.
 Next, so there it is. There's the public folder within next so there it is there's a public folder with index
 HTML inside of it and then next step change the script source. Change the
 script source to output the file name.
 I mean, change the script source to the output file name.
 So in this case, our output file is mean JS.
 That's right.
[00:45:26]
 That's a, when we normally bundle, it's called mean.js. So just, just put the output file.
 Don't put any path or anything like that.
 Just put the output file.
 And now refresh the browser results.
 So let's see, see there it works. All we did was change the
 folder structure a little bit.
 Thumbs up if you got that.
[00:46:01]
 >> Yeah. >> You have a question.
 Alexander, was that an accident?
 >> That was an accident.
 I was trying to get thumbs up.
 >> Okay.
 So we did this one.
 Now the next one. Webpack Dev Servers for SPA's.
[00:46:28]
 So SPA stands for single page applications.
 So our application is a single page application.
 It's React.
 It's basically just one page and then it just replaces
 the elements on that page. So copy this into your notes.
 I'm going to share my screen now.
 sharing my screen now.
[00:47:08]
 Remember we did something for
 MIME server to
 Configure it for SPA's, well, we have to do the same for every server
 because My server my default servers are expecting multi-page websites
 You always have to do something special for a single page website.
 Oh, then I put one L. It should be two L's.
 Yeah, it should be two L's there.
[00:47:49]
 So try load a page other than the home page.
 Let's see what happens.
 Load a page other than the home page.
 So I've loaded my contact page.
 And now make changes to any of the pages.
 So I'm going to just change something in the home page. It doesn't matter which page you make changes in.
 As long as you make changes somewhere.
[00:48:21]
 So for the home page, I'm just going to...
 So for the homepage, I'm just going to actually, I'm just going to make a change in the contact page since that's where I'm at already. So, I just put hello contact there.
 And then save it. It happens, it breaks.
 That's because now it's trying to load,
 it's basically trying to load it in-text HTML file right here,
 which I don't have an index HTML file in a contact folder.
 folder. Going back to the'll open the webpack configuration file
[00:49:37]
 And it's gonna add it here at the bottom
 Again, it's this
 starts with them server which which is an object.
 So we can start with that here, them server, which is an object.
 And that object has a property of history API fallback.
 And the value is true.
 back and the value is true. This 3 API fall back and the value is true.
[00:50:14]
 You should understand this notation.
 There's an object that's currently
 braces.
 It has a property called the history API fall back.
 And the value of that is true.
 When you're in objects, you don't use the equal side,
 you use a colon.
[00:50:33]
 And then save it.
 You might have noticed that there's no automatic
 in telesense. We'll learn that later, but right now
 you just have to know the correct options. If you look at them, so we're here.
 So a pack of server.
 History API callback. So I'm looking at the--
 I went back to the dev server page,
[00:51:14]
 and I can see the instructions here.
 When using HTML history API, the index HTML page
 will likely have to be served in place of any 404 responses.
 So we were getting 404 errors.
 The name will dev server history API callback by setting it to true.
 And then there's an example how to look.
 Okay, so now we need to restart the server. So let's restart the server by going to the terminal here.
[00:51:59]
 Press Ctrl+C to cancel and then we run it. That's NPX, red pack server or just press the
 up arrow and then you'll get it. So we're starting here.
 When we refresh this page, the thing works. So going back to the whole page, if I go on a different page like contact,
 and then I make changes to it. So I'm just going to erase that hello and we're going to you're gonna put a side by side.
 So right now it says hello contact, I'm gonna save it in
 3, 2, 1.
 There, so it just took like one second to change there.
[00:53:14]
 And you change, we'll automatically apply if I go to home page here, or the about page, and we'll try the about page.
 And put a little about,
 save it, there it is, change after a second, change it back to the correct one, there it is, then Optionally, Optionally, you can open a browser tab automatically
 when you start the Dev Server.
 You can add open tree.
 So I don't want it to automatically open to me.
 But I'll show you how to add it anyways. If you like to use
[00:54:10]
 dev tools, you know, if you like to use the dev tools, the bugger, like this one right here,
 on the side of your browser, then you should use to here open tree.
 This one basically opens a web browser tab automatically.
 So you should put comments here automatically.
 Open a browser tab when starting with a server and starting with a pack of dead server. This one, a history API fallback provides support for SPAs by loading index a a- So put comments on your configuration file so you know what everything does.
 Okay, I think that's it for Web Server for now.
 Yeah, that's it for now so let's take a break. We're just going to be using Webpack Dev Server from now on instead of live server.
[00:56:18]
 Hopefully it's faster for you.
 It's definitely faster for me.
 Okay, so I'm gonna start the break now. [no audio] Okay, see you in 10 minutes. If you need something to do during the break, just start converting your react template,
 your level 4 react template to your TypeScript.
 Can you see us? but to your time screen. Thanks, see you soon. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, back in the break.
 Kind of like Sandra sings.
 She has issues with sass and other.
[01:09:00]
 I can try it to see if I have any problems with that.
 So let me try it before getting into touch here.
 So far, we've just been working on
 the sandbox, which was a copy of the template template which didn't really have much. and she's done a few.
 She's so, uh, let's see.
 We try to style some paper.
 We have a page.
[01:10:14]
 I'm going to add a component style here.
 Home.scs.
 and I should be using an ID to avoid style topics so this is main home. So I want to select main hole and then anything inside there, I want to change the H1.
 See, over there, red.
 It's going to be obvious.
 If it's granted it's worth it, then I need to import it here. And import.
 And I can see a text.
[01:11:12]
 So I'm going to try it here.
 And do it server now and dx with a pack server and so it's an area here
 let's see
 I want to build a syntax error on the middle of the corner.
 You have to insert that.
 For now, don't import any styles.
 Should be working out. The click it has to be able to babbled.
[01:12:30]
 I see.
 Okay, there's a babbled right there.
 One, two, three, two, three. I'm not sure right now.
 I'm going to have to look into that.
 So for now, don't import any component styles.
 So I can get that out.
 Okay, so what we're gonna move on and talk about TypeScript.
[01:13:23]
 First one, how do you write the types for two-fold data
 for two-fold?
 For the two-fold data type.
 So remember, a two-fold is a array with a fixed length.
 So use a fact, it gives us an array of length 2.
 There might be other functions that give us an array of length 2. There might be other functions that give us an array of length 3
 or length 5.
[01:13:48]
 It just depends what that function was made to do.
 As long as a function returns a array of a fixed size,
 that array is a 2-hole.
 So it's not just a fixed size, but it's also the items inside of it are in the same order as they always are.
 So like for example, a tool for color, year and is for sale.
 So let's say that's a cart info.
 The info is a color year and is for sale.
[01:14:30]
 So color is a string.
 Year is a number and is for sale is Boolean.
 So this would be a tuple for cart info.
 That means in the zero position of the array, it's always a string.
 In the one position of the array, it's always a number.
 In the two position of the array, it's always an Boolean.
 So, X-Lent, this is three items here, that's the fifth fixed length.
[01:15:09]
 And there's always a string here and there's always a number here and there's always
 a boolean in this position.
 Let's now look at this next one for a full name.
 For a full name, you'll have the first name, middle name, and last name.
 So if this array was containing a full name, then it'll just be strings. A string for the
 first name, a string for the middle name, and a string for the last name. Again, this is a two-hole text lamp. In this case, it's a array of a length of 3.
 And this position, always a string. This position, always a string. This position, always a string.
[01:15:59]
 Next one, two-hole for grades for codex level.
 So if you had a array for your grades,
 so there's four levels,
 so there's, we're gonna have a number for each level.
 So let's say in level one,
 your grade was got a 100% there. So, number 19, 100.
 Maybe in, and then in level 2 with this one represents maybe you had a grade of 96%.
[01:16:36]
 So, then, under 96 or maybe 0.96. Then, then level 3, the grade might be 0.98, which means 98%. And for this one,
 for level 4, it will be cumulative. So it's not such a, it might be 100% right now so it would be like a 1 which represents
 100%. So the Piss array represents each level and the grade that you got for level.
 Then this position will always be a number this position will always be a number, this position will always be a number.
 This position will always be a number, and this position will always be a number, put this into one note.
 Take another test, and then you can see the people selecting the So, let me, let me ask you.
 So, this will go in your tight stiffness. Good notes.
[01:18:47]
 So, come back just a little. I can do that first.
 I can do that first.
 I can do that's here. But basically, we have a use effect here.
 You might have a use effect, and you have to use effect.
 But use effect, it returns in two-fold.
 I mean, that is effect use state, and it returns in two-fold. state and returns a simple.
 And this two hole always has two items in it.
[01:19:49]
 The left eye-dup is always a value here.
 The right eye-dum is always a function.
 So how would we write that?
 So like my two own.
 My two own, but you basically like, So what do I expect for this first item?
 I expect this string for that because I'm starting out the string.
 And then the next one would be like the function.
[01:20:54]
 There, we don't see an error.
 So we can put function for the function.
 Scenario. function for function. It's generic. I can't show you what function really means here.
 We have to figure out what we have to do.
 So there, we're trying to say here is my tuple.
 We expect it to be array with which always has two positions and this first position is always a string. And this second position is always a function. If I change this into a number here, there's going to be an error because it's expecting a string. So let's go to the string in here.
 And I'll copy this and I'll save this as a practical example.
[01:21:59]
 Right here. We can extract out the meaning of this.
 Okay.
 Any questions here?
 Just keep these handy in your notes. the, I can make a sample function here. call it
 describe car I'm going to export the function called the Scribe Car.
 So I made a function called the Scribe Car.
 I want to take in the tuple.
[01:23:39]
 So Car info.
 I want to take in the tuple or Car info. I want to take in a tuple or car info with car info. In that car info,
 I've expected to be in a ring. The first value is always a string. Second value is always the number and the third value is always a Boolean.
 Why is that? It's because I expect it to have a color a year and a
 is for sale. So this would be my color which is a string, the year which is a
 number is for sale which is a Boolean. And then I'm going to console log
 console log
[01:24:37]
 I'll go like this
 Actually I can de-structure here. I'm going to de-structure car info
 I can de-structure here. I'm going to de-structure, car info.
 Car info.
 I'm going to de-structure it.
 So the string represents a color.
 That's a first position.
[01:25:00]
 The number represents a year.
 That's in the-- or the colors position zero year as position one
 Position two is is for sale
 And are you guys understand the syntax? I'm de-structuring
 In a ray or a tuple I a tuple here and then I'm
 de-stuttering each item in it. And now I can say your car is red.
 color. The car is red.
[01:25:57]
 Made in 2025 which is a year. and we see it is
 the first time it's going to be true or false.
 Okay, so this is basically described car. Actually maybe I should return it so I can use a value.
 I need to return that instead.
 So I can use it in a React component and I can try it out.
 They're taking it in input and then returning an output.
 When you do that, you can easily use it in a component.
[01:26:57]
 Then the input describes the car. subscribe car and then I need to if I want to use that value to put it here in one of my my favorite rules. Okay, so I'm going to start up, set up a did mount here. These effect.
 Component. It melts.
 And empty dependency there.
 So that it only runs once.
 And I need to make this an inner function.
 So I have access to this variable here.
 And then I'm going to set the value. Actually let me use the function first, describe car. So this
[01:28:49]
 one expects car info to be in your array. So I'm going to give it an array. This
 first one is a string. So that's going to be red. Second one is going to be a number or the year.
 Next one is Boolean.
 There, no more red there.
 There's no more red underline.
 If I'm missing something, it tells me something's wrong.
 So you've got to add the Boolean, the is for sale.
[01:29:22]
 So I'm going to put false here.
 the Boolean, the is for sales. So I'm going to put false here. And then I'm going to capture the result in the variable.
 The result is here.
 And I'm going to set card description.
 And I'm going to set card description
 To the result
 And I'm going to render it right here
[01:30:01]
 Art description the car description.
 This is the one that I've packed with everything. It looks like it worked.
 I will roll out.
 My browser.
 Here it is. Your car is red, made in 2024 and per sale is false.
 Okay, so that's another example of putting feedback the react way.
 Make a function that takes in, here's a function, that takes in some values and then it returns an output.
[01:30:51]
 Then I can use that output inside of react.
 If I want to use some JSX here, then I need to change the string into JSX.
 So like for example, I want to put, uh,
 let's see, uh, H3 result, H3 around this result.
 It's saying there's something wrong.
 I can't show it to you right now because it's not functioning.
 But the reason is because I'm not using a string.
[01:31:35]
 TypeScript is thinking I'm supposed to use a string.
 So I'm going to tell a TypeScript, now I'm going to use JSX instead.
 So that's what's gone now.
 Look at the webpage.
 Whoops, same there.
 Out of escape the result into JavaScript,
 so I can use the variable instead.
[01:32:01]
 There it is.
 There it is.
 Okay, two cool. So that was a two cool. How you use a two cool there. Next one, object data types.
 So this one informs TypeScript about the properties that are expected to be in objects.
 and the four of the types of the properties that are expected to be in objects. Someone is going to copy this really quick.
 And then while I'm copy this, I'm going to talk about it. So objects, objects. They have properties in them. And you can specify what each
 property should be. So like in a car, when I make a class and it's a car, I'm
[01:32:57]
 specifying what each property should be. So let me show you how that looks, but also I'm going to paste this into the notes. [no audio] onject data types. So now this one is all cone actually. This whole line is cone.
 It's on class car. If I make your fast call car, I'll put that in modules here.
 Capital C, your classes. Not TS, your TypeScript.
 Class is a car.
 So remember, classes are like a template for how an object should look.
 So you may not have known it, but car is a data type.
 And it's compatible with TypeScript.
[01:34:47]
 So we'll say that every car object should have a color and that color should be a string.
 Every car should have a year and that property should be in number. And every car should have a status for is for sale.
 And that's going to be Boolean.
 There, it's good like that.
 So basically, we're using a class to describe an object
 for us.
 And now, actually, I think I'm going to rename the file.
[01:36:02]
 So the benefit of working in a workspace is everything gets renamed.
 When you rename it.
 Okay, so that's the described cartoon pool.
 I'm going to make another one.
 The described are, and I'm going to use a class there.
 Or object. And I'm gonna use a pass there or object
 This is the card
[01:36:42]
 Next port
 Function Next export function as the client or object.
 It's going to take in car variable, but that's going to be a type car.
 So it's going to be a car object. I'm going to import that.
 Wait, when we come here.
 I'm going to import the whole space.
 I can add it.
[01:37:19]
 I can add it.
 I can add it.
 I can add it. I can add it. Okay, okay. And I'll get to, okay.
 You can get the right to see.
 I'm gonna get to this file here.
 Okay. I forgot to export it.
 Our object, and I'm going to import this.
[01:37:55]
 So make sure you export your class. Now this described car object is going to take in the car object and I can access each
 property here.
 And I might as well tell you about the structure in an object.
 It's just like the structure in an array.
 Or a tuple.
 So you have a car on this side.
 You can these structure it.
[01:38:36]
 So it looks like an object.
 You know how when you have a tuple it looks like an array on this side.
 Well when you're de-structuring an object, it looks like an array on this side. While when you're destructuring an object,
 it looks like an object and then you just put
 the same property names here.
 It even says it here color.
 The other one is here.
[01:38:58]
 You can see it there.
 The other one is for sale.
 So I'm destruct structure this object.
 Now I have every property
 and automatically went into these variables,
 but the variable names have to match.
 So it's basically the structuring
[01:39:22]
 and just using curly braces instead of the brackets.
 This is the destructuring for objects. Now I can return a value and then make
 it like the other one. And be exactly the same actually.
 Because I'm using the same exact variable names.
 Now I'm going to use it
 in the whole page.
 So instead of using the Scribe Cartoon Vault,
[01:40:14]
 I'm going to use the other function.
 Describe our object.
 And it's showing me red because that should be saying saying hey, you're supposed to provide an object.
 So I'm just going to provide that object right here.
 There's an object and there's it's red there because I need to provide the properties.
 So I want to set the color to green here and then the year.
 I want to set it to 20 and for sale, it even pops up right here.
[01:40:58]
 Popping up on it's telecents.
 That will be true.
 There, there's no more red because I've met the requirements. TypeScript knows that I'm looking for an object that has a color a year and is
 resale because I, I mentioned it right here. I'm looking for a car with color here and it's for sale.
 So this one is supposed to be green. So if everything works right, I should see you here. Yeah, it's green made in 2020 and for sale is true.
 Okay so that's, I'm basically I use the object type, basically it's class, I use class,
 but there are other types you can use. Another one is interface.
[01:42:13]
 Another one is interface. There's interface right there and there's also type. I looked at her, you have a question. I'm getting a red squiggle next to
 set card description and component did mouth. So I think that made a typo.
 Can I see yours again please? In the home.
 Quickly line there and then you should put if you're using JSS like I am,
 then you should start with JSS up here. I don't have the empty target. Yeah, that's what it is, probably. Yeah,
 you're the type should match. If you if you want to use the index, right there,
 you need to start with JSX up here. Your initial value should be JSX basically. If you want
[01:43:02]
 that, if you want the end to result, if you want the the end result to be a string, then your initial
 value should be a string.
 So I'm going to show you how to do it with another way.
 So I'm just going to stick it in here in the same file.
 Class, I'll call this car one.
 Not class, you can call it interface.
 It looks just like a class, basically, but it just has the interface.
[01:43:44]
 There's a difference here, and I can't show it right now because my
 Actually, I might be able to show it, let's see if I can show you the difference
 and And this one now I'm going to put 4.
 I want it to be a car or car.
 I want it to be a car or a car one.
 Or maybe here.
 I'll just change that it's a car interface. This will make sense.
[01:44:27]
 Put it in the middle.
 Okay, so I can either pass in a car class,
 which is this one or a car interface, which is this one.
 Let me actually rename this one, so we can sort it out in our minds.
 This is a car class.
 There it is.
 And now I've renamed it and it's automatically renamed over here.
[01:45:07]
 One is the class, one is interface. If I, let's see if I can actually maybe I can just console one. Okay, so here's a car.
 That was a class.
 And we see a photo type object. And you see if it's any different if I use interface. We
 see the properties here it says photo type object and it has all these other things. Let's see if interfaces are any different.
 So I'm going to--
 I'm actually-- no, actually, I'm not using the class here.
 I need to make a new object on car equals the new car class.
[01:46:58]
 And if I made this wrong, and then car that that can be green.
 And then car that year.
 2020.
 And the car dot, you see how it's showing me the properties.
 I can change it.
 And then I'm going to pass that one in.
 So this one is based object or part interface. Okay, so let me separate these out.
[01:48:14]
 So I can see the little bit easier.
 So I have a car class right here that I'm using.
 I'm going to pass it in to here.
 Let's see how that looks in a console log.
 Car class.
 We see a car class that has a name there.
 Photo type object, but it has car class right there.
[01:48:53]
 And that I see here it has constructor.
 It has another prototype object.
 So that would be different from the other one.
 If I try the be this one here, I can choose which one I want to display.
 So this one is saying I have starting at car 2, very cool, and I wanted to be a I wanted to look like a car interface
 or basically I wanted to look like this
 if I change anything here like if I remove anything
[01:49:35]
 it's going to say something's not right
 see
 because it's saying hey you're missing a property car interfaces
 should have--
 it's for sale. Should have all those three properties.
 So now there's no more red, sweet, andy lines.
 So I'm going to pass carto here.
[01:50:01]
 And then now I can look at the console log.
 If I look at it and I look at the prototype, it looks a lot different than a class.
 You see that?
 It has all this properties here, but it doesn't have a name here.
 Remember the other one said car class.
 This one doesn't have a name in front and it doesn't have a constructor.
 I'll load up the other one again. I'll load up the car class.
[01:50:33]
 Maybe we named actually the name is the car class.
 Car class.
 Then this one will be car interface.
 So I'm going to load up cart class again. So you see the difference.
 Okay.
 See it says cart class.
 So we can identify it that it's a car class and it has a
[01:51:13]
 constructor right here and the rest is the same as the other one as the interface.
 So it looks different.
 The last one is a type.
 Right here in the notes type.
 You can use the word type and create an object out of that type.
 So here I'll do it like this.
 Export type.
[01:51:55]
 Car type.
 Now we have to use an equal sign for this.
 And then the rest is exactly the same.
 Basically, the car type is supposed to have the color.
 It's supposed to have a year.
 And it's supposed to have it for sale.
 If I try to use that, I can make a car type. So I'm going to make a new one here so I can switch between them.
[01:52:38]
 I'll make a car type.
 And then I'm going to say I want it to be a car type object.
 There's a red line because it's saying, "Hey, you want a car type?"
 But car types are supposed to have a color here and it's for sale.
 So I have to do that, I have to make that.
 I'm just gonna copy and paste this.
 Put a different color here. White.
[01:53:15]
 When you do that 20, 21.
 And true.
 21 and 2. [INAUDIBLE]
 [INAUDIBLE]
 2019.
 And I'll make this one false.
 It doesn't matter what value is in 5 years.
[01:53:45]
 So if I set this up, pass this in.
 If I pass in the car type instead,
 and see if that looks any difference.
 OK.
 Starting to look like the interface, there's
 no name here.
 It doesn't say car type.
[01:54:10]
 And let's see, it still has properties.
 Yeah, it looks just like the interface.
 It looks just like the interface.
 There's no constructor.
 So there's three ways you can define an object type.
 Basically these types are saying these are like templates, right? These are templates that says this car should have a color here and is for sale. So you can take your pick which one you want to use.
 It doesn't right now it doesn't matter which style you want to use. You can use a class,
[01:54:53]
 you can use an interface or you can use a type.
 There's some pros and cons about using each one.
 Type here is the most flexible and it's the hardest to work with.
 Fast is the least flexible, but it's the easiest to work with.
 And then interface is in the middle.
 So you just take your pick, which one
 you want to use to describe objects.
[01:55:32]
 You can use them all.
 If you're making different kinds of objects,
 you can use each style using the class keyword
 or the interface keyword or the type keyword.
 Remember, interface looks almost just like
 class like the syntax of it. See there's the equal sign. But type has an equal sign.
 Okay, so those are how you define objects.
[01:56:05]
 Those are how you define objects in texture.
 So I am going to start another break here.
 And I'm going to try to fix my networks one with one here.
 OK. one here. Time to break.
 Let's get this hot glue. [BLANK_AUDIO]
 >> Okay, see you after the break. [BLANK_AUDIO] Great. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay.
 All right, we're back from the break.
[02:08:07]
 All right, I see that you can put a comment there.
 The watch options don't work for Webpack Server.
 That's true.
 So I'm going to go over that tomorrow.
 It's just, I didn't address it today because it doesn't really affect anything, but I'll clarify it tomorrow.
 But I did find out the problem why the, the, the, the style import was not working.
 Okay, so let me show you what's going on there.
[02:08:51]
 For me, there's a typo. Okay, I'm going to share my screen.
 I'm going to actually move my VS code into the screen.
 Okay, there into the screen.
 Okay, there's the error.
 I've activated the error because I'm importing this
 SAS file right there.
 The problem is because of this typo here.
[02:09:50]
 File loader style loader. It should not be two of them. This first one should be SAS loader.
 Should be SAS loader.
 First, it actually process it like a stack.
 Like this is zero position. This is one position. This is two position. So it's a stack. Like this is zero position, this is one position, this is two positions, so it's a stack, like these zeros on the bottom of the stack,
 then that's file loader, then CSS goes above it,
 then SAS loader is on top of it.
 So it's gonna process through the stack.
[02:10:20]
 So first SAS loader is gonna process it,
 then CSS loader is to process it, then CSS loader is going to process it,
 then style loader is going to process it.
 So this was just a typo here.
 And when you make changes to your webpack config,
 you need to restart your server.
 start your server. So we see here there's no errors. And we see here that the title is now read. So I work properly. I want to disable this part though. I don't want it to to load this for me.
[02:11:05]
 I don't want it to open a browser for me every time.
 Okay, so let's see PowerShell malware.
 I think that might be related to antivirus program.
 But yeah, we're going to get into the third hour here.
 The practice for today is this React Render Practice.
 So I want you guys to work on this
 while I do the mini evaluation.
[02:11:49]
 Alex, Aleksandra, do you have a question?
 Alex, Andrew, you have a question?
 So I might have like scrolled over the thing by accident.
 Okay. So I'm going to start up the breakout rooms for
 going to be up for a few like a 30,
 37 minutes. when we'll be for collaboration, when we'll be for silence, when we'll be for many evaluations,
 you should do it this week because if I'm doing your evaluation, many evaluations next
[02:12:44]
 week, you don't get that on time point.
 Just better to get it out of the way.
 All right, so he's gonna go. So you're going to go and do the evaluation, the mini evaluation. Can you show what you did on Webpack?
 Yeah, I just basically had SAS loader, it was style loader. Basically, just look at your
 loaders, make sure they're correct. It's for your styles. Look at your loaders, make
 sure they're correct for your styles. It should be in this order.
 Task loader over here, CSS loader over here, and then style loader over there.
[02:13:54]
 Make sure you also download these modules into your dev dependencies. So, I'm just saying, you're missing SAS.
 Well, I don't even have SAS installed.
 I don't even have SAS installed, so it's working fine for me.
 So, you know, sometimes AI, a lot of the times it's not right for me if you know what you're doing
 You will know that AI is wrong a lot of the time
 So I'm gonna go on me to you key in the in the mini evaluation room. Can you can you see it?
 Okay, I'll see you there. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so the breakout rooms are back. Well, almost.
[02:49:30]
 Let me wait 30 more seconds. [ Pause ] Okay, so the breakout rooms are back.
 Did you guys work on the react render promise?
 React render practice comes up if you have that done already.
 What's the status on this, like, did you get up to, like, halfway, or,
 or are you working on something else?
 Did anything, did you get stuck on anything? I think Alexander's so he's still have a problem with, I can help you debug right after I just missed the class.
 I don't know what fixed it, but it apparently fixed itself.
[02:51:03]
 It might have been anyone of the gazillion import errors
 that I had to go through.
 - Okay.
 So Alex, I know yours is about the sandbox,
 not the capstone, right so it's about the, the, um, the sandbox, not the capstone, right?
 It's about the sandbox.
 Yeah.
[02:51:30]
 Yeah, it was in the sandbox.
 I don't know why it was doing that,
 but I had a lot of,
 I had like 10 import.
 Well, I had like seven import errors.
 And then as I fixed the import errors,
 more import errors.
[02:51:40]
 So I spent half an hour
 fixing import errors.
 But then the last three errors for the three SAS errors and.
 Okay, I have no idea what fixed them.
 Okay.
 All right.
 I'll find out the.
[02:51:57]
 Yeah.
 What's that?
 I said if it happens again, I won't know how to fix it.
 But. Okay. All right. What's that I said if it happens again, I won't know how to fix it, but okay
 All right, yeah, just let me know so I can
 Maybe give you some understanding about what was fixed what was fixed and what was a problem
 But in conclusion we talked about webpack dev server
[02:52:23]
 TypeScript. We talked about tuple, the tuple data type and how did it like declare it,
 or how to make TypeScript, how to tell TypeScript that you're expecting the tuple to come in.
 We also talked about the object data type. You can make an object data type with a class or with interface or with the word type
 and then we had some practice. Make sure you take attendance, you have one minute to take
 attendance, Marcus, I'll present. Are there that classes dismissed? That, the days lesson on TypeScript. If anyone has questions, ask the ground for a few minutes.
 Or if you need to catch up on any notes, Alexander, you have a question.
 >> So for the Webpack server, the notes say to copy the index HTML to the public folder.
[02:53:24]
 >> Yeah. >> Move it.. Don't move it. No.
 Okay. Move it to the public. That's why I mean copy it.
 Because what is your curious why it has a folder structure so it's going to look in there.
 You still need that index a CML in the root because that's what that's what GitHub is looking for.
 Ah, that's why. Okay.
 But I haven't, I haven't shown you like the new, the new way to bundle.
 It's almost the same. It's pretty much the same just a little bit different
[02:54:10]
 But I'm you still you still need to have an index
 HTML in the root because
 Your GitHub repository needs it. That's the one it looks at
 But what pack dev server?
 It by default it looks in. But Webpack Dev Server, by default, it looks in the public folder. So we're
 just making it happy. We can all, all of these can be changed with the configuration file.
 But I'm just teaching you the default options. And then when you figure out if you want to change some things, then you're free to do that with the configuration file. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 13, 2025 20-3.txt"

Transcript from Mar 13, 2025

[00:00:00]
 Okay, welcome class.
 Good evening and welcome to Codex Academy level four week one day for and the theme of this week is TypeScript.
 The agenda for today is to take attendance, do announcements, review and do some practice in the first hour, then learn some
 new TypeScript topics in the second hour, and third hour, I'll do many
 evaluations. There's also I'll be also telling you about a new assignment.
 And if you haven't had a chance to do the practice,
 then we'll also be provided.
[00:00:57]
 Now, make sure you take your attendance,
 head on over to the code X account,
 to your code X account and mark yourself as present.
 And now it's time for announcements.
 And let me load that up for you.
 Just taking a few seconds here. [ Pause ]
 Let me try it again. Okay. All right, so here are the announcements.
[00:02:33]
 So, yeah, no days off.
 I don't think there will be any, you know, like holidays during our uh level four but if anyone remembers any federal holidays
 that's supposed to happen during level four let me know. Again there's a survey listed in
 July cohort.
 Okay, so this one is right here. Make sure you fill it in.
 Your answers are confidential.
 Let's see, are there any new questions?
[00:03:21]
 Nope.
 Nothing new.
 But just remember the poster questions there in July cohort, if you have any.
 And practice problems, you'll see them here on the sidebar. Remember to mark
 your days, mark them green only after. You've that you had for that day.
 Remember to go in order.
 Don't jump from day to day.
[00:04:15]
 But so far, no one's been absent.
 But sometimes you can use apps because of work.
 But he's pretty good with watching the recordings in order.
 Use the reference guide guides to find topics. I haven't updated that yet.
 It's just has level one in there.
 I mean, day one.
 OK, so now we're going to start class.
[00:04:46]
 Make sure you take notes and type what the instructor types and also type what I don't
 type.
 If it makes sense, if I say something that makes sense to you and it's, you know, you learn it's something new
 that you haven't heard before.
 Feel free to type it.
 And if you ever like during this day,
 it something happens like you have to tend to kids
[00:05:19]
 or something.
 Make sure to watch the recording at a better time
 so you can catch up on the things you missed.
 But do it.
 Make sure to catch up on the recordings before the next class.
 And then have your microphone ready.
 When we do the mini evaluation,
[00:05:41]
 all we need two more days to do the mini evaluation. Only two more days to do the mini evaluation. I've only done the
 mini evaluation for two students. There's three more evaluations to go, but
 there's only two more days of this week. So it seems like I might have to do
 a mini evaluation after class. If you don't do your evaluation this week, it will be considered late.
 And you'll miss that one of those points.
 Okay, so that's it for announcements.
 Okay, now time for review and feel free to raise your hand if you have any questions about
[00:06:39]
 the topics from yesterday or the previous days. Okay so yesterday we set up webpack
 dev server. Let me just get that going here. We set it up and got it working properly.
 It's a, it has a lot of features. And there's also the website right here.
 It, you can change a lot of options on it.
 You just basically change the options
 in the Webpack configuration file.
 But the reason why it's fast or supposed to be faster than the other way
[00:07:27]
 we've been doing it is because it's only done from memory. It bundles things in memory and it
 runs things from memory. It doesn't do it from the hard drive. When you do things from the hard
 drive it's slower. But from memory it's faster or from computer memory it's slower. But from memory, it's faster or from computer memory, it's faster. So the way
 we got Webpack going was we installed Webpack Dev Server. Remember we had to put it in the
 dev dependencies because we don't import the webpack dev server in our app.
 We only use it outside of our app.
 That's for building and for rendering our app.
[00:08:19]
 And this will lose the command to start it.
 And when you start it, it pulls up a URL. And you're supposed
 to open that URL in your browser. So let me just load it up for you. We did these all in sandbox level four and took notes in webpack.md.
 The notes for here, notes.
 Like this are extra. I'm just going to read these really quick.
 these really quick.
 WebpackBabble.md because Webpack and Babel, they're closely related.
[00:09:14]
 You took notes in this file.
 And you're welcome to move some of the notes from tips into Webpack Babel.
 So what I was saying was when you start the Webpack Dev server, NPX webpack server, it'll give you a URL to load into your browser.
 You can copy that URL or maybe you have it saved in your browser already or you can set
 it up to open the browser automatically.
 But the way I open my browser is I just, I do it from VS code right here.
 This press play.
[00:10:19]
 There it is.
 Or I can just type in the, or I can paste in the URL. This was from the display here.
 It was displayed right here in the terminal.
 Right here. So if I load that up, it's the same exact thing.
 And then we had to make Webpack Dev Server,
 we had to follow the Webpack Dev Server folder structure.
 Because at first, it didn't render anything,
[00:11:13]
 because the folder structure was wrong.
 We were not following the default settings
 for Webpack Dev Server.
 Basically, what you need to do is create a public folder
 and put a copy of index HTML into it. Don't move your index HTML into it because you root folder. So public folder will be right next to the source folder and you
 just put a copy of index 8 CML but for the script you should put the name of the bundle only. So when Webpack bundles, the default name is
 mainjs. You can always change that with the options, but we're main JS for the default options.
[00:12:30]
 And this is a copy of index 8C. The main one is still here in the root folder.
 GitHub needs this one to render your page.
 If you move it into here into the public folder,
 it won't render it unless you change the
 GitHub configuration. But it's still a render it, it won't work properly because the path is wrong.
 So it's best to just leave index 8, same all right here because it was working fine with GitHub
 when it was in the route.
[00:13:05]
 So just leave it in the route.
 Otherwise, if you move it, you'll have to make changes to GitHub if you wanted to work.
 Okay.
 Then we configured Webpack for DevServors.
 I mean for SPA's, because if you remember, when you have an SPA single page application,
 there's only one page that works, and that's the home page, and then everything else
 branches out from there.
[00:13:42]
 If you try to refresh a different page, there's
 a 404 error. So the way to fix that is to basically put in this option right here,
 which basically loads the home page, basically loads the home page whenever there's a 404 error and then the home page
 looks at your path, your path up here. So I'm going to share my screen. So if
 you go to something like a contact page, your path is this one. This is the path over here.
 This is the domain.
 This part right here after the forward slash is the path.
[00:14:33]
 So if you, if this were not working properly,
 if I press refresh, it would go to the home page.
 I mean, actually, if I press refresh here,
 it would crash this because it would be looking for
 index.html in the contact folder, which doesn't exist there.
 So it crashes. So as PA is what they do is they go back to the home page, they look at this here
 and then they reload you back into the contact page.
[00:15:16]
 And you can set the Dev Server to open the browser automatically whenever you start the dev server. So let me
 just show you those options.
 We have pack options are right here.
 There it is dev server that's you's in line with resolve and
 dev tool and mode and history fallback.
 This API fallback.
 And then we learned about the TypeScript tuple data type. So that informs TypeScript about the length and items of a tuple.
[00:16:19]
 I think I just added that line right there.
 I'm going to pull up the TypeScript notes. And the one about the two poles right here.
 Here it is.
 And I'm just going to add this line.
 It informs TypeScript about the length and items of an array.
 So for example, if we have a parameter of a
 my current phone,
[00:17:24]
 for example, like if this was a parameter in your function, like if you had a function that
 looked like that.
 And then it's just going to like console log the car info.
 This is where you can put the type.
 You put the type here.
 It's not a value.
 It's just a type.
[00:18:03]
 It's just telling TypeScript,
 telling TypeScript,
 the length of the array and the
 the items of the array. So there's gonna be a string in this position zero
 and then they number in this position one
 and they Boolean in this position two and it tells TypeScript that the length is 3
 items.
[00:18:32]
 So there's no value here.
 If you wanted to put a value, then you would, if you wanted to put a default value, then
 you would just create it in a array and you could put like a color here, like red. That's the string. You could put a color here, red, that's the string.
 You can put a number here, that's the year, and you can put a Boolean here.
 That's if the car is for sale or not.
 Let me see, did I, I'm going to make a module for this.
 People there.
[00:19:22]
 There it is.
 So you feel free to add or keep this, you can either leave it in or you can add this to your This is the notes.
 You can leave it in your sample code or you can take it out.
 Because right now we have our sample code that's telling us, you're creating a variable
 called my tuple and it's going to be expecting it to be a tuple that
 contains a string and a function.
 And here's some other formats like a full name. That would be like a
[00:20:23]
 first name that would go here,
 middle name and the last name or your grades.
 This one would be your grade for level one, for level two, and for level three,
 for level four.
 And then we talked about the TypeScript object data types.
 And you can create those with a class. If you use a class, you should already know how to use classes.
 You can describe an object there.
[00:21:00]
 Remember a class is justempted of an object.
 So the TypeScript naturally uses it.
 Let's see here.
 So I can use car class or car interface or car type. I just end this here because I have a car type right here.
 And then we can put that. So I'm using, I'm basically saying that this variable or this parameter, when it comes
 in, I wanted to take the shape of a car pass or a car interface or a car type.
 Basically they're all the same shape. They all are objects with color, year, and is for sale.
[00:22:08]
 And it's in the color of the string.
 The year is number and is for sale is a Boolean.
 The difference is class.
 When you create an object with a class,
 it has a constructor.
 But if you make objects using the interface or the type,
 then they don't have a constructor.
[00:22:37]
 Sometimes that constructor can get in your way
 if you're trying to do things.
 And you'll learn it later on.
 I'm going to teach you something later on
 and the constructor will get in your way.
 So your best bet will be at work with Ethan Stead.
 Basically, I'm gonna teach you how to make
[00:23:03]
 global state variables.
 And when you do that, the constructs are--
 the constructor function gets in the way
 it interfere with that process.
 Let me see what else we talked about.
 Okay, yeah, there are different ways, just make sure.
 Basically, the interface looks just like a class, but the type that's more like it's I prefer type as my... I like time because it's more flexible.
[00:24:09]
 More flexible interface is just like a
 just looks like class, but with time you can do more things than in interface.
 And I'll show you what I mean there.
 But now I'll be later on today.
 but now I'll be later on today.
 And I also, at the third hour, I posted React Render Practice.
 Did you guys finish this?
[00:24:36]
 Thumbs up if you finished it.
 Or thumbs down if you did in finishing.
 You should be able to do these things because it will help you with your front end development
 and you will be able to make nicer websites.
 Okay, so it's 5 o'clock.
 I mean, for me, it's 5 o'clock, but it's 11 o'clock.
 So I'm just going to go over that practice then.
[00:25:28]
 Since not everyone has it done, I'm going to go over it. I may or may not be able to finish.
 We'll see.
 I have about 30 minutes.
 With this re-render practice, you'll
 be able to dynamically add more elements to a page
 by rendering and array.
 So, I'm going to get started with this, create a React component called
[00:25:53]
 render practice. So, I'm going to do this in the sandbox level 4 is right here.
 Then we just close everything.
 And then we'll step practice right here.
 We have to bring the practice.
 And it's going to copy the steps.
 Okay, so step number one, create a React component,
 call the React Render Practice.
[00:27:05]
 So I'll do that in views,
 because we put all our React components in here,
 even our mini React components that are parts of our bigger components.
 So, we have render practice is the component of create render practice.
 And we're going to use TypeScript.
 So it's TSX.
 Instead of JSX. As usual, we're going to export
[00:27:47]
 we usually export a function when we're creating
 a React component and the component name matches the file name
 and it looks just like that.
 Make sure to import React. and it looks just like that.
 Make sure to import react. Like that, Babel will come in and use that later.
 So there's the component. Pretty simple. Let's see the next step. Add a state variable called
 elements and set the initial value to an empty array. Okay, so before I do that, I just want to make sure I can render this page.
[00:28:47]
 So let me return, and we return the main element, and I'm just going to put an H1 in there.
 I'll call this render practice. And make sure I can render this properly.
 I'm going to put it in the map bar first.
 And you're going to crack this.
 I'm going to torture these.
 You're going to get a long.
 And put a separator. These look much better if I just use a bootstrap nav bar component.
[00:29:51]
 So feel free to do that on your own time. I'm just trying to get the bare minimum done here.
 So that's all you do for my nav bar.
 Now I need to add it to browser router.
 Oops, not there.
 Instead of reacting back, it's going to render.
 And that's going to render practice.
 And just retype it to automatically import it.
[00:30:44]
 All right. So let me see if I have my Dev Server. to automatically import it.
 All right, so let me see if I have my Dev Server.
 Yep, it's still on.
 So I should see it. There it is, render practice.
 And validate so something happened.
 And you're correct. Oh, I forgot to put the path in the nav bar. Oh wait, there is a render practice.
 Oh, put this in the printer practice.
[00:31:27]
 To make the browser router and the nav bar match.
 There it is.
 There's no nav bar up here.
 I should put a global nav bar. And then do should take the extra nav bar out of the home page and other pages.
 Oh, yeah, so the nav bar should be in the header.
 So I think I should make a header component instead.
 And you just move this into header component.
[00:32:36]
 It's header dot t-s-x.
 In port, react, export function called header and it's just gonna render this header right here.
 I'll have to import this nav bar.
 That's all the header should be done. The main page, I can remove these empty tacks because they're not necessary.
 There's only one element being rendered here.
 I mean, one element, but it has nested elements, but the main...
 There's just one element. There's nothing else inside it. I'm not going to use the rest of the the rest of the rest of the rest of the
[00:33:25]
 rest of the rest of the rest of the rest of the
 rest of the rest of the rest of the rest of the rest of the
 rest of the rest of the rest of the rest of the rest of the
 rest of the rest of the rest of the rest of the rest of the
 rest of the rest of the rest of the rest of the rest of the
 rest of the rest of the rest of the rest of the rest of the
 rest of the rest of the rest of the rest of the rest of the
[00:33:44]
 rest of the rest of the rest of the rest of the rest of the rest of the rest of the rest of the rest of the rest of the rest of the and I can fix other pages.
 Contact is in the center and it doesn't need these
 and can tags anymore.
 And about page.
 So this is only if you watch your header to be the same for all pages.
 But if you want your header to be different for some pages, then don't make it a global
 header like this.
[00:34:18]
 You have to put the header in each.
 Just basically be specific about the header in each page. because it's a global header.
 Okay, now I'm getting back to the practice.
 Add a state variable called elements.
 So remember we use u state to create a state variable.
 Initial value will be an empty array.
 There it is.
[00:35:24]
 There's an empty array. There it is. There's an initial value and we're just going to on this side
 you know how whenever you create a variable you usually you know you start with the name of it
 elements but in this case we need to destructure it because it's actually in a two-hole that has that this one will
 contain this value here and this one will contain the set of function.
 that are function. Next step is to render the state variable between empty tags. Okay, well, I don't need to do it between empty tags because I have
 something now. So I'm just going to put it right here.
 If you didn't have these things here, if you didn't have a main tag,
[00:36:33]
 you would need to put it in empty tags.
 Because if you, let me just move this out of the way first.
 So if you didn't have anything, if you didn't have anything here and you just try to render elements, it's not going to render properly. I think there'll be an error here. Yeah. Or let's see. Yeah, there's an error. Objects are not valid as react
 child. So basically, this element is an object, react to saying you can't just render an
 object here. You need to be rendering JSX. And if you want the JSX to render the element,
 or if you want JSX to render an object,
 you put it inside the JSX.
[00:37:36]
 So I put it in JSX, and now there's no error here. But I'm going to use this one instead.
 There it is.
 I think no error.
 You can't directly render an object.
 You need to put it in some kind of JSX, or in this case TSX,
 TypeScript XML.
 Next one.
[00:38:27]
 Next one. In the mouth face,
 A-200 in your practice,
 or render practice into the elements array.
 Okay, so I see what I'm doing there.
 So I'm going to put this in a few tags. I'm going to have a, a use effect for component in mount.
 Component in mount. component, the amount. And the dependency for that should be blank. That's different from
 not having any dependencies. If you don't have the dependencies, then it will keep running
[00:39:39]
 on each. It'll call this callback. every time something is updated like every
 time elements is updated or every time something is updated or changed is
 going to keep calling this if you don't put any dependencies but if you put a
 blank dependency list that means they'll just call it once during the mouth phase. That's just something you have to memorize. There's no, there's
 no rhyme or reason to it. It's just something you have to
 memorize. I'm going to create a function. All the components did component did mount.
 Oh, and I need to import this.
[00:41:09]
 So in the mount phase push and H1 render practice into the elements array. Okay, so elements dot push. You can put that H1 in there.
 Render practice. Okay, the next step. Notice the eight's one tag doesn't get rendered. Okay so let's look at it.
 Yeah there's no eight's one tag rendered here. Even though I pushed something into the array,
 even though I pushed something into the array. I pushed this into the array on the mouth phase and I'm supposed to be rendering this array right here. So I expect
 to see this H1, but I don't. It's nothing being rendered. I look at the element tree and there is no main tag, there is just the header.
 I should put a main tag.
 That's okay. Okay.
[00:42:45]
 So notice the age one tag doesn't render.
 Does it, it doesn't render.
 To fix, first create a state variable called update_count.
 So I'm going to create a state variable.
 Create a state variable and initialize the value to zero. So this one's up 8. So you actually get the variable you need to So the value is 0 at the beginning because of this, then then in the mouth phase. So here's the mouth phase. I'm going to set update count. So Cal plus one
 Update count. I want it to be update count plus one. That's how you increment something
 You can't do update count plus plus
[00:44:47]
 Because this is a constant. It's supposed to be a constant. You can't directly change the value here.
 So you need to do a plus one. And then since you're using a set or it will change the value.
 It will change the value when this function comes back in here, it will update this value.
 The reason why this one here, you can change the value, right, we change it by pushing
 something in there.
 The reason why there's no error here is because we're not actually changing
 elements. If we wanted to change elements, we would go like this, like elements equals
[00:45:34]
 5. That's actually changing element, or that's actually changing this element, which
 is not allowed. Or if I want to make it a new array,
 see that's still not allowed.
 But we are instead changing something inside it,
 which is allowed.
 So think of elements like a container,
 it's an array, right?
[00:46:01]
 It's an array, that's a container.
 The container doesn't change, just the things inside it changed.
 So the container is constant.
 Notice there's an error. Okay, so let's look at the error now.
 All right, so it did render something.
 We see that it render it, but there's an error here.
 Each child in a list,
[00:46:41]
 each child in a list should have a unique key prop.
 So that's the error.
 To fix it, add key equals title to the H1 tag.
 So there's H1 tag, we said "G" equals title, because that's the title.
 Actually, you could make this, anything you want to call it, you can call it title,
 you can call it my title.
 It's what you make of it.
[00:47:22]
 You make up your own keys.
 And then in the update phase, okay, so this one should fix it. So if I look at this,
 yeah, there's no more error. Error is gone.
 So in the update phase when update count is 1, push a button into elements. So in this case we're not using the mount. We don't need to use this mount because we can use
 update count like a did not. Like when update count is zero, then that's when the mount
 phase happens. After that, the mount phase is done because it changes to one right here.
 Use effect component.
[00:48:40]
 Then update.
 the update. So when our dependencies here, we can, we can either leave a blank and let it run every time. Something changes.
 Or we can specify something that we want to track. Think I want to track the update count. I want
 to make sure that's the only thing we're tracking. It's not really necessary.
 I can leave it blank too.
 And the update phase when update count is 1. Push a button into elements. So here's going to create So if you don't put this condition, it will happen.
 If update count equals equals 1, then if you don't check this, then this
[00:50:23]
 will run in the Mount phase.
 Why?
 Because everything that's in use effect runs during the Mount phase. But we're isolating it. So here's the mount phase. And here's the update phase,
 which only runs after the mount phase is done. That's how it's isolated properly.
 Okay, so let's see if I refresh it, we don't see we don't see the button
 That's why this one is here. Notice the button doesn't render. The fix increment update count
 when adding the button. And then the next one, notice there's an error to fix it, and
[00:51:50]
 P equals button to the button tag. I think you should be able to do at least these two steps here.
 So I'm gonna leave that open ended. I'm not gonna finish it here.
 leave that open ended. I'm not going to finish it here. By the end you should see a button rendering underneath this title without any errors here on the side.
 Okay so it's time for a break.
 Okay, so it's time for a break. I left questions 9 and 10 open for you guys.
 I'm going to start with the break now. [BLANK_AUDIO]
 Okay, so you have to have a break.
[00:52:55]
 [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, we're back from the break.
 We're going to start this hour with a tip.
 And this tip is going to be about the structuring.
 So I talked about it before.
 So I'm just going to officially give you more information about that.
 So objects can be structured similar to arrays.
 Just match the property names.
[01:04:04]
 So let's just copy this so we can take a note on this. So objects can be destruction similar to arrays just match the property names.
 So let's just copy this so we can take a note on this.
 This one's not necessarily just for TypeScript.
 So I would put this in the tips section. So make sure you copy that. I'm going to copy it to the notes and then I'm going to pull up the notes for the tips.
 There they are.
 Object destructuring. I just need to change these.
 Okay, so this one's part of that line. Okay. I'm going to put, I guess there's all of these are examples here.
[01:05:31]
 All of these are code actually. So I'm just going to give an example. The first one right here.
 I'm just going to give an example. The first one, right here,
 let's see if I can demonstrate it in JavaScript.
 Or in TypeScript.
 the structure the structuring.ts.
 I copied the notes into the tips right here.
 All of these are actually coded. I can just put backticks around the whole thing,
[01:06:50]
 each one of these.
 So the first one is this.
 I'm going to put it here in destructuring.ts. Okay, so this one you can even put comments here. Here,
 I have an object. Usually what you see is like a value here, like car car and then you set it to an object like that.
 Just as long as you have an object on this side, excuse me, this is long as you have an
 object on the on this side of the equal sign.
 You can de-structure the thing on this side of the equal sign. You can destructure the thing on this sign of the equal sign. So in this case this color
[01:08:12]
 will end up being red this year here will end up being 2025 and this is Rosale will end up being
 true. So in the comments, you can be the structured on the left side.
 That's how you quickly get these values out.
 If you didn't do that, then you'll have to get them
 one at a time.
 I would that look, it would look like this.
 If this was car one.
[01:09:42]
 I'm going to just put these in
 I'm going to just put these in block so I can rename, reuse the variables. I can put these in code blocks. Okay, so there's a car there.
 If you're not going to restructure, then if you wanted to get the color, const, year equals car dot year,
 and is first sale equals car dot is first sale.
 If you wanted to extract the values. So these are
 extract this is extracting the values without de-structuring.
 Over here, this is extracting the values with de-structuring. Next, it's all done on one line of code.
[01:11:27]
 It's just spread out automatically by prettier, but it's all done on one line of code.
 The other way is if you have a car, so this, I'm going to go like this here.
 And if you have a car like this, I'm just going to copy this.
 If you have a car here, which is an object, then you can
 de-structure it.
 And then I'm going to de-structure it like this here.
 So here, it's the same thing as this, but I'm just using a variable now.
[01:12:30]
 There's still an object on the right side, so I can de-structure that object into its individual properties. Variables that are objects can be restructured.
 Okay, so that's what that means.
 And this last one, even function parameters,
 can be restructured directly.
 So I'm going to start here.
 So if I were going to make a function called getcar,
 and I take a car object,
[01:13:39]
 I just put any here,
 put any for now.
 I can extract the values one at a time, just like this.
 So I'm just going to copy and paste this.
 And rename this to car object.
 So that's extracting values from a parameter without de-structuring. Why is this duplicate function?
 So I guess it still going through.
[01:15:07]
 Yeah.
 Okay.
 I'm just going to have to call it something else.
 So here, it's all done in one line the car object is all is
 destruction already
 Now I can start using the values
 extracting
[01:15:35]
 values
 from a parameter
 with
 the
 screwing with the strap. The strap. The strap.
 So it looks kind of empty.
 So I'm just going to go like this console.
[01:15:52]
 Not log.
 And what was the thing that I displayed here last time.
 Here.
 Actually not log. I'll just return it.
 So I'm just taking this message from the describe car object.
 And I'm just going to return it here. It's the same, same variables. And I'll actually just copy this line, put it here. Same effect. But you see the, this one here is less lines of code. Because I'm not, I'm not extracting each one individually.
 You can extract the values right there from the parameter.
[01:16:55]
 If it's an object coming in, you can destructor it right there.
 Any questions about that?
 Okay.
 All right.
 So the next one.
 Now TypeScript. All right. TypeScript.
 Type assertion.
[01:17:29]
 I've been showing you this already.
 But I didn't show to you while using a variable,
 or maybe I did, I'm not sure.
 But you can use a variable.
 You can start a variable and you can specify
 what you want that variable to be.
 Like this.
[01:17:52]
 I'm creating a variable and I'm specifying
 that I wanted to be like a cards class.
 Or maybe a cards interface.
 So these assertions inform TypeScript about the data type you expect a car's interface. So these assertions inform TypeScript
 about the data type you expect a variable to be.
 So I expect this variable to be like this car's class.
 Let's copy this and then I'll show you an example. [ Pause ]
[01:18:29]
 >> Finish on my screen now.
 [ Pause ] I'm going to put that in TypeScript notes. [ Pause ]
 Right there.
 So type assertions, they inform, type script of the data type you expect a variable to be.
 And here's a line of code. Here's another one. And here's another one.
 Okay, so...
 Okay.
[01:19:58]
 All right, so I think I put these in the wrong order.
 I was supposed to do custom types first.
 Okay, so I'm gonna go,
 I can, why can show you this first? But I'm gonna skip this last one for now.
 So this one is,
 type assertion.
 type assertion. So I just call it a create a module called assertion assertion.
[01:20:36]
 Okay, I'm going to copy this code here and paste it.
 So cars, actually we made a cars class, actually the cars type.
 I'm going to use a cars type. So here, I'm going to use a cars type. I'm gonna use a cars type.
 So Here, I'm gonna use a car type instead. I'm gonna use the car type
 Right there
 And
 And, oh, that's not the right one. It's supposed to be an array of cars, so I can put here array of car type.
[01:21:38]
 So this one's, I have to put the color here and the year here.
 And then it is for sale here.
 Now to do it for each one.
 Color year is for sale, next one, color, year, and is for sale. Okay, so here I'm specifying
 Okay, so here I'm specifying that cars should be an array of car type. Car type is this one here.
 It should take the shape of this object.
 Should have a color year and is for sale.
[01:22:40]
 So each object you see here has a color year and is for sale.
 That's the car type.
 And the array here is this one right here, array. So it's an array of car type.
 So I was certain that this variable should be an array of car type. If I put a different one here,
 if I put a different one here, if I put a different object, like middle name
 Greg and last name
 Smith. Now there's an error here because it's expecting a car type. So TypeScript is looking out for me and saying,
[01:23:48]
 hey, there's a, you're not using a proper object here.
 It's not car type.
 So I should, I should comment this out.
 Not car type.
 The other one here. There's another way
 to assert.
 And that's like this.
[01:24:27]
 I didn't make a cars.
 I think I made a cars.
 I only made of car class.
 You see that I'm making new cars here, but this would of card class. Well, there's an error here because, uh, this is a naming conflict that is the same name.
 If you look at it, this is the same.
 Cannot read a clear block scope variables cars because I'm using the same name.
 So I've just put it in a different block. So I can use the same name. So I've just put it in a different block so I can use the
[01:25:45]
 same name. There's a block there, a code block and here's another code block just
 in case I want to use another one. So there's two ways to describe the variable. You can use the variable name and then put a colon and then you put the type there or you can describe the variable at the end.
 So the type of the variable can be asserted or described at the beginning, or the type of the variable can be asserted at the end. Like this. Using the word as, we have to use the
 word as there. That way TypeScript will help you. It'll say, okay, this is what you expect and I'll make sure
 Then I'll look out for you and
 And I'll make sure you will accidentally use a different object
 because
[01:27:15]
 We expect a car type and here we're just using some kind of name type
 TypeScript is looking out for us and finding that bug. We're indicating that bug.
 There's a third one here.
 Attendance equals present. So I'm going to come back to that. Just
 let me come back to that so you can understand what this means.
 Oh, I didn't still not come going to it.
 I'm supposed to talk about custom types to address that.
[01:28:00]
 Let me see if I have custom type here.
 Function type, custom type.
 Yeah, custom types.
 So I'm just skipping to this for now, custom types.
 So let's copy this.
 So custom types, you can make your own types.
 And you have to use a type keyword.
[01:28:28]
 And this time it doesn't have to be objects.
 You can use strings for this.
 You see how I have some strings in there.
 And I'll show you what I mean.
 Why it's like that.
 Or how you can use it.
 Okay, so I'm going gonna paste this one here.
[01:29:05]
 Actually, I think I'll put it in the floor.
 I'm gonna put here custom types at the beginning. Or before a type of assertion. ( And these are all code.
 So I'm just going to put them in code, blocks or MacTicks. And I will create a new module. So, here's the code.
 Okay, so here, I'm saying that cars, I'm making a new type right here. Remember we use the word type to create a new type.
 So I'm saying that this word right here, it represents an array of car class and it can also be interface or it can also be a type the type
 Remember we have right here
 Remember we have this there's a car class
[01:31:21]
 Car interface and car type which is they're all pretty much the same thing
 with some slight differences. And I'm saying that cars, actually, I need to export
 this here. I can export it and cars will be an array of those things. And that array will contain any one of these here. So I'm
 going to go back. So instead of putting array car type here, I can just
 replace it with cars. So that's basically acting like a variable for the type.
 It's the same exact thing. Instead of putting a ray car type,
 I just put this one, which is pretty much
[01:32:11]
 the same ray of the car type or car class.
 Do you see what I'm doing there?
 Or should I split it up?
 I mean, I think it's--
 I should do it like this so you can have practice in seeing
 like your array can have different kinds of values using the order symbol.
 or symbol. So there's cars, then the other one is attendance. So this one is strings.
[01:33:08]
 And you understand this because you take attendance every day and you mark yourself present, late, excuse their absent.
 Well, usually they'll mark us up absent.
 You get marked as absent after you are absent.
 So attendance, this type right here, it can be strings and it's going to be this one
 or this one or this one or that one. It's going to, it can't be like a
 combination of them, it's to only be one of, one of these. So now that I have
 that attendance, I can show you what I mean by this one here.
[01:33:47]
 Type assertion. When I'm saying this kind of type assertion. So right here,
 I'm going to make a new one. New block. This one's assertions assertion.ts.
 And import this. See, there's no error because present
 is one of the values for attendance.
 But if I change it to gift,
 If I change it to gift
 Tepzka says, "Hey, gift is not part gift was not on that list"
[01:34:34]
 For attendance
 Attendance can only be present late excuse or absent
 Okay, so here our TypeScript is looking out for me and saying, hey, you can only use these one of these strings.
 And then there's something nice here.
 If I put a quotation here, I can see my choices.
 Absent, excuse, late or present.
 And then I can just pick it like that. Okay, so the difference pop up on the available voices.
[01:35:36]
 I'm going to change this to let so that if I try to change it to something else, attendance equals gift, it won't let me.
 I mean, it'll still let me, I mean, it's just a TypeScript error.
 It'll still run, it won't crash, but TypeScript is saying, hey, I think there's a bug
 there.
 You're saying it should be only one of these four values,
 but you're using a different value.
 So there's a TypeScript pair.
[01:36:13]
 There's a TypeScript pair because the value is not in the list.
 So I'll just comment that out so it doesn't make a red line, but it's there just for an example.
 Okay, then the other types, you can do that.
 Use the minutes here.
 So you can do that with numbers right here.
 This one is saying that.
 This one is saying that anything that I call a codex level, it can only use these numbers.
[01:37:11]
 So I'm going to add this to the assertion here.
 I switch to assertion.ts. Let level be one of the codex levels right there.
 So I'm going to say four.
 If I try to use five, there's an error because five was not on the list.
 I see the list here.
 It's one or two or 3 or 4. So it's the same, same comments as this and then
 if I try to change it here to 5 there's a error because the value is not on the list.
[01:38:07]
 So, type 2 was saying, "Hey, you told me why to codex levels?
 Why are you putting something else there?"
 5 is not on 5 is not one of the codex levels.
 Remember, you make these types up.
 So, codex level, I just made it up.
 So whenever I want a variable to be a codex level,
 I just put it right next to the variable like this.
[01:38:39]
 Or I can put it at the end using the as remember like that
 over the next level.
 Now try to do it at the beginning. Try to do it at the beginning and then they'll be times
 when you have the choice but to put it at the end, then just do that.
 But usually, just try as much as possible to put the assertion at the beginning.
 You'll find out, you'll know when you can't put something at the beginning.
 Basically, you'll be trying to put it, and then there's like, it's not familiar syntax.
[01:39:28]
 Okay, so the last one.
 Car info.
 So basically, this one, I'm going to put it in these example custom types. Our info, I'm saying that
 Carinfo is going to be a tuple that has a string number and a Boolean.
 So I can do that here.
 So I can do that here. Con, correct. Yeah,
 Con's car info.
[01:40:14]
 And I'm going to say that is a car info type.
 Basically, car info says it should be an array, or it should be a tuple that has a string
 number and Boolean in that order.
 This should be a small view here.
 This should only be capitalized if it's a class or a type.
 Like the primitive ones are lower-case. These are primitive.
 The ones that are objects, they are capitalized.
[01:40:59]
 Remember the primitive types are string number, Boolean, null, and undefined.
 You know that the primitive, if you try to change the value
 of a primitive variable, like if you have a my string equals
 a load.
 If you try to change it after it's a const, then there's an error.
 That's a primitive variable, a object data type. My object equals message hello. And then you try to
 change something in that object. And then there's no error.
[01:42:05]
 So that one is not a
 Trendip data type.
 So where did I put
 Trimulip data types?
 Well, I'm just going to put it here
 And then you can sort it out later. Curivative data types cannot be changed after being required as a constant.
 I'm going to just blank this out.
[01:42:58]
 So that there's no red mark. And then object data types.
 Can change values after being required as a constant.
 And this, try not to, where's the best place to put these notes.
 These are primitive data types here and they should be lower case.
 Commutative data types are lower case. So if I try to make a new car info here, it's expecting a tuple that has a string here.
 It could be any string.
 It doesn't carry with kind of value you put. You just as long as you match the data types.
[01:44:11]
 Now it matches, there's no red line,
 but if something is not right,
 then there's a problem.
 So I'm gonna make it correct here.
 So I'll just put false.
 And I'll use actual values that we expect.
 And then I'm going to change up one of the values here. our info to
[01:44:45]
 equals
 false like that.
 You see that there's a
 error
 there's a TypeScript error
 because
 a boolean
[01:45:15]
 is because a Boolean is expected for that position. Right? This is position 0. This is position 1. This is position two. This one says position two is expected to be
 in Lulian. But here we're trying to put a string in there. I'm gonna come, just
 comment that out so it doesn't accidentally crash my program.
 Okay. Any questions?
 I think now is a good time to take a break.
 You can just make sure I got everything here.
 Yeah. So custom types and then assertion.
[01:46:04]
 So it's a good time to take a break right now.
 Well, I forgot to put,
 what is a custom data type?
 So let me just put that here.
 Custom data types basically are,
 you're naming a type, or you could actually like a alias almost.
 It's like an alias.
[01:46:34]
 It informs TypeScript. of the alias you want to use for a data type.
 So when I want car info, it's an alias for a tuple with three items and the first,
 the zero position is always a string.
 One position is always a number.
 Two positions is always a Boolean.
 So it's just basically you're just defining aliases for these types. And one of the good things here, sure you notice, if I scroll over, I mean mouse over
 this, then I can see what it is, I can see what's expected, a tool that has these things
[01:48:04]
 here.
 But if I put,
 here's a car instance.
 Okay, so I'm going to make one with a car instance.
 Car interface.
 Okay, so const cars.
 Actually, I'll make this one a car interface. "card interface"
[01:48:50]
 see this
 I mouse over it and I don't know what shape it should be
 and let's just expect me to know that I'm what an
 inner the color interface should look like. But if I use type,
 if I use car type, and I mouse over it, then I know what shape it should be, it should
 have a color year and is for sale. But if I use an interface, I don't know. I don't
 I don't know. I don't know what it, I don't know what it's expects until I do something wrong and then I see this error.
[01:49:33]
 And then now I can see it's, it needs to have a of these here just insert it. show the details of the type on mouse over and then we can put here custom types show the details of the data type that they alias.
 Remember, car info is in this custom types using the type keyword. There's car info and I can see the details on mouse over. Okay, all right, so we can take a break here.
 I'm going to go ahead and start the break timer. [ Pause ]
 Okay, see you after 10 minutes.
 [ Pause ] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so we're back from the break.
 And I just want to show you the practice for this day four.
 That's the one about handler testing practice.
[02:02:23]
 This one is in the sidebar of your code X account, so you have
 access to this already. So you can work on this, maybe you worked on it, or maybe
 you haven't. You can work on it while I'm doing many evaluations, or you can do this.
 The newest assignment, this one will be,
 this one will be due next week,
 one week from now, Thursday, before class.
 Capstone TypeScript, start converting your Capstone Project to TypeScript.
[02:03:07]
 So basically, you'll create a local copy of your Capstone Level 3 and rename it for Level 4.
 So basically, just leave your Capstone Level 3 alone.
 Don't make any changes to it. Just make a copy for it.
 Make a copy of it and then start using that copy for this level.
 Delete the Git source control and start a new one.
 So basically, uh, uh, just delete all the branches and basically you can do that.
 Just look it up how to delete the Git source control.
[02:03:46]
 The way to do it basically is just remove the.git folder,
 which is a hidden folder.
 If you have your Git notes, it's in there too.
 How to delete your how to remove source control.
 Next, create a new repository for CAS own level four
 and push the local copy to it.
 So you made a copy on your computer,
[02:04:16]
 you named it for level four,
 push that to the repository.
 And I forgot to put here, make sure it's a workspace.
 Start a new new one and make it a workspace.
 That's for your own benefit because if you don't make it a workspace and you make it a workspace. That's for your own benefit. 'Cause if you don't make it a workspace
 and you make it a folder,
 you're gonna have to manually rename stuff.
[02:04:53]
 So that is to keep it as a workspace.
 Next one, create a user branch
 for sorting dependencies and dev dependencies.
 So remember, everything was in dependencies in your package.json.
 We'll sort it out now and probably use Pnpm.
 Sort it out and put the dev dependencies where they belong. Next, create and use as soon as after you finish that,
 so do this. And after you finish that,
[02:05:33]
 then merge a branch to main whenever the branch is done.
 I just put it down here because I don't want to just
 put it inserted after each line.
 Basically, you should know that whenever you finish a branch
 and it looks good, merge it to main.
 So this one's sorting out the dependencies.
 Next one, create and use a branch for configuring TypeScript.
[02:06:03]
 So I suggest you configure your template, your React template, make a copy
 of React template. That was in JavaScript. Make your new template, your copy of the
 template, make that TypeScript. So you need to configure Webpack, Babel, set the packages
 or install packages there. And whatever else you've done that, after you've
 configured it for TypeScript, merge it to main, it should still compile and it should
 render. All you do is, in this branch, all you do is change some configurations, but
 TypeScript will still work, even if all your files are JavaScript. So your project
[02:07:21]
 will still render. And then, so after you push that domain, make a new
 branch and use it for renaming your dot jas and dot jasx files into dot ts and tsx files.
 So you know, basically the ones that have XML in it, you make it.tsx.
 All the files-- and this one is supposed to be in the source folder, right?
 Just change the ones in the source folder.
 Because if you change the ones in the root folder,
 you're going to have difficulty.
[02:08:04]
 So don't do that yet.
 And you don't actually, you don't need to convert the ones in the root folder to TypeScript.
 You can, if you want to, but there's extra steps involved. It's not as easy as you might think.
 It's not as easy as you might think
 So basically leave those JavaScript files in the root folder leaving them alone just change the ones in the source folder
 Do TypeScript files
 Then after you've done that
[02:08:45]
 Your program should still compile and it should render, then you push it to main.
 Next one, create and use a branch for replacing empty default values with types.
 So you remember how we're using empty default values
 and we just use it to signify
 like if we wanted a string,
 we just set the default value to an empty string.
 Well, you don't need to do that anymore.
[02:09:05]
 Just actually use TypeScript to set and just make it a string with TypeScript.
 After you add that, then push it to main.
 And then merge a branch.
 So that's what this is.
 Merge a branch the main way ever the branch is done.
 And then push main and the branches to GitHub.
 So in your repository,
[02:09:37]
 only there should only be these branches.
 Because on step number two you delete it.
 Get source control.
 So it should be clean.
 And there shouldn't be tons and tons of branches for me to sift through.
 So I'm going to start the,
 the many evaluations.
[02:10:04]
 So who wants to go next?
 wants to go next. It's only four questions and it's stuff you already know.
 If you don't do your mini evaluation this week, then
 many evaluation this week, then I'm not going to go.
 I'm going to start the breakout rooms now. [ Writing on Board ]
 One for collaboration, one for silence, and then one for the many valuations.
 And I'm just going to put everyone into a breakout room.
[02:11:26]
 You don't have to go in there if you don't want to.
 I just need to do it so that you can see the breakout rooms.
 Okay, I'll excite you on the breakout rooms in the mini evaluation room.
 And then the rest of you, you can work on your capstone or you
 can work on the practice up to you. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay.
 Okay.
 I'll extend it.
[02:48:41]
 We're going to continue the.
 The mini eval right after I conclude the class.
 So break our rooms of clothes, but I'm going to reopen them.
 Right after this conclusion. So we learned more TypeScript data types, specifically how to assert them.
 You can use the as keyword at the end,
 or you can just put the colon at the beginning.
 We also learned about custom data types.
[02:49:21]
 And you can even make data types out of strings and numbers. Remember that is like a multiple choice kind of thing.
 And then you had a chance to practice, but I didn't put in here,
 but you also got assigned an, I mean, I issued a new assignment.
 If you haven't taken your attendance,
 make sure you mark yourself there.
 Mark yourself as present.
 You have three minutes to do that.
[02:49:51]
 Other than that, this is dismissed.
 That's today's lesson on TypeScript.
 Remember, there's one more day.
 One more day for many evaluations, and I still need to do
 do more evals.
 That means someone's going to have to go after class.
 If I'm available start the breakout rooms.
[02:50:26]
 Same ones.
 You're free to go or free to stay. Okay, so I guess I'm going to try to do two more evaluations on Saturday then.
 I'll see you on Saturday morning.
 And in the meantime, I'm going to go to the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 15, 2025 12-29.txt"

Transcript from Mar 15, 2025

[00:00:00]
 Good morning class. Welcome to Codex Academy level four.
 Week one, day five. And the theme of this week is TypeScript.
 For all of this week, we've been learning a lot of TypeScript new TypeScript concepts. Today's agenda for the first hour, take
 attendance, do announcements, review, give you guys a tip, or actually a few
 tips. Then in the second hour, new TypeScript concepts and if there's time, work on some of the practice problems. Third, our mini evaluations.
 Again, this is the last day for many evaluations.
 So we need to get it done.
[00:00:53]
 I have two more to go.
 Two more students of our class need to get the mini evaluations
 done to get it on time.
 Otherwise, you lose that point.
 And the most you can get is 80% for a mini evaluation
 80% grade
 Okay, then we'll just review what the assignment is and you can work on a practice problem during the break-out rooms
[00:02:23]
 Make sure to take attendance and on over to your And now it's time for announcements. Let me get that loaded up here. [ Writing on Board ]
 Okay. So I'll throw out this week. We've been on regular schedule.
 Again, there's a survey posted in July cohort.
 Did everyone get a chance to fill it in. Let me just remind you where it is.
 So it was issued on Tuesday March 4th. There's a survey. It's confidential. I won't know there's
 results of your answers. I mean individually, I won't know.
 And it doesn't look like there's any new questions here.
[00:03:24]
 Again, the practice problems are listed right here in the sidebar.
 Under the days, week one, the practice problems are there.
 Make sure you work on them because they'll be part of a mini evaluation.
 Maybe not all of them at the same time, but you know, piece by piece, because like in the mini evaluations, I'll be asking
 four main questions.
 And some maybe a question for next week will be about these.
 And then the week after that, another one will be about this.
[00:04:12]
 Or maybe two questions will be about this. We'll see.
 So make sure you work on those and get them done.
 And know how the how the code works.
 And manually mark your day's green.
 As you finish your day,
 I mean, as you finish the notes for a day,
 and you've asked all the questions that you have for that day,
[00:04:43]
 mark the green, then move on to the next day.
 Go in order, and this is only a checklist for your own reference.
 You'll only be cheating yourself if you're just jumping from day to day.
 And you'll also be cheating yourself if you mark a green even though you didn't take all your notes.
 And so we're going to, we're going to just get, get started now.
 Make sure you focus on the class.
 Take notes.
[00:05:24]
 Type with the instructor types, also type what I don't type,
 type what I say, if it makes sense to you and it's something new, like new information for you.
 And then if you find yourself in a situation where you can't focus on the class,
 you just watch the recording during a better time, but catch up before the next class.
 So, and then have your microphones ready, especially for those who are going to be doing the mini interview,
 or the mini evaluations today.
 doing the mini evaluations today.
[00:06:09]
 That's it for the announcements.
 Okay, so now it's time for the review.
 Okay, so last time we learned about object destructuring,
 let's pull up our notes,
 make sure we have those complete sandbox level 4. So objects can be the structure similar to arrays.
 Just match the property names.
 So here's the destructuring.
[00:07:04]
 Remember when we destructure in a array or a tuple, it has positions
 that you assigned to variables, well, or object destructuring. Do you see the screen? I mean, do you see the slide?
 It could out on the,
 you see the slide here, thumbs up if you do.
 Okay. All right, so, um, yeah,
 basically when you're de-streturing the positions of a
 Object the positions of an object you should know that
[00:07:55]
 They're not in order so if you made the object like color first year and is for sale
 It's not necessarily in that order
 It goes in any order. I think it usually goes there is no order basically you cannot reference them by number. They have to be referenced by name
 Okay, so All right, it did it again, it the slide cut out on me again
 All right, so the just let me know if you can't see the slide
 so
 If you want to extract the color from an object that's on the right side of the equal sign, you need to use a variable called color.
[00:08:34]
 If you want to extract the year of an object on the right side of the equal sign.
 You need to use the matching variable year.
 You need to use the matching variable year.
 And if you want to extract this for sale property of an object on the right side of the equal side,
 you need to use the same variable name is for sale
 on the left side.
 So usually you don't do it like this.
[00:09:05]
 You don't create an object and then extract it out like that.
 That's just to make it very obvious what's going on here.
 Usually what you'll do, usually what will happen is you'll have a variable
 that'll be an object.
 And sometime later on in the code,
 you'll have that variable and then you extract the values later on.
 Usually it comes in as a return, like a return value.
[00:09:39]
 Like a return value will be a return value and then you destructure it when it comes in.
 And you can also destructure objects directly
 in the parameters right here.
 So let me share my screen.
 So we had some notes in,
 that's template.
 Is this the right one?
[00:10:20]
 Oh, sandbox.
 I can delete this one here.
 Let me reload this one, sandbox. Okay, I can delete this one here. Let me reload this with sandbox
 Hey Okay.
 Modules.
 That's where we had our.
 I think this is going to start getting full of.
[00:11:04]
 Examples. I think this is going to start getting full of examples.
 Well, I'll sort it out later into TypeScript folder.
 TypeScript examples.
 Okay, so where do we do?
 Okay, this structuring TS.
 So here's a whole bunch of ways to de-structure.
 We had an object.
[00:11:29]
 This is how you can do it without de-structureing, right?
 You have an object, and then you can extract each one into a variable.
 You can extract each property into a variable, you have a, I mean, you can extract each property into a variable,
 or you can do it all in one line, extract all properties into a variable with just one line.
 It looks like multiple lines, but these could all go on to one line.
 onto one line. So there's a property here where it has a value and then here are the variables that extract the values. So the properties. So yeah, the point here is that you can be structured.
 If there's an object on the right side of the equal side, it can be
[00:12:33]
 restructured into its parts on the left side.
 The structuring is breaking up an object into its properties or breaking up in the array into its items. So here's an example again of the car that can be, if you have a car variable or a car object on the right side, you can extract the values.
 If you try to extract a property that doesn't exist like, like engine. The TypeScript will tell you that it doesn't exist. Property engine does not exist
 in this object, which are trying to use structure.
 If this was TypeScript, it'll let you do it, which you'll just have a undefined variable called
 engine.
 Anybody else? All right, so.
[00:13:56]
 So usually when you have parameters,
 like you have a function called getcar,
 or getcarless, I should rename it to get car description get car description because that's what this is returning and then I'll rename this, get card description one.
 So usually when you get an object coming into a function,
 you break down the properties of that object
 and collect the, I mean, you extract each property right here and then you can use them
 like an attempt at template string. But with the structuring, you can extract all the properties
[00:15:01]
 right here in the parameters.
 right here in the parameters.
 So that you don't have any, you don't have a object that you can reference anymore. Their object is pretty much gone. You don't have a car object like this. This one has a car object.
 But this one, there is no more car object and there's just the properties.
 You can't reference the main object here. There's ways you can, but I'll show you
 that maybe later today. Or next week. But this is how you access each property of the object.
 You can't access the object as a whole anymore once you need structure it.
[00:15:52]
 You can put it back together, just like if you take a part at puzzle,
 you have access to the individual pieces and then you can put it together.
 Well, here you have the individual pieces of then you can put it together. Well here you have the
 individual pieces of an object. You can put it back together and construct your
 own car object.
 And then we talked about type assertion. So this informs TypeScript about the data type.
 You expect a variable to be.
[00:16:34]
 So if you're declaring a variable like const car cars,
 then cars is like a list of cars, right?
 Because there's a S. So here we see it.
 Actually, I'll use the, I'll go straight to the example.
 Because this is not properly constructed.
 These are not properly constructed objects.
 So I'll just show the example here.
[00:17:12]
 Remember, I just, I renamed this to get car description
 because it's, you know, it describes what the function does a little bit better.
 The other one is
 there's a search now there it is.
 So we have a file called assertion.ts and here is the properly constructed object or
 objects.
 Cars is a custom type. We talked about custom types before.
[00:18:08]
 Object types, I mean.
 We talked about object type.
 Where is it?
 As far as.
 Is from custom types.
 Right here.
 I sort of went on a order like mix order here,
[00:18:33]
 because the next slide will be reviewing custom objects.
 But, yeah, so I have a
 Cars custom type. I mean, here's a car's custom type.
 Basically, cars represents an array of car items.
 And the car items can look like any of these.
 So the car class.
 If you, if you right click, you can look at the definition here.
[00:19:10]
 So car class, it looks almost like the, it looks exactly the same as the car interface,
 which looks like a car type.
 Basically they just have the same three properties.
 But just different ways to set them up.
 Different ways to blueprint or template each object.
 So these are all the same similar ways to template an object.
 Or to define the shape that you template an object.
[00:19:49]
 Or to define the shape that you want an object to be like it. If you have a blueprint, you're defining how the shape of a house should be.
 So if you have a, if you have one of these types,
 this is a class type, the interface type, and custom type. These are like
 blueprints for how an object should look like the shape of the object. So this is what we see here. This car is variable. We're saying it
 should be an array of car items. And then we, so this is the blueprint for the variable.
 The variable, it says that this variable should contain an array of r items and then here you go ahead and construct that variable. So here's an
 array of car items. So this is the actual object and these are the blueprints
[00:21:00]
 on this side. Basically, no, this is the blue print. This is the actual
 object and also this is the actual object. Okay, so you can see here that cars was made out of the type cars right here made out of the
 type.
 Not interface. But if you use the interface, notice that you can't see the individual properties, which
 you can if you use type, it provides you more information.
 You can see the individual properties. I mean, like the details, you can see the details.
 Like it should be an array of our items. And notice here that it used the other notation.
[00:22:17]
 It used a bracket notation of specifying an array.
 notation of
 specifying an array
 Whereas I used
 here I used the
 Like the the type notation like the because these are types, right?
 These are types
[00:22:41]
 Which are basically words
 So this is a type notation
 whereas the other one
 is, let me see if it's, I made it here.
 Like examples. and the examples, and the types of notes, and the two different ways to declare a array here, array type, or you can use the square brackets and specified it's going to be a string array.
 Or you can specify it's going to be a string array like this sort of backwards.
 When you do it like this, you basically are specifying an array of string items.
[00:24:02]
 But if you do it like this, you can word it like,
 you're specifying a string array.
 The format looks different, and the way you should word it
 it can be different too.
 So again, this is your specifying a type.
 You're specifying an array with string items,
 or you're specifying a string array,
[00:24:30]
 which are the same thing.
 Two different ways to specify an array.
 So when we look at when we assert an interface,
 no, I mean, when we assert a type,
 using the word type, we see that it's using the other notation.
 We are specifying a car class array.
 Actually, we're specifying a car interface, car class,
[00:25:01]
 or car type array, that's what this means.
 car class or car type array. That's what this means. But here you don't see that. You just call it car interface. When you have an interface, I guess what you
 could do is just look at the definition. Then you have to open the other file. And then you go back.
 But at least with type, you don't have to open another file.
 It's mouse over. It's right there. Okay, so this one, we asserted that this car variable should be a car interface, or should
 look like a car interface, basically, which says an object that has a color a year
 at IS for sale.
[00:25:59]
 And here, here's a car variable again, but we're saying we're asserting at the end instead of asserting at the beginning.
 We're asserting it should be an array of car class items.
 Remember car class is the template for object that has a color year and is for sale. So it
 can do it at the end. You'll know which one to use. Basically try to do this
 and if you can't do this successfully try to do the one at the end. You'll find
 situations. I actually show you a situation where you can only the one at the end. You'll find situation. Actually, show you a situation where
 you can only do it at the end. I'm going to show you after this. Okay, so you can also, well this one's assertion, this is also a assertion at the beginning,
[00:27:09]
 but we're seeing that it's a custom type.
 We made a custom type for attendance and it has, it's made out of strings.
 So you can, attendance can either be a present. I mean, can be present string,
 late string, xq string, or absent string. So that means this value for this variable can only
 be one of those strings. If we try to use a different string here like hello.
 Like hello here says there's an error.
 Hello is not assignable to type attendance.
[00:27:54]
 So that means you have to know.
 You have to basically look into the reason why it's not telling you why.
 You will know why if you mouse over this,
 that's because attendance can either
 can only be one of these strings.
 So think of it almost like a drop down.
 It's like a drop down, and you have a few choices on me.
[00:28:33]
 So that's a good way to have IntelliSense and you want to make coding easier by presenting a drop down of your options.
 That's the closest you're going to get to a drop down in text coding. Same thing, this one is like a drop down, but for numbers, our info,
 we see the type. Actually, let me move this one here, I'll move this interface.
 It makes more sense at the bottom, I think.
 So you can compare when you types or a class.
 I prefer type because at least you can see all the properties when you mouse over it.
 when you're now so good.
[00:29:45]
 But this one here is another assertion. You're asserting the, that the car info variable
 should be a car info object.
 And the car info object is in a array.
 Actually, it's a tuple.
 The tuple is a fixed length array.
 This one's a fixed length of three items. The first item is going to be a string.
 Second item for position zero is going to be a string.
[00:30:14]
 Position one is going to be a number.
 Position two is going to be a Boolean.
 So here it is.
 If we try to do anything that doesn't fit car info, I mean it's expecting
 three items if you try to add a fourth one. There's going to be a TypeScript error.
 It'll still compile because it's not a JavaScript error. This is a TypeScript error. You can see when it says Type, that means it's a TypeScript error.
 When it's a TypeScript error, it'll still compile and it can still run.
[00:30:56]
 But TypeScript is just telling you, "Hey, you're not doing what you said you would do.
 You said you were going to make a car info array.
 Well, you made a different kind of array.
 So fix it and make it fit.
 So that's the type assertion.
 You can insert the type at the beginning.
 You can assert the data type at the beginning, or you can assert it at the end.
[00:31:38]
 And going back, because I sort of went in a different order, custom data types,
 and more detail this time.
 So basically you're aliasing what you,
 let me see here, I didn't
 thought it described it somewhere. Custom data types.
 Informed TypeScript of the alias you want to use for a data type. this in here. I'm going to go back to the slide, I added something.
 I added this line.
[00:32:58]
 A custom data type can be created from any of the job-rescript data types.
 So I'm going to retype that into the notes.
 Custom data type can be created from any of the JavaScript data types. So here's a difference. Here's where you can define a custom data type and here's an interface that almost looks the same. What the difference is that
 interfaces cannot define strings and numbers like a string and number of data type. But if you have, if you're using custom
 types, here the one with the equal sign, you can define string and number of data types.
 So this was more flexible. The main reason to use an interface, well, think of it as like semantic, like the, like if you're at a ATM machine, if you're at an ATM machine, the interface
 is that keypad there.
[00:34:54]
 That's the connection that interface or that keypad is a connection between your hand
 and the computer or the ATM machine.
 That interface is the thing that allows your hand
 to communicate with the ATM machine.
 So that's more semantics like that.
 So that when you're using your computer,
 the interface is most likely your keyboard.
[00:35:27]
 It's transferring your hand, your physical hand inputs into like computer inputs.
 So, interfaces like that middle ground that converts one thing, your hand inputs into another thing, which is computer inputs.
 So interface is like it's actually the use for converting things.
 Like converting a car object.
 converting a car object. Let's see.
 Because cars have a color a year and is for sale.
 So someone might make a different kind of car object that has engines.
[00:36:19]
 Like maybe you want to make a car object that only has these three properties, but if someone makes a car object that has that has more details like engines and
 number of doors
 Well, this interface is still compatible with it
 And but it just it just focuses you on three of the properties instead of all of the properties
 So you're basically interfacing It just focuses you on three of the properties instead of all of the properties.
 So you're basically interfacing with another object with this.
 That's what it's usually used for.
[00:37:03]
 Being the middle ground between what you want to see an object look like and what the actual object looks like.
 So that's the middle ground.
 So that's, we're not using interfaces
 that often right now, it's more for object-oriented programming.
 But we are more towards functional programming
 and this one works very well with functional programming.
 So I just wanted to give you quick description of that and going back to custom types.
[00:37:38]
 Yeah, it's basically like an alias.
 So I'm going to copy that over to actually these nodes right here.
 A custom data type can be created from any of the JavaScript
 data types.
 So here's array.
 Here's a class right here.
 String number Boolean.
[00:38:08]
 So we have all the JavaScript data types here.
 We don't have null and this one is object.
 You're just missing null and undefined here.
 Also, NAN, I guess, but actually NAN is number, not even though it means not a number.
 NAN, it counts as number. Okay, so this one's different.
 I just didn't know where to put.
 I think I should put this on the tips here.
[00:38:58]
 I think I'll move these into the tip section.
 This one's saying you can't.
 The permit is saying that period of data types cannot be changed after being declared.
 So I'm going to move this into the tip section.
 That's more general.
 Actually, I don't have it.
 I'm going to move it into the notes. Actually, I don't have it.
[00:39:27]
 I'm going to move it into the notes. Okay here.
 This one's, let me just paste it in here. And this is JavaScript code block.
 And this is primitive versus object constants.
 If we use constant, so that
 that's where constant meaning
 unchanging.
 I can remove these
[00:40:38]
 comments now because it's not going to create an error. So we cannot change the value of a constant primitive data type here.
 So we have a declaring a constant my string variable.
 And then if we try to change the value later on, we get an error.
 But if we declare a constant, my object variable, we can change one of the properties And there is no error. That's because
 the object or
 container of items
 remains constant.
[00:42:02]
 constant. The items can change without changing the container. So that provides more information there. So that's why we have constant and we're changing values and we don't get in errors
 because we're not changing the container, which is the object.
 We're changing the insides which are the values.
 Think of it like a house.
 You have a house and then you change the furniture in it.
 Well, that means you didn't change the house.
 The inside of it anytime.
[00:42:39]
 Even though the house is constant, but the inside of it
 didn't change without any problem.
 So I put that into the tip section.
 Permitive versus object constant.
 And then it versus object.
 Well, that's, you know what I mean there.
 I'm talking about data types.
[00:43:14]
 Okay, so we also talked about React Render Practice and I left. We finished it all.
 And we got up to step 8 so that you guys can finish steps 9 to 10. And this is how far we got direct render practice.
 React render practice. There's a component.
 And it's basically rendering an array of items, And if I run this using Webpack and PX, Webpack Server, and then I open the page. You see that the wrong page.
 Render practice.
 Render practice.
 Oh yeah. Render practice, we see there's an
[00:45:28]
 AIDS one there. We started with MP limits. So how did that AIDS one get there?
 We pushed it into the array here. And so the next part of the practice is to push in another item into the array and get it to render.
 So push another item like a paragraph or something and get it to render.
 A title, let's see,
 oh, I mean a button. Push the button into the array and then get it to render.
 Did anyone finish all of this?
 Thumbs up if you did. There's two more steps here.
[00:46:38]
 I will be eventually asking in the mini evaluation to do finish this.
 And if you didn't finish it, you're going to be able to get the point unless you can finish that.
 Okay.
 All right. So this one was also interested in the handler testing practice.
 It was introduced during the third hour Thursday.
 And it really, really worked on it.
 If we have time later on today,
[00:47:18]
 then I'll review some of this, how to do it.
 Okay, so now it's time for a tip or two or three.
 How to enable just support.
 How to enable TypeScript support for just.
 for JEST. We have some JEST testing, and we could add some of that to our sandbox.
 And one thing, if you tried it out if you did this right here, if you worked on this practice yesterday
 or an after-insert on Thursday, then you would have noticed that JEST is not showing
[00:48:19]
 you in telesense because JEST is jobless. So there's ways to enable Jess.
 I'm TypeScript support for Jess
 and let me show you how to do that.
 So copy this because you'll be doing testing
 and it'll be more convenient if you get
 TypeScript support for Jess.
 TypeScript support for just. So I'm going to share my screen, make sure you
[00:48:58]
 copy this for your notes.
 I'm going to put this in TypeScript notes. Alright, so this is how you do it. I installed at just global because it's only for tactical files.
 You don't need this anymore.
 So if you remember how to un-solve you'd be using PNPM for un-solving.
 And in sandbox, and sandbox was based on React template. In my React template, I put just gold holes.
 So I'm just going to uninstall that because this one doesn't really work in TypeScript, so it's not necessary.
 I will create a terminal for that.
[00:50:51]
 Turn it over that P and P and it's all had just build this.
 There it's gone, gone from list.
 Next item is install app types jest to enable TypeScript support for jest. I guess I should show you like, it doesn't long.
 Let's see what happens.
 I think I should show you like what happens if you kept it.
 Let's see here.
 I have any tests that have addition here.
[00:51:36]
 I can make a test. ts. Actually, I'm just going to copy the test from the previous level. I'm going That was react.
 react to it or react to the word space.
 So here's react to the space and the core addition test here.
 A lot of footage in here. Or here is under your tails. I'm gonna copy all these tests here. Paste them into Now it's TypeScript.
 Okay, so it's just saying there's an error because I'm uninstalled that so then you read it solid
 Install save depth sometimes I forget to put that so I'm just gonna put it in the eating at just globals.
 Okay, there's no area there. But if I tie and make a describe it,
[00:53:46]
 okay, let's see here.
 Okay, so actually let me comment out this line here.
 And while temporarily delete this stuff.
 So it doesn't, so it doesn't concase you.
 So describe, see if I put, if I start typing, typing describe,
 there's no pop up for just, there's no automatic-up for just, there's no automatic pop-up for just Go-Mills.
 Back before.
[00:54:35]
 That's why we're getting rid of just Go-Mills.
 We're going to get rid of that and then you just, yeah, that's, I'm gonna leave it like that.
 Then I'm gonna uninstall just go goals and then install.
 install. I'm going to save it in the dev section. At types. Just. Okay, it's installed right over here.
 And now if I type "describe", now it has the auto import for it.
 Actually it doesn't need the auto import because it knows already that it comes from
 Jest. You don't need to import it anymore. You can just start typing and then here it knows
[00:55:59]
 it's looking for a name and then it's looking for a callback function right here.
 for a name and then it's looking for a callback function right here.
 So the name would be like addition function.
 We're gonna test the addition function.
 And then we're gonna make a callback function
 like this and then we put all our tests in it.
 So you don't even need to import anything. It knows already. When we
[00:56:27]
 install this TypeScript support, you don't need to import anything. It knows and it
 pops up the like all the information that you need about the function like the it function
 There it is. It's right here. You don't need to import it. I click on it. There's nothing in party
 But it knows all about it see it's asking for a name
 It adds
 numbers
 Right, and then you have then you're gonna put some kind of callback. You can even put a named function in here, or you can use a arrow function.
[00:57:12]
 Then you put the arrange phase, the hack phase in here, and then you put the assert phase.
 I'm gonna erase all this and put it in restore all the
 things here there it is.
 For all the stored, the only difference.
 The only difference is I don't need this anymore.
 Only difference is I don't need this anymore.
 For TypeScript support.
[00:57:57]
 Okay, so we've added TypeScript support for just.
 This one, we already did this. So you don't need to install preset TypeScript.
 That's only if you didn't do this.
 And you would add it to your Babel config file,
 but we already did that.
 And then we saw that we got IntelliSense
 without importing JEST.
[00:58:27]
 Without importing JEST and the test functions, these are the test functions like describe,
 it and expect these are the test functions, right?
 These are yellow, these are functions and these are used for testing.
 So these are are functions. And these are used for testing. So these are test functions.
 Okay, so we can take a break now. I'm going to start up the break. [BLANK_AUDIO] Okay, so you have to tell me.
 It's. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 All right, yeah, we're back from the break and here are some new TypeScript concepts.
[01:10:09]
 After I teach you these two new concepts, you have all the basics you need to get going
 with TypeScript and declaring the types and then wherever you get stuck, you just use the any type, but this will get you through
 most of TypeScript. Return types. So return types that informs TypeScript about the
 data type a function should return. So you can specify what you want a function to return.
 So basically what you put it in the function definition,
 like when you're defining a function like this,
 you put a colon, then you put what you expect to return,
[01:11:02]
 then you put your code block after it.
 So in this example, we're creating a function output, right?
 We make an output function, you're familiar with that.
 It didn't use to return anything,
 it just basically inserted things into the DOM.
 So it didn't return anything.
 So it turned, return void.
[01:11:31]
 You can put undefined also, but TypeScript
 likes to put void when it comes to functions.
 It returns void.
 It means pretty much it means the same thing But it's all it's a
 It's more semantic
 void refers more to functions where undefined reference more to variables
 Here we were defining a function get promo message, right?
[01:12:02]
 We we made this one in one of our practices and it's
 supposed to return a string, so there's a colon and a string. We also made an authentication
 function, like authentication AWS. It returns true or false depending whether the email and password are
 authenticated.
 Handles sign in attempt. This one was set up to if there was a problem with a
 sign in like remember we had a sign in button. This one, if there was a problem, it would return a string message saying that there was
 the error.
[01:12:58]
 But if there was no problem and the sign in the attempt was successful, like the email
 and password were correct, It didn't return anything.
 So this function returned either a string or it returned void.
 So let's just copy this here.
 And then save it into our notes, into our TypeScript notes. Okay, let me just change all of these. Just move the points there.
 You can also open a preview here on the side.
 That way you can see it nicely, or you can just edit it right here.
[01:14:17]
 But it just, it takes up another tab.
 So I don't know if you want to take up another tab or not.
 You just have to switch tabs. Okay, so these are all code.
 So I'm going to put these in
 back ticks.
 And then, and I'll put some return types here. In the modules, I'll make one for return types.
 Return types.ts.ts.
[01:15:13]
 So there's a function.
 Let me just copy it in action.
 This is where you would insert the message into the DOM. Basically the you'll write code for that right there. So here,
 we have the return value of that function. The function doesn't return anything. So it's
 void. You can specify it. But if you don't specify it,
 TypeScript knows that it returns nothing. So you actually don't need to specify it. But if there will be times when you
 do need to specify it, you'll know because you'll get
[01:16:17]
 TypeScript errors. When you, you'll know when when you need
 to specify it. But if you don't specify it,
 and you don't see TypeScript errors, then, um, yeah, leave it like that.
 This TypeScript already knows what it returns. Based on, um, what it's actually returning.
 Like this one here,
 promo message
 where you're going to generate a promo message
[01:16:59]
 and then at the end
 you're going to return the promo message.
 The promo message. It's going to be a string.
 Okay, so here we're specifying that this function should return a string.
 If we remove this, it's okay because TypeScript knows if I mouse over this, see?
 Looks exactly the same.
 It's returning a string.
[01:17:55]
 But here I'm just explicitly putting it there.
 So now you're starting to understand what these, when you mass over it, what this means.
 So that's just what it means and return the string.
 Here's the other one. So if I made a function out of it, if you're also like making functions from the
 beginning and you specify that you want to return a Boolean while TypeScript is going to tell you, hey, the function was declared.
 That it must return a value.
 A function whose declared type is neither undefined,
[01:18:53]
 word, or any must return a value.
 So it doesn't really explain what you need to do, but basically what you need
 to do is you're saying that you want to return a Boolean, but you're not returning anything. I mean, that I can fix that really
 quick right here if I just return true. See, there's no more error. But if I'm not return, if I start turn a string here. Error.
 Type string is not assignable to type Boolean.
 So this, when you declare it, it's almost like asserting a variable, you know, how you assert
 a variable and you want to say variable it is.
[01:19:42]
 Well, this one, I'm asserting a function. I wanted to return a Boolean. And so
 type ship saying, hey, you're not doing what you said you would do. You're trying to return a
 string here. But you said you're trying to, but you said you wanted to return a Boolean. So this is,
 this is good. Put to put this here. If, if you want to make sure that you're making your function correctly.
 Actually, this would be here when you're using TDD
 test-driven development. If you write your test first, you will know that you want
 authentication to return a Boolean.
[01:20:25]
 So that's what you're going to do.
 You're going to write the, you're going to write the function signature first.
 You're going to write this function signature first because you made the test already.
 Remember, test-urban development is you write your test first,
 then you write your code after.
 In the test, you find out, hey, I want, I think I want to make authentication return
 of Boolean."
[01:20:49]
 So the code, when you write it, it's going to be this one right here.
 You start with the function signature.
 And you're saying, "I want authentication to take in an email and a password," which
 will both be strings.
 And it's going to return a Boolean.
 Test-driven development.
 Basically, you're making the function signature first.
[01:21:12]
 And then the here you write later right the code.
 So you would start with--
 So you would start with is authenticated. I would say that's start with false.
 Or I'll just say it's a Boolean here.
 So I'm asserting that I want is authenticated to be Boolean.
 Then code this will insert here insert code for authenticating So, for generating a promo message, you can insert actual code here if you want, but it'll
 take away from the focus, which is the type of function type. Okay.
[01:22:27]
 And again, when you make this here, if you remove this, I mean like, let me mouse over right
 now.
 We see that authentication takes an email password and returns a Boolean. If I take
 this out, it's going to be exactly the same because TypeScript inferred that authentication takes
 in an email password and returns a Boolean because I'm actually returning a boolean here. But in the beginning, I didn't do that yet.
 This was here in the beginning.
 So it's good to have it here when you're doing TDD, test driven development.
[01:23:18]
 But if you're just writing your code just without doing the test, usually you won't have
 this. But since we're going to go with a TDD route,
 test driven development, you want to write your test first.
 You should have these return symbols here,
 or return types here.
 And here's the last one for a handle sign in the
 temp. You'll either return a string or void. This one you'll see there's a
[01:23:53]
 difference. Watch. I'll paste this in here. Imagine that you did TDD, you're
 able to test already, and you want handle handle side and attempt to return a string and a or avoid
 And there's no error right now. Why is it because this is returning a string or avoid?
 It's right now. It's returning void. So it's either a string or a void. Well, you can do either or so it is returning void.
 There's no error, but if I take out void right here, then there's a TypeScript error because now it's saying I should be returning a string which I'm not. We're going to put this back.
 And so let error message.
 That would be a string.
[01:24:53]
 I'm asserting that it'll eventually become a string.
 And then I'll insert code here.
 Insert code to generate a an error message
 or
 handle an authenticated sign in.
 Does handle sign in the tapped?
 Either returned an error message, or if there was no error, then it would just handle the sign in.
[01:25:35]
 Because it was authenticated.
 So here you can return.
 You can return error message.
 The we see here handle assign an attempt takes in an event then returns the string or avoid. If I take this one out right here,
 we see handle sign in a tab,
 takes in an event and returns a string.
 See there's a difference.
[01:26:19]
 That's because this function is not
 because there was actually a condition here. If if is authenticated,
 then return actually didn't return anything. It just did something. It did something and then it exited the functions.
 That would have been point.
 So let me just put here that is authenticated as a Boolean.
 That's actually, let's just set it to true.
 Actually, no, I can't set it.
[01:27:06]
 It's going to have it there.
 Let me just put this back, because when you're doing TDD,
 you will know what you wanted to return.
 So maybe you wanted to return either a string or a void,
 or maybe you just wanted to return an empty string
 or an actual error message.
 So that's up to you, you decide that in the test driven development what you wanted to return.
[01:27:37]
 So the key here is that
 TypeScript will not infer this properly unless you have the full code. But yeah, this is the point you can specify the return value of a function. And then I'll put here if you want.
 You can do that like a put square brackets, parentheses and then the path. Now in the source
 You have to go back one folder. That's the two dots source modules
 Then return types
 Now I'll create a link
 If you look at it here see return types for examples and then I click on it. I can it takes me straight to the file.
[01:29:10]
 If you don't know how to do that just look at mark down how to create a link,
 a file link or a hyperlink. It's the same same strategy. Use square brackets and then parentheses.
 Okay, so the next, TypeScript,
 next TypeScript topic is function types.
 You can declare function types. You can declare function types right here. So it informs
 TypeScript about what type of callback function signature is expected. So this
 is more about I should probably change it to callback function types. To do that.
[01:30:05]
 So here, to declare a callback function type, we're using arrow functions.
 Notation.
 So let's just, it's hard to explain it like this.
 It's better than to show you.
 So you just copy this for the notes.
 I'm going to paste it callback function types.
 It all changes these into
[01:31:09]
 the lips mark down the lip points.
 So these are
 these are all code. So I'm going to put back text on these.
 Okay, so call back functions types. I guess I'm going to put a file,
 see, call, back,
 call back, return types,
 callback function types.
[01:32:08]
 Now, gs.
 call back function. Or actually you can call it callback types.
 I'm going to call it callback types.
 T.S.
 Because when we're in, when we're in, when we're in
 JavaScript or in programming, when we, when we talk about callbacks,
 we imply that they are functions.
[01:32:51]
 We know that when we're talking about programming,
 we know that callbacks are about our functions.
 So I can actually shorten it and call back types.
 short and it can call it callback types. So callbacks are coming through from a function. So the function is not important. It's the callback that we're trying to define. So here's a callback right here.
 I'm going to take in a callback.
 And here we're going to assert that we want it to be a function.
 That takes in a message and then it returns a string.
[01:33:43]
 So actually this looks like this looks like an output function
 Looks like an output function
 Insert code here
 Okay Insert code here. Okay.
 So, and then when you, when you get a callback function, you see that it's yellow, right?
 That means it's a function.
 You could activate the callback right here.
[01:34:24]
 What you need to put in a message.
 It's expecting a string. So this callback, so if you remember, it almost looks like an arrow function, but it doesn't have the code block.
 It basically says these are the parameters that I want the callback to have, and this
 is the return value that I want the callback to return.
 I mean, this is the return type that I want the callback to return.
 So I want that callback. If you're going to give me a callback, I want
 that callback to take in the message, which is a string. And I want it to
[01:35:16]
 return a string.
 Okay, you need to specify the parameter name.
 Actually, the parameter names don't matter.
 Let me see here.
 I'm going to call the output function and it's expecting a callback.
 This actually is not.
 Let me just call it something else because it's confusing.
[01:35:51]
 My output, I just call it my output. It's similar to the output function, but it's not
 x. It's just, we're just demonstrating that it takes in a callback.
 call back. So I can put in here an arrow function as my call back, or I can put in
 our creative function. Actually, I'll do it like this. I create a function like my function that takes in the message which is it should be a string
 returns, um, you know, some kind of message like your message is.
 There, so it returns a string.
 So here's a function that takes in a message, which is a string, and then it returns a string. So here's a function that takes in a message which is a string and then it returns a string.
[01:37:15]
 And now here I'm going to use the my output function and it's expecting
 to call back.
 So there it is. It's I'm giving it a callback, which fits this description right here. The callback takes in a message, which is a string, and then it returns a string.
 And actually, I can think I can name this whatever I want.
 I could, I can call it X and it won't complain because sometimes people will name things differently.
 You don't have to call it.
 You don't have to make it the same.
[01:37:55]
 You don't have to match the data types.
 So, that's one way to do it.
 Here's another one.
 Event.
 A function that takes it in event and then returns nothing.
 So that's like the handle.
 My outputter.
[01:38:43]
 I'll call this the outputter.
 And I'll call this the outputter.
 So the function, my outputter it outputs things by calling a function that you give it. So the other one is, these are all like helper functions.
 You should examples. handler. My handler. It's going to take in a callback function, which takes in an event and returns nothing. These are the parameters.
 This is the return value.
 Right now it doesn't return anything.
 So the usage example, actually let me think I should put these in blocks in code blocks.
[01:40:35]
 So I can keep them together. And I'll tell this one example one.
 You can name your code blocks like this. This is called labeling your code blocks. This one will be So the callback, like if I were going to call my handler, it's expecting a callback.
 I'm going to make a callback called my handle submit or handle click my handle click
 Okay, I didn't make that function yet. So this is a function that takes in a callback function and then it's gonna call it
 Later on
 Under a different name.
 Where is this now?
[01:42:22]
 An argument for for type.
 Oh, the event function needs something. So type of event, I'll just put a click.
 All right, so my handle click is going to be a function that I'm going to make.
 My handle click. And it should be a function that takes in an event.
 I wonder why it's not on telling an error here.
 Right now it's the callback should take in a event and return void, but there's no error right now. So it should take in an event
 and return nothing.
[01:43:58]
 No return value.
 That's to match this. Call back, should match that.
 If I put here, maybe string, but yeah, there's an error.
 So there's no error if you leave your parameters blank. There's no errors if you leave your parameters blank.
 There's no errors if you leave your parameters blank.
 This as long as you put in a function.
 But if your parameters conflict with any of this, these requirements, like I'm saying
[01:44:41]
 that they eventually be a string, then there's a problem.
 It's to be specifying events.
 I could put in here an extra parameter like a message, which is a string.
 Oh, no, I can't.
 It's saying that you need to be specific.
 And you can't be specifying extra parameters,
 unless this one says you can.
[01:45:11]
 So we're expecting the callback to take it in event,
 and then return nothing.
 So there is the callback, it takes in an event,
 and returns nothing.
 Here, we're using the function.
 It takes in that callback.
 callback comes in through here and then we use it. So this callback right here
[01:45:39]
 is actually my handle tick. Right? comes, my handle click comes in through here.
 The name of it is called my handle click.
 And then it comes out through here.
 The name of it is now callback.
 The function, you can also declare functions
 with like an empty function.
 You can also declare functions with like an empty function.
[01:46:08]
 So I should add here. I should add here.
 You can use the word function.
 So let me, let's do this one first.
 This one is an example 3.
 Let's just take it, this will be function, my function, and it takes in a callback.
 And it's going to look basically, here's, this is a function that has no parameters.
 And it returns nothing. And then this one will say it calls the callback. And then if we're going to use the function, if we're going to activate it, we need to use parentheses to activate it.
[01:47:27]
 But there's a TypeScript error
 because I need to be providing an argument.
 I need to provide a callback.
 So I'm going to call it my callback.
 So the callback is going to be a function.
 Going to be like this, a function that takes in no parameters.
 And returns nothing.
[01:48:01]
 Basically, empty function.
 What happened here?
 Can't see that.
 Oh, okay, so this one means it's returning an object, an empty object.
 So here it looks like a code block.
 It looks like an empty function or code block that returns.
 Actually, it looks like a code block.
[01:48:59]
 But it actually, we're saying that the function is a callback.
 Or the function has no parameters. It takes no parameters,
 but it returns an empty object. If we try to put properties in here, let's see what happens.
 Okay, so you can return any object. It doesn't have to be an empty object. You see that. So when it looks
 like this, the arrow, so these are the parameters. This is the return value.
 You can put parameters. You can put values in the object, just as long as you're returning an object.
 So this is more generic.
[01:49:48]
 You can actually put, I think you could put some parameters in here.
 Let's see.
 All right, guess you can't.
 It needs to be nothing.
 It needs to be nothing. But the object is flexible there. The object that you're
 returning is flexible.
 Next one is you can take in a value, any value. And then this one's actually a this one's an actually an example of
[01:50:28]
 u-state right here.
 Let's see how we're gonna do this.
 Now we're going to do this.
 Here's example four.
 So let's see how that looks.
 This is a function that returns a two-bolt.
 This is like a array with a zero position and a one position.
[01:51:07]
 The zero position can be any value and the one position is going to be like a set of functions.
 How would that look?
 I'm going to start with this first. So this is my useState.
 My useState is going to take in a value, any value.
 I'm going to take in any value. And then it's going to then a set of function.
 It's going to cut. It's going going to add a setter there.
 And what is the setter?
[01:52:26]
 I'm going to stick it in here.
 The setter should look like a function that takes in a value
 and returns nothing.
 So here is the setter.
 It takes in a value.
 And then it returns nothing. Okay.
 Let's see here to move any books.
[01:53:14]
 So I need to specify.
 Okay, yeah, I need to put this in a function function.
 I'll just call it my function 2. Or, yeah, my state, my state function, which will take in a callback, which looks like new state.
 And then
 Okay, so what's going on here, we is a function that takes in a value and then it returns a tuple, right? When we have a react component, let me see if we have it in the home page. Yeah,
 so you state is a function that takes in a value and returns a tuple. So that's what we're saying this callback is. This
 callback should be a function that takes in a value and then returns a tuple.
[01:55:32]
 So we're gonna send one here by use state.
 What's the problem here now? Okay, let's look at this. Are you going to type the end?
 Any array?
 No, it's not any array.
 Okay, so it thinks it's a, this one is thinking it's,
 it's any array.
 So this one, I have to specify,
[01:56:24]
 I have to specify that it's going to be a tuple here of any value and function.
 Actually, it's going to. So I think I'm going to do it like this.
 As a two as an array that takes in any, I mean, an array that returns void on the other side.
 So if you want, this is how you fix it. So if you're declaring it for the first time here, here making an array that can be any size, an array that can be any size, but at the end,
 you need to specify that it's a tuple right here by using the assertion at the end.
 That's the cleanest way to do it. You can assert there,
 or you can assert right here, but it gets kind of messy. You can assert right
[01:57:52]
 here and put this whole thing in there. You can do that. See, it looks kind of messy
 like that, I think.
 It's much cleaner when you put it at the bottom.
 Right here.
 Okay, so one more is function.
 Okay. Okay, so one more is function.
 Okay, one more, then we'll take a break.
[01:58:30]
 Example five.
 My color.
 Or my function to.
 Takes in a callback.
 Which should be a function. So what does that look like? And then call the We insert the claw back right here too. Okay, so I'm just demonstrating how the callback is used in each one.
 I'm just making it a little bit cleaner.
 So notice I'm not using any, I'm not using much comments in here because it's meant to make you think what is going on here.
[02:00:11]
 I meant to make you think you could put comments in here if you want, but I want you to like, I prefer you to look at the code and think about what's going on.
 But you could put comments here and remind yourself of what's going on.
 So Chris is saying he's having a hard time visualizing situations.
 When you need a callback, right? So, maybe you're not making a situation where you're asking for a callback. But in our simulators, we did have callbacks when we made a simulation.
 What was that?
 It was when we simulated a promise, or the fetch, actually,
 what's that?
[02:01:31]
 The sign up function or the sign in, where is it? Remember when to have the child component communicate with a parent component,
 you need to have a callback.
 That way you can, when you do that, when you have a callback,
 when you need a callback, you can specify how you want that callback to look.
 How many parameters you want that callback to have, what you wanted to return?
 So in this situation, you can specify what callback you want.
 And you would use it, an example would be when you want a child component
[02:02:08]
 to communicate with its parent component. How do you get the child component to communicate
 with the parent component? You use a callback. Okay, so let's see here.
 So my call back, but my function 2 is going to take in a callback.
 So my callback is going to be a function. So let's see if it's flexible with the return value.
 Let's see what I could, if I can return something.
 Yep, it's flexible with the return value.
 There's no type error there.
[02:03:18]
 Let's see, is it flexible with the parameters?
 Yeah, it's flexible with that too. So this one is flexible with
 anything. You can return anything. You can take in whatever parameters you want.
 So it's very generic.
 And it doesn't matter how many parameters you take in and it doesn't matter what you return. So let's you send in that callback.
 But in the other ones, if you change your callback, like for example, if I change my U state here and I try to take
 another parameter like a message, then we see an error because I don't, it's not
[02:04:16]
 fitting this description right here. It's saying I only want a callback that takes in one value, not two values.
 But here, this one, it's very flexible. I can put in a value here, any.
 And there's no error. Okay, so that covers all the basic types that you need for types good.
 We're going to take a break now.
 Oh, wait, let me just link this file.
 I'm going to link this through the
 actual file here
[02:05:08]
 Go back
 folder by using the two dots
 Go into the source folder modules folder and then that's gonna be called back
 What happens it
 They're not put it in the lines of the cylinder, it's a bit in the [BLANK_AUDIO]
 You see where I put it.
 [BLANK_AUDIO]
[02:05:54]
 I think it's not saved in any folder here.
 You chose?
 [BLANK_AUDIO]
 It's okay, wait.
 Call back.
 I put it in a notes.
 Okay, so let me move this to the modules folder.
[02:06:19]
 Okay.
 Now when you look at the preview, you can go straight to the file right like that.
 Okay, now, okay, so we're going to get ready.
 I'm going to set up the break.
 Sorry, we went into it a little bit late.
 See you in 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so let me just get this together, correct slide.
 All right, so we're back from the break.
[02:17:30]
 And this is the last practice problem of the week,
 where you're practicing TDD, and you'll use TDD to gain
 a better understanding of functional programming,
 which is where you make the test first first and then you make the functions afterwards.
 So you'll understand how TDD works, how to design your functions.
 And I think you'll develop your apps a lot faster if you can do TDD, especially if you're making big apps, but if you're making like small apps and TDD is not fine,
 but I think you want to make a big app like your your capstone project is getting pretty big,
[02:18:17]
 and you want it to do a lot of stuff.
 And complicated things. So TDD would have been good.
 and complicated things. So TDD would have been good. So it would be good to practice TDD just in case you want to make a different project, a different big project,
 try to do it with TDD style.
 And then this one helps you get used to that.
 All right, and also there was assignment that was issued
 about converting your capstone to TypeScript.
[02:18:47]
 And so this is going to be due on Thursday next week, where you start converting your capstone project to TypeScript.
 And it has to do with your branches, merge each branch, the main after you finish each branch.
 Okay, so I'm gonna start up the break our rooms for evaluations. I mean, many evaluations.
 And it's gonna be up for 30 minutes.
 minutes. So who going to go and then Rayla and you want to go.
 Most likely Dave is going to take up, you know, the 30 minutes and Rayla just have to stick
 around and do yours a little bit after class.
[02:20:08]
 Okay, David, I'll see you in the breakout room.
 And the mini evaluation room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, I'm just going to conclude the class now.
 So, we're back from the breakout rooms.
 And in conclusion, we learned about TypeScript return types.
 Like, you can set up the what you want functions to return and
 Then we also set up TypeScript callback types. We can specify what kind of callbacks
 We want a function to accept
[02:50:38]
 And then we at the end we had time to practice but also do
 many evaluations.
 And also work on the assignment.
 So, you have three minutes to take attendance.
 If you didn't mark your attendance, make sure you go ahead and go to the Co-X account and mark yourself present there.
 Other than that, class is dismissed,
 but Rayline is going to stay for evaluations,
[02:51:15]
 but I'm still finishing up with David.
 So I'm going to do that.
 But that's this week's lesson on TypeScript. I'm going to restart the breakout
 rooms so I can finish the mini evaluations here. So I'm going to finish up with Dave first and then Rayline afterwards.
 Dave David, I'll meet you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, Ray line, ready.
 Okay, I'm ready.
 Okay, I'll see you in the evaluation roomause ]

///// FILE: "Level 4/transcripts/Mar 17, 2025 19-50.txt"

Transcript from Mar 17, 2025

[00:00:00]
 Good evening, everyone. Welcome to this Codex Academy course level four week two day one and the theme for this week is express. So we're going to get into the back end port of the back end portion of web development.
 This will be our first day in the backend portion of web development and express
 will be our first node module.
 That'll get our backend started.
 You know, the back end software started.
 So today's agenda in the first hour will take attendance,
 do announcements, review, and I'll talk about web pack
[00:01:02]
 and NPM scripts, some quick topics, hopefully.
 Second hour, I'll talk about Express.
 Some of these topics might go into the second hour.
 We'll see third hour mini evaluations and a chance to work on the assignment.
 I haven't posted the mini evaluations yet, but I'll
 post it during the break so you'll know what's going on there for this week, the many evaluation
 for this week. So attendance, make sure to mark your attendance. I guess the whole class is not here right now.
[00:01:49]
 So mark your attendance, you can mark yourself present.
 And I guess that part about attendance
 and reporting future absence.
 Yeah, you can't take attendance until the class starts at 6.30.
 So it's changed a little bit.
 And now time for announcements. It's pretty much the same as last time.
 But we'll see.
[00:02:27]
 We'll see if I think of anything new
 while doing these announcements.
 Oh yeah.
 Okay.
 Still on regular schedule this week.
 Survey, did everyone fill in that July cohort survey
 Thumbs up if you did thumbs down if you didn't
[00:03:00]
 So I'm make sure you fill it in it's a way for you to express your ideas in an anonymous way without being worried about
 what other people think, just be open
 and answer the questions honestly,
 so that the administrative staff of Codex
 can monitor what's going on in the classes
 and make sure that they're on track
 and students are learning and
[00:03:50]
 and instructor instructors are teaching what they need to be teaching.
 So again it's anonymous so don't worry about how you respond to the questions in that survey.
 Let's see if there's anything new here, no new questions.
 Okay, so yeah, no new questions there. But remember, if you have any questions,
 post it here in July and cohort first,
 and if you get stuck, on anything,
 can't find a bug, and you've been working on it
[00:04:33]
 for 15 minutes, post it here right away,
 because you shouldn't take that long with fixed bugs.
 I teach you everything you need to know.
 Fix the bugs quickly. And if you can't fix it right away, then that just tells me that I probably didn't teach
 you something like I didn't teach you a way to fix the bug.
 So that's why I want you to post it here.
 So I can see it and everyone else can see it.
[00:05:05]
 And you know, acts like a documentation
 or how to fix the bugs and the things that we need to learn
 and what I need to teach you.
 what I need to teach you.
 Okay, so practice problems are still posted on the side.
 Type script right here from the first week, 1, 2, 3, 4, 5. All five of them are there.
 Make sure you work on these.
[00:05:49]
 But also work on the assignment.
 I didn't post it yet, but that's basically
 preparing your capstone for TypeScript.
 OK, Mark your days.
 Green when you've mastered the topics discussed on those days.
 And also, well, I guess I should make these markable.
 So once you've completed the practice, you can mark it.
[00:06:16]
 It's not going to be great.
 It's just going to be for your own reference if you were able to complete it or not.
 I want you to work on these. So you'll, you can ask questions if you're having a hard time with it.
 So that you can discover what you don't know.
 So I'm going to change these so that you can mark it off manually.
 The market days green when you pass got their topics go in order.
 Classroom recordings, use them to catch up and catch up before the next class.
[00:06:55]
 If you do fall behind, maybe you were absent or maybe you had a bad interconnection
 and you missed like 30 minutes or one hour of fast make sure you
 catch up and take your notes. Only after you caught up mark that day green.
 All right so now it's time to focus on the class and take notes,
 type of instructor types, also type. What I say, especially if it's information that, you know,
 new and it's helpful. And if you can't focus, then just consider recording,
 watching the recording during a better time. But make sure you catch up before the next
[00:07:44]
 class. And you can have your microphones ready just in case you have any questions or if
 you want to try and doing the mini evaluation.
 Okay, so that's enough for announcements. Now time for the review.
 So we talked about enabling TypeScript support for JEST. So you should have taken notes on the subject. Let me just load it in
 the in my page here. It could be in sandbox level 4. I'm going to load it on my screen about now and you should be able to see it.
 I'm going to close all these first.
 So, TypeScript, enabling TypeScript support
[00:09:15]
 for just, so you should have notes and TypeScript. [ Pause ]
 Enable task of support for JEST.
 [ Pause ]
 You can always, if you don't need to edit anything, you can right-click and view the preview.
 It doesn't need to be side by side.
 If you wanted to be on another tab, then you would right-click and view the preview. automatically open it side by side you can click on this icon here it's like a
 split icon with a magnifying grass but I'm gonna open it on a new tab by opening
[00:10:17]
 the preview. So enable TypeScript support for Jess.
 So, when you have Jess, you can, I mean, when you have TypeScript, you don't need Jess the These functions here
 See like describe it and
 Expect you don't need
 At just global at the top anymore to import these
 That's why we've uninstalled it.
 But you might have to install it at a later time depending on if you need something that
[00:11:13]
 it has.
 Because app types that slash just, it doesn't have everything that that just goes has.
 It has some stuff.
 Mostly just the types that let you see the parameters here.
 The describe function.
 It takes in a name. Basically, this is what takes in a name.
 Basically, this is what they call a name.
[00:11:49]
 Here, the name of the name of the suite or the name of this group of tests.
 So, basically the name of this group of tests,
 basically it's testing the addition function.
 So that's how I use the
 describe function here. If the describes the whole group of tests, or you can
 think of it like a sentence, these tests describe the addition function. So think of it like that. Just like a sentence going from left to right.
 And then this part right here is the part for the callback function. It says
[00:12:39]
 fn which stands for function. It's asking for a function here.
 which stands for function, it's asking for a function here.
 And it returns, it returns as a void.
 So this described function here, it doesn't return anything. So it returns void.
 it doesn't return anything. So it returns point.
 The next thing, that types.just, we downloaded that and we put it in, it was put placed into
 package.json right there. This one, usually at types, you'll find what you need to get
[00:13:36]
 TypeScript support at types.
 Usually it's just at types and then the name of the package. But if you want to make sure,
 then you would go to
 mpmjs.com at types.
 Last.
 And then you can see if it's there.
 And if you click on it, you can just make sure.
[00:14:10]
 So this was published five months ago, and you can make sure that it's the right thing.
 So this package contains type of definitions for just.
 So that's how you you can check if your, whatever package you're working on, if it has
 TypeScript support, basically just look at app types. and see what else here.
 We installed Babel preset TypeScript and then we put it into the config file.
 So they're both in dev dependencies.
 Here's @typesjust and here's @babbled_preset_typescript. Why are they in here
[00:15:08]
 in dev dependencies? It's because we don't import them into our main app.
 These are dependencies that we use for building our app or testing our app.
 So it's different from this here.
 Dependencies are for packages that are app directly uses.
 It imports these directly. So we get Babel at preset TypeScript and we put
 it in the Babel file. Babel can take digest. There it is. We're just basically just stacking it.
 I don't think This order is fine.
[00:16:27]
 It's basically an array and it runs your program to
 think of it like an upside down stack,
 almost like your program, like your index HTML file here,
 or index.tsx file, and all your dependencies for it,
 everything that you import, and also this index.tsx file,
 it's gonna run through Babel,
 and this one's gonna look at the file first.
[00:17:06]
 Basically, it's going to look at index.js first.
 Or index.tsx is going to look at it first.
 And then convert TypeScript into JavaScript.
 And also convert-- actually, no, it won't convert these imports it'll
 so
 pre-set TypeScript will look at your index file convert anything here into
 type into JavaScript right now there's nothing really here that will return into JavaScript.
[00:17:48]
 And then it will start looking at your imports.
 So like the home page, it's going to look at the home page.
 And let's see here.
 Are there any TypeScript things here?
 Yeah, here's interface.
 Well, I have interface in my home page.
 And the car type in my home page.
[00:18:16]
 So this is TypeScript right here.
 And interface, actually, no, this one is a.
 This one is TypeScript, but this is a, this is a
 variable. Variable is fine, but this one is TypeScript, so basically these will be removed
 and then you will start looking like JavaScript. Because JavaScript doesn't have these
 things. These are type assertions. Remember, when you have a variable like car interface
 or a variable like car type,
[00:18:52]
 these are variables based on the type that's next to them.
 So I'm asserting that this variable
 is gonna be a car interface. I mean it's
 going to look like a car interface. And I'm asserting that this variable will look like a car type.
 So what do this car type look like? It looks like an object that has a color year and is for sale.
 So that's basically the asserting it right there. And then
 by adding TypeScript we can observe that in
[00:19:39]
 a sense without importing just test function. So this would follow down just. So I can just start even though I'm
 that importing these. TypeScript knows. So this is a
 type script file. TypeScript knows with these functions are and I
 can just start writing them without importing them.
 start writing them without importing them.
 Next thing we talked about,
 we're return types.
[00:20:30]
 So I'm gonna show them notes here on this side. So return types, we made them in the return types.ts file.
 We made some examples in there.
 And basically return types and forms types group about the data type
 of functions should return.
 So let's look at those files. We just kind of fill these
 and then I'll click here to view the examples in that file.
 So return types.
[00:21:10]
 file. So return types. When you're doing test driven development and you have it fully written the code for a function yet, you should be asserting return types. Remember when
 you assert something, use colon next to the variable, but in this case it's next to the function. Not next to the code block, but next to the function signature.
 So this is the function signature.
 There's the colon.
 So it's asserting that this function returns avoid.
 Or basically it doesn't return anything.
 That's what void means. This one means that this function returns a string.
[00:22:01]
 So before you even code it, you should be asserting what the
 function should be returning. And then you start coding what goes inside of
 here. That's test-driven development, TDD, you assert what the function does, what it's supposed to return, and then you write the code inside of here
 So this one right here, we have the function signature
 It takes in an email which is a string and a password which is a string. We are asserting that this parameter here
 Is a string and we're asserting that this parameter here is a string. We're asserting that this parameter here is a string. I know it almost looks
 like object notation because you see you have a property and then colon and then the value,
[00:23:03]
 but these are not values these are types so
 don't get confused with object notation you don't see any curly braces around
 here so you're not grading properties and values but what you are doing is
 you're specifying that this parameter should be this type.
 So that's the function signature and then after that function signature we see this colon
 to signify that we are asserting that this function should be returning a Boolean.
 And then this one right here we are serving that this function should return either a string or
[00:23:49]
 a boy or basically nothing.
 Those are return types and when you mouse over a function You can start to understand what this means now. We see that the
 function, the name of it is right here, and that it takes in an event parameter or event
 variable. And that variable we expected to be a event object or event class
 basically an object own and then there's a colon here after the function
 signature which represents the return value so this one returns a string or
 a point okay so now the those pop-ups are starting to look familiar now.
[00:24:47]
 We should be able to read them now.
 Okay, the next one.
 We learned about callback function types.
 callback function types.
 We put them in this file called Mactypes.ts.
 And if you're wondering how you do that, you basically, you put the text that you want to display.
 You put it in square brackets and then you put the path inside of the front to
[00:25:45]
 see right there. So this path is saying go back one folder then go into the
 source folder, go into the modules folder, then there's the file right there.
 So that's actually not that we call back. Call back types right here.
 There's something red here.
 Might output.
 Okay, let me see here.
 Oh, it's duplicated in another file.
[00:26:27]
 It's not duplicated somewhere here, I don't think.
 I don't see it anywhere here. Yeah it's duplicated in another file and
 TypeScript is just warning you about that.
 I should probably disable that. I'm not sure how to disable it right now. I'll look at a player.
 So I'm just gonna put a number here.
 I'm just gonna put a number here.
 You name this one to
[00:27:12]
 I guess there's already enough to
 Read
 Okay, maybe it's changing all of them Okay, I think it's changing all of them.
 Okay, I think it's changing all of them.
 I think there are all, it's types of things that are all linked together, so I'm just going to change this one here.
 Three, three here.
 I don't know where else I have it, but I'm pretty sure it might be in some other tiles here.
[00:28:03]
 Since I only see that name, well, instead of looking for it, that's just what it means. If you see TypeScript underlining and saying it's a duplicate name, even though
 you don't see another file like that, I mean, I don't see another function with the
 same name here in this file.
 That means it's TypeScript is trying to tell you that it's also in another file.
 And that's just TypeScript way of saying, hey,
 I think you want to use a different name
 where else you're going to get your functions mixed up.
[00:28:33]
 Just like how we renamed Handel Sign in,
 I had one function called Handel Sign in.
 And then to avoid any mix up. I called the other function
 handle sign in attempt but at first I had two different functions called
 handle sign in. One was part of this file and one was part of the other file and
 then later on to avoid confusion I just renamed one of the files. So it's, you know, just easier to understand which one belongs to this and which one belongs to that.
 But if I had TypeScript at that time, the TypeScript would told me,
[00:29:15]
 "Hey, you have two different files with the same function name.
 I think you want to rename something there so that you don't get the mixed up.
 So that's what TypeScript is doing here when I called it my output.
 I'm pretty sure I have this in some other file. Too bad it doesn't tell me which file it's in.
 Maybe if I go right here go to to definition. Okay, it's in return types.
 It's in return types, but that's a totally separate output function.
 Here, return types.
[00:29:56]
 See, it has my output.
 Totally separate.
 I'm not even exporting it there.
 If I do export it, then it's not going to separate the mouth like this.
 If I put export, I think it's going to separate the mouth.
 Yeah, it separates the mouth. I can't export this one because it's inner function. It needs to be
 outside to be exported. It's too far. I mean it's just it's only known from
[00:30:36]
 inside of this function or inside of this code block. The TypeScript can see that it's coming up, that it matches other names.
 But I'm going to leave this like this,
 and then there's a conflict,
 so I'm going to rename this to,
 because there's only two of them.
 to them. Okay, so going back to callback types, callback types and forms type script about what type of callback function with type of callback function signature is expected. So you may or may not be creating functions that accept callbacks.
 With your definitely using functions that accept callbacks like the set timeout function. You use the set timeout function and
[00:31:47]
 Or maybe you
 use other functions
 Let me see here
 I'm gonna just create a template here temp.ts
 here temp.ts. So set time out. So this function takes a call back here. And maybe this callback is like, uh, that did not or just or like, I think it was increment.
 No, I don't think the media is a set time out.
 In Cremint counter.
[00:32:42]
 And then, how often to do it like every one second right here.
 So we can't find increment counter, but we can see here that it needs a
 set time out needs a handler. It's hard to tell what a handler is
 because they're using interfaces or classes here. But maybe I can go like this
 and say that be a timer handler.
 Timer handler.
 Right, now we can't do it inside there.
[00:33:35]
 You can do it here.
 When you make a function,
 this is the callback, right?
 It's a callback, so it's going to be a function.
 So I wanted to be a time-rehandler. There it is.
 You know, I want to actually know that's not right.
 That's not right. This is a return value.
[00:34:02]
 This one is supposed to be a time-rehandler, but it's hard to know what it's hard to know
 what it's asking for there. So the way to know is to just create a function inside of here.
 You can make it a callback, a arrow function, a non-inverse function, or just like that, a regular function.
 And if there's nothing red, nothing red about it, then it's okay.
 You can do whatever you want, you can add more, you can add more variables like x, y, and z.
 As long as it's not complaining, then that means your callback function is within what this one expects.
 So, said time not expects the callback function function so you can give it whatever you want.
[00:35:06]
 You can make it a function like this.
 Basically, I just stuck it in here as a parameter or you can make it an anonymous function
 by just taking out the name or you can make it an arrow function like that. So that's how callback function says how
 you can specify them. So you specify callback functions like this one. So
 you'll see that the functions that you use they'll specify okay, I want a callback function that takes in a message
 which is a string and then I want that callback function to return a string. That's what
 that's what this means right here. When you're when you're specifying a type for a callback function,
[00:36:08]
 specifying a type for a callback function. It's not really an arrow function, it's basically just defining what you expect the callback function to return. So in this case right here,
 if a method is saying it wants an event variable, which is going to be like an event object,
 that callback function should return void.
 In this case, here's a callback function that doesn't take in any parameters.
 I'm going to edit that there so this is a space.
 So it doesn't take any parameters. That's why that's empty.
 So that represents a callback function that doesn't take any parameters.
[00:37:08]
 And it returns an object.
 That's what this means.
 It's not a code block.
 So don't get it mixed up with an error function.
 When you're specifying callback functions,
 or if you see something specifying a callback function.
 And you think I have an example here, callback types.
[00:37:37]
 So here.
 So this one is saying, this my output function is saying, I want, I want you to give me a call back. And that callback should be a function that takes in a message.
 I mean, that, yeah, a function that takes, takes in a message and then returns a string.
 Okay.
 This is how you define your own callback.
 How you define what you want people to send into your function.
 So let's say you're making a function like this and you want people to send it a callback.
[00:38:18]
 So this is how you define what that callback should look like.
 But like I was saying before, a function that you've been using,
 actually I'm going to take this out, put it there,
 because it makes it over since right here.
 An example of a function that you use that accepts a callback is that one.
 Let me see. Are there any other functions that you use that except the callback?
 Trying to remember.
[00:38:54]
 Oh yeah, like the test functions describe. So the first one is a string.
 So that's the name of it, my function, these tests are for my function. And then it's gonna ask for a callback that goes inside of here.
 Well, this one's not a good description either.
 It's hard to tell what kind of callback it expects.
 So basically what you can do is just, you know, just make a function inside of here.
 I'm using an error function. And then if there's no problem, then it's good.
 And then just start designing this function to do what you wanted to do, like, do you
[00:39:54]
 want it to accept parameters?
 Okay, put in some parameters, and then you see that there's something wrong.
 Okay, I guess I'm not supposed to put in parameters here.
 So I'm gonna erase that.
 But I can do whatever I want inside here, right?
 And then, and then you start typing in here.
 So that's how you find out what kind of callback is,
[00:40:29]
 what kind of callback this one is looking for? Basically just trial and error, because it doesn't describe to you.
 It's not describing to you what kind of callback it means right here.
 Unless you go and look at the documentation, and then you'll find out.
 So here's another callback.
 I'll go through here again.
 So here's a state function.
 I can use state.
[00:41:07]
 All right here it is my use state. This one actually it returns a callback
 right there. So I guess that's a little bit more confusing. So here there's a function
 and I'm defining a callback and I'm saying okay give me a callback.
 Your callback should accept the value and then return a tuple. This is a two pole with two positions.
 The first position can be an item. Second position should be a callback that takes in the value.
 And returns nothing.
 So I'm just showing you different examples of callbacks here.
[00:42:02]
 So you get used to the notation.
 the callbacks here. So you get used to the notation. If you want to accept the callback, but it can be anything, then you can just say function. Instead of writing all this stuff
 right here, it's just, this one is defining a callback, but it looks kind of messy, but
 if you don't really share what the callback looks like and you just want to call it without
 any parameters it's okay to use function.
 And then I introduced to you, or you got a chance to go over a TDD practice during the third hour of class, where you use TDD, test-driven development.
 You write the test first, and then you write the code later.
[00:43:01]
 You use TDD to gain a better understanding of functional programming.
 Did anyone finish TDD practice?
 Thumbs up if you did.
 Thumbs down if you did it.
 You should be attempting these practices.
 Otherwise you'll be, you know, if you finish this course, and you
 don't have a good understanding of these things,
[00:43:29]
 and then you go for a job interview or something.
 They're going to catch you, and you're
 going to find out you don't know your stuff.
 So you need to be practicing these things.
 All right, so, but I'm gonna talk,
 I'm gonna ask you about this TDD practice later on,
 maybe if I have time, I'll walk you through it.
[00:43:58]
 But right now, I'm gonna talk about webpack.
 So, you might have noticed when you have Webpack that it has a message that says watch is not necessary because Webpack them so basically it says watch is not necessary.
 So let's just copy this and I'll show you what I mean here. And
 I'm going to load up the sandbox. I'm going to share my screen.
 And then, so make sure you copy that to you. I think I should have some call back notes.
 I mean some web pack notes. I need to put here functions that I use that
 and you call back function.
[00:45:55]
 This time script notes, pretty much done with that.
 And then open up thepack notes, webpack-babbled.md and a paste it here, unnecessary
 configuration options. I just turn these into the points.
 So if I go in here, so this is set box level four. And to start the Dev Server, NPX Webpack Server.
 Oh, what's this mean? Oh. I deleted. break my PMPM. I've been to delete node modules.
 You see if you're having pPM, problems with PMPM,
 you can delete node modules and the lock file
[00:47:54]
 right here.
 And then reinstall everything.
 And then we install everything by typing PNPM install. Usually that fixes it.
 If it doesn't, then you have to escalate it to another.
 Another.
 You have to do more to the.
 Basically.
[00:48:24]
 All right, so I have everything installed now.
 Npx, Webpack,
 Server.
 Okay so there was a,
 I think,
 there's one I think is that
 error. here's why I've accepted Thanks to the radiation cases here
[00:48:51]
 And I find log in SAS, okay, so there's that problem
 So I have that problem here, so I'm gonna
 NPM install SAS
 Actually, let saved it.
 Because I'm calling SAS directly, So that is needed for one pack and babbled.
 So we don't need to put that in the penancies.
 We need to put it in the penancies.
[00:49:35]
 Okay, now we need to just try running this again and PX, lower pack server.
 Okay, so there should be more errors. But if you look at the top of it, it says,
 no need to use a serve command together with watch. It does not make sense. So that's what it says. So what I'm trying to say here is watch is not
 necessary because webpack depth server automatically watches. So what can we do about that?
 We're gonna remove those extra comments there. We don't want to see this yellow comment every time.
 So all you have to do is go to Webpack. Click JS and
 you can disable watch true and you can even put a note.
[00:50:42]
 I'm not needed.
 I can need it. note not needed or impact. And also, the lay is not necessary because the depths are built without without er, er, with me say, bundles
 without build areas.
 So I just, I forgot to,
 that was the time for there, missing that word.
 So, um,
 when this dev-servered bundles things,
[00:51:41]
 when all, it bundles in memory though,
 so you won't see it in the files.
 It doesn't have built errors like before when we're using light of silver.
 So this one right here is not necessary. Watch options.
 I'm going to just put this all on one line.
 And I'll put a comment here.
 Not exactly what you mean.
[00:52:15]
 Yeah, I'll put that.
 Not needed.
 Because when packed dev server doesn't produce build errors like live server.
 It doesn't produce build errors like live server does. That's why these two can be disabled. That's
 why we have this disabled watch option disabled into the way option.
 We can take a break here. We're going to go over more things after the break.
 after the break.
[00:53:44]
 Alright, so I'm gonna just hit the break start in here. [BLANK_AUDIO] >> Okay, see, after 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break.
 Then we get the right page loaded up here.
 Okay, so we're going to continue the webpack topic
 before we move on to the express topics. So now that we know TypeScript, we should enable TypeScript support for webpack.
 So these are the steps to do it and basically here's the main step.
 We're going to change webpack config.js. We're going to change it to a TypeScript file.
 Why do we want to do that? It's so that we can see the IntelliSense. It'll pop up a menu and it'll
[01:05:01]
 tell us like what are the options we could be putting and what it what it expects
 So that's a benefit of TypeScript. It pops up the menu and then you can pick what you want from there and the correct values. I mean, so let's save this
 Okay, I'm gonna to turn it on my screen now.
 And then going to paste it into the notes.
 This one's going to go into Webpack.
 It's both TypeScript and Webpack, but mostly about Webpack.
 So I'm going to Webpack-Babel.md. And I'm going to paste it here.
[01:06:05]
 So this is how to enable TypeScript support for Webpack.
 Rename the configuration file to Webpackconfig.ts.
 Okay, so let me just make sure it rendered.
 Okay, so everything rendered.
 I'm not having renamed it yet. I'm going to
 Just display the page first just to make sure everything is running
 Okay, so everything looks like it's running. I looked at here and I don't see any errors here
[01:06:41]
 gonna look at the console
 Just a favicon area.
 Just the Favicon area, I should probably put a Favicon
 in here, but let me see.
 Oh yeah, there's one here.
 Okay, it's only appearing because of dev tools.
 I mean, dev server, this, it can be removed by copying
[01:07:14]
 this file.
 If you copy this favicod into the public folder,
 we'll see that error anymore.
 Because the dev server is running this index HTML file.
 Remember when we tried to run Dev Server, it didn't work.
 It only worked when we made the public folder and we put the index HTML file in there.
 That means Dev Server is looking at this. Webpack Dev server is looking at this and
[01:07:47]
 This one is looking for a favicon
 Let me see Actually, I guess I didn't think it here
 Oh, here it is. Yeah, it's looking for a favicon
 And the same folder as itself so I I'm just going to copy that fabric on over. Copy it here.
 There so there should be two files in that public folder. If you want to avoid that refresh this. Okay, so it renders fine.
 And so I'm going to stop the server.
 Because whenever you make changes to the configuration file,
[01:08:42]
 it won't apply until you restart your server. So I'm
 going to rename this the time script.
 Actually, why is this one red here? React DOM.
 Okay, I need to install types for React DOM.
 So I guess I haven't done that for the sandbox yet.
 So let me just do that too.
 At types, okay, I did, I did put it, okay,
[01:09:34]
 let's go down here.
 Okay, that one. I'll take the look at the index 8, so I'll file. I mean the index TSX file, see if anything looks weird here.
 That's fine. I'll just like it. I'll figure that out next time.
 Okay, so I changed the file to the webpack file to TS or TypeScript file.
 Now, PNPF. It's followedSNode. Okay, so what this means is if we, so what I just did was rename the Webpack file.
 Now let's see what happens if I try to run the server, NPX, Webpack Server.
 There's an error, right?
[01:10:53]
 All I did was just change the name.
 You see this error?
 And the error is because of this.
 Can I find module TS node?
 Why is that?
 It's because when you rename your webpack file to a
 TypeScript file, TS.ts, it wants to use,
[01:11:25]
 it means TS node to process this file.
 'Cause Webpack usually just looks at JavaScript files,
 but when you change it to a.ts,
 the TypeScript needs to be processed.
 So TS node is required for that.
 Webpack is telling you with this error message,
 it needs TS node. And I'll find module TS node.
[01:11:49]
 So that's what we're gonna do in the next step right here.
 ENPS install PSNote,
 dash dash, save that.
 This is code here.
 So I'm going to put back kicks on this.
 This is also code.
 I'm going to put back kicks on that.
[01:12:16]
 I'm going to put back kicks on this.
 Okay.
 All right, so it's going to look better now.
 Pnp have install TS node.
 So we're going to save it in the dependencies.
 Remember, we're not calling this. This is something that Webpack needs.
 So we all need to put it in dependencies.
[01:12:44]
 We need to put it in dependencies. We need to put
 it in depth dependencies. So that's what this flag is for. For that option. Okay, so we can see if it fixes it and PX Webpack server.
 Yeah, it fixes it. All right.
 And then I can run the web page just to double check.
 Yeah, it's here.
 And then I can check for errors.
 And I see that there aren't any errors.
[01:13:38]
 So that's good.
 All I did was install TS node, which Webpack needed to process the config file, which is now a TS file.
 Remember TS files or TypeScript files need to be converted to JavaScript files.
 Webpack needs TS node for that. Okay so now what's the point of having a
 TypeScript file if you can't automatically see the options that's available.
 Like for example here there's dev tool source map so if I erase this
 temporarily I'm just going to erase this. I should see a pop-up for it.
[01:14:26]
 Then tool. I don't see any pop-up for it. It's a TypeScript file. I want that
 TypeScript ability to see the options. I'm just going to put that back.
 So how do we do that?
 How do we see the options?
 This is how you do it.
 Import configuration from Webpack.
 So you need to put this at the top.
[01:14:57]
 So let me clarify something here.
 and then we can then tag that config.ts. So that's for that.
 We're going to put that in there.
 But before I do that, I'm going to put a comment for this. PnPM is all
 TS node. And I'll put a comment here. to convert
 to a pack config.ts to draw the script.
 Maybe I should put on the next line and I'll pull it point point like that.
[01:16:05]
 And that's better.
 In fact, he's just no one took a virtual web pack and
 BTS to draw the script.
 All right, so now I'm going to go back to here.
 Put this at the top of the configuration file.
 file and then it doesn't do anything by itself. Assert the exported object as configuration.
 So here, we're going to put an assertion at the end because there's no way
[01:16:47]
 we can put it at the beginning, right? You can either put type assertion at the beginning
 or at the end, but there's no variable name here. I just see export default, but there's
 no variable name. If you're going to put an search at the beginning, you need a variable name to put it behind.
 There's no variable name.
 So the only way to assert this object right here is to put it at the end.
 And this is a configuration object. You see, if there was a variable here, like, if I had a variable called my webpack
 object, I could assert it to be the configuration and then I can create the object.
[01:17:41]
 I can do it like that.
 But I'm doing it the other way, which is I'm just exporting it.
 There's only one way to do it that if you're going to export something, there's only
 one way to put that assertion to put it at the back.
 Because there's no variable name.
 When you default export like this, there's no variable
 name, so you need to put it at the back. And now if I try to do, if I try to check
[01:18:13]
 what options are available, I type dev tool, and it goes straight to it. See that?
 Now I have TypeScript support and it's showing me the options here. And then go like this.
 And then let's see, it's not showing me any options here, but at least I know there's
 a property. Okay, well there's a little bit more information here. So this is good.
 It's expecting a string or a false. So it's expecting a string or a false so it can be a string
 here or it can be false like this. So if you're going to use a string, it says here, "developer tool to enhance the buggy,"
 so you can put "balls" for source map right here.
[01:19:16]
 That's the one we've been using, source map.
 I know it's hard to read.
 That's why at least it gives you some ideas.
 It's hard to read what it's really saying here, but at least you're having instructor
 to tell you what's needed here. these words here like inline dash source map or hidden dash source map or cheap dash source map or module dash source map.
 So it's just basically saying what kind of string it's expecting to be here.
 And instead of just writing it all out, they wrote it in this kind of format where you just
[01:20:07]
 sort of append it to the word source map, like inline and then source map.
 So there's different options, but the most detailed one is source map.
 That's the one we want. And we did that. So we saw that the
 IntelliSense gave us the configuration options. So I think this one's going to be
 better. Like if I try mode, I see here there's mode. And then it gives me the options development and then our production.
 So we're using development here.
 So that one is even better.
[01:20:54]
 Okay, so if you guys tip notes on that, you can use the next one. Next slide is Webpack Manual Build.
 So the Webpack Dips are just not right bundled files to disk.
 Remember I said Webpack Dips are just right to everything into memory so it runs faster. So what we need to do is we need to bundle files manually so
 GitHub can render your site. But not just GitHub if you want to use live
 server, which we were using in the past, we needed the files to be bundled. So, so, so get hub and even lights are removed.
 If we manually bundle, then then get hub can render the site.
 So, I'm going to show you what I mean here.
[01:21:56]
 Just copy this first. I'm going to share my screen now.
 I'll go back to the webpack notes. The piece right here, these are bullet points. And these are coming here. All right. Okay, so like I said, Dev server is not bundled with files. Remember, the bundled files
 are that they go into this folder. So I'm going to delete it. I'm going to delete
 this folder and show you that it doesn't get created when you're running the dev server.
 So my dev server is off right now.
 Going to delete this just folder.
 All right, so that this folder is gone.
[01:23:23]
 all right so that this folder is gone
 okay and i'm going to run webpack server
 and we're going to see that everything works fine
 because it's running everything in memory. See there's the page, no errors, I'm going to go to console here, no errors, right?
 This is Dev Server, it's running everything in memory.
 Okay.
 And if I look here, there's no disk folder.
[01:24:11]
 Well, GitHub needs the disk folder to render stuff.
 And if I try to do a live server, live server, it's not going to work.
 It uses this index 8-7-0 file. It loads this index 8-7-0 file.
 Remember, it doesn't load this one here because this one's a new thing that we just did for
 the server, the Webpack Dev Server. This is the index 8-7-0 file that lives or uses.
 And this index 8-7-0 file uses the disk folder. We don't have a disk
 folder right now. If I try to run live server and I try to give my web page it's broken.
[01:25:07]
 And the error is there is no main j s file basically. There is no main j s file that's gone.
 I deleted it.
 So let me just stop this. There's no means a S file that's gone. I deleted it.
 So let me just stop this.
 Okay, so there's no, oh, you know,
 I'm stopping live server.
 If live server can't render it,
[01:25:35]
 then GitHub can't render it because they do this.
 They pretty much do the same thing.
 They both look at that index HTML file.
 And this index HTML file looks for the disk folder. So if
 lives are written render the page then get an out can. So we delete the disk
 folder and we run web_act_them_servin we show that it doesn't create anything. It doesn't
 create the disk folder. So we need to manually bundle the files. And how do we do that?
[01:26:14]
 That's really simple. Npx.
 That's it. So at PX Webpack, it doesn't have the watch option anymore, but it's doing everything
 else that it did before.
 It has, it made the disk folder here.
 And it made main.js.
 So if I start this live server and I try to view it, the page renders and there's no more
 errors here.
[01:27:01]
 This is from live server.
 This is not a Server now. So if you can do it with live server,
 you can also view it with GitHub. So this command here, manually bundle files,
 you're going to use the command and px. Npx. Webpack.
 Manually bundle files with Npx. That way you only need to bundle the files when you want to push.
 When you want to push the files to GitHub, it's not constantly changing the bundle anymore.
 It only changes the bundle when you bundle it
[01:27:49]
 with this command.
 When you manually bundle the files.
 Okay.
 All right, so you need to remember that, but I'm going to teach you something.
 It's going to make it easy to remember.
 They're called NPM scripts.
 So this one, I'll put under chips.
[01:28:21]
 It's general, general information, NPM scripts.
 So NPM scripts, dash start.
 So NPM scripts, basically there are convenient way to run and remember common CLI commands. And let me show you what that means, but first just copy this here.
 And then I'm going to load it in, I'm going to save it in the tips section.
 I guess since it's related to Webpack, we can put it in there since we see here Webpack. But it's not
 necessarily Webpack, it works for anything, any program that you're making.
 You'll see, but I guess I also copy it to the tips section.
[01:29:34]
 So here's the vent pack notes. I'm going to copy the slide
 the slide is the right here.
 So this is code right here.
 This is code right here and this is code right here, and this is code right here. Okay, let's look at how it looks.
 So npm scripts.
 Actually, this one would go into package.json, so I'm going to add that here.
 Add to package.json scripts.
[01:30:38]
 Add to package.json scripts.
 OK, so that looks good.
 We're going to open package.json.
 Okay, so that looks good. You're gonna open package.json.
 You have a script section here.
 And what should we add?
 We'll add start and pxwebpack server.
[01:30:59]
 Here's the colon here.
 So it looks like an object, basically.
 So script is an object. Right now it has this one. I didn't make this
 if king with it. There's a test property and here's the value. I'm
 gonna make a start property. And the value is gonna be that
 command Npx webpack server.
 MPX webpack server.
[01:31:32]
 And now we can run the script with MPM1 start.
 So I'm going to do it here in the terminal.
 Okay, so I'm going just clear this for now.
 All right, if I run NPM, run start,
 you will see that it's gonna run that,
 the Dev Server command.
 Here's the command right there, Npx,
[01:32:01]
 one-pack server.
 There it is.
 So basically whatever command you put,
 NPX1 pack server is the command that I put.
 It's gonna run that command,
 what basically,
 NPM run.
[01:32:28]
 This is the command to run the script, and then you put the name of the script here, which is start. So in this case, my script is called start and it's, I wanted to run this
 command. So that's what it's doing right here. NPM run start, which will run that.
 We have packed server command and you'll see that command right here.
 Okay.
 You can also there's a shortcut. You can you don't have to put NPM run.
 When you do a start command, you can just put NPM start.
 And it does the same thing.
[01:33:18]
 But you should know that you usually have to use that run command and PM run.
 So there are two ways to do it.
 NPM run start or NPM start.
 So that's a green-agent way.
 So basically, we define the start script.
 So we define this start script to run other projects.
 So in our other project like our React workspace,
[01:33:54]
 we can take a script there,
 where it's going to be different.
 So I'm going to open up my React workspace from level 3.
 Here's a react to React workspace from level three. So, remember in level three,
 we were running our projects using this command here. We were running it with npx webpack right that's the one that's
 because it's writing to the disk and it's bundling every time and it's
 watching for changes this is a time when we were not using when we were not using webpack depth server.
[01:35:07]
 So we see that I'm going to just run it really quick, make sure it's working.
 Is it the next one?
 Oh, it's a whole one.
 Oh, I know what's wrong here.
 After being solved by the modules,
 I need to do that.
 And that's the client.
[01:35:40]
 And here, and so let me just delete my little models here. And I'm going to delete
 my not file. Actually, I'm using pin pin here here I'm just using regular npm
 And then install everything here. Just using regular npm.
 I didn't teach npm back in level 3.
 So I don't want to mix these up. But if you're more than welcome to change your files, the change is to PMPM.
 Okay, so I think I'm getting installed. and we can use the
 x-1 pack [inaudible] [inaudible]
[01:37:34]
 [inaudible]
 [inaudible] I'm going to put it in the console.
 This is something here.
 It does not need source mapping.
 I'm checking black pack file.
 Oh, the reuse lines are
 lines are the ones that renders everything for us.
[01:38:27]
 Okay, so we see that to pay for others.
 My server is operating.
 I'm going to show you, for example how we would edit the script here or react to workspace from
 level 3. So there's script right here I can add start, So, we'll paste this. And how did I start this one in this NPX-1 pack?
 So that way, I don't get it mixed up, so I know here, that when I start this project,
 it's NPX-1 pack, not NPX-1 packs. not an excellent tax unit.
 So that's just an example. You can define the start script for all your projects,
[01:39:32]
 and define it for the command that lets the proper way
 to start your project, because not all the projects
 will start the same way.
 But if you define the script,
 so I define the start script,
 so if I put npm run start,
 I don't really have to remember,
[01:39:54]
 I don't have to remember,
 oh, I'm, I'm gonna start this project,
 I forgot, it's gonna run.
 Well, at least I made the start script,
 so I'm gonna run it,
 and it's gonna tell me it's gonna tell me oh yeah it's at gx webpack right here that's how that's
 how I'm supposed to do it and then it runs it runs that command for me and
[01:40:17]
 then I remember oh yeah it's on supposed to run server. And then I can open up my browser.
 So that's an example of how to use scripts to start your projects.
 Now I'm going to delete it because the script was not part of the activity.
 because this grid was not hard enough for me.
 That was just an example for guys. Next one.
 Okay, so the next one. We're going to define the build script because now that we are building webpack manually,
 we should have a build script to help us remember.
[01:41:28]
 We'll use the issue here.
 So, we save this, we'll use it to your notes.
 I'll do that.
 Turn on screen now.
 I'm going to put it here in the pack also. So that's the MPM build script.
 This is code right here.
 If you have none will, this code.
[01:42:12]
 Okay. So this is, we're going to define the build script.
 I'm back in sandbox level 4. I've built in the webpack- is simple command, but if I'm switching from project to project, I might forget, "Oh,
 I forgot. What is the command to build this project here?" I forgot. Well, at least
 now you can see it. I remember now to build this project, I'm supposed to use Npx Webpack.
 So to run that, if I want to build the project, I'm just going to put npm run build.
 So I remember npm run that lets you run the script, one of these scripts, and you just
 put the name on the script.
[01:43:17]
 And then that script will run the command that's next to it.
 So here's the command and PX webpack. So it's going to start building one
 pack for me. And that's basically it did. It wrote this folder and it wrote main.js.
 That's how it built the webpack project. So you should have these scripts to help you remember how to
 start up your project and how to build your project and you should also make
 these scripts for your other projects too as a practice and run them. This is npm run start. And this one, you can run it with npm run build.
 Let me see what you can do to.
[01:44:14]
 I guess we can of notes for express.
 And this is what we're going to put in it.
 First part, what is Express?
 It's also known as Express.js.
 It's a JavaScript framework for writing back in server application.
 So we're going to make a server using Express. It's copied this here. And the server can be written with the
 Node.js/8cTP module that's built in. It's built in. That's a module that you that job with script comes with the
[01:45:29]
 JavaScript that's you see in your terminal remember the JavaScript in your
 terminal that's no JS and the JavaScript for your website or react that's a
 different one that's a different job. That's a different JavaScript. They're similar,
 but there's going to be some commands that the website will have, but your terminal
 has it, and there will be some commands that your terminal has, but your website doesn't
 have it. You will know this like if you're doing tests.
 You know that your JavaScript in the terminal doesn't have access to the document object.
[01:46:15]
 And it also doesn't have access to the window object.
 Why? Because the JavaScript in your terminal is different than the JavaScript in your web browser.
 They're similar, but there's some commands that they don't share.
 But the node, the node.js, or the JavaScript that we have in our terminal, it comes with a module called
 HCTP module that can start with server, but express.js is more popular.
 So that's why I'm going to teach you this is a module that you have to just basically download it in itself.
 Basically, how popular is it?
[01:47:12]
 If you search in deed.com, that's a job listing website.
 That's the most popular one in the United States.
 If you search for it in deed.com for entry level jobs in the USA.
 If you search for it in d.com for entry level jobs in the USA,
 that that want experience with Express JS, you'll see there's a there's a high demand
 for that. So I'm going to look for indeed.com jobs and put in here, Express. Express. Basically those are jobs that are looking for
 Express and I'm going to look for entry level.
[01:48:11]
 If I search here.
 Well, it says there's a hundred.
 11,000 jobs that's looking for skills with express.
 I'm sure that not all of these jobs are actually
 looking for the express we're looking for,
 because express is like an English word.
 And we use it like, "Are you express yourself?"
[01:48:37]
 Or looking for an employee that can express their feelings.
 But when it comes to programming,
 we're looking for an employee that knows how
 to program with express.
 So you're gonna get a mix,
 but like if I just click on something here.
 So I'll just script engineers and just go,
[01:49:01]
 let's take a different state.
 Washington.
 And then I check here the description. I check for Express.
 Okay, so this one's expression. So that's not the express I'm looking for.
 Here, this one's not the express I'm looking for. Express new perspectives.
 Now that's not the one.
 Let's try this web engineer.
[01:49:42]
 This guy expressed here.
 This is a kind of express here. Here.
 Experience with no JS for back end development, including
 RESTful APIs, Express.
 That's the express I'm looking for.
 So it's very popular.
 It doesn't say anything about the no JS-H-T-T-P module. express I'm looking for. So it's very popular.
[01:50:05]
 It doesn't say anything about the Node.js/HCTP module.
 It's with the Node.6.
 The Node.6 experience would express.
 So you can make servers with--
 this is a built-in module that comes with Node.js HCTP module, or I think it's like a package.
 But companies are looking for people who know how to use Express.js, so that's why I'm going to teach you this.
 And there's also the website, Expressjs.com.
[01:50:48]
 So, we're going to put it up here, Express. JairS.com.
 And there it is.
 There's a description of it and there's a guide.
 A lot of information is very powerful and a lot of features. We're just going to get started with it.
 You know, just the basics of it.
 So we're going to get more into it tomorrow.
 Not today, but I used to have some information about it.
[01:51:21]
 We're going to start a new note here about it. I'm going to start the new kind of a foot.
 Thank you. Okay, so we're gonna take a break now.
 Take a break, and get the break going here. All right, there it is.
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Alright, so we're back from the break.
 And for this third hour of class, you can use this time to work on the practice problems.
 Again, the practice problems are in the side panel of your Codex website.
 I'm just going to just get it loaded really quick
[02:03:47]
 to show you guys once again.
 Here you know where it is, but I just want to load it up here.
 You can use it to work on the practice problems under week one or you can use
 this time to work on the assignment. It's right here where you start converting
 your capstone project to TypeScript. This is just like basically renaming files
 and changing your webpack, Babel files,
 and adding some packages using branches for it.
[02:04:43]
 This third hour will also be used for
 MIDI evaluation for anyone who wants to give it a try.
 I just posted it right here
 under week two, okay, something is not, something's not really. Something is...
 And I have to edit something here.
 But these are the questions.
 Submit the evaluation on time and complete by the end of the week,
[02:05:36]
 by the end of the week.
 So, there's supposed to be a submit button here.
 You're going to figure out what's wrong. But basically, I want you to be a submit button here. You're gonna figure out what's wrong.
 But basically, I want you to click on the submit button
 to represent that you want to take the evaluation.
 Maybe you're not ready for taking the evaluation.
 This is just a mini evaluation, right?
[02:06:02]
 It's not a full one.
 Maybe you're not ready.
 Well, you could just, like it's as usual, click on the submit button and submit it anyways, whether or not you're ready because there's going to be two submissions for it.
 There's going to be two submissions as usual.
 So you must do when you submit the valuation, you can get this point here for submitting
 the valuation on time and complete it by the end of the week.
 So the submission button will be available, submit, submit to, by tomorrow before class.
[02:06:42]
 That's the due date.
 You can get this point.
 So basically, you must do the valuation when called upon.
 Otherwise, this point will not be granted.
 So if you submit, if you click on the submit button,
 which represents that you want to take the evaluation,
 and then I call your name, then you should do that evaluation.
[02:07:18]
 But if you say, no, I think I'm not ready, then I'm gonna, that can't give you this point here.
 I'm gonna call the, I'll call it in order based on the, like,
 when you submitted the assignment.
 Remember, don't submit it last minute or else the server might crash and then
 you turn it in late and then you don't get the point.
 then you don't get the point.
 So these are the questions. Probably explain how to create a handler
[02:07:50]
 that can be used for React output feedback.
 Well, I think I feed back output.
 Well, you know what I mean?
 When you're using React to output feedback based on the form submission.
 So it should be a module that processes form input.
 Like you have an input on React, I mean a form may with React and then their handler processes that input and separate it out like this is the name,
 this is the email, this is their phone number and then it should return a result that handler
[02:08:38]
 should return a result and then that result can be used by React to output feedback.
 Like so React will say something like, thank you for, thank you, Bob.
 We are sending your promo code to, um,
 Bob@email.com.
 So this was related.
 This is related to one of our practice problems. bomb@email.com. So this was related,
 this is related to one of our practice problems.
[02:09:08]
 And if you did it,
 and this is also related to level 3,
 you should have done this somewhere,
 just react output feedback using a handler,
 was, you know, one of the themes of level 3.
 Probably convert the test handlers, probably convert and test handlers.
 So there should be 10 tests, a maximum of a five test will count per file.
[02:09:45]
 So if you have a file that has 10 tests in it, I'm only going to count five of it, five
 of those tests.
 I want you to have, you should have like a variety of handlers by now and they're
 doing different things.
 At least there's the AWS authentication.
 You have that one that can be used,
 that's like a handler.
[02:10:15]
 Or I could probably change the wording,
 not necessarily handler but modules.
 And it's the kind that's TDD like it returns.
 It takes in input and then it returns output that can be used by React.
 So this is what I'm looking for this kind of handler.
 I'll specify it even more.
 I'm going to reword this.
[02:10:47]
 The third question.
 Probably explain how to set up a React template with TypeScript support.
 So you should have a React template.
 And it was already in JS and JavaScript.
 But now that you should know TypeScript,
 you should have converted,
 or you should have a TypeScript version of that template,
[02:11:12]
 of that React template.
 So explain how you set up Webpack, Babel,
 Webpack it is installed,
 how did you add TypeScript support for other JavaScript files?
 Like, like, like, you have to, like, install at types,
 slash react, things like that.
 That's also related to fixing imports.
[02:11:45]
 That's also related to fixing imports. Because when you try to import something, like React or UState, it didn't import properly.
 I mean, the automatic imports didn't.
 I guess I'll reword this to put fixed automatic imports. So you had to, for a new state and use effect, you had to
 install App Types React. And then, until a sense of support, so you can show
 me that Intel support, Intel sent support was added. And then the last question probably explained how to assert data types with
 TypeScript. So you can use your capstone for this, or you can use your sandbox level So I want you to show me how you have certain data types in function parameters.
 You know how you have a function and it takes in parameters.
[02:12:55]
 Well, you can assert what each parameter is, right?
 So I want you to show how you did that for the function parameters. And if you made a class, well, you
 can do sandbox level four or maybe if you made classes for your capstone, I
 did you assert the properties. So class has properties in it, right? When you
 make a class, it'll have like properties. Like if I make a car class, it has a color property. It's for sale property, a year property.
 Well, I want to see, how do you search the data types for those properties?
 And then if you're using variables, how did you search the data types for those variables? So this is the last two is about TypeScript.
[02:13:48]
 The previous two are about things from level three.
 Okay, so is anyone interested in taking the mini evaluation?
 Just to figure out, to know what you don't know
 or do you want to wait until tomorrow?
 If you want to take the mini evaluation today just to give it a try, put it in the chat. Otherwise,
 if you don't, then I'll leave level three. I mean, I'll leave the third hour. I'll
 leave this third hour for asking questions and working on the assignment.
[02:14:48]
 Or reviewing any of the, like the review here, the practice problems right here.
 Any of the practice problems.
 A lot of these, I mean, you might not be ready with your test. You don't have to be 100% ready. You can just, you know, do the first try and maybe you
 miss a point or two. Well, you can come back during the corrections and then just go over the parts that you didn't know.
 So, but yeah, this third hour can be used for practice answering questions, working
 on assignments.
 So, I'll leave it up to you guys.
[02:15:51]
 Any questions about the assignments?
 Or any questions about the practice problems?
 Or any questions about the mini evaluation? Okay, so in the meantime, I'm just going to rework this, but I'll let you guys work on whatever
 you need to work on here.
 And I'll opened up the break-out rooms.
 Just in case anyone wants to use them.
 Then in the meantime, I'm just going to update this
[02:17:25]
 Some things here in the Codex website.
 But I'm available just in case you have questions and
 While you're going over some things and reviewing something,
 just let me know. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so, real on the screen share and show what's going on. You put it inside.
 It's inside of the object.
 You have to take it out.
 Only properties and value should be in an object. And that semicolon shouldn't be
[02:22:25]
 there. It should be after.
 Okay, so put it on the same line as that part. There you go. So remember you So as a member you can assert at the beginning, next is the variable or assert at the end.
 After the value. You can put a space there.
 It should be auto formatting there.
 So that's all fixed, I think. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, everyone should be back from the breakout rooms.
 So those are returned.
 So in conclusion, we learned about TypeScript support for Webpack. We were able to get the Webpack config file
[02:48:46]
 to show us the options there using TypeScript support.
 And we also learned how to do
 what we went pack manual build.
 We have to do that if we want things to show up on GitHub.
 And we learned about the scripts. So I forgot to put here
 Express like what we learned about Express. But yeah, we learned about
 scripts, how to start, like how to create a start script and a build script. And
[02:49:20]
 then we just got an intro or just a description of what Express is.
 Before you guys go, let me just clarify here.
 So here's the mini evaluation week two.
 It's posted here.
 You can have two submissions for it. One will be, you know, the first one, maybe you'll do, you get all the points
 for it, or maybe you won't on the first try, but make the second one count, you can do one for
 corrections. So, let's do March 18 before class. So that's tomorrow. So I want you to, if you are,
[02:50:07]
 like how does a mid assignment?
 So if you want to express and your interest
 to do a mini evaluation and to also,
 you know, get this point here,
 then click on the add submission button
 before the due date, which is March 18, that's tomorrow before class.
 So basically, you're just expressing your interest to do the many evaluation.
[02:50:35]
 Maybe you're ready. Maybe you're not.
 But even if you're not ready, that's okay because you get two chances.
 And you get this point here.
 So there's a benefit. So you could, you would click on add submission.
 And then save changes. And then that, that expresses your interest to do a mini evaluation.
 I'm just going to click on cancel. I don't need to submit this.
 So, add, click on add submission and then you click on save changes and then I'll call on you tomorrow in the order that it was submitted.
[02:51:26]
 that it was submitted. You will not, if you do not add the submission on time, then you will not get this point.
 Or if I call on you and you say you're not ready and you don't want to do the evaluation,
 then you get zero for this.
 But if you submit it on time, which is before class tomorrow, submitted on time before class tomorrow,
 and then I call on you and you do the evaluation.
 Maybe you get all the points, maybe you don't,
 but you will still get this point and you will have a chance to get
[02:51:57]
 the rest of the points that you missed during your corrections.
 This is, this mini evaluation is open book.
 So you can have your notes ready.
 It can have all your answers for this.
 But I'll know if you're just copying and pasting and just reading stuff,
 because I'm going to ask you,
 how do you do this? How do you do that?
[02:52:20]
 And if you can't do it, then I know that you're just copying and pasting or just reading words.
 And you don't really know what you're doing. So make sure you know what you're doing. But you can,
 you can put notes on your, you know, have your notes for these questions ready. And your answers.
 You can have that ready.
 So make sure you take attendance, mark yourself present, and other than that, classes
 dismissed.
 And that's our first attempt at express today.
[02:52:58]
 And it's going to get more interesting as the week goes by.
 I'll stick around for a few minutes just in case anyone has questions. [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 18, 2025 20-11.txt"

Transcript from Mar 18, 2025

[00:00:00]
 Good evening class. Welcome to Code X Academy level four.
 It's week two, day two attendance, make announcements, review,
 and I'm gonna talk about some NPM scripts,
 take a break, and then second hour,
 all about express,
 and then third hour,
 mini evaluations
[00:00:48]
 and a chance to work on assignments
 for those who are not doing a mini evaluation.
 So, Mark your attendance,
 Mark yourself as present and on over to your code X account.
 And Mark yourself as present. In the meantime,
 I'm going to do announcements.
 So let me get that loaded up here.
[00:01:42]
 Okay.
 Announcements.
 So we're on regular schedule this week.
 And the survey is still in July cohort.
 That's double check it.
 And I'm going to load it up here on the screen.
 Okay, so again, the
[00:02:22]
 here it is by Lillian, there's a survey.
 If you haven't filled it in yet, make sure you fill it in.
 Again, your answers are confidential.
 Oh, yeah, and the questions here.
 Okay, so I haven't had a chance to look at this, but which one's the new one here?
 Sorry from the bottom. Okay, so I've been sending you guys notifications right before class today and also yesterday,
 I sent notifications about submitting the mini evaluation.
[00:03:30]
 And I also set up Moodle to send you notifications every time I, every time I made updates to announcements
 and things like that.
 So I gave you, all you had to do was click on the submit
 button.
 It's not that hard.
 You didn't even have to send any links.
 You send this submission.
[00:03:50]
 So yeah, if you guys were not able to send in that on time,
 I'm sorry, but you can't get the point.
 It was such an easy task.
 There was notifications coming in left and right to remind
 you guys. And as I said before, make sure you get your notifications working for Slack,
 for Moodle, and for your email so that you know. Okay, let's see. Okay, I think, I think
 Alexandra was able to fix this one here. And it's because of that dreaded
[00:04:40]
 module. What is it right here
 Module in package that Jason. I've never had to use this and if you're using it because of AI told you to do that well
 Like I said be careful when you're using AI because they can they can make your life hard But they can also make your life easy. You never know what you're going to get. So I keep
 encouraging you depend on yourself.
 All right, let me see here. So, Damon was getting errors with able to get that fixed?
 Okay, David, were you able to get your GitHub problem fixed?
 Let me see here.
[00:05:39]
 I'm pretty sure he fixed it. He had to do it. Okay, so allow secrets.
 Allow secrets. So that tells me something was that the repository was not set up properly because if your repository was set up properly, you shouldn't even have to allow secrets. If you're talking about the API key, then that's different, but there's
 an allow secrets part, which you shouldn't be even asked about. If you're like,
 you know, just trying to push like a like a read me file to a repository, you
 should be able to do that without any problems.
 to do that without any problems. Okay. But just to clarify here, let me see, let me just, I'll just show you how I make
 a new repository, I click on this one up here.
[00:06:50]
 I don't click anything down here.
 I click on this one up here, put in a name, and then, "prayed repository."
 Everything should go smoothly from there. If you do it
 it any other way, you might get problems with it. So again, click on this one
 here, don't click on this one here, because this one here has what you need in one, two, three, and then it's ready to go.
 Okay, so it was the, so yeah, so they've just, it was the API thing.
 Okay, yeah, if you just read the messages, it tells you it's the API keys that stop in
[00:07:48]
 you.
 You have to just give it permission and say that you'll fix it later.
 All right, so many evaluations.
 You just all you have to do is click on add submission, then you'll qualify for that first point.
 The many evaluations is here.
 All you have to do is click on add submission and then save it. Then you're it. That's it. Then you can qualify for that
 first point. You don't even have to put any links or anything. Just two clicks you're
[00:08:34]
 done. So here it is. Adding a submissions, expresses your interest to do a mini evaluation.
 Click on the Add Submission button.
 Click on Save Changes button. That's how you submit this assignment.
 Okay, so, um,
 practice problems. They're here on the side as usual.
 But now you can check them off. Check off the ones that you finished.
 One, two, three, four, five.
[00:09:12]
 Check off the ones that you finished.
 And if you haven't finished it, don't check it off yet.
 If you have questions about an assignment, don't check it off yet.
 Or I mean, if you have any questions about the practice, don't check it off yet. Or I mean, if you have any questions about the practice,
 don't check it off yet. That reminds you that you should ask the question in class or in July cohort. So you can manually mark the practice problems green when you've completed them.
 And just as a heads up, practice
 problems will be part of many evaluations. So work on them whenever you get a
[00:09:53]
 chance. Again, mark your days. Oops, I didn't, I forgot to add, here it is day two. I'm gonna have to, I'm gonna add more for day three, four and five.
 Later on, mark your days as green only after you've taken your notes.
 And you've asked the questions that you needed to ask for that date.
 to ask for that date. But remember, we're going to start the class now and make sure you take notes, type
 what I type, and also type what I say, especially if it's some like useful information.
 Because I don't type everything that I say,
 but some of the things that I say are useful.
[00:10:52]
 So make sure you add those to your notes.
 But if you, you know, if you have setbacks,
 like you're not able to focus on class,
 make sure you watch the recordings during a better time and catch up before
 the next class. Also have your microphones ready, especially if you are going to ask questions
 or if you are going to do your mini evaluation today. And again, here we need valuations.
 They should be submitted, but you should also get this point, submit the valuation on time,
[00:11:40]
 which was, you know, before class, you should have submitted it before class today to get this point.
 Complete the evaluation by the end of the week.
 By this week, I mean,
 the assignment was due.
 That's how you get this point.
 You must do the evaluation when called upon. that's how you get this point.
 You must do the evaluation when called upon, otherwise this point will not be granted.
[00:12:12]
 And you should not worry if you called upon
 to do the evaluation because you have two chances.
 So if you were not ready the first time,
 that's okay.
 'Cause the second time you can come back with all the answers. Again when you are doing your MIDI evaluation you can have all
 the answers ready for these questions. You can type it up or put it somewhere in
 your in your code. but the answer is there.
[00:12:45]
 Be ready to demonstrate it.
 Because notes are one thing, and reading from the notes are one thing, but then actually coding.
 There's another thing.
 So I'll also ask you, okay, how do you code this?
 How do you code that?
 And that's something that your notes may or may not
 be able to help you with.
[00:13:14]
 And that's just stuff you just need to remember.
 So, you know, just be familiar and you're first attempt.
 Your first attempt will expose your weaknesses and then your second attempt.
 You'll come back and get all the points that you need because then by then you know your weaknesses and you can study up for it and make sure you get all the answers.
 make sure you get all the answers.
 Okay, so that's it for the announcements.
 Now time for the review.
[00:14:01]
 Make sure you just raise your hand anytime you have a question.
 Okay, so we disabled some things in Webpack because they were unnecessary and they showed some things so
 Watch is not necessary because Webpack Dev Server automatically watches
 Right when you start the Webpack Dev Server it stays on and it automatically updates whenever you
 maintain this here from the website.
 Delay is not necessary because dev server bundles without build errors.
 I forgot to fix this right here.
[00:14:43]
 So we have to disable watch options
 and disable delete option, the delete option.
 So let me show you what that looks like really quick.
 This is in sandbox level four.
 for. I'm going to share my screen now.
 Okay, so here's the webpack file.
 Disable the watch options here.
[00:15:31]
 I mean, disabled watch and disabled the delay right here. is not necessary for a dev server.
 And we even put a note here, not needed for Webpack dev server.
 Also this one.
 There's a note there, not needed because Webpack dev server
 doesn't produce build errors.
 Like live server does.
 Okay, so we also learn how to enable TypeScript support for Webpack.
[00:16:26]
 We named Webpack the config file. We basically just changed it to a TS instead with JS. We had to install TS node because Webpack uses
 TS node to convert this TS file to a JavaScript file.
 Then we added the configuration,
 I don't know if it's a class or a,
 I think it's an interface.
 You can see it.
 So let's see.
[00:17:00]
 Configuration is here and it's an interface.
 configuration is here and it's the interface.
 Remember the custom types are class interface and type.
 You can define a like an object that way with class interface or type.
 We import that and then when we assert it here at the bottom,
 see this is after the object.
 You always assert after the,
[00:17:33]
 you either assert after the variable,
 which in this case there is no variable.
 So since there's no variable here,
 our only choice is to search at the end.
 And that would be, you have to search after the value.
 Okay, search after the value.
 So the value here is an object and it starts here.
[00:18:02]
 Starts here and right there.
 That's an object.
 That's the value.
 And it contains all these properties and values inside.
 But here's the object right here, the yellow curly braces.
 You assert after the value.
 Basically, you're saying that this object right here
[00:18:23]
 is a configuration object.
 And that configuration object enabled IntelliSense.
 So when we started editing the webpack options,
 it popped up the menu of the possible choices
 that we can edit.
 Webpack menu will build.
 So the webpack Dev Server, it doesn't write bundled files
[00:19:07]
 to the disk.
 It writes it all in memory.
 So if you wanted something to work with--
 if you wanted your front end to work with GitHub,
 then you have to bundle the files manually.
 Then you have to bundle the files manually. And then you'll be able to render your project in GitHub.
 So the way we tested it was we delete the disk folder and we ran the webpack.dev server.
[00:19:44]
 When doing that, it then created a disk folder.
 Remember, you need that disk folder and the main.js.
 Inside of it, you need that for GitHub. Because GitHub will load your, GitHub will load your index HTML file.
 And your index HTML file looks for this main.
 And if you don't have a disk folder and you don't have main JS, then GitHub can't render your website.
 Basically, your whole website is inside of main JS.
 There's webpack bundled everything into it.
[00:20:38]
 So you need to manually set up this bundle here and that was with command NPX1 pack.
 But this time we set it up so that it doesn't watch.
 So let me delete this really quick.
 I deleted this folder and I'm just going to
 MPX webpack and it's set up so that it's not
 watching anymore. Remember it's not
 watching here anymore and we disabled the delay.
[00:21:20]
 So all it does now is just
 it builds the project into the disk folder.
 There it is.
 Remember I just deleted that now to that.
 Okay, so the next part, so remember, so there's that server that that runs your front end,
 renders it, but then there's the other one, just a web pack without the
 server, that one bundles your files.
[00:22:02]
 Or compiles them into the disk over.
 Then we learned about npm scripts,
 especially the start script.
 So the npm scripts are a convenient way to run
 and even remember common CLI tests.
 So we added the start script. And we ran that script with npm run start.
 npm run basically npm run is the command to run the script. And then you give it
[00:22:39]
 the script name. But there's a shortcut for the start script. You just do npm start. But for all other
 scripts, you have to put npm run and then the script name. So when, so basically you can
 define this script, the start script for all your projects so that when you go into a project all you have to remember is type
 npm start and then it will run your project for you. You don't have to remember always it.
 Did I use webpack for this? Did I use Dev Server for this? Did I use live server for this?
 All you have to remember is just npm start right here and then it will run your
 is just npm start right here and then it'll run your run your project. And and if you want more details, you can always look at your package.json and it'll tell you that that's how you run your,
[00:23:38]
 that's how you get your project going. So the scripts are contained in Project.json.
 Here it is in the script section and the start script is Npx.npx.mapackserver.
 So instead of typing "mapackdevserver", I mean instead of typing "n dev server, I mean instead of typing npx webpack server
 to start the project, all I need to remember is npm start.
 And then it will start my project. They'll start rendering it.
 And you should do this for all your projects.
 Create a script, a start script,
[00:24:27]
 and just put in there the command,
 how to start your project.
 For our sandbox level three,
 it was, we didn't use the server,
 we didn't use Dev server,
 the start command would have been NPX Webpack. That's where Sandbox level 3.
 Okay, so yes, you'll create a add the start script to all your projects. And also make the build script.
[00:25:09]
 This is the word build and then put the command. So for our level four projects, we are using a separate build script. And it's pretty easy. Basically, it's
 without the server option. Here's the build script. And to to build we just type NPX run pack and that's going to create the disk folder.
 It's going to run this command when we type here.
 So I'm going to basically, I'm going to delete this folder again.
 I'm going to delete it because when we want to build our project,
 we need to have that
 disk holder. So I'm going to type in here.
[00:26:12]
 NPM run build. Remember to run a script, we need to type NPM run and
 then the script name. So build. Now I don't need to remember what the command is.
 It's going to be here in this package by JSON file.
 So just in case I've been away from this project for a while,
 at least I'll remember how to build it.
 Click the script right here.
 And it's npm run build, which runs the NPX one pack command right here and
[00:26:47]
 then we should show the disk holder now it generated the disk holder along with
 main.js that's the build right there.
 And then we went, I started describing Express JS. So that's a JavaScript framework for writing back and server applications.
 So it's still JavaScript, but it's a framework, meaning.
 Meaning it's like a set of functions and classes and objects that
 you should be using according to the rules of the framework.
 Just like React is a framework, it's still JavaScript, but when you're programming in
[00:27:37]
 React, or when you're using the React framework, it starts to not look like JavaScript
 anymore.
 Right? React framework, it starts to not look like JavaScript anymore.
 You're using the React functions like UState and then your destructuring and
 you're using UZefeg and then you have to return some JSX.
 Let's see what else here.
 Your browser router has all these routes in it.
[00:28:05]
 So it starts to not look like JavaScript anymore.
 It's a framework.
 It's a framework.
 It's still JavaScript,
 but it's a framework that has all these functions
 and objects and classes.
 And you have to follow the rules
[00:28:18]
 or else it will work properly.
 So that's what we've learned with React.
 React is a framework. And you have to follow the rules on how to use So that's what we learned with React.
 React is a framework.
 And you have to follow the rules on how to use those functions and objects and classes.
 Well, it's similar with Express.
 It's a framework.
[00:28:38]
 And you're going to have to follow some rules how to use the functions and the objects
 and the classes.
 When you follow those rules, it will work properly for you.
 So it's going to express JS, you will create a server.
 And it's a server and the server, but actually,
 servers can be rich in with a module that comes with
 Node.js, but we're not going to use that. We're not going to use that built-in module. Instead,
[00:29:17]
 we're just going to use the Express.js, which is like a node modules package.
 Because that's more popular because I showed you in a job search.
 Express JS is very popular.
 And that's going to-- it's like learning Express JS
 is going to help you land a future job.
 So I showed you that I did a search on indeed.com. That's the most
 popular job search website in the United States. And I look for entry-level jobs in the
[00:29:56]
 USA that wanted experience with Express. And we saw a lot of results for that.
 A lot of jobs looking for, while the keyword expressed,
 it was we started for Express,
 which we saw that Express was like,
 like, it could refer to like Express.js.
 Like, this job requires experience with React and Express and Node.js or in the
 job search you might see able to express opinions clearly.
[00:30:35]
 So it was not a clear job search.
 It's hard to express. I mean, it's hard to find a job that's just looking for express J.S.
 because they usually just, you know, in the keywords, it's express, which is a common word.
 A lot of job results popped up when we looked for express.
 All right, so that's it for the review. Now I could go into more information about NPM scripts.
 Okay.
 All right. So the review is done.
[00:31:39]
 Just let me know if you have any questions of what was talked about in the review.
 Otherwise, I'm moving on.
 This is the new topic here.
 NPM scripts.
 You can add more common CLI commands.
 So, this is new right here.
 Make sure you take this down.
[00:32:00]
 Copy it.
 There's the test.
 The test script.
 So we're going to be testing with just.
 So it's a good idea to have a test script.
 It's also good to have a deploy script.
 Because the way we deploy now will be different for the back end.
[00:32:27]
 will be different for the backend. So you should have a deploy script.
 So I'm going to share my screen now as we work on this and add this to, I should probably add this to tips.
 Because I have it here in Webpack, but I'm going to copy this one from Webpack.
 And you copy that over here the tips and kind of just render it off to the side right here.
 Actually, this is code right there.
 So I'm going to put some backsticks around this. This is code.
 This is code right here.
[00:33:54]
 This is code right here.
 And this is code right here.
 And this is code right here. So we're going to start with this first one test.
 We're going to add the test script to package.json.
 There it is. There's already a test script, but this is not the right one. I'm going to delete this.
 NPX Jest. That's basically, there's different test frameworks. Just is one of those frameworks.
 Remember, just is a JavaScript,
[00:34:50]
 but it's also a test framework.
 You have to follow the rules of
 just which says use a describe function and then
 stick your hit functions inside of it,
 and then use the expect function inside of your hit functions.
 So, um,
 and just as a framework and here we have a test,
[00:35:18]
 let's see here, so I have any tests in here that I can try out.
 any tests in here that I can try out. I have addition test.
 OK, so I'm just going to put NPM run test.
 So you can works.
 So everything passed.
 Everything passed with that test. So it works fine. Let's see if I can put NPM test.
 Yep, we can do NPM test.
[00:35:58]
 Now the shortcut also.
 So you don't have to type npm run test.
 Let's see if we can do npm build.
 Nope. npm build is a work.
 You need to put npm run build to run that script. Okay, so the next one deploy. So I'm going to add that deploy script here. So So the toy is using what you would type to render your website live.
 So that is git push.
 For me, I can just type git push because I set the upstream.
[00:36:59]
 If you set the upstream, all you have to do is type and git push and then I'll push
 it to you know you
 get hub repository. But I don't think I have GitHub for my sandbox level But you can add this deploy command to your capstone.
 Now, we will remember how to deploy it.
 Because the deployer command for your backend will be different than your front end project.
 And Express is going to be your back end project.
 So we should have a
[00:37:49]
 employee script to remind you how to deploy it.
 And you can instantly start using this for your capsand of project.
 this for your your capsin of project. And if you have a lot of test files to run a single test file, you just just update that test script and then add the the path. So if you have a lot of test files, I can just use this script right here and you just edit it and say, I want to instead of always typing, typing this command.
 I can just let it be remembered right there. So the script is remembering the command for me.
 And let's just imagine I have a lot of test files.
 And I just want to specifically test this file.
 Now I can just type npm test.
[00:38:58]
 And I'll run that test file for me.
 Only that test file.
 And then if I want to test another file,
 I'll just come in here and edit this instead of addition,
 maybe I'll have a like a subtraction file.
 And then I can just type in npm test
 and it'll run this command for me.
[00:39:28]
 So I can just easily edit it. And then if I want to test all the files, I just delete this part and I'll test all files
 like that. And then with the last one, update a script. So build, we have that
 build script. But let me edit this part. There's no space there. So we had a build script right here at NPX Webpack.
 When you do NPX Webpack, it packs according to your Webpack file.
 And in this Webpack file, we have the mode set to development. My suggestion is, when you build, you override that mode to production.
 And I'm going to show you one of the benefits of doing that.
 So I'm going to show you what does it do when it's just like this, when you're building
[00:40:55]
 and bundling and the mode is in development.
 So I'm just going to run it like this NPX webpack.
 I'm going to just type in the command instead of running the script.
 So I'll just delete this folder for now so you can see it in the beginning again.
 So I'm going to build that just folder, NPXwebpack.
 I'm going to build that this folder
 and scratch. It has the main
[00:41:33]
 JS file. Let's look at the size of that file.
 [ [BLANK_AUDIO]
 But it says it's 1,115 kilobytes.
 Okay, that's how big it is, 1,115 kilobytes.
 It's not that big, That's just one megabyte, but when your files get, you know, bigger and bigger,
 this starts to get bigger and bigger.
 Or when your project or your program gets bigger and bigger, and this one starts to get bigger.
[00:42:19]
 And the compiling starts to take longer too, I think.
 So entirely starts to take longer too, I think. So what would happen if we change the mode,
 or if we override the mode, and rebuild it,
 NPX, actually, I'm going to just delete this,
 so we can see clearly what's going to happen.
 It's going to rebuild.
 And make a new main byte js and px wordpack, but I'm going to override the mode and make it production.
[00:42:54]
 So I'm going to run this command, so this is supposed to build. Now I'm going to take a look at this here. There's the
 disc holder and look at the size now, 221. So it goes from 1,000 kilobytes to
 221 kilobytes.
 So that's a drastic change in size.
 And it'll still run.
 And the way we test it is basically with live server.
 we would live server. If I had turned on live server here and I tried to do it, it should still pop up my web page. That means it's still running. It's working. So it went
[00:43:59]
 from 1,000 kilobytes to 200 kilobytes when switching the production mode.
 So what does production mode do?
 It compresses the file.
 Compresses the file and it also disables the bugger.
 Remember, remember when you don't mention the mode,
 it automatically starts in production mode.
 That's why we have to put it in here.
[00:44:30]
 If we don't put this here,
 it's automatically gonna be production mode.
 We put this here to enable the debugger.
 And then we put this, tool source map. The purpose of that
 is to allow the debugger. I mean that allows the debugger to show us the original code instead of the allows the debugger compressed code looks like this.
 So it looks like that.
 So it's hard to debug.
[00:45:37]
 It's hard to debug if they're code that you're debugging
 looks like this.
 So source map basically converts this compressed code or
 an angle code into the original code. Okay, so what we see here is compressed code by using the production flag here or production
 option right here.
 So production, I'm going to just put a melt here.
 I'm going to put a melt for the mode.
[00:46:30]
 So for the production mode,
 it disables the debugger,
 also compresses the code.
 Compresses the code, so file size is smaller. It went from 1000 kilobytes to 200 kilobytes.
 That's basically compressed to less than half of its original size.
 So I put this here in mode production just to,
 give us a reminder of what it means.
[00:47:11]
 And right now I'm writing this in sandbox level 4 because that's for our notes,
 but you might want to copy these notes to your template to read, act template so that we have reminders about what these options do.
 So that's what we just did. We added, actually, I have to add that to my build now.
 So I'm going to update this build to reflect
 to just override the mode to production.
 We still want to keep this--
 we still want to keep this as development
[00:48:04]
 because the observer is using this. We still want to keep this as development because
 Dev Server is using this.
 Dev Server is using development mode and Dev Server is using
 the source map.
 It's only when we build that we want to override the
 mode and make it production mode.
 We don't need to debug once we build it. We don't need to debug that.
[00:48:32]
 That build is only for pushing to GitHub.
 And we don't debug a lot where we do our debugging
 in our local machine. [BLANK_AUDIO]
 And you see this in the next slide here.
 Okay, so we're gonna take a break and
 then we're gonna start our lesson on Express.
 [BLANK_AUDIO]
[00:49:04]
 So I'm gonna start the three timer here. Okay, so you have to break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And now we're going to create a backend TypeScript template.
 Create a TypeScript template.
 To easily start new backend projects, so backend projects are going to be slightly different
 than front-end projects.
 So it's good to have a template for it.
 So what we're going to end up having is one VS code for this back end template and
[01:00:36]
 then another VS code for sandbox level 4 to write our notes.
 So let's copy this right here and we'll follow it step-by-step.
 I'll share my screen.
 I'm going to share my screen now.
 Okay, so I don't have all the details here in these four steps.
 All the details are not here.
 I mean, like how to start a VS code workspace. I'm not
[01:01:27]
 going, it's not all here in this step. I mean, it's like, I'm going to show you how to do that,
 but there's many more steps to just, you know, create a workspace. So, maybe just put this in the notes.
 So sandbox level 4 has our notes.
 This one is for express.
 So express.md.
 You should have express.md for your notes.
 And this is where we start creating a template. But I'm not going to create the template here in the sandbox level 4, because the sandbox
[01:02:15]
 level 4 is mostly for front end.
 It's already set up for react here.
 Like this source is already set up for React.
 So I don't want to make this my backend, so I'm just gonna create a new VS Code workspace.
 So easiest, easiest way to do that is to just start a new VS Code window.
 Let me just zoom in here.
 Here's my new VS Code window.
[01:03:01]
 Open a folder.
 And I'm going to open my,
 I'm going to make a new one,
 Express Template.
 Make a new folder called Express Template.
 Our previous template was called React Template. This one I'm calling it Express Template.
 So I made a new folder and it's selected now Express Template.
[01:03:42]
 And it's going to always show this unless you start
 Trust authors of all files in the parent folder.
 So once you have that folder opened,
 Express template, you can save it as a workspace file safe space as and just go with whatever it gives you the god save
 now you should see there
 i'm gonna switch back and forth between this and the other one.
 OK, so what is created a source folder with index.ts.
[01:04:49]
 Let's not just find another one.
 Source folder.
 I'm going to put index.ts in there. Simple enough. So, we'll go back to the next step.
 Actually, let me put some back chicks to highlight some of these words. Okay, so there it is.
 I'm going to switch back over here. Pnpm install Express. So the record
 dependency because we are going to import it. Express template.
 The NPM.
[01:06:10]
 Install Express.
 That's the package right there.
 This is where this is the middle module that we'll use to create our server.
 This is an empty file index.ts.
 And then index.ts import express from express.
 So I'm going to try to import express from...
 There's those three dots, or yeah, three dots right there.
[01:06:59]
 It's familiar sign.
 Express is what it's... you're signed. I'm not using it yet. If you have not find a declaration, it will be expressed.
 It has the suggestion right here.
 Try to install AppType's Express.
 We'll do that later.
 We're going to go through the step by step. So we're
 ready. We're gonna check out the next slide.
[01:07:47]
 So here's the next slide. We're going to continue at the time script.
 So copy this part here.
 So not step by step. because I discussed some of this before, but I'll walk you through every step that you might not know how to accomplish here.
 And figure a webpack and that will to watch and compile a time script. That's a big step right there.
 That's one step, but that's a big step that contains many smaller steps. So I'm configuring Webpack and now you could copy from the
 React, but I'm going to just do a computer chat so you can follow along and
 we'll have a clean up a clean template. But again, you can copy from the React template. But if you do that, you're
[01:08:46]
 going to have to edit some...
 I'm just going to start to scratch.
 And... and let me just copy these two words. We can do this like the trial and error way.
 That way you can see all the bugs.
 [inaudible] I'll send box.
 Okay, so that's not going back to notes here. to face the lens in the next slide. Back in, TypeScript configuration.
 Set up Web Pack and Double to watch and compile TypeScript.
[01:10:01]
 Okay, so that's the notes, but I'm going to go to back to the express template.
 Alright, so the way you're supposed to run this back in is with NPX one pack, but you should know that I don't have Webpack installed yet.
 So, I could even show you my package on JSON file.
 I only have this, this is just this.
 So, I should install, at least, I should at least install webpack.
 And that should be saved up, why?
 Because I'm not imported into my name app.
[01:10:55]
 I'm just, webpack is this for building the app.
 Yeah, you should also have get ignore for no mod.
 Yeah, I should add that. So we're packing three and
 Basically I'm building it from scratch
 So there's one pack if I try to run web pack
 NTX webpack, let's see what happens. It needs Webpack CLI.
 So you can just say in here, you want Webpack CLI.
[01:11:57]
 Because I need that to run.
 And I'll just say, yes.
 It's going to install the performance.
 So I don't need to. And it's going to save it into that dependency. the same as the inside of the form.
 It's going to save it into the dependencies.
 This is what the big_dese_ants are right here.
 You can do it with this pop-up.
[01:12:21]
 Or you can just do it manually.
 I'm going to do it with this pop-up so you can see what happens.
 So TMPF is zillion.
 It's going to save it into double dependencies.
 There it is, grab a pack CLI.
 And this is an error that happens because I just
 tried to run an NPX web pack here.
[01:12:47]
 because I just tried to run NPX Webpack here. Same error, you see that?
 Let's see what the reason for this error is.
 Mode has not been set, so that means that it leads a Webpack file.
 So because I'm making that live tag file.
 Module not found.
 It's looking for index a file.
 Not source, right?
[01:13:18]
 It's looking for something in the source file.
 It's usually looking for index a HTML file.
 I mean, index JS file. but it is a TS file.
 Set up a webpack.config to take care of that.
 Webpack.config.ts.
 And if you need to export to not can easily help an object and import that configuration operation.
 You can assert it at the end right here.
[01:14:19]
 So that will be start filling in this object.
 It will show us the options.
 And so right now there's no options, because you would have to run one pack again.
 And the x-ray pack.
 OK, so it's going to say something about GSMode.
 Right here, the client TSMode, so that's easy.
 Fix it, tap, PNPM, and stop.
[01:14:53]
 Save 10.
 She has to know.
 Because we're not importing T TS nodes directly.
 That's for development only.
 So we should stop right here in the dependency.
 There it is right there.
 So I should be able to type in NPX Webpack.
[01:15:25]
 And this problem we have.
 OK, so it's still looking for a JS.
 Still looking for a JS file here in the source.
 Well, I guess we can fix this part.
 The mode option has not been set.
 You can do that easily. You can set the mode here has not been set. You can do that easily, right? You can set the mode here to the
 the top of the right there. I'm going to set the mode to development. So this is how you do it if you're not memorizing the webpack integration.
[01:16:12]
 You can just go to the by trial and error like this. Use reason in the file. So it's missing a source field. The reason why it's missing is because it's looking for
 indices. But we have index.ts. So what to convert this in JavaScript, we need you can grab a loader and then [no audio]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible]
[01:17:24]
 [inaudible] modules, module, right there, and then it had rule, rules. So when it has S, it's
 usually an array, so I'm going to put an object like that. It had the object for And we are testing files that have a dot, JS, TS.
 We're not going to have any JSX or TSX in here because this is MacN.
 You couldn't put it there if you wanted, but it's not necessary.
 And then what we're going to use is
 babbled longer purpose.
 I don't think it will work because
[01:18:42]
 we didn't set up the Babel config file.
 So let's see what happens.
 So the problem, because it's still looking for a source, I mean index HTML in the source. So this is not working
 because that will notice that set of properly. We need to create a
 valuable computer file, that will create a dot.js. This one is JS because I
 haven't shown you how to convert it to a type of file yet.
 It's just easier for now to keep that job discrete.
[01:19:34]
 Text port.
 Default.
 We'll be next export an object. What's in this object that has presets.
 And with the S, what music S is in the right.
 And what are the presets that we need?
 We need to convert types here. that's a bad one
 you can use that type here
[01:20:12]
 but we need to also install this
 if I try to run it without installing it. And then this is what's going to happen.
 So this is in the index by JSI. So I need to keep it in here, install, save depth,
 and double preset,
 time script.
 Somebody who's this file view, it converts
 TypeScript to JavaScript.
[01:21:04]
 For this preset, what does it do? with convert's texture to JavaScript.
 I could even put in a comment. and then it's time for the
 to the
 now let's see
 and look there for now and the x-ray [BLANK_AUDIO]
 [BLANK_AUDIO]
 >> No, resolve.
[01:21:55]
 [BLANK_AUDIO] here.
 I'll put it in.
 It's all
 extensions.
 There's a S there, so it's going to have an array. And the extensings are Js and ts.
 This is due automatically inserts automatically inserts
 extensions.
[01:22:44]
 go to the search extensions
 x- in the import statements.
 Okay, let's see if that works.
 Okay, there it is. It, it compiles.
 I got it going that far. So that's good. That's good enough.
 We got it to compiled.
 Oh yeah, I'm gonna add that. I'm gonna add that. I'm gonna get ignore on this step. So
[01:23:41]
 So let me add that. I'm going to add that.
 I'm going to get a go on this step.
 So we have pack config.
 G.S. We're going to add target node.
 So back at the template, I'm going to add here target with node.
 Okay, let's see if it still works.
 'Cause usually when you're using Webpack, it thinks you're bundling for Web pages,
[01:24:33]
 the value for this is by default as Web.
 You need to put node because we are not in a Web page,
 we are in the terminal.
 This is actually JavaScript for, this is no JS JavaScript, not browser JavaScript.
 So it was slightly different.
 So the web pack needs to know the stuff.
 And it still works.
[01:25:09]
 Let's look at the, look at this part here. And G.S. can pick that JSON.
 Get it more and other packages.
 Okay, so I'm not sure.
 I don't know which ones want to add yet.
 Okay, so I'm not sure. I don't know which ones want to add yet. But you'll find out actually the packages, but obvious package that you need is here.
 There's three dots in the index.ts.
 So, app types express.
[01:25:59]
 So, this is going to be in the saved app.
 It's going to be a dev dependency.
 Because we're not going to import at types of Express.
 We're just going to use it to get rid of these three dots and enable TypeScript support for Express.
 I've missed TypeScript. TypeScript.
 OK, so that's this part right here. And you start with that, and then start NPX Webpack. So I'm going to add a script here now.
 Scripts.
[01:27:32]
 There is the wrap-up.
 There is S there, but instead of an array, they have to have an object so that you can name each one and this
 one's going to be the start script and it's going to be npx.com.
 So now I should be able to type npx and it will start via server which is not
 configured yet so we're gonna need it like that for now.
 Alright, that's good, let's see, this one's good, okay there's one with three there. And we are going to add getting more,
 which one is the source for.
[01:28:31]
 Add getting more to the root holder.
 And I have to type this node mod in the layer.
 And there's more of that. the there more
 this is just a template so i i don't think i need to start the
 i get
 good source control you could if you want to
 you could do it later on
[01:29:02]
 but uh yeah it's good to
 ignore this part right there. Now, what else is next?
 Are you able to improve start? Okay, I think we're good. Oh, yeah, yes, config. G. S. can't pick. This one might start breaking.
 Let's see. G. S. can't pick G.
 Goof and B.
 Gloom folder. G. S. can't pick J. S.
 Okay, so I just added it.
[01:29:45]
 Okay, now we see some red stuff.
 Now we see some red stuff.
 Express is declared module. only be default imported using es module interrupt flag.
 Okay, so how do you fix this?
 You fix this with a TS config file.
 Key word here is module.
 Can you go to the TS config? here is module.
[01:30:25]
 And you go to the G as config.
 It's a JSON file, so JSON files, you usually start with an object.
 You don't need to export anything.
 And then you just need to remember that you're going to set the compiler options. And now you can add some options in here. We need the module option.
 Remember that's the error that would be something else.
 No next.
 I think I would do no next here.
[01:31:13]
 But before we are doing preserve, so I'll just, I'll just need it like that and see if that
 was.
 Okay, that works so far.
 So we'll keep it the same, but I think eventually we're going to have to change it
 to the next.
 We'll find out.
 So we'll find out.
[01:31:34]
 Okay, so everything's working and let's try and get started then. Okay so now all that would just you know all that we just basically set up
 the template. And back in type script template but now we have to add some important express. So here it is. We're going to start making the express half.
 Little by little. Copy this part. So back end, tight strip half. So back end is, you know, the server. That's what back end stands for.
 That's what it needs back end. That's your server. It's in the back end. Whereas your front end is your website. And our backend is made out of Express.js.
 And in this app, we're going to specify variables for the hostname, port, and path of the page of our server page.
 So what does that mean?
 I'm going to-- let's just copy this, and I'll show you,
[01:33:05]
 or we'll follow on in the screen share.
 Face this into sandbox right here. And these are key news.
 Okay, so now I'm going to go back to the Express app right here. This specifies some variables.
 You're going to specify the host name.
 So what you want to do is we're going to set up the server
 so that you can just pop up the web page
 and it'll give you some information about the server.
[01:34:07]
 And since we're doing this locally, PostName, remember when we try to find out our domain with React and we're trying to, you know, calculate root, root path. We use the host name.
 Well, this is our domain right here in local host.
 That's host name.
 And then we need to set up.
 The port.
 the port. So you decide which port you want. You want to view your server on the webpage. I'm going to make my 8000. This should be another. So my front end, I set my front end to render on 80/80.
 But my back end, I'm setting it up to--
[01:35:14]
 we're going to do it on 8,000.
 You could pick one of the common ones,
 our 8,000 or 3,000 or 9,000.
 It's up to you. We're using variables for this. And then the next one is the path.
 If you remember, we're going to set the path. The path of a web page is the thing after the domain.
 Or when you're setting up browser router, your routes, your routes and browser router are
 paths.
[01:35:54]
 So for this one, I'm going to let it render on the home page like that, or the weak
 path like that.
 That's what that means.
 So I'm just going to put some comments here. This is like the local domain.
 This one here. Well, common ports, common back end ports, are 8,000, 9,000, 3,000. this one
 the path or route
 where
[01:37:01]
 server
 info server info and you'll be kind of browser.
 instantiate an express app object step number two.
 So usually it's called app. And then you just do it by doing express like that.
 That's what you'll see in the documentation.
 You don't have to name it app. You don't have to, but I'm just following what the documentation does, so that the guys don't get confused, but you can rename this to whatever you want afterwards, as long as because the documentation it always shows an ends at, but it's not required to meet at.
 It doesn't have to be called at.
[01:38:13]
 So again, this step is instantiate, it's going to express.
 I'm just going to see what's the first criteria of the check. So you can see this first continuous object.
 With the get method, specify the path and the handler. Okay, so this app has a method.
 It's called, it has one called get. So we forget method.
 Specify the path and the handler. So the path will be here. There's the path, and we need to specify a handler.
 So what is a handler? That's a function, right?
 A handler is a function that responds to an event.
[01:39:14]
 But I didn't make it yet, so I'm just going to create the one right now.
 And where is it supposed to do? I don't know yet, so I'm just going to add a handler for now.
 I'm just going to add an empty function for now, called handler.
 So for now, let the handler be an empty function.
 Listen on the specified port and host name. I should have the--
 going to change this with the missing method.
 With the listen method, specify
[01:40:25]
 fourth and hostname. Okay, so I think that one's clear. And many, we put some on get and listen because these are all keywords.
 I guess app is a keyword.
 And there's also reports,
 on its name.
 So if you look at it.
 So we're trying to match up the source name here.
 I'm matching up the ports here.
[01:40:56]
 Matching up the path.
 Matching up the handler.
 Get is a method.
 This thing is a method, this thing is a method.
 So app.listen. That's a method, right? A method is a function that's attached to an object.
 And we're going to be supposed to specify the port and the host name.
 Okay, so this one's not clear because there's actually, this one is so flexible that it has six different options, six different options for the parameters. You see all these
[01:41:43]
 you see all these functions and
 signatures, they're all different. Same thing for
 get. So if you if you try to use this get method right here, it has so many options.
 Like get and it has six options here.
 Like that one was for a name string.
 This one is for a path spread.
 This one is also a start to the path.
[01:42:14]
 And I want to start to the path.
 So, so different options here.
 And I might get confused which one he used so to keep it simple and just
 separate out in the headler and for the listen you set the
 Okay, so that's good. There's no errors here.
 This seems like a right. and px and pm start.
 Okay so it says 11 errors now.
[01:43:16]
 What is the problem here?
 I see, I won the problem here.
 Let's see, where's the clear.
 Okay, you see here?
 Here's an error.
 And it's with a JSON file and
 Babel loader right here.
[01:43:54]
 Babel loader is trying to process this JSON file.
 Why? It's because it has a JSON right here.
 Babel loader thinks it's a JavaScript file.
 So that's why I'm going to go in here and edit the webpack file.
 There's two ways to fix this.
 You can just put a dollar sign here.
 And that tells--
[01:44:20]
 only look at it if this is at the very end of the file.
 You can put a dollar sign there or you can exclude exclude
 JSON files.
 Like that.
 And so we did before. So you can either do that, or you can just put a dollar sign back there.
 But I'll do this for now, since it's what we're using.
 So let's see if that works.
[01:45:01]
 10 PM.
 Start. So let's see if that works, 10 pm start.
 Okay, you compile.
 So that's good.
 That's good enough for me to compile.
 It has a warning.
 That's okay.
[01:45:32]
 Now let's look at this next part.
 And so we did that. Alright, we took the next picture.
 I mean 22 minutes after the power,
 we'll see what's next.
 The next picture here. If we open fast, we'll need to add some more.
 Okay, and I'll be, it's informational.
 So we can go through the next slide.
[01:46:09]
 [ Silence ]
 All right, so we have a listener. It's called the backend listener or just the listener.
 MacN, you remember that's your server.
 This is the listing here.
 The listener method is used to specify a host name and
 port. So port first and then the host name.
 Good listens for any activity. That happens at that coast name and port. So remember our host name was
[01:46:49]
 local host port. I said it at 8000 so anything that happens at local host
 8000 it's going to listen and watch for any activity there. When a request comes in, this nearby is the path.
 Then this nearby is the request to the hamburger or that path.
 So it hits copy this first.
 And I'll start explaining this. Okay, so here it is back end of this nerve.
 I'm going to change all these new
 and the lashes, like the one that points.
[01:48:04]
 And this sample code here, app.listen.org and post-game. [no audio]
 [no audio]
 [no audio] And the listen for any activity that happens at that post name and course.
 For example, the example would be a post 8,000. When you were accustomed to the list there identifies the path.
 So the example, the path might be listing right there, we put the path in the path.
 For example, I'm going to put this in the
 matrix so it's more obvious that it's not.
[01:49:40]
 When I'm moving it.
 So that's the path.
 When a request comes in, the listener identifies the path,
 so this will, if you go to this local host, a thousand will have, is this right there.
 Then the listener routes their quest to the handler. Or that path.
 or that path.
 So remember we had a headlurt.
[01:50:20]
 We had a headlurt and it has a path. So this handler is supposed to handle
 things that go through this path. And while we're at it, we're going to have here
 don't compile it to some files and the map will appear
 compile these files and then we'll double over.
 And we'll just request two to handle for that path. Alright. So the next slide,
 actually, times up for this path. Alright, so the next slide actually times up for this hour. So we're
 going to take a break and we're going to continue this lesson tomorrow. So I'm going to start off with the brake.
[01:52:03]
 And then I'll see you after 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And now it's the third hour where you have time to work on the practice problems.
 Again, those practice problems are right here.
 And on the side dash on the sidebar. Make sure you take a look at them and they're and mark them
 green if you finish them, but if you still have questions on any of these
 practice projects or practice problems, don't mark it green yet. These are available for practice. I will be asking about these
 practices in a future mini evaluation. So you can use this third hour to work on the practice problems, or you can use it to work on the assignment,
[02:03:30]
 which is capstone TypeScript, start converting your capstone project to TypeScript. And then you see here if I have anything typed up yet.
 So type, capstone TypeScript.
 Okay, it's not ready for submission yet.
 Well, it says there, but it's not ready for submission.
 I didn't put the full criteria in here.
 So only one thing project renders without errors.
 But it's due on the 20th.
[02:04:16]
 That's Thursday before class.
 Then there's late credit available later on one week later
 So there's some details there. It's not complete. So don't submit it yet
 But you get that list I've been showing the class. It's here that list is here
 Same thing as this list right there. Now I'm going to mini evaluation. Just those four questions. And and this will be up for the rule will be up for 15,
 1530, 14 minutes. [BLANK_AUDIO]
 Oops, I forgot to put people into rooms here.
[02:05:58]
 [BLANK_AUDIO] Okay, so let me just take a look at the order which I should do the mini evaluations. [ Pause ]
 Okay, so, Alexandra, you're up first.
 [ Pause ] So, I'll see you in the breakout room in the mini evaluation room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're going to continue the evaluation after I conclude the class.
 So I'm just going to conclude the class and I'm going to continue the mini evaluation
 with Alex Sandra right after.
 So the breakout rooms are back, but I'm going to reopen them.
 In conclusion, we learned about adding the test script,
[02:48:26]
 npm run test, which we set up to run just,
 or maybe you'll set it up to run just one file.
 There's also the deploy script,
 which will probably just be git push.
 And then we started making an express template.
 It's incomplete right now, but we're just getting the information and we're getting
 there.
[02:49:00]
 But tomorrow, we should be at least doing something useful.
 If you haven't taken attendance, make sure you do that. And I'm over to your code X account for that.
 And now classes dismissed.
 That's today's lesson on Express.
 I'll see you tomorrow, but I'm going to continue the breakout rooms for a few more minutes so that I can finish up the mini evaluation. [BLANK_AUDIO]
 Okay, I'll extend your own meeting in the breakout room.
 We need evaluation.
[02:49:58]
 [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]

///// FILE: "Level 4/transcripts/Mar 19, 2025 20-2.txt"

Transcript from Mar 19, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four week two day three and the theme of this week is Express
 The back end server the module that we use to start our server
 Today's agenda. So in the first hour, we'll take attendance, do announcements,
 review what we learned yesterday, and then if there's time, start some new express topics,
 then in the second hour, more express topics, third hour, I'll be doing many evaluations and the rest of you can work on the assignment
 or your practice or practice problems if you already finished with the assignment. So as a reminder, make sure you mark your attendance, mark yourself present if you're here right now.
 And now time for announcements. Okay, so I should be sharing my screen now.
[00:01:32]
 Okay, so we have regular schedule this week.
 As usual, we have the survey in July cohort.
 I think this will be the last week that I'll be announcing this.
 So if you haven't filled that in yet,
 make sure you work on that.
 Your answers are confidential and your comments are confidential.
 And let's see if there's anything new there.
[00:02:03]
 Okay, yeah, I didn't see this one.
 Okay, so I think, yeah, there's two new ones today.
 I haven't seen this yet. So,
 seen this yet. So let's see, sorry, what the first one, TypeScript is giving the errors importing images. image path that doesn't resolve an issue.
 Oh, those are TypeScript errors. Okay, those are TypeScript errors.
 So just as long as it's compiling, that's fine.
 And it wasn't compiling.
[00:03:04]
 That was the problem, but it went away for no parent reason.
 Okay.
 So there was some reason because, you know, something must have happened.
 You must have tried something and it worked.
 Did you change the configuration or any configuration file?
 Or added packages.
 Nope.
[00:03:28]
 No.
 I agree imported the image.
 Maybe the path was wrong.
 Maybe. maybe. So there's no more problem. Is this all part of the same problem here?
 Okay, yeah, TypeScript errors, yeah, declaration file.
 Declaration file, but it should still compile even, even if, so did you make a designation file? >> Yes. I did not add a declaration file,
 but I think the error is still occurring in the sandbox.
[00:04:11]
 I fixed it in the template.
 >> Okay.
 >> I'll check the same file later.
 >> All right.
 >> Okay. So your project compiles them, even though there might be
 TypeScript errors.
 Correct.
[00:04:35]
 >> The sandbox doesn't compile the template compiles.
 >> Okay.
 All right. So you're trying to add images to the sandbox? And then they didn't
 have to do. There were some things that I pulled in from the other sandbox that already had
 images. And I've tried reload, re-importing stats, but maybe I missed an image is all I have to go through and look at it again. Okay, I'll take a look at that.
 Then here, let's see.
 So, yeah, you had some errors.
[00:05:26]
 So David had some errors with, so what you can try is delete the node modules folder and
 the lock file and then just type PNPM install.
 So I'll just type that in really quick just, are you heard David, so did you try that yet? No, I didn't really really quick just are you heard David so did you try that yet?
 No I didn't delete it I was uh I thought about deleting it but I was like hey I don't know if I
 should so I just I was so close to class I just waited okay yeah yeah it's it's it's no problem to delete the node modules folder.
 It worked fine when I did it on the capstone project,
 because it was the same thing.
[00:06:15]
 But when I installed the data didn't get enough,
 it just uninstalled it and I re-installed it with the same dev.
 But for some reason on my notes, it was given me a virtual store.
 Store.
 OK.
 All right, so yeah, if that doesn't work,
 if this doesn't work right here, delete node modules,
[00:06:41]
 delete the Pnpm lock file, let me double check the name of that file here.
 Okay, trying to find it.
 PMPM dash lock, that sham will PMPM dash lock, that's Yes, YAML.
 Yeah, try deleting those and reinstall with that PNPM command. It should reinstall everything.
 But if it doesn't, and you still get errors,
 then you have to do something else,
 which is wipe out all your wipe out.
[00:07:44]
 Well, the easiest way to fix, if there's errors after doing. Well, the easiest way to fix,
 if there's errors after doing this,
 then the easiest way to fix it
 is just wipe out the central PMPM storage
 and then just reinstall everything.
 Okay, next announcements.
 Many evaluations. So remember we have the last one.
[00:08:07]
 So, we have the last one.
 So, we have the last one.
 So, we have the last one.
 So, we have the last one.
 So, we have the last one.
 So, we have the last one.
 So, we have the last one.
[00:08:21]
 So, we have the last one.
 So, we have the last one.
 So, we have the last one.
 So, we have the last one. So, we have the last one. So, we have the last one. So, we have the last one. So, we have the last one. who click that add submission in first. And just remember that making a submission
 can earn an on time point.
 You know that point where you can get an on time
 let's see here.
[00:08:37]
 So here's the evaluation for week two or this week.
 So when you submit it, you can get this point right here.
 Submit the evaluation on time and complete by the end of the week.
 And again, you can prepare your notes ahead of time
 for the questions here.
 So there's this point here,
 but this is not really a question.
[00:09:06]
 There's only four questions.
 You can prepare your notes so that you have everything you need to talk about these.
 And you can use your notes during the mini evaluation, but I'll still ask you to demonstrate
 some coding.
 So the assignment capstone TypeScript is due Thursday before class.
 That's over here, capstone TypeScript.
 You should be able to submit it.
[00:09:43]
 Yeah, you should be able to submit it there.
 The full details are here. If you have questions about anything, just let me know.
 The on time points is two points for this one.
 It's due on Thursday.
 That's tomorrow before class.
 And let me see what else.
 Practice problems.
[00:10:18]
 Again, the practice problems are listed here on the side.
 One, two, three, four, five of them.
 And then just mark them off after you
 finish them, but don't mark them off if you have questions about them, or if you haven't
 finished them. Same thing with your days. Make sure you mark them green only after you finish taking notes and you
 had all your questions asked about these days and you got your answers.
 Only mark them green when you got everything you need for that day and go in order. going over. And now make sure you can focus, take notes and type what I type and also
[00:11:13]
 type what I say if it's useful information. But I just remind me if I if I should type
 something. Okay, so this says here,
 David said in the chat it worked by deleting the node modules
 and the lock file and reinstalling it, everything worked.
 Okay, so,
 yeah, make sure you take notes
 and if you want me to put some comments on like,
[00:11:43]
 like if you don't understand something and you want me to put like type on like, like if you don't understand something
 and you want me to put like type in some comments
 next to the code to help you better understand it.
 Just, you know, raise your hand and ask,
 "Oh, can you add some comments to that code
 to help me better understand?"
 You can do that.
[00:12:02]
 And make sure to watch the recording if you're not able to focus during class.
 Or if you missed any part of class, just catch up before the next day of class, though.
 And then have your microphone ready, especially when we.
 Do many evaluations or if you're collaborating or if you have any questions during the review.
 So now, we're going to review what we did yesterday.
 So I added more NPM scripts, common ones.
 Like we're going to do testing and we're going to be deploying.
[00:12:51]
 So these scripts will help us remember how we tested or how we did testing for
 that project or how we did deployments for that project.
 that project or how we did deployments for that project.
 So if you look at your
 Express template, let me pull that up.
 Oh, right. We don't have those. We don't have those in the express template jet. I guess we didn't get to that part. Yeah, we didn't get to that part. But you should Let me check the sandbox here.
 sandbox level 4, package JSON.
[00:13:51]
 Yeah.
 Your npm scripts are in your package.json file.
 And we added the script here.
 And this one right there.
 Another strategy.
 Another strategy is you can run single test files.
 Like maybe you have a few test files in your project.
[00:14:17]
 And if you just want to run one,
 then you just edit the script and add the file there at the end.
 So NPpx.js and then just edit the script
 and add the file name and the path.
 That way you can test the file over and over.
 Or you just type in the NPM run test.
 And then for our front end, we added this flag here.
[00:14:45]
 And we saw that when we build with this flag
 with the mode equals production flag,
 it makes the bundle file size much smaller,
 which will make the pushing to get hub a lot faster.
 And we will also make it so that your website loads faster.
 So the smaller the file, the faster the loading of your website,
 which makes customers happy if you have a customer-based website.
[00:15:22]
 So let me show you just how that looks right there.
 So this is for our front end.
 To build, you just NPX Webpack, Mode = Production.
 That will produce a smaller build file.
 It will make a smaller, where is it?
 Main JS file. And when it's smaller, where is it, main.js file.
 And when it's smaller, it can load faster.
[00:15:54]
 It makes it smaller by compressing it.
 And using like less letters for the variable names.
 It's basically just replacing variable names with random letters and numbers and things like that so it's as short as possible.
 Okay so we started working on our back end TypeScript template
 and TypeScript template. And we called it Express Template.
 That's this one right here. Express Template. And we added a source folder and an index file.
 We set it up for.
[00:16:58]
 We set it up for TypeScript.
 Let me see what else is here.
 We install Express and we imported Express into the index index TS file.
 Oh, so this is a library where we configured it for TypeScript.
 I didn't do any copying and pasting of the configuration files.
 I just basically just, you know, trying to run,
 trying to run the project.
[00:17:38]
 And if it didn't run, I looked at the error.
 And then I just installed the package that fixed the error or I set up the
 configuration that fixed the error so that you can see so that you can see like if you see
 this error this is how you fix it if you see that error here's how you can fix that.
 So we configured Webpack and Babel to compile TypeScript. We added target node to the Webpack config file.
 So that's the new thing there.
 That's the new thing that's different for the backend
[00:18:25]
 when you're making backend.
 And for some projects, this is not necessary,
 but you're going to need this later on.
 So I put this here.
 And it makes sense because, you know,
 we're bundling in a node environment.
 Basically, our JavaScript is running in the terminal.
[00:18:51]
 It's not running in the browser.
 So it's different.
 When you're using, when your JavaScript is in the browser,
 that's, you call that like a browser environment.
 When your JavaScript is running in the terminal, that's a node.js environment.
 Your JavaScript, you know, it's still JavaScript, but it's different.
 In the Windows environment or the browser environment, There's a Window object and there's a Document object.
[00:19:27]
 But then in the terminal environment or the Node.js environment,
 it doesn't have those objects.
 It has other objects like it can write files.
 [MUSIC]
 It can write files. it can have environment variables, which I'll teach later
 on. So this tells Webpack that we are bundling for node instead of web. Because by default, this one is the target is for the web.
 That's true. So I made a change here.
[00:20:13]
 Let me just go through this number by number.
 So we added, yes, config.json and packages.
 Oh, and then we also added the get more file.
 And we added at types express.
 Dave Dev.
 Let me just make sure my notes match this here.
 I'm just looking at my notes really quick for Express.
[00:20:51]
 This is back end configuration.
 Okay, yeah.
 So this is the part I changed because I forgot to update this in yesterday's class. Build.
 We should have a build script instead.
 I told you guys it should be a start script,
 but it should be a build script,
 and it should have watch right here,
[00:21:16]
 because we want to be able to control
 when Webpack watches and when it doesn't watch.
 So what I'm going to do here is going to update this.
 So in the notes, here are the notes, here's express.md.
 I forgot to update this in yesterday's class.
 It should be billed.
 It should be build right here.
[00:21:48]
 And it should be NPX webpack watch. And your webpack should just able the watch feature.
 So let me just make sure it's not there.
 This one is for Express. So I'm going to switch to Express now.
 Okay, so there is no watch feature here.
 Okay, so that's good.
 As we want to be able to control when it watches
 and when it doesn't watch.
[00:22:29]
 Okay, so make sure you get this.
 In package JSON. This is again for express. Let's make it make it this build.
 The build script is this right here.
 So here's package JSON. Going to add the build script.
 Right there.
 And the start, I have to change that.
 I forgot to update that too.
[00:23:00]
 So I'm going to tell you guys how to update that right about in the next slide.
 Yeah.
 All right. So,
 so we started working on the backend TypeScript app or Express or Index JS.
 And we specified the hostname port and path.
 So I'm going to show you what that means right here.
 Here, we specified the hostname port and path
[00:23:40]
 and added some comments to it.
 And what else do we do?
 We instantiated and express app object.
 So that's this line right here.
 I think I should just get the notes.
 I'm not switching back and forth here.
 So here we, we use that express function
[00:24:08]
 that comes from the express package, it's a function
 and it gives back an app object.
 You know it's an object because there's dot notation here.
 We're accessing the methods.
 So the app is the object, get this method, app is the object, listen is the methods. So the app is object, get is the method, app is objectless and is the method.
 Okay, next, with the get method, we specified the path and the handler.
 So here's the get method. We specified the path and the handler.
[00:24:57]
 And then for now, we just let the handler be an empty function.
 So there it is. It's just an empty function.
 It's just a placeholder for now.
 And then with the listen method, here it is.
 It's a method, right?
 It's a text and object.
 The listen method, we specified the port and hostname
[00:25:19]
 right there.
 there. And then here, I'm going to add this one right here to the notes number five. Use npm script. Start. This is how you start the server right there. So I'm going to add it to the notes.
 Right here, what am I missing? Because there was five.
 Oh.
 Oh, I see. Empty.
 Empty function for now.
 So that's gonna be in here.
[00:26:25]
 Empty function. empty function for now. So that's going to be in here. empty function for now.
 And then item number five was use npm script.
 Start. So this to the npm scripts.
 So, this is the start script node that this main js.
 So, let's add this to the npm scripts.
 So, all you have to the npm scripts.
 All you have to do is edit it.
[00:27:09]
 Oh, wait, no, this is, we have to edit it in the express project,
 not in the sandbox.
 Our sandbox right now is containing our notes, but the project is in Express Template.
 So add that or change it here.
 It doesn't need to be NPX. You only use NPX to run a module in the command line.
 When we're using node, that's not a module.
 That's the, that's the, like,
[00:27:42]
 that's the environment that you're in.
 So you don't need to put NPX for that.
 So it just basically it's the command to run a JavaScript file
 in, in, in the terminal.
 And this is the JavaScript file, mainjs.
 So in the disk folder, Webpack is going to create this mainjs file.
 And that's this, this is the file that contains our server.
[00:28:28]
 We have packed, basically just bundles everything, right now it's just indexed TS.
 But it's going to bundle our source code,
 put it all into main.js, and then that's what we run.
 So we can do that right now.
 Let me, let me just run the server now.
 NPM start. And another thing that you should do. So that's it, it's just going to be like that for now.
 And you should also do a NPM run build.
[00:29:18]
 So Webpack is continuously updating that main.js file whenever we make a change.
 So whenever we make a change to this file here, whenever we make a change to this file,
 Webpack re-bundles this and that's what node command will run.
 It will run this.
 Any questions about that? You're going to and we'll make it I'll make it more clear as we go along here.
 So I'm just making it clear we added this line number five right there.
 This is how we started and this was the other change here. We added the build
[00:30:12]
 script where Webpack is watching. So Webpack here is I'm here in the Express
 template. Webpack is watching for changes and it will re-bundle whenever I edit that index
 JS file. And then node here is running the server. But that server is incomplete. It's not You want it to run. Probably going to have an error.
 Let's see. So the back end listener, this is something I taught you that
 at listen method, that's the back end listener.
 It's a listener method and it's used to specify a host
 name and port for a report in a host name. It's this order. It has to be this order.
[00:31:14]
 It listens for any activity that happens at that host name and port. When a request comes
 in, the listener identifies the path. So there's a path when you put in a request, right?
 Like a home page path or the about path or the contact path.
 So it listens for the, it watches for the path.
 And then the listener routes the request to the handler for that path.
 So we can try it right now. See if we can get something to render. So for me,
 the web page is on port 8000. So let's see what happens if I try to run it.
[00:32:09]
 thousand. So let's see what happens if I try to run it. Nothing happens. It's just spinning and spinning. but we're gonna make it ready today.
 So it's listening on the port and the host name.
 Well, you don't see it here on my let me see if I can port and host name and also the path.
 So let me try this again.
 Local host port 8000.
 When you specify a port, you need to put colon.
 And then the path is that one for home.
[00:33:03]
 This is that slash. If it was about page it'll be
 like this. If it was a contact page it'll be like that. But for home it's just
 like this. If I tried to load it, you know, there's a it's not working yet
 because we're not done with the server.
 All right so now we're gonna work on it. So we're going to take new notes now. This is the new stuff.
 Any questions before I move on?
 Alright, so we're going to talk about Express and just raise your hands if you have any questions.
[00:33:43]
 just raise your hands if you have any questions.
 Okay, so app.get.
 That is, you know, get as a method because app is the object and there's dot notation
 and here's the function that's attached to the object.
 So it's a method. The get method assigns's attached to the object. So it's a method.
 The get method assigns a handler to the path.
 So right now our path is that forward slash.
[00:34:16]
 And our handler is supposed to take care of what should be done
 when someone tries to view that path.
 When they try to go to the home page.
 In this case, our path is the home page.
 So our handler is supposed to, you know, we're supposed to code, but it's supposed to
 that, like, when someone visits the home page, the handler runs the code for that.
 So when a request goes to the path,
[00:34:51]
 it's actually the listener that calls the handler for that path.
 This one is just basically assigning it.
 This is home page and it's assigning it
 to the handler here, but the listener is the one that,
 that the listener knows that, hey, there's a path.
 And when someone visits that path or that homepage,
 I should load this handler.
[00:35:14]
 So let's save this on our notes and put that in our code sample.
 So I'm just going to share my screen while I put this in my notes.
 This is going to go in the sandbox notes and this thing is still spinning. to bullet points there. And there's sample code here.
 App.get.
 And it's specifying the path and the handler.
 And remember, our path is the home page here.
 What happened? Our path is the home page here. What happened?
[00:36:25]
 Our path is the home page here.
 And our handler right now is a empty function, so it's not doing anything.
 That's why this home page, or
 this page is just spinning and spinning right there.
 It's waiting for something.
 It's waiting for a response from the server.
 Alright, so now we're going to work on the handler. The back end, path handler.
[00:36:59]
 So this handler, or it's basically a function that runs when that path is visited, in this case it's the home page.
 So the handler is a function that processes requests.
 The listener gives the handler a request object right here.
 The listener gives this request object.
 And the listener gives this request object and the listener gives this response object.
 You don't give these, right?
 You don't call this handler yourself.
[00:37:34]
 It's the listener that does that and it calls this function and puts these in as the parameters.
 So let's copy this into our notes,
 and then we'll do the step-by-step. Okay, so the, uh, the sample code for this is function.
 Here's the handler function and it takes in a request object
 and a response object.
 That's just the function signature.
 It's not the whole function.
[00:38:42]
 So we're gonna add the request and the response parameters
 to the handler. And then we're going to assert their types. So here's the response. And notice that there's three dots here.
 parameter request simplicity has in any type. What a better type may be inferred
 from usage. So how can you find out what these types should be? Like we should, it should be a string.
 Should it be a number.
 Should it be a Boolean?
 No, it's none of those.
[00:39:34]
 So how can you find that with a should be?
 One way is to, you see there's a callback right here.
 Just basically stick this function in there.
 And it'll tell you what you need.
 It is a stick it in here temporarily.
 There. I stuck it in here temporarily and then I mouse over handler.
 And it says here it should be a request,
[00:40:06]
 should be a request.
 And with a capital R and the response,
 right here should be a response with a capital R.
 So I'm gonna try that.
 I'm gonna try it down here though.
 I'm going to try that. I'm going to try it down here, though.
 Response.
[00:40:27]
 I'm this one's request with a capital R.
 So there's different requests here.
 We don't want this one.
 We want this one right here, the one from Express.
 The one from Express.
 That's the one you want.
 And then remember response.
[00:40:49]
 When you look at this here, response should be a response type.
 So I'm just going to type it here.
 And then it's going to auto populate.
 And then I want the one from Express.
 I don't want the one from wherever this is from. I want the one from Express. I don't want the one from wherever this is from. I want the one from Express.
 And then I'm just going to put this back, just going to make this handler again.
 So that's how you find out the types. You just stick your function in there,
[00:41:21]
 get the types that you need, and then take it back out. Alright, so we asserted
 the types. Request and response and these are from the express, see these got automatically Let's see what else.
 So we learned what a handler was.
 Let's put a note here. runs when the path is visited in the URL. This one, the server listens at the host at the specified host name and port.
 Okay, so I just added some comments there. Then you guys should have already known. Okay, so now the response
 object. Now we can get our server to do something. The response object has a
 send method. So here's a response object. It has a send method right here. It
[00:43:08]
 which takes a string or an object. So in this sample, taking a string, the
 send method sends the response as a string. So this is how your server will
 respond. With this method right here, the server will respond.
 So try sending hello world and then try sending the object.
 So you can either send a string or an object and see what happens.
 We're going to copy this and paste it into the notes. So this part will assert their types.
 I'm just going to add here with Quest and response from the express package.
[00:44:57]
 And then I'm going to make a new section for this part using the response object and the send method and we can send in a string or an object.
 So I'm going to send in an H1 string. Remember this hello world. It comes from like
 you know just something being created like all of a sudden your server is working. Like
 one second it wasn't working and then all of a sudden it says hello world like it finally like like it was born and it says hello world
 So here's here's code right here, so I'm gonna put tactics around this
 And now I'm gonna go to my server
 Again these see see, this is a callback, so express.
[00:45:54]
 Or your listener, or whatever, however you want to call it.
 Basically express calls this handler and gives it these two objects.
 The request object in the response object.
 We can use that response object, which has a send method.
 Right there.
 See, so it had so many methods, right?
 You saw it.
[00:46:20]
 And then in this case, I'm going to send a string h1 a
 Low world so that's basically like a HTML string
 Okay, and that it should work now. I should start the
 Webpack here. Okay, so they're both started. If it doesn't work, then
 I haven't shown you something yet.
 So I'm just going to start the page.
 So it's still not working.
[00:47:03]
 Even if I reload it even if I try to reload
 it local host 8,000 and then the path is the home page right there still
 spinning and spinning. Why is that? It's the reason is because this this thing right here in the terminal. This one
 this command right here it doesn't detect when changes are made to this file.
 Webpack re-bundled it re-undled our file when we added this response right there.
 When we added this send it re-bundled. But this one right here, it didn't apply the changes.
 The file changed, but it's still holding the old version. I mean it's still running the old version. So we need to stop that right there and then npm start again.
[00:48:12]
 And now it should be running our server and let me reload this there. We see hello world.
 And it's an H1.
 Okay. Thumbs up if you got to that point.
 We're going to put here in the notes.
 We're going to just add something in the notes.
 Must restart. something in the notes must restart must rerun node this main js or npm start to apply changes.
 Okay, was there a question here or did someone know?
[00:49:22]
 Okay, so you should see hello world there.
 If you try sending an object instead--
 so that's what I'm going to do.
 I'll try to send an object.
 I'm going to actually just comment that out. And I'll change this to,
 no, I'm going to build it from scratch. So I'm going to send an object. So there's
 the start to an object. I'm going to add a property called message. And the value of that property will be hello world. So this server should
[00:50:11]
 now be sending like some kind of object. If I check that, I need to rerun this, cancel out, and then npm start.
 Okay, and then I go here. Oh wait, it's my webpack.
 webpack. Oh wait, I think I need to refresh this. There it is. Message and then hello world.
 So you did, oh, you reran it accidentally. Okay, so you keep saying that he ran the command accidentally. So he's asking his their way to make a setting like live server where you have it open a page on a certain port and host
 This is
 This is a back end
 This is back end so this is
[00:51:20]
 You know what we're doing right now and when we're using a web page to view it you're actually not supposed to do that
 I'm just using it because the only way you're supposed to
 Access a backend is from you know, either the terminal or from your front-end website and and your front-end website never shows you
 Never shows you the backend like if you go to an online store. You never know what's going on in the backend. It doesn't say, "Hey, you're at the backend." The backend is just
 always descending data. It's sending the pictures of the products, their prices and things like that.
 There's probably a way to set up Webpack. When you start it, it opens a browser page. It's
 possible. I haven't looked into it, but I could look into it or maybe you
[00:52:11]
 might find something and you can share it. But I'll show you, you know, I'll show
 you another way to do this here. So I send a message object and it looks like that. It's here. It comes
 out as a string, even though I put an object in here. See, there's, there's, oops.
 You see these, I think it's too small there.
 You see this, there's quotations here.
 Don't you do that in JSON?
 You put quotations around the property.
[00:53:00]
 This is a JSON string.
 It's not an actual object. This is a string. And then if you want to get the actual object, you need to parse this.
 Okay, so as I taught you in level two, servers respond with strings.
 Even if you put an object here, servers respond with strings. Even if you put an object here, server is respond with strings. Okay, so next slide,
 we're going to take a look at the request object. So that request object
 object. So that request object in the handler that contains information about the request
 that was sent to the server. So in this case the request is coming from the browser,
[00:54:00]
 right? We were using the browser to send the request to our server.
 We didn't really, you know, create a request. This is a browser that's doing that for us. So copy this and then we'll try these steps here. Now we can access the request and what kind of information it has.
 Oh, wait, it looks like it's time for break. It's so it's time for break.
 You can work on this while during the break.
 So I'm gonna get the break started.
 And you just switch this to, um,
 and it switched this to the break screen. [ Pause ]
[00:55:24]
 All right. See you in 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [] []
 [
 []
 [ []
 [
 [ [ [ [ [ [
 [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ Writing on Board ]
[01:05:34]
 All right, so we're back from the break.
 And we're going to continue with lesson on Express. So we're talking about the request object and taking
 notes on it. So I'm going to continue that here on the screen share. Did anyone try it out?
 And it pays this into the notes here.
 So the request object that contains information about the request and we're going to start the server in JavaScript debug terminal.
 I should put this on another line.
 Inspect the request object.
[01:06:41]
 Oh, there's a sample code that should be here because we're going to de-structure. Okay, so this is how you do it.
 Open the debug terminal.
 Whoops, not this one, not sandbox.
 That's where our notes express is where it should be.
 So I'm going to close this one.
 This is, you know, that node command right there.
 We're going to cancel that one out, because I'm going to open it in a different terminal.
[01:07:32]
 I don't want to run this, and I don't need an extra terminal open JavaScript debug terminal.
 So this is where I want to run my server
 if I want to debug.
 Open it with JavaScript debug terminal.
 Your webpack can be on any kind of terminal,
 because this one is not--
 webpack is not the thing that's used for debugging.
[01:08:00]
 It's just bundling the files here.
 It's not a server.
 It's just bundling the files here. It's not a server. This debugger or this NPM start command or that node command is the one that activates the debugger.
 So let's see what it says. Okay, so that's it.
 It just says debugger attached.
 So if I put, for me, you know, I can get it to work this way.
 You can't do this from, you can't do this from, why is this not marking this?
[01:08:38]
 I'm going to put a console log or I'm going to put a debugger command here so it can
 stop right there.
 Okay, so I have this one running.
 Actually, I just made changes so I need to restart this right here. But I'll show you how to fix this soon. Okay, so I have a debugger
 right there and it's only going to work in this in VS code. It's not going to work here in your browser.
 Yeah, I'm refreshing it.
 But look, this one is going down there. You see that? It's glowing.
[01:09:34]
 Because that it stopped on the debugger right there.
 Now I can check out this request object.
 And it has a lot of properties, but it does have the URL properties somewhere here. There it is. So the URL that looks like the path. It looks like a
 path. So I'm just going to destructure the request object. So remember if you have an object like the request object,
 you can restructure it on the left side of the equals sign.
 Basically, just match the property. So if I want to extract the URL. Basically, I make it start like an object,
 and then I extract the property out of it.
[01:10:33]
 So let's see if I was able to successfully extract this URL.
 I need to restart this part again.
 NPM start.
 Every time you make a change, you need to restart this.
 So let's see now.
 I think a forced map.
 I didn't put source map, so this thing is off.
[01:11:02]
 So I think I need to do that.
 is off. So I think I need to do that. But let's just look at this, let's look at this URL. Actually, it's not going to see the URL. I need to put this b booger after it.
 Okay, now have to restart this. Right here, every time I make a change, I need to restart this because it's not watching
 for changes.
 Okay, now I can watch for, I can check what the URL is and there, I see it, it successfully
 extracted the URL right there.
 Let me just fix this debugger.
[01:11:56]
 Dev tool.
 I mean, the webpack config TS.
 Dev tool should be source map.
 Is that right?
 Think it is.
 Yeah, I think it has a dash there.
 I'm going to restart webpack here.
[01:12:22]
 To take those, Webpack here to take effect to take this change in effect.
 So Webpack is watching and let me just restart the server again.
 Let's see if it stops on the correct line now. Yeah, it's stopping on the correct line now.
 Yeah, it's stopping on the correct line now.
 All right.
 So you need to have that--
 you need to have a source map here so that the bugger
[01:12:59]
 can properly stop at the correct line.
 the correct line. The source map is basically it has a, you know, it sees the difference between the mangled code or the compressed code and it shows the original code and it says,
 okay, if you're on this line of code here, in the mangled code, then you're on this line
 of code here in the original code.
 And then that's where it brings us to the correct line of code on our screen.
 So that's what the source map does.
 It's mapping the mangled code to the original code and then it's telling VS code the right
[01:13:40]
 spot.
 Not showing it-- it shouldn't show an indicator.
 I didn't do anything special here.
 So just add the tool source map to the Webpack and Think file.
 OK. So-- oh. Okay, so, oh, and then we're going to try responding with the value of the URL.
 So let's do that.
 I'll update the notes here too, because these are code.
[01:14:26]
 The structure, the URL property from the request object and respond with the value of
 the URL. So I'm going to edit the index 8 symbol file here and I don't want to respond
 with this object anymore. Actually, I could make an object here and I'll put here your L is that your L. Now I think now I'm not
 going to do like that. It's kind of messy. I'm just going to leave this alone. Leave
 that one alone but I'm going to put it here so we can see where it's instead. So I'm going to put it here. So we can see where it's instead.
 So I'm going to make this a template string.
 So there's that h1.
[01:15:37]
 And then I'm going to put a paragraph and put that URL here.
 Your path is URL.
 Because the URL actually contains a path.
 It's not the full URL. Okay, so I don't think I need
 this debugger anymore. We'll know if it works if we see this. So I need changes here, I need to restart my server.
 The one that has the node command.
 And then I need to refresh my website or this browser.
[01:16:41]
 Because it doesn't know that the server updated.
 Because this is the totally separate things.
 This browser is like over here and then this server is over here.
 When the server is making changes, it doesn't tell the browser.
 The like totally separate things.
 The browser, the only thing that browser can do is, hey, I'm just going to refresh
 the page and maybe the server made some changes. So that's what I'm going to do. I'm going to refresh the page and maybe the server made some changes.
[01:17:05]
 So that's what I'm going to do. I'm going to refresh the page and we're going to see if the server made any changes.
 And it did. It says hello world, your path is that forward slash.
 There are just like totally different worlds. They're not, you know, synchronized. I mean, there's, there are ways
 to synchronize them, but they're not meant to be synchronized because they're, you know, it's, it's meant
 to be like, your customers are on their website here. And then your server is here. What you could
 do is, um, you could have a JavaScript that's constantly checking the server if there's any updates.
 But all we're doing is going to this website right here.
[01:17:50]
 It doesn't have any JavaScript that's automatically
 checking the server.
 So it's not going to update for us.
 Right now, they're not friends.
 So there's like, in two different worlds,
 they're not friends.
 But we could make them friends.
[01:18:06]
 They just use some JavaScript to do it, but not right now.
 And maybe we don't need to.
 So we were able to respond with the value of the URL. Okay, so this is a summary of what happened. We have the app,
 we instantiated it. I mean, we have the express function. We ran, we activated the function with
 the parentheses. That's how you activate a function with parentheses, right?
 Then it returned an object, restored in the app variable.
 So that app object has a get method, that assigns a path to a handler. And that object has a listener that starts the server
[01:19:07]
 and at the specified port and hostname.
 So let's copy this.
 Put it in our notes.
 Pretty simple right to get a server going. That's not what I copied. Let me try that again. So basically, just three lines, three lines of code can start the server, a basic server And the code block here. We took that express function.
 We activated it. we stored the result in the app variable here.
 And then, so that app variable is object with a get method.
 We specified a path and the handler for that path.
[01:21:03]
 So in that case, in our case, it was the home page,
 that home page path, and then we have that handler rendering things on the home page.
 And then the app object has a listen method where we specify the port and the host name.
 And so that's where, you know, that's how you access that server from a browser.
 Okay, let's see anything else missing anything.
 I'm just going to put some backticks here and match those variables up there.
 Okay, we're good. Think that's good.
[01:22:14]
 All right.
 And that's what you see here in the
 index HTML file.
 I mean, index JS, those are the main three lines of code right there.
 Okay, so now we don't have to keep restarting our server.
 We can use node_mon.
 So node_mon stands for node_moneter and it's a module that can start and automatically
[01:22:59]
 reload the express server and it has a web page right here.
 So let's copy this. And
 we'll check out the web page too. I'm going to save this in the notes now. Okay, so node mon stands for node monitor.
 It's a module.
 Here's the web page.
 Let's take a look at that web page.
 Yeah, it's like a Digimon.
[01:24:01]
 Okay, so I'm gonna open a web page here.
 So here's the web page for it and pretty simple, just install it.
 Well, you can install it with a dash G option, but I'm not going to do that.
 It sort of messes up or it pollutes the global packages.
 And a lot of information about it.
 A lot of people use this.
 A lot of companies use this package. That's a website for it. And so what we're
[01:24:49]
 going to do here is we're going to run this NPM install node mod, but that's going to be
 saved then. And then we're going to change that start script to use node mod instead of node.
 So first things first, and we're going to go to the express template again and install node mod.
 Okay, so these are still running, actually, I can stop this, this one right here.
 I can stop the server for now.
 I've stopped this one, the one that's running the node command.
 I'm going to use that to PMPM install node mon and we'll save it in the dev because our
[01:25:42]
 app is not going to import this. This is all just to run the server from the CLI.
 Okay, there it is.
 It's installed.
 Now the next step is to add this one to our start command.
 Basically just switch it to node mod.
 So our start, I mean our start script.
 Here it is. Here's our start script.
[01:26:17]
 Using node to run this.
 We're going to use node mod now.
 Where are we going to use node mod? It's because it's a module that
 can start and automatically reload the Express server. It'll do that whenever we make
 changes. So we don't have to manually stop it and then restart it, manually stop it and
 restart it. No mod is going gonna do that whenever we make changes.
 So I'm gonna just restart it here and PM start. Remember it's gonna run that node MOM command.
[01:26:59]
 There it is, there's a node MOM command and it started.
 Well, it says here started.
 So, we're starting node.
 All right, so that's good.
 Any questions about that?
 [ Pause ] All right, and we're going to make our listener more informative,
 because remember when we start the server,
[01:27:37]
 it doesn't really say anything, doesn't provide any information.
 We're going to change that and we're going to provide some information. We're going to change that and we're going to provide some information. So when the listener is loaded, this is the listener. It can run a
 callback function. So this will be a callback function that will create. So let's right here. Same it to the notes. Screen share.
 Paste it right here. There's a sample code is app.listen.
 It's going to listen on the port and the host name.
 And we're going to handle listen.
 So the event is basically the event is that it started listening.
[01:29:00]
 So we're having a callback to handle the listen event. You know, just have this like you have the handle click
 or the handle submit your responding to the click event or the submit event.
 Well, here we're going to respond to the listen event.
 And so that's the notes, but I'm going to go back to the template here.
 And add a handler.
 So this listen, I can add a handler here called handle listen. You can call it whatever you want, but you know it makes sense to call it
 handle listen.
[01:29:58]
 So the example is handle listen.
 And then let the callback display the URL for the viewing, URL for viewing the server response.
 So what does that mean?
 So let's make handle this in right here.
 It's not an inner function or anything.
 It's just out in the main, you know, right here. It's not an interfunction or anything. It's just out in the main, you know, right
 here up against the numbers.
[01:30:28]
 That's called the main scope or
 global scope. There it is. So
 I'm going to put a console log.
 And I'm going to put something here.
 I'm going to use backticks.
 And I'm going to put something here. I'm going to use back ticks.
 I'm going to put. on HTTP. And then this would be where the host it starts listening, when the server starts
[01:31:36]
 listening.
 And I think it just updated right now.
 So let's check.
 So there it is.
 See, we have node mon running. And we
 may change this to this file. And now we see that change says you're listening on
 HTTP local host 8000. Now I can easily just copy this. Place it up here. Right. So I
[01:32:04]
 just made some information.
 So I'm going to, I'll stop this right now and rerun it so we can see it happen.
 NPM start.
 This is in the JavaScript debug terminal so that thing keeps popping up.
 So now it says, listening on a CTP local host 8,000.
 You would put your own information here.
 Maybe you're using the same.
[01:32:31]
 So insert the host name there and the port there.
 Pull in in between.
 And then also display instructions to run the build script.
 Okay, so what's going on here,
 we have Webpack right here running.
 We have Webpack, right, so we want to make a reminder that we should have webpack running because we might come and
 you know we might have been away from our project for a while and we forgot how to start it.
[01:33:12]
 So it makes sense to provide the information we need.
 And what is that information?
 That information we need is type open a new terminal and run
 and run,
 npm, run build.
 So two console locks. scenario how this would happen.
 I'm going to just close these terminals and then close these down.
[01:34:15]
 Okay, so I have no terminals open and I'm just, you know, maybe I just restarted my
 computer and I want to get this going.
 So I close the browser to.
 So now there's nothing started.
 There's nothing running.
 I'm going to go to the terminal and do what I usually do to start a project.
 I'm just going to type npm start.
[01:34:41]
 Okay.
 So I'm going to click press enter.
 Okay, it reminds me.
 Okay, now it's listening on HCTP, local host 8000.
 Okay, I think I need to go and open this page.
 Well, fortunately I have that here for the, right here.
 I'm just press press that right there.
[01:35:05]
 There it is.
 And then what else did it say here?
 It says open a new terminal and run NPM run build.
 That's supposed to use our webpack.
 So click on that plus sign.
 NPM run build.
 All right, so it's it's running.
[01:35:47]
 And that's, you know, I gave myself instructions on how to start this project. I'm going to add one more thing.
 On Sollog.
 This is a reminder about the debugger. to debug start this server in a JavaScript debug terminal.
 Okay, so if I save this, I should see this reload and it will show me that new comment.
 There it is. It reloaded and it put that comment there. So there's another reminder to debug start this server in a JavaScript debug terminal.
 So I'm going to do that.
 I'm going to just close this one and then start a JavaScript debug terminal.
[01:36:57]
 NPM start.
 And now I've activated debugging.
 And now I've activated debugging. Oh, says in use, okay, so I guess the other one did not stop completely.
 Did I, I might have accidentally just kept it running.
 And must be one of the drawbacks.
 Let's see if it stopped.
 Okay, there it is.
[01:37:27]
 It stopped now.
 Oh, wait, no.
 That mode mod is still running in the background.
 Let me see what happened here.
 I wonder how to close it.
 Might have to just shut down the BS code here.
 So I'm going to stop all this.
[01:37:59]
 And you see if it has anything.
 Does it's already in use,
 I forgot to close it, so it's like stuck in there.
 Maybe let me try stopping these and I'll try shutting down my VS code.
 Hopefully this stops anything that's running.
 Restart it now.
 Okay, let's try that again. open up the debug terminal and PM start.
[01:38:52]
 I'm still doing it.
 I'm just going to temporarily use a different
 different port then.
 Or let me just check with more thing here. Workspace, nope, that's not affected.
 Damn, just going to temporarily change my port.
 See if that works. Oh yeah, I have to also start Webpack here and PM run build to apply to changes.
 Because I just change the port.
[01:39:39]
 So, npm start. If you have a start waiting for file. and try different port. 8,005.
 Something weird is going on.
 I'm going to keep going up until I find the port that's not taken. Okay, it's not taking any port. report.
 Okay, so,
 Nope.
 Well, make it totally different and try 3000. That one's in use to go. Okay, let me just not use,
 let me not use JavaScript debug terminal. Same problem here.
[01:41:29]
 Okay, so obviously if you close the terminal before closing node mon, something goes weird
 with the ports. Right now the ports are not, well, let me try a
 different port here, 3030. I should be open.
 and then start.
 It's like I can't start on any port anymore. I think I might have to.
 Did you have to restart, so you can, you have that earlier,
 did you restart your computer or something?
[01:42:23]
 I forgot how to close a port. I don't have that command. I don't
 use that command often and it's not a it's not an easy command to come by.
 Let me just check it really quick. How to close a port in Node.js.
 A package.
 Or is there no CLI for it? Okay, so let's look at that package
 Let's see if there's a CLI for it. Okay there.
 No.
[01:43:27]
 Oh here it is.
 Okay.
 All right.
 I can do that.
 MP MPM install.
 Save dev. Pm install save dev kill port
 NPX kill port 9000 9,000, but 8,000.
[01:44:07]
 Okay.
 All right, so hopefully that works.
 I'll put in the notes for tomorrow,
 because we should know this stuff right here.
 If we accidentally close a terminal while
 node_mon is running, something might be weird is going on.
 Then you see, did I, maybe my code?
[01:44:54]
 Now, all I'm doing is console log.
 And the listen console log. Let me see here webpack. Okay, that's running. Did not be listening Hopefully there's no bug in my computer that just took up all the ports.
 Okay, well that worked.
 I had to kill it twice.
 All right, so let me try that again, but in the debug terminal.
 So I see here everything that's console log.
 I made that.
[01:45:55]
 It's a reminder to myself what I should do.
 Open this site right there.
 Run npm build on the on another terminal.
 And then if I want to debug start
 this server in the job was good. Okay, so I should probably remind myself to
 stop this first but I think I'm gonna I'll show you guys another way to handle
 this problem.
[01:46:30]
 Okay, I'm going to enable debugging to see if it worked. Okay, it looks like it worked.
 All right, now I can continue.
 And send box four.
 And we make sure
 We could cover all these okay, we have these that we displayed instructions to run the build script and
 And how to
 I'm gonna have here also display instructions to run the debugger. Alright.
[01:47:31]
 Okay, so this one's the long one. Access the back end from the front end.
 I can't possibly finish this in the amount of time we have, but you can work on this.
 I can get you started if you're interested
 in how to access the backend from the front end.
 So let's get it started.
 Copy this here.
 And the front end is gonna be sandbox level,
[01:48:04]
 yeah, sandbox level four. That's gonna be our front end is going to be sandbox level four.
 That's going to be our front end and we're going to access this backend with the fetch command and see what happens. Alright, so copy that, the jacopy leads into your notes. access the backend from the front end.
 And create a React component.
 So I'm going to create a React component here. In views, what should I call it? I just call it server. server dot t-s-x needs to import react from react.
 And export a function by the same name server.
 There it is.
 And then I'm gonna make it a page.
[01:49:41]
 So I'm gonna give it a main tag
 and just put an h1
 That says server
 Just see if I could get it to render
 To get it to render I need to add it to the nav bar
 I'm gonna add it to the nav bar here
 I'll put server as the path.
[01:50:07]
 And I'll put server as the title here.
 And then I'm going to go over to browser router. the router and that's server right here and load that server component right here.
 right here. Okay, so I'm gonna just now I'm in the front end. This is sandbox level 4. This is the front end. NPM start. So different things going on. So this one runs with
 the Npx Webpack server command.
 But all I have to remember is just NPM start now, now that I'm using scripts.
 NPM scripts. And I just need to open a web page. Okay, so I see the server here in the nav bar, click on that, and it's properly loading
 the server page. The next step from component did mount, send a fetch request.
[01:51:52]
 I think you guys can, you let's take a break now.
 Let's take a break.
 Let me load up the break page. Okay, C in 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [ Writing on Board ]
 All right, so we're back from the break.
 Back from the break and now we can use the third hour.
 You can work on the practice problems in the sidebar
 or you can work on the thing that last slide that we had
[02:02:52]
 about getting the front end to communicate with the back end.
 But I'll go over that tomorrow.
 Or you can work on the assignment. This one is due tomorrow.
 Converting your capstone project to TypeScript. I know one of the problems
 was like importing images, so I'll take a look at that.
 at that. In the meantime, I'm going to start up the breakout rooms for many evaluations and I'll call whoever's next in the waiting list. So let me see here how much time do we have for the break-out rooms?
 45 minutes. [ Writing on Board ]
[02:04:06]
 One breakout room will be for collaboration,
 another one for silence, and then the third one will be mini evaluation.
 And I'm just going to put you guys --
 I'm just going to assign you guys to I'm just going to assign you guys to room just so that you can see it.
 I don't know if they fixed the bug yet.
 Okay, now I'm going to check out who's up on the waiting list.
 Who's next on the waiting list? Who's next on the waiting list? Okay, let, so UQ is up next.
[02:05:38]
 UQ, I'll meet you in the evaluation room.
 Oh wait.
 He's in the silence room right now. all right so I'm going to do the mini evaluation and you guys can you know just work on something. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the breakout rooms. I'm gonna have to continue my,
 the mini evaluation with UP right after I conclude the class.
 There's two more days of this week,
 so there's gonna be Thursday and Saturday,
 but there's three more,
[02:51:01]
 three more mini interviews I need to do.
 So one of them is So one of those mini interviews
 are gonna have to be after class.
 So plan ahead.
 So we're back from the breakout rooms.
 In conclusion, we were working on the Express template. Express is our
 server, our backend server, and we're working on that template, a TypeScript template for it.
[02:51:35]
 We learned about the request object and the response object. The request object has information about the request that came in like that URL we were able to display that response object.
 It has the method for us to send the response.
 We use node mon.
 So, so that whenever, whenever there was a change we made, node mod reloads the server.
 And then we added some console message messages
 to the listener so that we remind ourselves
 what we're supposed to do, like which thing,
[02:52:17]
 which URL we should open up on the browser
 and it reminds us to open
 or to run the webpack to keep to start building the project on every change.
 If you haven't taken attendance, make sure you do that.
 Now class is dismissed.
 That's the days lesson on express.
 I'm going to finish the interview with Yuki and then if anyone else has questions,
[02:52:57]
 have anyone still here. I'll answer your questions after Yuki is done with his mini evaluation.
 Okay, so the breakout rooms are open again.
 Yuki, I'll meet to in the room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 20, 2025 20-54.txt"

Transcript from Mar 20, 2025

[00:00:00]
 Good evening class. Welcome to Code X Academy level four week two day four and the theme of this week is Express.
 Today's agenda and the first hour will take attendance, do announcements, review what we learned yesterday. And I'll go over some tips.
 Then second hour, go through some quick
 TypeScript concepts and then express.
 Then third hour, many evaluations
 and get a chance to work on the assignment.
 Attendance. So make sure you mark your attendance
[00:00:51]
 and on over to your Codex account and mark yourself present.
 And now time for announcements.
 Let me prepare my screen for that.
 Okay.
 So the survey is still posted in July cohort.
 If you haven't filled it in yet, make sure you take the time to do that.
 Your answers are confidential, so you can be honest about it.
[00:01:33]
 The purpose is to improve our courses and the content that we're teaching.
 Many evaluations, so if you haven't clicked on that ad submission button for the mini evaluation,
 make sure you do that.
 It's to put you on the waiting list. Basically, it puts you in line to take the mini evaluation.
 And you also can earn the on time point.
 So everything that we have, it has those on time points.
 So every assignment that we have,
[00:02:25]
 including the evaluations.
 So it has those on time points,
 including this capstone type script.
 And that was due today before class.
 So hopefully you got a chance to turn it in on time or submit it
 on time because whether you're fully done with it or not, you can get that
 point, you can get that on time point, but it's better to submit it complete and on time. If you can't do that, then it's better to submit it on time,
[00:03:10]
 even though it's not complete, because you can still get that on time point. In this case, it's two points. If we look at it here, cats don't type script.
 The median on time, you can get two points for it.
 Practice problems are here.
 I'll continue to post it here and just check them off as you complete them as you understand
 them as you get your questions answered about them.
 But if you have not completed them or you have any questions about them. Do not check them off.
 If you have any questions, you can even put it in your
[00:04:16]
 mini evaluation here or this one here.
 You can add it there if you think of any questions, but it's better to ask your questions in
 July cohort.
 And then in class and then if none of those, if you don't get an answer in July cohort or in class, then you can, you know, just contact me directly. So by now, some of you have missed some days
 or missed portion of our class days.
 So make sure that you only mark your day green after you've finished taking notes for that day and
 after you've asked all the questions you have about that day. But in all circumstances,
[00:05:20]
 make sure you go and order, watch the recordings, and don't jump around from day to day
 because you will definitely get lost that way.
 Because each day is built on the previous one.
 So now it's time to focus.
 Don't do any other work.
 Don't work on your assignment or anything like that.
 Just focus. Take notes. Type with i-type and also type the useful information that I say.
[00:05:57]
 And especially for this upcoming review session, at least it'll reinforce the things that I talked about yesterday and
 you don't need to worry about taking notes during the review session. Maybe
 you may want to make sure that your notes are complete during the review
 session and that you didn't miss anything.
 And make sure to have your microphone ready, especially if you're going to do the
 Capstone evaluation today, or I mean not the capstone, the mini evaluation, or if you have any questions.
 Just raise your hand if you have any questions about the review or about anything else.
[00:06:53]
 Okay, so now time for the review.
 What did we go over yesterday?
 Or what were the new concepts we learned yesterday?
 So we learned about the backend get method. So this is the express app.
 It had a get method and the get method assigns a handler to a path. So a path that would be
 like the, you know, like the forward slash or the root path or the home page. And then
 the handler is the function that runs when the path is visited in the URL. So when
[00:07:37]
 it request goes to the path, the listener calls the handler for that path. So basically this function will run.
 This is a function.
 It's color yellow.
 It's a callback.
 The listener will call this function
 when this path is visited.
 Back in path handler.
[00:08:04]
 So this is the code for the handler.
 Basically it's a function that takes in a request and a response.
 And this request object comes from express.
 And this response object comes from Express.
 You didn't call this handler directly.
 It's the listener that calls it and the listener provides the request and the response.
 The handler is a function that processes requests and the listener gives a handler the request object and the response object.
[00:08:47]
 So when the client sends a request to your server,
 one of these handlers will take care of that request.
 It will handle that request. So we had a handler in our Express app, or index.js, and we added the request and response
 parameters, and we also asserted their types.
 So let me show you what that looks like.
 That's gonna be in the Express template.
 So there's the handler and it's taking in a request and a response and then we asserted their types.
[00:09:44]
 Remember this request and a response and then we asserted their types. Remember this request
 and this response and import them from Express. There's another request and response that's
 built in. You don't want to use those. You want to use the ones from Express. If I go like this
 and delete it, then it will give me some choices.
 There's this request right here.
 This one is built in.
 That's not the one we want.
[00:10:15]
 Actually, no, let me take this off.
 And let me take this one off because it's already imported.
 It's not showing up in the options. So this is the request. So this one is built in here.
 We don't want that one. We want the one from Express right here. So it automatically important right there and it's it properly asserts the type that the
 listener will send. So the listener will send a request object which looks like
 whatever this one's looking for and a response object.
 And then, we use that response object.
[00:11:15]
 It has a send method.
 And you can send a string through it like this one.
 It's just a string.
 It looks like HTML, but it's just a string. So the response object has a send method which
 takes a string or an object. So you can put an object in here. The send method
 sends the response as a string. It will send it as a string. Even if you put an object in here it'll send it as a string.
 And then the request object.
[00:12:07]
 We were able to start the debugger for that and we can inspect the different properties it has. And this is destructuring one of the properties.
 So this request object has a URL property.
 So we can destructure it.
 The URL property is inside an object or the request object.
 So we just use curly braces to represent the object.
 And then URL here. It's the variable that will also store the value for the URL property.
 So basically, we're just destructuring the property in here in this object. So let's
[00:12:45]
 take a look at that how that looks. So I'm this to go.
 NPM start. and then I need to actually, no, I'm going to start the debugger here.
 NPM start and then on the other one, I want to start the webpack or npm run build.
 So if I make any changes to the file,
 webpack will re-bundle it and the server
 will restart with the new code.
 So here's index.
[00:14:06]
 So here's index. And if we want to look at what's inside this request object, we can put a debugger right
 there.
 Let's start over up. Then you just go like this and actually not that one out in the start.
 One of the other browsers here, of back end browser. Okay, so there. When you use a browser to visit your server at the host name and port, in this case,
 my server is at localhost for 8,000.
 You don't see it here yet.
 Let me just load it so you can see it.
[00:15:04]
 You can see local. Finish that right there.
 You can see local hosts 8000.
 So when you, when you visit that host name in port
 or the server, it runs the handler for that path.
 In this case, it's a home path or the new path.
 Now, I can look at the request object.
 You can see it here, the request object.
[00:15:40]
 And it has all these properties.
 One of them is URL right here.
 So right now, I mean, this is actually the path.
 It's not really a URL, but that's what it's all the--
 that's what it sees.
 So it has a URL property.
 And so that's what we're destructuring
[00:16:04]
 from this request object right there.
 So when we destructure it,
 we're going to have a URL variable and that URL is now storing
 the value of the URL property.
 And then we can send a response here and also the value of
 then URL. So your path is URL right there so I can see it here. Your path is and there's a URL.
 We started the server in the debug terminal and inspected the request object, the structure
[00:16:58]
 the URL property from the request object, and then we responded with the value of the URL.
 Basically we displayed it in the web page.
 So in summary, you need to run this express function.
 It's a function.
 It's color yellow and then you have to activate it with the parentheses.
 It doesn't take any parameters, so it's empty parentheses.
 That creates an app object, and then that app object has a get method, where you can
[00:17:38]
 specify a path and the handler for that path.
 That app object also contains a listen method where you specify the port and the hostname.
 And that's the bare minimum you need to get your server started.
 Then we installed node mon. Because before we were using NodeMon,
 we had to manually cancel out of the server and then reload it every time we make a change.
 But NodeMon does that for us automatically.
 We installed it into the dependencies right here,
[00:18:26]
 and then we added it to the start script.
 We started using node mon for the start script.
 Instead of the node command, we used node mon command.
 And then we added a handler for the listen method here.
 When the server starts listening, it runs the URL for viewing the server response.
 And we also displayed instructions.
 So let me show you what that looks like.
[00:19:21]
 So here's the listener. We added a handler to run when the listener is running.
 This one gets automatically called.
 And then here it is right there.
 And it's just logging things to the console.
 Like the URL
 that we should open our browser to.
 And then it reminds us that we should type npm run build.
[00:19:54]
 That's for webpack.
 And then it reminds us to--
 if we want to use the debugger, we should open it
 in the debug terminal.
 So we see that happened right here.
 So I'm just going to clear this and then we'll see those.
 When I type npm start, it'll show those comments or those logs.
[00:20:28]
 Since you're listening on HTTP local host,
 8000 open a new terminal and run npm run build.
 And to debug start the server and the JavaScript debug terminal.
 That only shows up because I put it here in the handler.
 All right, so now for the new section.
 So open your sandbox level 4 and we're going to add more notes to it and these will be
 tips. So yesterday, let's do it and ask how do you open a browser
[00:21:18]
 automatically when you start the server? My reply was, usually we don't use a browser
 to communicate with a server.
 But for now, we aren't using a browser
 to communicate with a server
 because our front end is not set up yet
 to communicate with a server.
 But if you wanted to, like for testing purposes, you can do that.
[00:21:50]
 You can open a browser tab from the CLI. And this is how you do it.
 So copy this here.
 How to open a browser tab from the command line.
 And I'll show you some tips on how to use this
 to automatically open
 when you start your server.
 Okay, so copy that for your notes.
[00:22:24]
 And then I'm going to start sandbox, I'm going to share my
 sandbox level 4 right here and the notes will be right here in tips.
 tips.
 This can be found open so many clothes and moulders.
 Working on right here.
 We're going to use the package called OpenCLI.
 It's a module.
[00:23:14]
 You can open a browser from the terminal command line.
 And you just specify the full URL copied from the browser address bar.
 So here's what we're going to do. We're going to install first
 and there's another command right here and this is how to run it.
 And then there's some more code here if we're going to, we can use a script.
 So let me just open here, open this right here on the side.
 This one's going to be in, I'm going to do this in the back end. So I'm in sandbox
[00:23:55]
 little 4 right now, I'm going to switch over to the back end. And my web pack and my
 server are running. So I'm just going to be going to load my server are running.
 So I'm just going to leave those alone.
 My server, I'll put it at the top and the webpack.
 So my server is running in the debug terminal here.
 We see here listening on local hosts.
 And then webpack is right here just bundling every time I make a change.
[00:24:22]
 And re-bundling every time I make a change.
 And I'm going to open a new terminal so I can install that module PNPM install.
 That's called open CLI.
 And I'm going to put it in the dev dependencies because the app is not going to use it.
 We're just going to use this outside of the app in the command line.
 So it's a devdiptonancy.
 It's not required by the app.
[00:24:56]
 The app will run even though we don't have this.
 that we don't have this.
 Okay, so I've installed it there.
 Next one to run it and px open CLI. So that's the name of the package.
 So I'm going to close this one right now.
 I'm going back to the back end. Npx open CLI. So remember that Npx command runs one of the modules that you installed.
 So we installed open CLI. So for Npx runs a module. And then we need to give this module the URL to open up.
[00:26:09]
 So I wanted to open up the one, the URL where my server is running.
 So I just closed that browser right now.
 So this one should open it.
 I press enter. Okay, it opened up a tab on my other screen.
 So here it is.
 And we see it automatically stopped at this break point.
 We're going to just press play there.
[00:26:42]
 And there it is.
 So it opened it up through the command line.
 Okay.
 I just close it again so that's because I don't need it right now.
 Optional.
 You can add a npm script, open tab. So let me show you what this looks like.
 Gonna open up my npm scripts here in package.json.
[00:27:28]
 And then I'll add a script called open tab. So what's the command for that?
 Oh, there's an error here because I need to put a comma.
 You'll see here, expected comma.
 So that means we're comma right there. The command to open
 that tab is npx open CLI and then give it the URL to open. There now I have a script for it called OpenTap.
 I can run it here instead of typing the command, like this, instead of typing this command
 here, I can just put npm run Open tab. Or browser, you can just name it whatever you want. So I don't
[00:28:32]
 open it up with me again on the other screen.
 I'm going to press play here, let it finish.
 There it is. I'm gonna close it
 We just wanted to show you that it's running so now there's two ways
 To run to open that window that browser tab. That's with the script here or you can open it directly by typing in this command.
 Okay, thumbs up if you got that. Thumbs down if you don't.
 Thumbs up around the in the happy face.
[00:29:34]
 So, this one manually closed port. So, yesterday, I had an issue with a port my server wouldn't run because the computer kept saying that the port was already taken. Like,
 I'm using 8,000 for my server and then it couldn't start because the computer was already taken. Like I'm using a port 8000 for my server and then
 it couldn't start because the computer was saying hey they can't use 8,000 it's
 already taken and the reason is because sometimes ports can remain open when
 VS code is closed without stopping a server. Well my mistake was I closed one of the terminals even though it was
 still running the server. So the server got stuck just with the port 8000 remained open. So then
 when I tried to start the server again it couldn't because it said hey 8000's already taken.
[00:30:24]
 because it said, "Hey, 8,000's already taken."
 So, you can use the kill port module to close ports that were accidentally left open.
 So, this one's going to be useful,
 because you might accidentally do those things
 where you accidentally leave a port open. So copy this, paste it into the [BLANK_AUDIO] Okay, so this one is a keyword.
 This is code right here, so I'm going to install killport. This one saved up but there should
 not be a space there. This one is also code on how to start it.
[00:31:58]
 All right so this we need to run this in the backend.
 Right now I'm in sandbox level 4.
 I don't need that in sandbox level 4.
 I needed index press for the backend.
 Np npm install kill port and then that's in save in dev dependencies because my
 program can run without it for my back end server can run without it. And then to chill one of the ports, you just type, let me close this.
 So my server is running on 8,000. I'm going to stop my server just for now. I don't
[00:32:58]
 know what's going to happen with my server. I'm going to peel that port while my server is using it. So NPX, that's a command that lets you run a module
 in the command line.
 And that module that we just installed is killed port.
 So NPX killed port, and then you provide the port number
 that you want to close, that you accidentally left open.
 There it is processed on 48,000. It's killed.
 Okay, so next you can have a script for it. So close port.
[00:33:49]
 Next, you can have a script for it. So close port. There it is. I'm going to add a script in the backend here. Need to put a comma.
 I'm going to make this command kill port 8000.
 So if I try it here.
 Instead of typing in this command. I can put NPM run host port.
 And it does it basically it runs this command for me and there's the response or the
 results. Okay, thumbs up if you got that.
 Thumbs down if you did it.
[00:34:56]
 Get that.
 All right, so the next one, here's another tip.
 Useful tip, run multiple commands from one script.
 So you use the add symbol to combine multiple commands into one npm script.
 So we're using a double add symbol and we could run multiple commands one after script. So we're using a double-and symbol and we could run multiple commands one after another.
 So let's copy this into our notes.
 And I'll show you an nifty way to do this.
[00:36:07]
 So I'm going to start it right here. I'm going to start it right here.
 I'm going to start it right here. Okay, so the code is this end and symbol.
 This is code right here, and right here.
 This is how it looks after I highlighted each code with
 tactics. Now I'm going to try it out. So there's a script,
 the start, the start script, let's try
 killing that port 8000 for me, it's 8000 and then running the server that way
[00:37:15]
 whenever I try to run the server that port is going to be available no matter what. So I'm going to edit the start script in my backend. So I'm at
 express template again. So I want to kill the node one. So I want to N key X, kill port 8000 and then use those double and symbols and run this command right after it.
 Command right after it.
 Okay, so, and it's tested out. So I'm going to put npm start.
 Let's see what happens. So it's going to
 Kill the port first. There it is. It killed the port.
 And then it started the server.
[00:38:22]
 And then it started the server.
 That way whenever I try to start the server, even if I accidentally left the port open,
 it'll automatically close it.
 And I'm going to close the port by just canceling it, but there's no hurt. There's no, there's no problem killing a port that's already closed.
 So there are 48,000 is already closed, but it'll try to kill it again anyways.
 And it's not going to have any errors. It's still try to kill it.
 And now my server's up and running on 48,000 there.
[00:39:01]
 I'm going to stop the server for now.
 So I can use this terminal for other things.
 And that other thing is here, a build script.
 So when I start my build script, I want to see if I can open a browser right here. This is open this browser to this URL and then build webpack.
 So I'm going to go back to my server is my server. I want to add here open a browser first. I can see the
 command right there. It's Npx, open CLI, and then I'm going to give it the web page or the URL to open.
 And then use the add symbol.
[00:40:10]
 Start Webpack right there.
 So when I run this build command, it's going to do two things.
 So I'm just going to stop Webpack for now right here. I stopped Webpack.
 So I'm just going to try it out in this terminal.
 NPM run build.
 So I expected to run two commands now.
 The first one is going to open.
[00:40:38]
 Actually, I should start with my server.
 Otherwise, it's gonna,
 it's gonna be an error in the browser, because the browser will expect the server.
 So my server is open.
 I mean, my server is starting right here, it's listening.
 And then here's Webpack, it's off right now I'm gonna
 turn it on with mpm run build so it should run to command it should open a
[00:41:14]
 browser window and then it should start webpack so there's a browser that opened up. I needed a press play here.
 So finish that. And then the one pack started unalinged.
 Here's that browser page that opened up myself.
 I was gonna get in.
 Okay, I'm gonna just, I'll leave this up and running for now.
 Okay, so the next one.
 Optional.
[00:42:02]
 Here's the start script again, but here I'm running a script.
 Here I'm running a script.
 The closed port script, which will replace this one right here.
 So remember, I made a closed port script for this.
 Well, I'm just replacing it right here.
 And then I'm going to create another script called startserver and again run startserver but
 I'm just going to set it to this. So what does that look like? We're going to go
[00:42:34]
 over here to my package JSON and I'm going to make another script here called start server. That's going to be this one right here.
 Npx node mod. And the location of the file that it's going to run.
 run. All right, so simple as that. And now I'm going to replace this. The one I just made with this one, I'm going to replace this with the script. Nkm run start server. Now I can
 tell what it's going to do. I can almost read it in English.
 It's expecting to start the server.
 This one, I'm going to replace this with the script.
 There I hear.
[00:43:41]
 That's the closed port script.
 So npm run, closed port script. So npm run closed port. Okay, so I just
 basically replace that command with other scripts. I replace those commands
 with scripts. So you can run commands or you can run scripts inside like well these this is a script command anyway so
 I'm gonna try it again. I'm gonna try that try to start the server, but now it's gonna run these scripts
 Can you go back here stop the server?
 here, stop the server, and I think I'll do it in the other one without the debug terminal.
[00:44:34]
 npm start. So remember, start is gonna run other scripts right here.
 There's a command and it's gonna kill the port, the grant. So it's running
 the scripts right here. One after another, that first script was the kill port
 command and then the second script was the node mon command and it successfully did all those two.
 I'm going to close that, but I'm going to rerun it in the JavaScript terms over here.
 While we take a look at the next note, here, build.
 So I'm going to use scripts for the build command but
[00:45:27]
 I'm going to create a right here called start build.
 What will it be? It'll be this webpack.
 That's empty x webpack.
 Watch. And we are using this watch parameter here so we could manually control when we watch and when we don't watch.
 Then I'm going to replace this command with the script command and npm run start
 build. And I'll replace this command here with the script command that's open tab.
 So npm run open tab.
[00:46:32]
 That will open the browser tab.
 So when I type npm run build, it should open the browser tab and it should start
 webpack or start the build. So I'm going to do that in the terminal right
 now. I stopped Webpack so I'm going to type in the command and
 Pm run run build. Okay so it's it ran it's running these two scripts, the open tab and start build.
 Right here, open tab and start build.
 So this is the open tab command.
[00:47:20]
 It opens the browser tab here.
 That's why it stopped right here because
 this browser tab is just opening up. I'm gonna press play and then we should
 see that browser tab finished there it is and you should also see that the webpack started with this command.
 So the webpack started right there.
 One useful thing.
 So I'm going back to package JSON.
[00:47:58]
 Now it's starting to get a little bit crowded.
 One thing I'd like to do is just put a separator here.
 I'm going to put a separator.
 So I can see which ones are my main commands and which ones are my sub commands.
 So it basically looks like a script, but I just put dashes in it.
 It looks like a divider.
 So now I can just focus on these two.
[00:48:29]
 These are the only two that I really need to run.
 And then if I want to get more information about those port,
 then I can just come here.
 Oh, yeah, the closed port is running this command.
 If I want to see more information about the start server,
 I can come here and say, "Oh, okay, this start server is running this command. If I want to see more information about the start server, I can come here and say, oh, OK,
 this start server is running this command there.
[00:48:57]
 OK, I think that's good.
 Let me see what else is coming up next.
 Okay, let me see what else is coming up next. Okay, yeah, so I think we can take a break.
 Any questions here? Thumbs up if you got it.
 Thumbs down if you don't.
 I'm going to start up a break now. Let's see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 All right, so now we're back from the break.
[01:00:24]
 All right, so now we're back from the break.
 We're going to talk about some quick TypeScript topics here.
 And this is to address some things that you've been,
 you might have experienced while converting your capstone.
 So, like if you're trying to import an image, you might see a problem with that, or a TypeScript problem. And the way to fix that is with a declaration file.
 is with a declaration file. And so declaration files inform TypeScript of data types that were not defined in the end with dot d dot d t s. So copy this here.
 And I'll show you what I mean about this. Okay, I'm going to share my screen now.
[01:01:47]
 Let me just copy this here.
 I'm going to paste this into the TypeScript notes. So this one's TypeScript here. This one's about Declaration Files. So let me show you where the problem is or where the TypeScript error happens.
 Well, let me mark these first code here.
 Okay, so that looks good.
 I'm going to look at this one here instead.
 Okay, so I need to demonstrate what this looks like.
 What the error looks like. Let's see, do I have a start command here?
[01:03:16]
 Yep.
 Yes, I do.
 It's starting the server webpack server.
 Dev server.
 And I need to pull up one of my components here. Okay, so I'm just going to pull up the home.
 That's the fastest way to do this. So, if I tried to import an asset, so let me see,
 I don't have any assets folder,
[01:03:54]
 so I'm gonna create one right now.
 And I'm just gonna copy something
 from another project.
 In the second here.
 All right, so there's something there. I'm going to load this right here.
 So there's a picture, a JPEG picture.
 If I try to import it here. New Year 2025 JPEG.
[01:04:53]
 There's nothing wrong with the syntax here, but TypeScript, this is a TypeScript error. Source is declared, but its value is never used.
 Let me, I can, I can work with that right now.
 So, let me just put this, an image right here, and provide a source.
 By the way, this is going to be a string, and it's just going to contain the path to the
 picture.
 But it's just a nifty variable right here.
 So it doesn't make this all messy with the path.
[01:05:37]
 So let's see what's the problem now.
 Cannot find module.
 Okay, so it's, so this is a Type TypeScript error right there, T-S, TypeScript
 error number 2307. So this is not really a module right it's a it's a jpeg file but this is
 this is syntax that webpack uses Webpack allows us to do this.
 This is not really something that you can do in JavaScript.
 So that's why TypeScript is saying, hey, this is not a module.
[01:06:18]
 So this is how we get around it, because we know this code works.
 So we just need to tell TypeScript that it works and it's okay.
 So what we need to do is create index.d.ts in the root folder.
 So I'm in the sandbox right now. So the root folder of the sandbox is sandbox level 4.
 It's going to be right beside this index 8
 female file. You can call it whatever you want as long as it ends with.d. Next, what I want to do is add the Clare module.
 Oh, okay, this one, so this star right here is like a wild card for this means basically
[01:07:42]
 any file that has a dot jpeg extension. So here
 I'm back in index dot d dot ts is the declaration file that's what the d stands for.
 So I'll put here TypeScript Declaration file.
 declaration file. And this one is
 I'll put a note here.
 I'll actually just copy these into it. The declaration files informs TypeScript and data types that were not defined in the source code.
 So this is like a, you know, we have to tell TypeScript that this is a valid piece of code here. Our name is mustn'twould.ds and I'm going to put here the
[01:08:53]
 clear module and every file that ends with.jpeg.jpg.g. G there is gone now.
 TypeScript there is gone.
 So TypeScript sees that any file that you're importing
 that ends with dot JPG is OK.
 And TypeScript is going to let it pass.
 You're basically informing TypeScript that this is okay.
 So I'm going to copy this files and other assets can be imported.
[01:09:52]
 So, you want to add declarations for other asset extensions.
 So, it's just gonna copy this. So there's gonna be like PNG.
 If I get a PNG file, maybe a MP4 for the videos. So yeah, I think that's good enough.
 Those are the only ones I've been using. So, yeah, I think that's good enough.
 Those are the only ones I've been using.
 But if you ever try to import something, an asset, if you ever try to import an asset and
 you see a TypeScript error, that's because it's not inside of this declaration file, just basically add the asset here.
[01:10:53]
 Add asset extensions here.
 Okay, you got that. Any questions here?
 Thumbs up if you have it.
 Thumbs down if you don't.
 Okay.
 Next one.
 All right, so when you're converting your capstone, you might see errors like this.
[01:11:28]
 Areas like this basically some built-in JavaScript modules do not have
 TypeScript support so this one's happening because of async
 But it happens with promise also
 I'll show you what it what I mean here
 Just copy this first. I'm sharing my screen now.
 This one is for TypeScript.
 TypeScript notes.
[01:12:12]
 I'm going to put it right here.
 I'm going to use Section 4.
 OK, so I'm going to show you what goes on.
 So I'm going to show you what goes on. So I'm going to put a code sample.
 And here's another sample. Okay, let's see here. If I just create a new module, you'll see it
 happen. I think I just make make a temp module here.
 I have one.
[01:13:07]
 I have a temporary module, so I can just demonstrate this.
 Like if I'm going to make a function, an async function.
 My function.
 You see there's an error, or there was an error there.
 It's going to come back.
 Usually comes back after I do some typing.
 There it is.
[01:13:37]
 An async function or method and ES five requires the promise constructor. Make sure you have a declaration for the promise constructor.
 So it's not really clear how you would fix this.
 So I'm just going to show you how to fix this the easy way.
 This also happens if you try to make a new promise.
 And I'm just going to put a call back here.
 That callback is going to be a empty function.
 Just so you can see that it's valid.
[01:14:25]
 So we see another problem here,
 promise only for it to a type,
 but is being used as a value.
 So this means that it thinks promise is not a class.
 TypeScript doesn't know that promise is a class in this case.
 So there, see it keeps coming back. It keeps coming back.
 And it's gone again.
[01:14:54]
 It's like a cat make up its mind.
 But when you start typing something, it comes back.
 So the way to fix that, well, what we did was we observed type trip areas when using
 async and promise. We put new words or tactics around this. And then we need to install at types node.
 And then I should fix the problem.
 Don't worry about these long error messages.
 All you have to do is install pnpm install app types node because this is the S because the promise and
[01:15:54]
 async they are you know like from node j s it was only later on that JavaScript was made from browsers.
 So PMPM is called at time node, and that saved them, because our program can run without this.
 And we're not directly importing this with our program.
 It's just there for TypeScript support.
 These errors are gone now.
 Seeing this is here.
 Okay.
[01:16:36]
 All right.
 Did you guys get that?
 Thumbs up if you did.
 Thumbs down if you did, thumbs down if you did.
 Okay.
 All right, so now we can get into our new express topics. And the last time yesterday, when we left off, we were establishing communication between
 our front end and our back end.
[01:17:17]
 So front end is basically, you know, we got that started in sandbox level four. That's our front end. And our back end
 right now is the express template. This will be notes that you put in express.md.
 So let me see if I have those notes first before I copy this. Yeah, I have these notes, but I don't have that sample code, so I'm going to put that sample code to.
 The sample code is just basically fetch and then the URL here, localhost, 8,000. That's for my back end is listening on. So create a So I will, I think that I make them already. Yeah, I called it server.
 So I created a react component for this.
 I called it server.
 Let me see what other ones here.
[01:19:19]
 Okay so these are all, I've already marked the ones that are code.
 So from componentDidMouth, send a fetch request.
 Oops, I need to fetch in here.
 OK, so you should already know how to set up faces here.
 You need use effect to set up the component did mount.
 And know the dependencies so that it gets called only once during the mount phase. I'm going to create an inner function called component_id_mount.
 Okay, let's see what it's supposed to do.
[01:20:16]
 Send a fetch request.
 Okay, so it's not just any fetch request. I'm supposed to send it to my server.
 My server is at localhost.
 HTT, you have to put the full thing here.
 And I'm going to put the path, which is that forward slash. That's the path path that's a home path or the new path
 we put it here to so there's no confusion so it includes the domain and then the path forward slash.
 And if we try to use async in a weight here, because send the fetch request, observe async,
[01:21:16]
 and await cannot be used in component-did-mouth.
 So it'll punch this.
 But we're trying to put async here.
 So watch this, but we're trying to put a sink here.
 It's a TypeScript error.
 TypeScript error number 2345. Promise is not assignable to type void or de-structure.
 So, when you return, when you're in one of these phases here,
[01:21:48]
 if you return, when you're in one of these phases here, if you return a value,
 if you return a value, that's, the react is going to look at that and say, "Okay, that's what you want to do for the un-map phase."
 Right? You have to return a value for the un-map phase.
 So that's what this destructor is for the unknown phase.
 Or either return nothing, that's void.
 Or return a destructor or a function for the unknown phase.
 But when you put a sync, it causes the function
[01:22:21]
 to invisibly return a promise.
 That's why it says here, "Promise void is not assignable to this." It's invisibly returning a promise. That's what
 async does. It turns the function into a promise. That's why you can't use this because you're invisibly returning something and
 react to saying you're only supposed to return the unknown function, not a promise.
 So what must you do to get the results of this fetch?
 You do it the old fashioned way. You're going to get a promise from there and then
 you're going to do promise not to then. So that's what, okay, so this is basically
[01:23:16]
 I expect you to know how to do this already. Promise.then, then you handle the response.
 What's going to happen here is going to receive the resolved value.
 It's going to receive the resolve value from the promise.
 So I can work with it after after after it received the resolved value. I'm just going to set three dots here.
 I don't know what that resolved value will look like, so I'm just going to put any for now to get rid of the three dots.
 Okay, so, let's just leave it at that.
 And then you make sure I have my server running.
[01:24:35]
 Okay, so my server is running here.
 I should be able to open the browser for the front end.
 And there's my browser for the front end.
 Let me,
 let me start my back end server.
 And you make sure it's running.
 Okay, so there's one packet running.
[01:25:07]
 Then here's my server is running.
 Listening on low-polic 8000, so that's good.
 So if I click on server, actually I think what I want to do is,
 I want to show that it gets into here.
 And I want to show that it gets to my server over here.
 Okay. All right, I'm going to click on server and it should go.
 There it is.
[01:25:43]
 Here, it's component did mount.
 Now it's going to try to fetch I'll just press play
 okay now I'm in the back end express template
 we see that I went in here and it was listening at this path which is the home path. I'm going to get the URL and it's hooked.
 I sort of skipped any China at the end.
 You can go to the step there.
 Okay, so I'm going to try to fetch for my server.
[01:26:24]
 Okay, now I'm at my server.
 It got the request.
 Now it's handling it.
 Okay, so now I have a URL.
 The URL is just that forward slash.
 But actually it's more like a path.
 And now it's going to send the response.
[01:26:41]
 It's going to send a low world.
 I'll press play.
 I'll look at my front end and I don't see anything.
 When we look at the
 something froze here.
 Let me see here.
 I think I need to open.
[01:27:11]
 I think it's here.
 It's right here.
 I'm just going to press play right now.
 It'll just stop on this debugger right there.
 And the narrow happened.
 Here, this is the webpage and error happened.
 Failed to fetch.
[01:27:34]
 That's the error.
 So what's going on here?
 I'm going to tell you what's going on.
 Before I do that, let me save the response in the state variable and render it.
 Well, I haven't even gotten to that point.
 Observe the fetch error. Okay so I observe the fetch error. There it is.
 failed to fetch. Okay. Gonna fix this. How do you fix this? So remember in level two, we talked about chorus and like when you try to contact an
[01:28:32]
 API, you would get a chorus error and then you had to use a proxy to get around that
 chorus error.
 So, chorus that stands for cross origin resource sharing.
 So basically that's like communication between client and server.
 So, if the requesting domain or the requesting client, in this case it's local host,
 if the requesting domain is not in the server's core's list, so the server is supposed
 to have a list of the cores, then the browser blocks the response.
[01:29:13]
 It's going to, the browser blocks it.
 So what we saw that the client, it sent the request, the server got it, and then it
 sent a response, but then the
 browser blocked it.
 I'll show you that again. One more time.
 Let's refresh this.
 So here is my client.
[01:29:47]
 I'm going to send a fetch request.
 And now I'm in the backend, the backend received it, and it's received a request, and it's
 going to get the URL.
 So the URL is that forward slash. And it's going to send the request. Hello, your path is your
 URL. It's going to send it. But then when I look over here, this is my front end now. My front
 end, I'm just going to press play. It received a response. I'm just going to press play now.
 It didn't even stop here.
[01:30:32]
 It gets an error.
 That's the core's error.
 It's not specifying it.
 It just got blocked by the browser right there.
 Because my client or my website is not in
 the course list in the server.
 Alright, so did I take notes here?
[01:30:58]
 Oh no, take a note here.
 Copy this here.
 I'm going to save this and express, and our express notes.
 Okay, we're going to switch over to my Express Notes now. There is a picture that comes with it but I'm not going to put it.
 So we use the debugger in the back end, and we observed that the server does send the response.
 And we observed that the browser client
 doesn't receive the response.
[01:32:21]
 seed for the response.
 In the next note, how to fix this error? We need to enable cores, again, that sense
 we're across origin resource sharing.
 Basically, we're going to share communication
 between client and server.
 So the core is module. So this course module, so this is a module,
 the course is a module. It allows cross origin resource sharing between client and server.
[01:32:53]
 Let's copy this note and we'll start applying this.
 Okay. Face this into your express notes.
 So this is an actual module there, so I'm going to mark that right there.
 So what we're going to do is install cores.
 And PMPM install cores. This one is not saved yet. We need to import this.
 Add TypeScript support with PMPM.
 Add Type's cores.
[01:34:13]
 have types of cores. And then in the server file or index.ts, we're going to have this code right here. We use to allow cross-origin resource sharing. Okay, we're gonna install the course module here.
 This is gonna, we're supposed to do that in the back end. So I'm gonna switch
 over to my express template.
 Express template. And I'm going to go to available,
 I'm going to open a new terminal and
 PN in Stahlforce.
 Cross origin resource sharing. Okay, so it's installed.
[01:35:16]
 Okay, I'm going to do step two later so that you can see what happens here. indexTSapp.use_chores.
 So, here's the index file.
 I'm going to just put it at the beginning here.
 App.use_chores. So, it doesn't see it here. use for is
 so doesn't see it here no it doesn't see it doesn't see the the module here
 so that's why i need to put
 army and it helps if you put
[01:36:03]
 pnpm install I mean it helps if you put PNPM install at types of cords.
 So that enables touch script support.
 And this is saved them because when I'm going to import at types of cords, we're just
 using it in the background and touch script support.
 So our app will still work without this.
 But we're going to install it to make it more convenient.
 So I'm going to be trying to get this one out.
[01:36:42]
 Let's see what does this show up.
 Okay, well, let me, let me show you, let me try this one more time.
 Yeah, it's not showing up because it's a default important.
 And we try this again, but I'm going to uninstall those app types for now so you can see what happens if you don't have it. The NPM part is all at types of boards.
 So I'm going to manually import boards here.
 Import fours from force. There's the three dots right there.
 The force is declared, but it's valued right now. That's, okay, I'm going to fix that right now.
[01:37:36]
 The force, there it is.
 But it's not doing anything. And it's a function so you need to run it like that.
 Okay, so I'm going to get these three dots out of the way
 by installing at types.
 PN, PN installed at types, force, and that's saved them.
 You should see this disappear.
 Okay, it's gone.
[01:38:18]
 And we should also see here, if I type "course",
 we see that it's a function.
 So, time script is telling us, "Hey, you're not doing something right. There's a red line right there."
 It's not asking for a callback. It's asking for executing something like that.
 something like that. Okay, so this one allows us to have a cross-origin resource sharing with a server. Now let's see what happens if I refresh this. But let me just check this really quick.
 Observe the front end.
 And it clicks that type of, we see this server response.
[01:39:18]
 Okay, so if I refresh this, we should receive a response.
 Okay, so here's the fetch request. So if I refresh this, we should receive a response.
 Okay, so here's the fetch request.
 I'm going to press play.
 And now we're in the back end in the handler.
 It's going to have that URL.
 That URL is a slash.
[01:39:41]
 And now we're going to send a response.
 Hello world.
 Press play. and now we're going to send a response hello world press play and then
 gonna see this I'm gonna press play there it got into handle response and
 we have a resolve value what does that resolve value look like
 It looks like this, but it doesn't have what you would use in the use. What we usually do when we receive a response from fetch, it's going to have a resolve value,
 but we have to get the text of it then you will see it here if I
[01:40:29]
 don't see it any longer resolve value not text yeah it's there and that's
 going to be actually that's another promise.
 Please see here because suppose we turn the promise.
 We can't see it while we're in the B-logger moment.
 But that's going to return a promise.
 It's going to return a promise here.
 And then
[01:41:27]
 Then handle
 Results, I guess that's what I'll call it
 And will result That one's gonna receive a resolve value remember a promise
 returns a resolve value. Remember a promise. Return say resolve value. And we're going to take a look at what that resolve value looks like.
 And I don't know the type of that.
 We're going to say that's any or now.
 I'm going to just reset this.
[01:42:03]
 Okay.
 I restarted this front end.
 It's restarted, and now it's it just mounted.
 It's going to send the fetch request.
 There's the back end.
 It's going to get the URL.
 It's going to send hello world.
[01:42:22]
 And then I'm going to then the front end. It receives it right here.
 You're going to press play.
 And then we're going to get a we're going to try to get the text from that.
 And then we see that there's a promise here. It's a promise pending.
 And we're going to, when that promise is done, we wanted to handle a call this one.
 All right, so now we're gonna receive a log value. Can't point to see
 there it is. It's a string. It's a string. You see that? So I can change this
[01:43:16]
 here. Alright, so what do I want to do with that? I want it to appear in this somewhere here
 response. I'm going to serve your response. So I'm going to make a state variable for that. Use state and then I'm going to,
 I know it's going to be a string.
 And I'm going to the structure that two-hole here,
 save it in server response and set server response.
 As my center, I need to import this one here.
 Okay, so this one's going to come in as a string.
[01:44:26]
 There it is.
 So what do I want to do with the string?
 I want to save it into my server response.
 So set server response.
 That resolve value.
 I want to save that and then it's going to render that
 server response right here.
[01:44:52]
 We're going to follow this step by step.
 I'll save that and then refresh this.
 and then refresh this. Okay, all right here we go again. We're gonna fetch from the server. We're now in the server and it's got the request. It's gonna get the URL.
 It's gonna send us hello world and it's going to tell us what the URL is.
 And then we are, here's the front end.
 Front end is going to convert the response to text right there.
 And it's still after it's going to receive a promise and then we have to handle that promise
[01:45:57]
 for that result.
 And now we're going to get that result value which is hello world. Your path is, you know, not forward slash.
 It's going to save it in the state variable.
 And then that state variable is going to get rendered right here, right under server.
 Maybe I should put it side by side so you can see it happening.
 And press play. and put it side by side so you can see it happen.
 And press play. All right, there it is.
[01:46:31]
 It's just rendered right there.
 But we see the HCL.
 And that's supposed to see that.
 It says your path is the forward-classament as a pimp right there.
 But it looked fine when we did it the other way.
 When we did it with this one here, see, this one is fine.
 When we contact it directly with a browser, it looks fine.
[01:47:03]
 I'm ready to refresh this so you can see what happens.
 See, I'm refreshing it.
 I'm contacting it with the browser.
 I'm not using my front end, right?
 Here's the back end.
 It's got the request from the browser.
 It's going to save the URL.
[01:47:21]
 The URL is, you know, that forward slash.
 And then it's going to send hello world.
 And this browser gets a response.
 And it looks fine.
 But when I get the response from my front end, it's a string.
 I can see the 8-0 element there. So there's a problem there. So let me re-so we did observe that the front end response after we enabled cores or cross origin resource sharing. Then we
 processed that response. Right, came in the response came in. That's what it means. We
[01:48:20]
 enabled our server to have cross origin resource sharing.
 And then the browser said, OK, you have cross origin resource sharing.
 OK, I'm going to let this through and the client got it.
 Let me see what's coming up next here. Okay, I think I could go over the next slide because this is going to make things a little
 bit easier. front end. That's confusing. Also, axios. Axios is a module that's more popular than the built-in
 fetch module. So we use fetch, right? We use that fetch command or that fetch module to
 communicate with our back end. But there's another module called Axios.
[01:49:29]
 And that one's more popular.
 And I think it's easier to use.
 Let's try it out.
 And you'll find out why it's more popular than using that
 that's--
 So, copy this and share my screen slightly just for the, it's actually for the front.
 We're going to be using this in the front end, but it also works in the back end too.
[01:50:36]
 So we're going to install Axios, not in the dev dependencies. We're going to actually import it from our main app.
 Use the get method.
 We're going to use the get method instead of fetch.
 And then we'll observe the usage differences.
 So this is going to be in our front end.
 Because we want right now we're using fetch here.
 This is our front end. We're using fetch right here. But what I'm saying is, hey, there's something, there's axios. We can use axios
[01:51:12]
 and that one is more popular and you'll see why. So I'm going to follow these instructions here. PNPM install Axios.
 This is my front end.
 I'm going to open the new terminal and leave my webpack running there for my DevServi running.
 So PNPM install XOs.
 Going to put this in the dependencies, not them dependencies, but the
 NNC's because we're going to import this into our app.
 It's done. I'm going gonna close this terminal since I've already installed it.
[01:52:07]
 The good thing is it comes with time script support.
 So what I'm gonna do is I will just come at this out and remake it because it's going to be slightly different,
 but I want to leave this just for reference.
 This is how it looks when we use fetch.
 Let's see how it looks when we use Axios. So, const promise because axios also returns a promise.
 You see it here, it has TypeScript support.
 So I can just click here and then it automatically imports it at the top. The instructions say use the axios get method instead of that. So it has a get
[01:53:11]
 method here. There it is, get and then I'm going to provide the held right here, HTT, the host, 8000, and then I'm going to put the home
 path or the path right there. We're going to do the promise. Then, handle response.
 Okay, and I'm going to create that here.
 Handle response.
 And it's going to receive a result value.
 I don't know what the data structure or the data type will be. So I'll just put any
 and the response there. Now it matches. I'll put a debugger in here so we know what we're working with. Okay, so we're restarting.
[01:54:29]
 Let me try that again here.
 So we can see it coming in from here.
 And here it's all refrices.
 Okay, so it's going to use Axios to send a request. Press play and press play.
 That end is here. I think it got stuck. Let me just start over it right here. I'm gonna start over
 refresh
 Okay, so I'm starting over. There's there's the request
[01:55:16]
 It's been received by the backend gonna get the URL and
 Then it's gonna send hello world
 I'm gonna go back here to the front end. All right, it's going to handle the response.
 Okay, there it is.
 There it is.
 So we have a result value.
 This result value, it already has the data right here.
[01:55:43]
 You see it has a, there's a hello world right there.
 Result value.data, that's the string that we need.
 So I can put here the response
 is result value.data.
 You will see that this, you can see it here. is resolve value dot data.
 You will see that this, you can see it here. You see the resolve value has a data property,
 and that's the string.
[01:56:15]
 So this resolve value has a data property,
 and then we store the string in here.
 And then we can set the server response
 to that response that just came in. And we could watch it in action now.
 You're going to press play.
 Start over.
 Okay, here it is.
[01:56:42]
 You're going to send the request.
 It's going to get the URL. It're going to send the request.
 It's going to get the URL.
 It's going to send a Hello World.
 This is the backend right now.
 And going back to the front end, it's going to handle the response.
 There it is.
[01:56:59]
 It received those response.
 In the response variable here, I'm going to store the data.
 All right, so there it is.
 There's a string right away.
 So less steps.
 Less steps and fetch.
 And then I'm going to set the server response state variable.
[01:57:23]
 And we should see it rendering. We should see it rendering on the page.
 In a press play, there it is. That's, we got this using XOs.
 It took less steps, right? That's part of the reason why it's more popular.
 Okay, so now it's time for a break. I'm gonna stop the, stop this slide.
 And then I'm gonna start the break.
 See you in 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back for the break. And now, you have time to work on your assignments.
 But I'm actually issuing a new assignment today.
[02:08:58]
 You had one week for the previous assignment.
 And you'll have one week for this new assignment. Capstone back end. Start adding a back end to your Capstone project.
 Oh, there's a typo there to your Capstone project.
 Start adding a, that start adding a back end to your Capstone project that supports TypeScript.
 So the first step, create a branch in Capstone Level 4 for adding a backend server.
 So you just basically create a branch first.
 And then in that branch, create a folder called back end at the root of
[02:09:47]
 capstone level 4. So I'm just going to show like an example here.
 Let's just
 Let's just pretend that this sandbox level four is my
 Is my capstone. Let's just pretend that's my capstone
 Create a folder here in the route
 Right here next to next to source folder a credit folder called backend
 Here in the root
[02:10:41]
 Okay, that's what that means then in the backend folder properly add the backend template
 With type script support so we've been working with a backend template, right? That express template, that's our backend template.
 Just add the code that's inside that template,
 add it to the backend folder here.
 And that's it, you're done with that branch. Next, create a branch for establishing
 communication between front end and back end. So what we call that branch, I'm not sure,
 but maybe you call it communication. You're just just gonna create a branch first.
[02:11:25]
 And then this is instructions what to do in that branch.
 In that branch use Axios
 and a React component to display a backend response.
 Just like what I did today,
 I have a server component and I displayed a backend response.
 I displayed a back end response.
 I displayed a response from the back end.
[02:11:51]
 And I use axios to do that today.
 And then that's, if you, once you finish that,
 you're done with a branch.
 And every time you finish a branch, make sure the merge a branch to main whenever the branch is done. So the next step, create a branch for moving front end files.
 So just, that's just a, just create a branch.
 You can call it like move front end files.
 You can call it like move front end files.
[02:12:29]
 And then in that branch, create a folder called front end.
 That's gonna be next to your back end. Sorry, I didn't put that in here.
 Create a folder called front end and move front end code into it.
 That front end folder should be next to the back end folder.
 So it's part of the root folder.
 So just to make it clear
 that front. So if you're gonna make a folder here, it's gonna be a back end folder right there and a
[02:13:01]
 and a front end folder next to it or adjacent to it.
 So there's a back end folder and front end folder.
 But this is sandbox and I'm not going to do it in the sandbox yet.
 I'm just going to delete this for now.
 Basically, they're adjacent, and they're both in the source or the root folder.
 They're both in the root folder.
 And so in that branch, you create a folder called front end
[02:13:42]
 and move front end code into it.
 So you're going to start moving all your front and code into that folder.
 Then when you're done, merge the branch domain whenever the branch is done and then push and the branches to GitHub. Tomorrow I'll walk through this process.
 But in, but with the sandbox,
 I'll walk through this process with sandbox level four.
 But this is, you know, this is, you're going to do this with your capstone.
 Okay, so now I'm going to start the breakout rooms. You have one week to finish that assignment, just like you have the, you had one week with the TypeScript one.
[02:14:35]
 The TypeScript one should, shouldn't take that long. You're just basically renaming files and adding TypeScript configuration. If your capstone project was working for rendering,
 then it shouldn't have any problems just converting it to TypeScript. Just rename you the files
 and just editing the webpack a little bit and Babel. So, I't take that long to finish the capstone
 TypeScript.
 But I'm gonna start the break our rooms now.
 That'll be open for 35 minutes. I'm just gonna put everyone in a room right now.
 And I'll check who's up next.
[02:15:34]
 Okay.
 So it looks like David is up next.
 Alright, so it looks like David is up next.
 There's only two more days for the mini evaluations that this day and Saturday.
 And I have three more evaluations to finish for this week.
 Next week is going to be a new set of evaluations, mini evaluations. So David, I'll meet you in the breakout room
 while everyone else get working on your TypeScript. If you're still doing that or work
[02:16:14]
 on this new one, capstone backend. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 All right, so I need to finish the mini evaluation with David. Again, there's two more days for the many evaluations this day and tomorrow.
 So I'm going to make myself available after class if anyone wants to take advantage of that
 But so the breakout rooms are done and
 then conclusion
 We finished that front end communication with the back end and we used
 Axios instead of fetch
[02:51:24]
 And we did some other things with TypeScript and with the scripts,
 like combining scripts and let's see what else.
 Oh, yeah, the declaration file.
 I forgot to put that in here.
 So there's two minutes.
 If you haven't taken attendance, make sure you mark it.
 Other than that, class is dismissed.
[02:52:00]
 That's today's lesson on Express.
 I still need to finish the mini evaluation with David,
 but I'm gonna be available after class for anyone else
 who wants to finish their,
 about mini evaluation or make corrections. Okay, and breakout rooms are open.
 David, I'll see you in thereause ]

///// FILE: "Level 4/transcripts/Mar 22, 2025 13-24.txt"

Transcript from Mar 22, 2025

[00:00:00]
 Good morning class. Welcome to Codex Academy level four week two day five and the theme of this week is Express.
 Today's agenda is to take attendance to announcements review.
 I think we're just going to go straight into Express. I forgot to update this page here.
 We're going to go straight into Express in the first hour and Express again for the second hour.
 Then in the third hour, you'll have time to work on the assignment or do a mini evaluation.
 Okay, make sure to head on over to your codecs account
 and to mark your attendance.
[00:00:57]
 If you're here right now, then you can mark yourself present.
 But if you arrive 15 minutes or later, when class starts at 6.30, I mean, that's 6.30.
 10 o'clock central.
 Wait, is it 10?
 Or is it, I mean, for me it's 7 a.m. For you guys, I think it's 9 a.m. Yeah, 9 a.m. over there. 9 a.m. central.
 So if you arrive 9 15 or later central time that's counted as late.
 Okay, so now time for announcements.
[00:01:54]
 Let me just share my screen. Okay, so these are the same announcements as before.
 We have a regular schedule where we have evening classes during the weekdays and morning classes on
 Saturdays. There won't be a class on Memorial Day but we I think we might
 finish before that. That's there just in case.
 that's there just in case.
 Turvey is still in July cohort. Make sure you fill that in.
 I also see there's a question here in July cohort.
[00:03:07]
 in July cohort about a web page
 just spinning forever and not loading. I demonstrated that in class,
 it happens because the server that we made
 was not programmed to respond yet.
 We were just making our server.
 But then when we got our server to, when we program our server to respond, that's when the web page actually loads.
 should be fine. We eventually updated this to use node_mod.
[00:04:14]
 And this part looks right. They should be running in separate terminals. Okay, so Alexander, you're still having errors. Is your server responding?
 Is it using the response object and using the send method?
 Yes.
 Okay, well, maybe we can take a look at it while we're here. using the send method? Yes.
 Okay, well, maybe we can take a look at it while we're here.
 I'll let you screen share.
 Okay, make sure you're not using live server for this because think of your backend as an API.
[00:04:50]
 You don't use live servers or contact an API.
 Response.
 Okay, there's a response.
 It's sending a message.
 You're using port 8080.
 That's usually the front end port.
 You're probably it in matter. I
[00:05:07]
 tell you 8,000 in this one means this one means a port is in use. So you have to
 kill a port. But TCP is using this port., what's TCP?
 The transfer control protocol, it's a network thing.
 Okay, so not 8,000, okay, so 80, 80.
 So you can try to run your server on 80, 80, that's fine.
 Or 3,000 or 9,000.
 I mean, I'll try not.
[00:05:44]
 But if I were't, I'm not.
 But.
 Yeah, so you're getting the same error for other points.
 I tried.
 I had 8,000 first, so I'm going to try 9,000, but I hadn't.
 Yeah, so I had a problem with that too.
 Yeah, so you have to, you need to close the port that's being used.
[00:06:14]
 You can try, I taught the class how to do that.
 You have to, and PnPM install save dev kill port.
 Kill dashboard.
 One word.
 No.
 Well, it's doing something.
 Now it's installing bullshit.
[00:06:38]
 Now it's installing two separate things.
 You can uninstall those.
 Like the only thing that they might exist, but they might be bugs too, so I'll install those.
 People might be creating those packages for people who accidentally who
 don't know or who accidentally put a dash in front and then when they start running it
 Man that makes it
 Okay, so hopefully nothing's actually using port 9000. So NPX kill port.
[00:07:32]
 I've been NPX kill port 9000.
 Did you hear that? >> They are my 2008,000. >> Right now you just tried to run 9,000.
 Okay, now you can run the server and PM start.
 Okay, that says, okay, right, because it says 8,000,
 because your webpack is not on.
 Yeah, you can kill a port 8,000.
 No, not Dev Server. - It just regular webpack.
[00:08:18]
 Okay, let me kill for you.
 - We have a script for it.
 We made a script for it. We made a script for it.
 Check the script for a webpack. So NTM run build.
 And then, yeah, there it is.
 You can't run Dev Server
 because it doesn't create any files.
[00:08:54]
 And we need the files.
 So that's fine.
 Now it's running and then in a,
 what happened? You need that to run. No. We need that to run.
 It's the same. I might have not. Okay. Well, you can,
 um, you can stop it, but you need it to run to update your, your server.
 Whenever you change the code.
[00:09:22]
 So how do you run? Do you have to open a second terminal then? Yes. Ah, okay.
 Then I must have not watched far enough into the notes on that day. Yeah.
 on that day. Yeah. I got stuck in the installation process because I had errors. So I felt behind. It's, I feel like every time we install something, my system doesn't like it.
 And then I get stuck. Okay, so that's, it started. Your server started. Now go ahead and open it to local host 9000 a page open
 a page just manually. Like open Chrome. Okay. Yeah. That's what I thought it was going
 to be. I thought it was automatically going to open the Chrome window so that was also. - Yeah, I discussed that in the, in the,
 I got stuck on this error message.
[00:10:28]
 So I gave up at that point
 'cause I was very frustrated.
 Okay, it works.
 All right, so if you just follow along in the video,
 I'm just kidding.
 - Now, yeah, this is where I got stuck at.
 Now that this works, then everything else will be fine. - Yeah we didn't really do anything differently except maybe open another port because I mean open another terminal.
[00:10:52]
 You've been that was not open another table. Yeah, I did find that out when I did some research yesterday.
 But I had to leave then, so I gave up.
 I was like, yeah, you should put--
 You should put run in front of all your scripts,
 but there's a shortcut for start.
 So that's why I put-- that's why I use NPM start.
 But for all your scripts, there should be run in front
[00:11:26]
 But that makes it there's a short there's a shortcut for start and there's a shortcut for test
 Thank you
 Okay, going back to announcements
 So this one was solved
 the this July cohort was solved
 by I don't know closing the port or opening another
 I don't know closing the port or opening another terminal.
[00:12:21]
 But yeah, there's still that survey here. Make sure you fill it in. If you haven't done so already. This is the last day I'll announce it right there.
 Last day, make sure you fill in that survey.
 Many evaluations, remember, click on the Add Submission button for your many evaluation
 so you could be placed in the waiting
 list and to get graded. That's five points and you should make your submissions on time, to earn an on time point.
 Let's see.
 So I have two more mini evaluations to do,
[00:13:22]
 but usually the mini evaluation takes up the whole third hour of class.
 Do we have any volunteers who wants to go first?
 And another volunteer who wants to go do their mini evaluation after class.
 Right after class.
 Just put it in the chat. after class, right after class,
 just put it in the chat.
 Otherwise, I'll call by the order that's in the,
[00:13:57]
 that it's been submitted.
 Okay, so there was a new assignment.
 I mean, this assignment, the capstone type script was due on Thursday.
 A new assignment was issued on last Thursday also.
 That one was capstone.
 I forgot the name of it.
 It was here somewhere.
[00:14:27]
 Nope, not here. Okay, so we'll see it later on.
 We'll see the name of it, but it was issued on Thursday.
 It's basically for the backend preparing the backend is probably called capstone backend.
 And it's just adding a backend to the capstone.
 Practice problems so make sure that I hope you have these practice problems done
 because they are going to help you moving forward to the next few lessons.
 Markham Green, if you haven't done, but when you mark these green, that's only for your reference.
[00:15:25]
 I don't know if you mark the green or not.
 So if you mark it green, even though you're not done with it,
 you're only fooling yourself.
 So mark it green if you finish the practice,
 and you don't have any questions about it.
 But if you didn't finish the practice,
 or if you have questions about any of these practices, don't market green.
[00:15:54]
 And then go through your days and order.
 Only market green after you've taken notes and after you've asked all the questions that
 you had for that day. But yeah, you should be all caught up today because we're going
 to work more on the backend and on our express server and you might not be able to follow if it's not working for you.
 So let's see what else. Okay, time to focus. We're going to review. In the review,
 you should already have your notes. You should have already taken your notes, you should
 not be taking a whole bunch of notes during review, you should just be making sure that
[00:16:50]
 the notes that you have match the review and that you type anything new that I mentioned,
 but I mentioned because sometimes during the view review, I mentioned some new
 things. So it makes, you know, it makes sense to watch the review if you're watching
 the recordings, watch the review also, make sure you follow, you can follow it and you understand
 what's going on. And also take notes if I say anything new in the review.
 Sometimes I say something new to supplement what I taught the previous day.
 So, you know, make sure to watch the recording at a better time if you can't focus right now.
[00:17:44]
 Make sure to watch the recording at a better time if you can't focus right now.
 But always make sure to catch up before the next class. Otherwise,
 you might feel like you're wasting your time in the class.
 Because it's just going to confuse you because you're just being one day behind, makes you feel like there's been a time warp and it's like you're in a whole new world and you don't know what's going on.
 So it's always best to be caught up before the next class.
 Alright, so have your microphone ready?
 Be ready to ask questions or be ready for your mini evaluation.
[00:18:34]
 Okay, so that's it for announcements.
 Now time for review.
 Again, if anyone has any questions during the review, just raise your hand.
 But I do expect that you, you're already caught up and you just need some clarification on things.
 So in this review, I'm just going to quickly go over the things that I taught.
 over the things that I taught. Open a browser tab from the CLI.
 So I taught how to open a browser tab from the command line.
[00:19:12]
 We used a module called Open CLI.
 And to run it, you just NPX, open CLI,
 and then you give it the browser address or the URL.
 So let me just give a quick demonstration of that.
 You should have two things open, your sandbox level 4, and you should have your
 express template open.
 Sandbox level 4 is where we take notes.
[00:20:00]
 Express template is where we work on the backend.
 So sandbox level four is here for taking notes.
 Express template is here for opening up a browser or,
 I mean, working in the backend, but also we could run that command. We
 install that package here in the back end. Give it a page to open local host and then it's it's gonna work and it opens something up for me.
 Right here, well, it's not loading anything, but it local loaded local hosts 8,000.
 It's not loading anything because my server is not running.
[00:21:10]
 We also made a script for it called open tab.
 So let's see what that looks like. Here it is.
 Open tab.
 And it's the same command right there.
 So if I wanted to run that.
 I can.
 NPM run open tab because it's going to open a tab for me, a browser tab.
[00:21:52]
 Right there, it opened it open the same one up. Then next, we'd learn how to manually close a port.
 We use a package called KillPort.
 And as with the previous package, the one that opens a browser tab, this one is also installed
 in the dev dependencies because we're not importing it into our project.
 We're just calling it from the CLI.
 So our project doesn't need this to run.
 Our express template doesn't need this to run.
[00:22:41]
 So we install this in the dev dependencies. It's called kill dash port,
 give it a port number. And then it closes the port, which you saw earlier today. And we
 created a script for it called close port. and there's a command right there.
 You can run the command and PM run closeport.
 You need to run to run the script.
 You always need to use the run command but some of them have a shortcut where you don't have to type in the run command.
 So by default, just type npm run and then put the script name. So there's start.
[00:23:38]
 I can run the start command.
 Even though there is a shortcut to not type the run, but I don't want you to get confused
 by that.
 So just basically just type npm run and then the script name until you understand that
 you can only have a shortcut for start and for tests, which I don't have here.
 But we'll set it up later today, hopefully.
 Okay, so we also learned that we can run multiple commands from one script using the N symbol, double and. And not only that, we could also run scripts from our scripts.
[00:24:38]
 So this is a script that runs a command. Or here, this is a script that runs a command right there, but this is a script
 that runs a script. NPM run close port. So when I run the start script, I wanted to close the port
 and then I wanted to start my server because there was an issue before where the port was,
 because there was an issue before where the port was. I'm just getting error saying that the port was already used.
 So I'm using the script to close the port first and then run the server.
 So npm run start.
 I'm going to run that start script.
[00:25:23]
 It's going to close the port first.
 There it is. And then it's going to run the server.
 It says open a new terminal and run NPM run build.
 I should change that's the entire. So I'm going to just change that really quick.
 Open a new terminal and type.
 NPM run build.
 Okay.
[00:26:03]
 So it's not going to update this because this server depends on main JS and main
 JS is not being bundled right now.
 I'm going to open a browser tab for me,
 and it's going to start webpack. It's opening a browser tab and it opens on my other window here.
 Let me move right here.
 Open CLI and then open this browser tab and then it ran Webpack created a new main.js, this one restarted.
 And now it says type npm run build instead of run npm run build.
[00:27:36]
 Again, this one is using main.js whenever there's a change to main.js.
 This one restarts and we see the changes reflected here
 Okay, so we also made a declaration file called index dot d dot t s
 And we use it to
 remove those TypeScript errors whenever we try to make a asset, asset import.
 This one is for the front end, we are importing assets into our components, right?
 Well, if you do that, TypeScript says, "Hey, you're not allowed to import assets."
[00:28:36]
 But we are allowed because what packed lets us, so we just need a teletype script that it's okay. And to do that, we create index.d.ts,
 next to the index HTML file in the root folder.
 And then we add the assets that we have, but we need to put this wildcard.
 This basically means anything that we try to import that has a extension of jpeg or png or mp4
 that those that TypeScript accept them. If you don't do this, then TypeScript will say, It's not usually to import assets.
 Because that's not normal JavaScript syntax.
 But because of Webpack, we're allowed to import assets.
[00:29:37]
 So we just need to tell TypeScript that it's okay.
 And this is what this does.
 It makes TypeScript stop saying that it's an error to import assets.
 Okay, and we also installed at types node in the the dependencies because we are getting
 TypeScript errors whenever we use
 async or a promise at types node.
 Well, because we get these errors,
[00:30:21]
 these TypeScript errors because
 TypeScript doesn't know about promises, and
 it doesn't know about async.
 Because that was a node thing, and we did have TypeScript support for node.
 So we installed this, and then it all of a sudden, it removed these async errors and promise errors. Basically it
 gave TypeScript information it needed to work with promises.
 And then we were able to access the back end from the front end using the fetch command.
[00:31:07]
 access the back end from the front end using the fetch command. Basically, we just fetch and then put the back ends address there. We had to do that from component did melt.
 But I also showed that you can't use async and await and component did mount.
 At least not directly.
 So we use the then method instead.
 You need to, when you run this fetch command, capture the promise on the other side and then use the then method of that promise to
 get the resolve value. When we tried to do that the first time it was blocked.
 We couldn't fetch. That's because of cores. So I reviewed with course met cross origin resource sharing.
[00:32:09]
 Basically allows a server to communicate with a client, but our backend server was not
 configured with cores or our back server was not configured with cross origin resource sharing. It was not configured to share its
 resources or its responses. But we did see that our client or our front end
 was able to send the request and our back end received it and it tried to send
 the request but then the browser blocked it.
 And then we configured our backend with cross origin resource sharing or cores.
 We installed a package called cores and TypeScript support that's at types, cores.
[00:33:06]
 Then we use that module with this code right here, app.use,
 and then cores.
 You have to activate it because it's a function.
 And then after we did that, our front end was able to receive the response from the back end because finally our back end was configured with cores, cross origin resource sharing.
 So it was allowed,
 or our front end was allowed to receive the response.
 And then we use Axios instead of fetch.
[00:34:10]
 Axios is a module that's more popular than the built-in fetch module. Remember, we use the fetch to communicate. We use the fetch function to communicate with the backend.
 I introduced this one, this Axios to replace fetch.
 And it was a lot easier to use it.
 It's, uh, we installed it here in dependencies, not in depth dependencies,
 because we directly import this into our front end.
 And we use the get method of axios instead of the fetch function.
 So I'll show you this.
[00:35:00]
 So here's component did mount using the ax-- well, we imported here Axios.
 It's a default import. We could name it anything
 we want. We could even name it fetch, but we would just confuse ourselves.
 You can call it my fetch if you want. But I'll just call it Axios because I know what it is it's a fetch replacement. So axios and then
 use the get method and then the URL that returns a promise. So here's the
 promise. We use the then method right here. We use that then method.
 You call this callback when the promise is done. When you get into this callback,
[00:35:54]
 it receives a resolve value. That resolve value has some data. And that's what I serve into, that's what I save into a state variable right
 here. That state variable gets rendered right there. So. I can use, I can use Dev Server for this. Or I can just
 npm run start. Or the shortcut is npm start. But remember, all scripts should have run in front.
 front. This is a shortcut to not put run for the start script. And if you don't have this debug here, if you don't have this, then you can just manually open the page to whatever your front end is.
 Or you don't use Live Server because Webpack Dev Server
 is already a server. You're just gonna have two servers conflicting
 if you open Live Server.
[00:37:22]
 If you don't use this feature here, like I do, to open a web page, you can set up your
 webpack to open a web page for you.
 That's, where is it? Webpack. You can set it up to here. Open True. For me, I don't want it to open up
 the web page for me, because I do it like this.
 So if I go to the server page,
 this is a response from my server,
 which is not good because I can see the H1 and the P tags here.
[00:38:33]
 So something needs to be fixed. All right, now we can get into the new topics, express topics.
 We're going to continue where we left off.
 Our front end received a response from the server, but the response
 shows HTML tags. Okay, so before we even fix that part, we're gonna fix our folder structure for the backend.
 So folder structure for the back end routes.
 So we'll create a separate file for each path,
 also known as routes.
[00:39:15]
 So path are also known as routes.
 And we'll match the file name with the path and the function name.
 So I'll show you what this means, just copy this.
 We'll put this into our sandbox notes for Express.
 I'm gonna share my screen now.
 Okay, so I have this copied.
 OCR that and then copy the OCR, paste it into the Express Notes.
[00:40:27]
 Here they are. Use the Express Notes.
 You're going to put in a new section here.
 Fix these bullet points. Okay, so I guess I could put a sample here, a code sample, but it's basically folder
 structure.
 And this one is its bash, or think well, let me just we have a
 folder structure for the backend so that's express template
 and then it has a
[00:41:32]
 It has a source folder. That source folder will have routes. And let me double check what the slide looks like.
 Force, routes, and then index.ts is on the same level as routes. Let me see if I put bash here.
 Okay, doesn't do anything.
 Okay, so we'll create a separate file for each path.
 What does that mean?
 It means going to go to the back end because we're going to work this is in the back end.
 So we have a path here that's's the Home Path or the Boot Path.
[00:42:49]
 We're going to create a separate file for this.
 Instead of having your handler inside of here, we're going to create a separate file for
 this. We're going to, so these are the steps create a routes folder in the source folder.
 So I'm going to, this is the backend.
 I'm going to create a routes folder here.
 That's where I'll put all my routes. In routes create a file called root.ts.
 So here's routes. I'm going to create a file called root.ts.
[00:43:37]
 That's to represent this path here, the root path.
 Suppose I represent that, but I can't name a file with this symbol, so I'm just going to call it root.
 Next, move the handler code into root.ts.
 Okay, so I'm going to move the handler code into there.
 There's my handler.
 Going to move it there. And name the function root.
 So I'm going to let the function name match the file name.
[00:44:38]
 There it is.
 Now I need to fix all the errors.
 Now I need to fix all the errors.
 I'm going to fix these errors now.
 So handler is actually I need to export this first.
 Export.
 Yeah, I got that exported for now. so I can import it right here.
[00:45:07]
 So instead of calling it handler, it's called root now. And then let's fix the other errors here.
 There's an error because this is the wrong one.
 This is the built in request.
 We don't want the built in request here.
 This one's built into node.
 We want the request from Express. This one right here. This one is built into node. We want the request from Express. This one right here.
 And we want the response from Express. This one right here.
[00:45:56]
 That's why we had that error. But now we don't have that error here.
 It was using the wrong types. It was using the built-in types. We don't want the built-in
 types. We want the ones from Express. So I'm assertive that this request object is going to be
 the request type from Express. And this response object is going to be the response type from Express.
 There's no more errors, so that's done.
 We finished this part here, but I'm going to fix the error here. This is the most paste there.
 And I'll just put some back chicks around there.
[00:46:50]
 So it's easier to see.
 And back chicks around these.
 So it's easier to see. Okay, so I think I've highlighted all the keywords here.
 So this is what it looks like. So we created a routes folder in the source
 folder. And then in the routes folder, we created a file called root.ts and then we
 moved the handler code into root.ts and named the function root. The match the file name, which also matches the path.
 The path is also the root path.
[00:47:52]
 So if we look here, where's index?
 I can see that the index is in the other one here. So this root path, I should probably move this now so I can see it easier.
 That's the root path.
 So when this path is visited, this function will run.
 That's what it means.
 And then we'll make another one. Actually, wait, let's see there.
 Okay, yeah.
[00:48:52]
 We'll add a path for front-end clients.
 So front-end clients usually receive data from back-end servers.
 So what we did from our back-end we sent 8CL code. Well, usually
 the front end clients don't receive 8CL code. They usually receive data, like objects and
 data types and things like that. So we're going to create a separate path where we send data.
 separate path where we send data. Home page, that's okay.
 We can, that home page or that loop path.
[00:49:28]
 We can send HTML there, that's fine,
 but we're going to make a new one.
 So let's copy this first.
 We're going to make a new one for
 front-end clients to visit.
 Okay, so just going to copy this, paste it into the notes, express notes.
 And I'm going to put some sample code here in a bit when we understand what's going on. It's going to be JavaScript.
[00:50:39]
 So we want our front end client to receive data instead of HTML.
 Because that's what we got at the beginning, right?
 We got HTML.
 This is my front end.
 When I contacted the server, I got some HTML.
 Front end should be receiving data instead, usually.
 So the root path of the server
[00:51:00]
 can be used for the server page instead.
 So for example, if I go to my server page here,
 which is local host 8,000, then this could be my server page.
 Instead of saying hello world, it can say something like,
 well, I can fix that right now.
 Where is it right here?
 that right now. Where is it right here? And that's my root path. So instead of saying hello world, I'm going to change it to server. Or I call it Express Template, because this is my Express Template.
[00:51:47]
 And then, welcome to the backend page. And your path is that. Okay, so that's fine. So if I take a look at it now.
 When I load local host 8000, that's my backend. I see that it's my backend home page now,
 express template.
 Welcome to the backend page.
 Your path is this.
 If I reload this, I see it again.
 This is from my front end now.
[00:52:48]
 This is my front end.
 I've reloaded it.
 And we see here Express Template.
 Welcome to the backend page.
 Well, the front end should not be receiving HTML.
 It should be receiving data instead.
 and should not be receiving HTML, it should be receiving data instead. So, let's get, we'll follow these steps right here.
[00:53:11]
 And the Express Server and the API path.
 And the route handler called API.
 So what does that mean?
 So we're going to make another path here.
 That's the API path. And the route handler called API like that.
 There's a path and there's the route handler.
 So this was the home path or the root path and then we had the handler called root handle that right here.
[00:54:08]
 Now we have, we're gonna create the API path. That means if we type API right here,
 slash API, it's gonna load something.
 What will it load?
 It will load whatever we set up here.
 So in the routes folder, add api.ts,
 and a function called api.
 So what does that look like?
[00:54:39]
 So in the routes folder,
 add a function called api. So in the routes folder, So what does that look like?
 So in the ROUTS folder, I have a function called API.
 I mean, add a file called API.ts.
 And the function called API. And now let it respond with data only like an object containing the origin.
 So let me show you what that means.
 Actually, we'll take a break and then we'll continue with this after the break.
[00:55:27]
 Maybe you can figure this part out. This one is your route handler is supposed to, so when the API
 route is visited it should run this function. Then you just quickly import it.
 And then we want this function to respond with an object
 instead of HTML.
 Remember, you need to take in a request and a response here
 and then use a response object to reply.
 So we're going to come back to this after the break. [ Pause ]
[00:56:40]
 >> Thanks.
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And we're going to continue our discussion about Express.
 So, we left off with this slide and we made the, we configured the API path to have a route handler called
 API. So let me share my screen now. So we configured the API path to have a route handler called API.
 There it is.
 And then next, what we want to do in the routes folder at API.ts and
[01:08:02]
 a function called API. So we did that also. In the routes folder,
 we created a file called API.ts and a function called API. So it's all matching, right? right, API path, API handler, API file name.
 So we want to let the match.
 Like here match the file name with the path and the function name.
 So this was your folder structure.
 It maps the file name with the path and the function name. So that's what we did here.
 And now we need to get our function to respond
[01:09:00]
 with data only. Okay, so let's go back to that function or our handler. It's going to take in a request object.
 You can look at our root file.
 All right, this is our root file or
 Maroot handler. We can use this as a
 template. It takes in a request and a response.
 This is a request object.
 This is a response object.
[01:09:31]
 But we have to use it the ones from Express.
 There it is.
 And it's going to take in a response.
 The listener is going to give it a response.
 Remember this listener right here?
 It's going to call the function.
 And this listener calls this function here.
[01:09:58]
 Actually, let's see how we can say it.
 So this one tells the listener when this path is loaded, run this handler.
 This method tells the listener when the API path is visited, run the API handler.
 Run the API handler.
 So when listen, when listen runs the API handler, it gives it a request object and a response object.
 And we want the one from Express.
 They need to be imported right there.
[01:10:48]
 With we want to respond with. response object has a send method.
 And we want to respond with some data because APIs usually respond with data.
 So I'm just going to take this one here. There's some data for now. To get from there, I'm going to put it in here.
 That's the data.
 It's an object that says message, hello world.
 If I tried out, I can it with a browser, right?
 This is my browser or the backend.
[01:11:33]
 Express template.
 This is not my front end.
 Localhost 8000, that's my back end.
 If I want to look at what's in the API path, it just gives me that
 object message hello world. And that's what we want because this is the path for that
 API path is the path for front end. We want our front end to visit this path. We don't want our front end to visit the root path. The
 root path is for the web page. Remember, root path is just that forward slash, this
[01:12:14]
 that forward slash, but we made that API path, which just sends an object. Okay, so let it respond with data only like an object containing the origin. Okay,
 so what is that? An object containing the origin. So I'm going to edit this. So data, there's, I'm going to create an object with a property called origin.
 How do I get the value that comes from the request object, which has a headers property,
 which has an origin.
 Okay, so I'm going to show you what that looks like.
 So instead of right now my data is this.
 So const data equals this.
[01:13:24]
 And I'm just going to send the data instead. All right. So I'm just
 going to do that one more time. This data is an object. It has a message property with
 hello world as a value and it gets sent here to, if I go here to the home page of the back end
 server, that's what that looks like. If I go to the API
 API route, it sends refresh this one.
 Okay, so let me see if I have this running proper.
 Okay, the reason why it's not running the debugger.
[01:14:18]
 Remember to debug, start the server in a JavaScript debug terminal.
 So I'm going to stop the server.
 I'm going to put it in a JavaScript debug terminal.
 NPM run start.
 Okay so now I'm going to go back here. If I refresh it should start my debugger. There it is. Now I can inspect the request object.
 Let me just make this smaller. Okay, so the request object is here. I can just type it in.
 Let's see what it looks like. There's the properties of the request object.
[01:15:32]
 But it has a property here called headers.
 Right here.
 So if I do request.
 The headers.
 If I look at the properties of that object, we see it has all these properties and one of them is actually you don't see it here.
 request.headers.origin, wait, you don't see here, because I have to do, I have to be doing it from the front end. So let me, let me run this again, press play. I'm gonna visit that API from the front end.
 So where is my server right there?
[01:16:34]
 My server component.
 So instead of visiting the home page of my back end here,
 I'm gonna visit the API path.
 I'll put a break point there so we can see it happen.
 All right, so my front end is going to send a request
 to the API path here of my backend press play. And now I'm in the
 backend here. Backend receives a request. I can look at the request object. It has a header's
[01:17:18]
 property right there. And it has an origin property.
 The origin is HTTP, local host 8080.
 That's my front end.
 It's running on local host 8080.
 So I'm going to change this data here.
 Instead of message, I'm going to say that the origin is coming from the request object
 right there.
[01:18:01]
 It has a headers property using dot notation. It has a headers property, which has a origin property.
 I'm going to save that and then.
 Okay, so that's good.
 Gonna, I think I need to restart this here. So this is my front end, gonna restart it.
 It's gonna send a request to my backend, the API route.
 Here's my backend, Going to form data.
 It's going to form the data object, which will have a origin property.
[01:18:52]
 And that origin, the value comes from this.
 If I press play, I see that data is an object that has an origin property and the value is a
 CTP local host 8080. So now it's going to send this data to my front end.
 Going back to my front end, right here.
 It's waiting for the promise to resolve.
 When the promise resolves, it's going to call handle response.
 So the promise is resolved.
[01:19:42]
 And I'm going to get the data from the resolve value.
 That data is an object that has the origin property and the property is, I mean, the value is a CTP local house 8080.
 So it's a, this response object is going to be,
 I mean this response is going to be an object.
 Responses now the object.
 We can look at it here so it's a little bit easier to see.
 Gonna look at that response variable.
[01:20:30]
 That response variable is right here.
 So it's an object that has a property called origin
 and there's the value 8080.
 So it's data.
 This is not HTTP anymore.
 I mean, this is not this is not HTTP anymore. I mean, this is not, this is not HTML anymore. So it's,
 I'm going to set the server response to an object. Something's going to happen here. There's
[01:20:54]
 going to be an error. As you can't do that. See, this is the error. Objects are not valid as React child. So basically, I try to save that object here
 and then render it right here.
 That's not gonna work.
 What I could do is this,
 I could put a template string and say,
 this is the server response.
 That one will work. So I'll just press play through all this.
[01:21:37]
 And also I need to press play for the server to respond right here. And now I need to press play here
 to save the response into the state variable.
 So this is the server response object object.
 So if you don't wanna see object object,
 what should you do?
 You should convert this in--
 so this is an object with the origin value,
[01:22:12]
 with origin property.
 You don't want to see object object.
 You need to convert this to a string. So there's the response, uh, stringified.
 I'll just create a, uh, variable called stringified and I'm going to use JSON dot stringify.
 That object. then use JSON dot stringify.object.
 Then I can display stringify instead.
 All right, so I'm going to go through this one more time.
[01:23:05]
 There's the going to make a request to the API route right there to the backend.
 So this is a front end going to communicate with the backend.
 Here's the backend it receives a request.
 It creates a data object.
 And now it's going to send that data object.
 The front end is waiting for that data object.
 When it receives it, it's going to call handle response.
[01:23:35]
 OK, it receives the data object.
 It comes in through here from the promise.
 This promise, it calls the handle response,
 but it also gives it the resolve value here.
 That resolve value has a data property.
 We're gonna save that in response.
 And we've converted that response, which is an object.
[01:24:12]
 We converted it into a string right here.
 Here's the string.
 Then we're going to save it to the state variable, which will get rendered right here.
 If I take a look at it, this is the server response. Origin is localhost 8080. This is my front
 end. We see that the origin is localhost 8080. That's the origin. It doesn't, the origin is basically the domain.
 Origin doesn't include the path right here.
 Okay.
[01:25:00]
 So that's what we did. We let our backend respond with data only.
 That was an object containing the origin.
 This is how this is an object right here.
 It contains an origin property and this is how we got the origin from the request object.
 from the request object.
 Okay, did you guys get that? Thumbs up if you did.
 Thumbs down if you didn't.
[01:25:42]
 I need to go over that again.
 Have any questions?
 We need to rewatch it.
 Which do you need me to go over what's going on or one more time or just move on to the next.
 Just looks like a lot.
 Let me just get the flow here.
 So get the flow.
[01:26:30]
 Here's the flow.
 Starting from the front end. This is my front end. This is my react component.
 I'm going to set a request to my back end.
 Right?
 Using axios to send a press to the back end.
 And this is the API path right here.
 Okay, so now I have my API handler.
[01:26:58]
 Why does this one get called?
 And not, why not this one?
 That's because I set it up here. I'm saying that whenever
 this path is called or whenever this path is visited use this handler for it. Okay, so the
 request comes in. I have a request object that comes in. That request object has a headers property and has an origins property.
 That origin is localhost 8080. So I'm going to store that in here and to this property here.
 This is basic objects syntax. This is curly braces for an object. This is the property. This is the value.
[01:27:51]
 So there's an object with a property and a value. We're going to save it here
 into this variable. Then I'm going to send that as a response. I'm going to send this object as a response.
 And I'll press play.
 Here's the front end.
 It's waiting for the response.
 When it gets a response, it's going to run this callback.
 Remember, a promise is an object that says, "I'm going to complete a task for you."
[01:28:32]
 And then when it's done, I'm going to have a value for you.
 So what is the task that's completing?
 The task that it's completing is communicating with the back end. And then when it's done, the value that it's
 going to have is the response from the back end. So that promise, so that promise
 calls this callback and gives it the resolve value or the that's what comes in from the back end.
 resolve value or the that's what comes in from the back end. Here it is.
 So we received a resolve value which is the response.
[01:29:16]
 But it's an object that has these properties and we see that it has a data property, which is an object.
 We're going to store that here in the response.
 So response is an object right there.
 We're going to stringify that object because if we don't stringify it, React is going
 to complain and there's going to say, "Why are you trying to display an object?"
 So I'm going to stringify it right here.
 JSON.stringify.
[01:29:55]
 I want to stringify this object and now it's a string right here in this variable. This is a string. Looks like an object, but it's a string right here in this variable.
 This is a string. Looks like an object, but it's a string.
 You can see the quotations around it right here. Quote right there.
 quotation right here.
 Now I can now I can put the string right there.
 Actually, I can just go like this. I don't even need to put this string it string right there actually I can just go like this
 I don't even need to put this
[01:30:31]
 I could just put string of hide
 Because it's a string now it's not gonna complain then we start over since I just made a change there
 So let me So it's, the back end is going to respond. Front end is going to receive the response right there. And then it's going to string a
 file the response, which is just data. It's going to receive data, return it into a string, and then it's going to display it.
 Here it is.
 There's the data that we received from the server.
 Okay. So. Okay, so, alright.
[01:31:29]
 Next one.
 So what you see here in this picture is a, that's the, that's the root of the backend.
 This is where the backend is located,
 localhost 8000.
 There's the path, the API path,
 but we can include a query here.
 This is the query.
[01:31:58]
 The Zislip familiar,
 like when you're trying to contact an API,
 we learned that in level two,
 how to contact an API, we learned that in level two how to contact an API,
 use the question mark, and then you can provide some
 keys and values, key and value pair.
 So this message equals hello.
[01:32:24]
 So our server can do that. Our server can accept key value pairs like this.
 So the request query, this is the request query right here. This is the,
 This is the, this is the host name or domain of the backend. This is the path that we're, or the route that we're visiting in the backend.
 And then this is the request query. So the request query contains parameters that were sent
 through the URL. So these are like parameters,
 evalue pairs, and this is the whole URL, right? So we're receiving parameters through the URL.
 Let's copy this.
[01:33:32]
 Right here.
 And then I'm going to to type it in manual here.
 HTTP, local host 8000.
 That's where my backend is.
 And then API is the path of the route of the backend that I want to take.
 This one's only sending data. The other one right here, that's the root path.
 This one is sending a web page.
[01:34:49]
 I don't want that one.
 I want the data in the API path.
 And I want to see what happens if I send it a query or a keyvalue pair.
 So add query parameters to the path.
 So that looks like this.
 Right. So here's the path and here are the query parameters, key value pair or whenever, when you,
 when you communicate with an API, you send it a query like this to tell it what you're
[01:35:38]
 looking for exactly. Use a JavaScript debug terminal to inspect the request object and then add the query
 to the response data.
 I'll just put this like that.
 Okay, so what does this mean?
 Sandbox, so I'm going to add this query here.
 Message equals hello.
 All right, so what's going to happen? My front end, I'm in the front end right now.
[01:36:29]
 Going to visit my back, or going to call the back end at the API route.
 But also provide this query right here.
 Bye, press play.
 I'm in the back end now.
 This is Express template.
 Let's look at what the request object looks like.
 So this request object, it has, it has a query, it has a query property, and then query property is an object that
[01:37:24]
 has a message property and the value is hello.
 So basically that's what I sent through the URL, right?
 So I'm going to create, I'm just going to update this data right here.
 I just basically wanted to tell me what the query was.
 The query that was sent to it was from the request object.
 And it had a query property.
 Okay, so I'm going to try that again.
[01:38:07]
 I'm going to try this from the front end.
 I'm going to restart this.
 Okay, going to contact my back end server with an APF.
 At the API route, I'm going to send it this data right here.
 This query, message equals hello, press play.
 Now I'm in the back end server.
 This data object is going to have
[01:38:37]
 an origin property.
 This will be the value and this data object will also have the query property and this will be the value.
 If I press play, you can see that the data object
 has an origin and it has a query.
 The query is an object that has message equals hello. If I'm now
 I'm going to send the data, this is the data, right? That's the data object. It's not
 an, it's not HTML. It's an object. Press play. Now my front end is waiting
[01:39:28]
 for the response. When it receives a response, it's going to call handle
 response. Okay, there's handle response and it's receiving the resolve value from the promise that resolve value has data coming in. It has a data
 property. That data property has an origin and it has a query. Then I'm
 going to stringify that object. So this response object has a origin property and it has a query
 property. You're going to string a file. Then I'm going to save that in the state variable, which I will render right there.
 If I look at it, here it is.
 This is the response from the server.
[01:40:36]
 I have it. I get an origin and here's the origin.
 I get a query and here's the query.
 Okay.
 Let's look at the nodes here.
 So we added query parameters to the path.
 So there's the API path and then we added the query. And we use
 the JavaScript terminal to inspect the request object. And then we added the query Okay.
[01:41:38]
 And I think this is a slide, this is the last slide for finishing up the template. So this will finish the template because we want our template.
 This is our recreating the express template.
 We want to make sure that our template
 we can make back ends with it pretty easily.
 Just hop to copy the template and then, you know,
 copy it, paste it into a new project
 and then that will have a working back end.
[01:42:03]
 A basic back end, but we need to be able to test with this
 back end. So we're going to add just to the Express template. So copy this and
 make sure that we have just up and running in our Express template. Okay, copy this into the notes, 123.
 So install packages and update configurations for just support.
 Okay, so this one's not detailed, right? It's just it says one step, but actually this step
 contains a lot. So that means you need to know something about just. So let's start with the packages. What
 packages do we need for just? We need to do this in the back, as we're preparing our backend template.
[01:43:34]
 I'm going to open another terminal.
 In this terminal, we have webpack running
 and recompiling, re-bundling.
 And then this terminal, we have webpack running and recompiling, re-bundling. And then this terminal, we have the server, which runs the file that webpack bundled. In this terminal, this
 is where I'm going to install the just packages. So Pnpm install
 just that's saved that.
 But also at type suggest if you remember
[01:44:16]
 at type suggest.
 Okay, so there those packages are installed. Those are the packages we need for JEST.
 The bare minimum and then configurations for JEST. for just. So what so how did we configure just so let's look at our sandbox for that.
 Let's see. I think that's about it.
 We don't have a just configuration file.
 Let's see if there's anything here.
 Oh, yeah, I know.
[01:45:28]
 The configuration for JEST.
 Let's look at our Babel.
 Because Babel that needs to.
 We need Babel to.
 Do this one at Babel. B and V. What does that do? export sim tax to older
 export import sim tax
 which is compatible with jest
[01:46:22]
 with just.
 Okay, so I'll show you what happens if you don't have at Babel preset ENV.
 But let me install, actually I don't, I'm not going to install it yet.
 I'm just going to try to run a test here.
 Adjust test.
 So I'm just going to add a module so I can,
 so I can do some testing.
[01:46:58]
 I'll copy it from the sandbox.
 Do I have any tests here?
 and locks.
 Do I have any tests here?
 Yeah, I have this, I have this in this, so I'm gonna copy these.
 Copy this right there.
 Paste it into here.
[01:47:23]
 And then I'm gonna run the test. You're going to see there's an error.
 So it cannot use import statement outside a module. So just is looking for the old way of importing.
 So Babel is going to reactivate this and I'm going to also install at Babel preset ENV.
 The NPM install at Babel preset - ENV.
 That's going to be saved dev.
 Why is that going to be saved dev?
 It's because I'm not going to import this directly into my app.
[01:48:32]
 This is used for testing, not for my app, not for running my app.
 So that's because it's not imported directly from my app.
 I'm just going to put it in dev dependencies.
 Now, if I try to run just, all I did was add that preset ENV there.
 NPX just there.
 There. We see that this one was, when we did this, we added it to Babel config.
 Just works.
[01:49:18]
 Okay, so that's why this one's more specifically for JEST.
 What else do we need to do? Let's make a script for this.
 In package.json.
 A test script.
 Npx JEST.
 And that's about it. The good thing about this is that if you want to just test
 an individual file, you can do that. So, like than one file, and I just want to focus on one
[01:50:12]
 test file, this will do it for me. So NPM, I'm going to NPM run test. This is going to run the script. Oops. NPM run test. I'm going to run the test script.
 The test script contains this command, which is Npx.js and a file name. And here we're running that test file.
 So that way when I want to focus on testing just one file,
 because maybe I have 10 test files in this project.
 I can just change this to the test file and update configurations for just support.
 And we added the npm script for test and we made sure Jess was working
 This one completes our
[01:51:34]
 This one completes our template our template is now done
 It communicates it has a it has
 Let me go back to our template
 So express template it's done. It can
 Communicate with the front end.
 It has its own web page.
 So this is this is the web page for the backend.
[01:52:04]
 Not this one right here is a web page for the backend, not this one, right here is a web page for the backend. And it has a path
 for the API. So I'm just going to copy this right here. Let me disable this debugger. Okay. There it has a path.
 For the API, it doesn't look right because when you're visiting from the router, I mean,
 from the browser.
 This is not my front end.
 This is, I'm using the browser to communicate with the backend. I could put things like message equals hello
 world. There it is. If you try to put a space, it doesn't... Well, okay, it automatically added the percent 20 right there.
[01:53:29]
 So that looks fine.
 It's basically echoing back my parameters here, my query parameters.
 And my front end is right here.
 It can...
 It's running a hard code in URL. This is my hard code in URL. This
 is always going to send message equals hello. So if I go like to home page and then I click on server, we're always going
 to get the same response because it's always sending to the same URL. Okay. so again home page, then server.
[01:54:27]
 Well, it got that response right away.
 I mean, basically our front end is right next to our back end.
 It's all in my computer.
 So it happened really fast.
 I can see the origin of my front end is ACTP localhost 80. That's what we see here.
 This is my front end. And the query that was sent was message hello. I don't see it here
 because I didn't send it from here. I sent it from my component. I sent that these things from my component.
[01:55:10]
 Okay.
 All right, so now we're gonna take a break.
 I'm gonna start up the break timer here.
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Alright, so we're back from the break. This is the third hour.
 We'll work on, you'll have time to work on your assignment, which is Capstone Backend.
 This one depends on your assignment capstone TypeScript being done.
 There are basically just building on your capstone one week at a time.
[02:06:17]
 You have one week to convert it to TypeScript.
 Now, you have another week to add back into it.
 So, I'm going to start the breakout rooms.
 And as usual, one will be for collaboration.
 If you need to ask each other questions.
 One will be for silence.
 If you just want to, you know, catch up on some things, watch some recordings.
[02:06:50]
 The other one will be for many evaluations.
 And Chris already volunteered, so I'm going to take him next.
 I'm Chris already volunteered so I'm gonna take him next. The rest can, you know, collaborate or work on the assignment or work in silence. And breakout rooms will be open for 40 minutes.
 Okay, Chris, I'll meet you in the many is room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so the breakout rooms are back.
 We'd have to continue. But let me just conclude the class here.
 Break our rooms are back.
 In conclusion, we learned about the route folder structure.
[02:48:56]
 We basically made a routes folder and then we started to, we made a file for the root path here.
 And we made a file for the root path here, and we made a file for the API path.
 We put some handlers in the,
 we put functions in these files to handle those paths.
 Then we learned the request query parameters,
 that's where you put a question mark,
 and you could put message equals hello in the URL.
[02:49:28]
 We learned that we can receive those and
 do something with it.
 Then we can create it our Express template by adding just support.
 So make sure you take your attendance, mark yourself in the COVID
 X account. Other than that, class is dismissed. That's this week's lesson on Express.
 I'm still finishing up the evaluation with Chris.
 I'll reopen the breakout rooms.
[03:44:49]
 Okay, so they're reopenedkay, just finished that. Sorry that took a while. Who's next here. Ray Johnson's I haven't done yours yet.
 Or if Alex Sandra, you're going to be quick.
 I don't know. I recently made it.
 Alexa, stop.
 I recently made it only the react template.
 I haven't gotten to the handler yet.
 So I guess that would be quick.
[03:45:15]
 Which one?
 The.
 I had.
 I had two.
 Yeah.
 Okay. You need. You need >> You needed two more points.
 >> I'm only going to get one point back because the handlers are not going to be ready
[03:45:33]
 any time today.
 >> That's okay.
 You can do it next week.
 You can do it next week.
 >> Okay.
 >> That helps because I have to leave it like to 45.
 And that only gives me like two hours left today. So yeah.
[03:45:50]
 Yeah. So for the, for the, many evaluation, you have.
 Up to, let me see here. I'm going to share my screen.
 Oh, wait. I think, I think I had forgotten that because I think I had resubmitted and then canceled
 my resubmission 'cause I saw the dates
 and then forgot when we started class today.
 Let me go look again.
 Yeah, okay, I'm good.
[03:46:14]
 I don't need to do it today
 because I haven't seen it on 25th.
 - Yeah, corrections can be submitted until March 25th.
 - Okay, that's good.
 - Well. - Okay. until March 25. Hi, that's good. Well, okay.
 Good luck, Rayla.
 Okay, Rayla and I'll meet you in the mini evaluation room.
[03:46:36]
 Okay.
 My LA extanks.
 Have a great weekend, bye

///// FILE: "Level 4/transcripts/Mar 24, 2025 19-51.txt"

Transcript from Mar 24, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 It's week three, day one.
 And the theme for this week is Express,
 but we're going to focus more towards practicing with Express.
 And today's agenda. with Express.
 And today's agenda, take attendance, do announcements, review what we learned on Saturday,
 then I'll go over some tips.
[00:00:38]
 Then in the second hour, do Express Practice.
 Third hour,
 we'll have time for many evaluations, assignments.
 So before we start on that agenda, make sure you take your attendance
 and on over to your code X account.
 And if you're here right now, you can mark yourself present.
 And now time for announcements. Let me load that, load that up for you. [ [] [
[00:01:30]
 [
 [
 [ [
 [
 [
 [ [ Okay.
 So loading.
[00:01:50]
 Okay, there it is.
 Okay.
 So announcements.
 Okay, so regular schedule. Okay, so I'm not going to talk about the survey.
 Hopefully, all of you have had a chance to fill in the survey.
 But let's see if there's any new questions here in July cohort. It doesn't look like it.
 No, nothing new in there, but just remember ask your questions there first.
[00:02:40]
 Post it and then hopefully someone can answer your question soon.
 Basically, if you get stuck on anything for 15 minutes or more,
 post a question right away.
 Then as soon as you get the answer,
 or maybe if you find the answer yourself,
 then post the answer also.
 But don't stress too much if you get stuck for 15 minutes and you don't know anywhere
[00:03:15]
 else to look.
 All the answers, you should find them somewhere within the notes, the videos.
 And if it's not there, then maybe it's somewhere like one of the students, or I mean,
 one of your classmates, or even I will get a chance to answer your question in July cohort. and Jai Kohart assignments.
 Okay, wait, no.
 Many evaluations.
 So we have a new mini evaluation this week for week three.
[00:04:11]
 And I also added here, place at least one character in the online text section. Otherwise, it will tell you that you're missing something, and it will let you save the changes.
 So just one character doesn't matter. You can put a thumbs up or something or a period or
 Just something in the online text section so it'll allow you to say changes
 Hey, it's not showing me
 Questions It's not showing me questions.
 Okay, so here's the mini evaluation.
 As usual, submit the evaluation on time
[00:05:01]
 and complete by the end of the week.
 You'll get one point for that.
 Next, properly explain how to code the solution for handler testing practice.
 The handler testing practice is here.
 The link is also-- the link is also in here, if you need a reminder about what that's about.
 That's where you test a handler by providing a manually created event variable. Okay.
 Then the second, the next question is properly explain how to code the solution for TDD
[00:05:54]
 practice.
 There's the link here.
 Oh, you also need to use TypeScript.
 So that practice, you know, we were doing it in, in, we were coding the solutions. I mean, those
 practices were from level three, and you might have finished them in level three, but I want them
 in, in TypeScript, in your level four section. TD, TDD practice. That's where you use TDD practice.
 That's where you use TDD to gain a better understanding of functional programming.
[00:06:43]
 So, probably explain how to code the solution for that. Probably explain NPM scripts.
 Like, what are they?
 Why should you use them?
 How do you define them?
 How do you run them?
 How to include multiple commands?
 And then properly explain how to set up
[00:07:03]
 and express template with TypeScript support.
 So like how would you set up Webpack, Babel, TS config, by JSON, we're getting more file,
 packages, D-need, what MPN script would you use?
 What's the folder structure for it?
 How do you make the Express app?
 In the route handlers
 that's the Express template
[00:07:40]
 and later on today in a third hour.
 Oh yeah, forgot to mention here.
 Okay, so this is due March 25th before class.
 So this is Tuesday.
 So you can even turn it in today if you want. All you have to do is click the Add Submission button and then click on the Save Changes
 button.
 And then just basically let's put in the waiting list.
[00:08:20]
 Put in the waiting list to do the mini evaluation. It's an easy point to gain.
 And these are things we did last week and you should be familiar with these already these sort of familiar week we finished the express template last week, but all that week. We were working on the express template
 And as usual, you can use notes
 You can put your notes in order so that you can enter all these and you'll know what to say.
 And corrections. So corrections for the many evaluations from last week.
 Also be doing those this week also.
 So I'll be doing the new many evaluations week
[00:09:29]
 three and also I'll be possible because corrections for V2 March 25 before class. So corrections can only be done.
 I mean, you can submit them March 25,
 but you can complete them by the end of the week.
 I should clarify that there.
 Submit your corrections by tomorrow.
 This is week two.
 So basically submit this mini evaluation to be placed in the waiting list.
[00:10:36]
 That's what it means. And you take your get your point or and then it will conduct your corrections sometime this week.
 So those are two things.
 And hopefully your corrections will be quick.
 And hopefully your mini evaluations will be quick.
 Shouldn't take too long to get this one done.
 Maybe the longest thing, the thing that I'll take the longest here is,
 maybe the express template.
[00:11:27]
 But these have been, you know, we've been working on these since level three.
 Okay, so what else? The capsule back in.
 There's two Thursday before class, so that was an assignment.
 It's right here now.
 Capstone back in.
 It's just basically adding a back end template to your capstone.
 And that template is just simple,
[00:12:11]
 it's gonna just reply with,
 you know, like hello world or with an object.
 And you connect to it from your front end.
 Basically you connect to it from your front end. Basically, you connect to it by sending a request. Either by fetch or axios, but you should be using axios.
 It says, "Here, use axios."
 Since you already know how to use fetch, learn something new.
 Learn how to use Axios.
[00:12:47]
 Since it's more popular and now we'll get you.
 Now that you know fetch and you're going to learn Axios, which is not that much harder,
 it's not hard to learn.
 It's just like using fetch.
 But actually, I think it's easier to use. So, yeah, use Axios.
 And then when you graduate this class and you start applying,
 you can add Axios to your resume.
[00:13:22]
 It's not difficult to learn.
 So might as well add it to your resume and start using it.
 Let's see.
 So that's a capsule back end.
 Adding just the template, it doesn't have to be something very specific to your capsule.
 It's just a template and just getting the communication
 between front end and back end working.
[00:13:52]
 I see a question here, should we have a separate package
 JSON and Webpack and Big for front end and back end?
 Yes.
 There's separate and I'm gonna show you today
 how to separate them out.
 You'll need, they are separate.
 Because the backend doesn't use, doesn't use Dev Server.
[00:14:19]
 And the backend uses different scripts.
 So your package is on JSON, you have start scripts.
 Well, the back end uses a different start script than the front end. So yeah, they need to be
 separate. And I'll go over that today, how to separate them out.
 But as I was teaching the back end, I already had it in a separate workspace and it was not combined with any front end.
 It was totally separate.
 So it's not too hard to keep them separate because I've been teaching them separately.
[00:15:12]
 Let's see what else. Okay, so that's fine.
 That was the capsule back end.
 It also has instructions there.
 on backend. It also has instructions there. It has instructions like instead branch create a folder for backend and then create a folder for front end. But I'm
 going to walk through this today sort of but not for a capstone project but for
 our send for our level four sandbox, then you just apply those principles to your capstone.
 So you should have your practice problems done by now.
[00:16:03]
 If not, then you're going to need them. At least you're going to need
 the principles learned within them to make level four like more understandable to you. mark these green as you finish them. And it also says the air practice problems will
 be part of many evaluations. So that's what I showed you. For this week, that's what it is. You have two that will be going over
 in the mini evaluation.
 Also mark your days as
 Markham has done.
 After only after you've finished taking notes on them and only after you've asked
[00:17:12]
 all the questions you got them answered for that day.
 Also, do these days in order. If you go out of order, you just get lost.
 And I've updated the reference guide.
 Reference guide level 4. If you want to know the exact or not, if you want to know the exact or not if you want to know which
 recording I talk about specific topics then I have the dates right here. Oh yeah, I haven't had them wrong.
 Kind of that happened. Okay, so um it's actually up to March 20th.
 Right. These are all wrong.
[00:18:27]
 These are all wrong. I need to correct these dates.
 But the topics are here.
 Let me work on fixing these dates. Okay, so, alright, so we're going to start the review.
 You should already have the notes for whatever we're going to review.
 And when you have those notes, add anything else that that's new
 that you learned. But afterwards when I teach new stuff make sure to take notes
 on whatever I type and whatever I say which is useful information.
[00:19:25]
 And remember, you can always watch the reporting during a better time and watch it at your own pace.
 Have your microphones ready when it's time for your mini evaluation or corrections.
 Okay, let's get started.
 So, we're going to review now.
 We're going to review what we learned on Saturday. This was the first slide, then you just get ready with the notes here so I can share
 the modern screen.
 Okay, so folder structure for backend routes. So for the backend, we added a routes folder,
[00:20:30]
 which was adjacent to index.ts,
 and we created separate files for our path handlers or route handlers.
 for our path handlers or route handlers.
 Let me show you how that looks.
 Here's an express template.
 Here's the rounds folder.
 And these are two handlers. What is handling the root path or the root route, which is basically like a home page, but it's not really a home page. It's just a route,
[00:21:17]
 a path. And then our back end response to it. And we also have a API route.
 In the notes here.
 For Express. It says match the file name with a path and the file name is API.
 The path for that is, well, there's the API file and then there's the API function. So the file matches the function and the path is slash API.
 So it also matches the path or the route.
 Make the match. Okay so rounds folder and then root. So root since we can't really name this, we call it Ruth because it represents our
 boot path. There's no words to name it like this one here. This one, we have
[00:23:14]
 API so we can name that properly. The one is like this, we can't really name it.
 So we just call it Ruth.
 So we just call it root. And our handler used to be inside of this index TS.
 We just moved it out.
 We moved our handler out.
 And we put it in here.
 Boot file.
[00:23:47]
 Boot function name.
 Handling the root path.
 We're not using this variable anymore.
 Instead, we are just putting the routes or the paths directly in here because if we use this variable then it gets a little bit confusing.
 But there's a way to use variables here.
 But I won't discuss that right now. easy way is using objects instead.
 Let's see the next slide. Add a path for front end clients.
[00:24:47]
 So the reason why we had to do this is because when we try to render the root path, it gives us an HTML string. So let me get this Express template running.
 NPM start.
 And it says, well, maybe I should open it into the debugger.
 Let me open it into the debugger. Let me open it into debugger first. Just in case I need to, just in case I need the code to stop on the hooker lines. And then I will open a new terminal and type npm run build.
 So this is what's going to get in my back end server going and it automatically opens
 this page for me.
 So when I run the, or when I visit the root path here with my browser, the root path
[00:26:20]
 of my server, I visit it with a browser.
 It looks like this. It looks right. I mean,
 I don't see any HTML tags in here. But if I go to my front end,
 I type npm start.
 And then I open the ground before it.
 And I take a look link to this URL.
 I'll go to the root URL in the fetch from the root.
[00:27:21]
 I'm going to send a request there. There's a root just that, you know, that
 forward slash. So the problem here is I see the a signal tags. So I'm going to look at,
 I'm going to show this again. When you visit the root path from the browser,
 it looks right.
 But when you visit the root path from your front end,
 it shows the HTML tags.
 So the reason for that is because the front end is not supposed to go to that,
[00:28:13]
 it's not supposed to send requests to that root path because we're using that new path to render a page right here.
 So instead, we created a new path, the API path for our front end client.
 So front end clients usually receive data from back end servers.
 It doesn't receive, it doesn't, the front end clients usually receive 8 CML
 tags or anything like that.
 They usually receive data.
 So we have picture of data right here.
[00:29:04]
 Basically this is an object with an origin property. we usually receive data. So we have picture of data right here,
 basically it's just an object with an origin property,
 and we're getting the origin from the request.
 And to differentiate it, we said the root path of the server
 can be used for the server page. So again, this is the root path of the server can be used for the server page.
 So again, this is the root path of the server being used as the server page.
 This is simply created with this code right here.
[00:29:44]
 Like that
 There's a H1 there's a P tag
 So I don't have a separate file as soon as it sets this
 The server sets this
 string
 Then the browser catches it and then renders it right here
 But we are making a separate path for our front end.
[00:30:12]
 And that's called API and we created the handler for that.
 So here's our index HTML.
 There's a path and we want this handler to handle this path.
 Or here's our path handler or our API handler.
 So let's look at that.
 Right here.
 We have the origin and the query property. Okay, so I'm going to get to this,
[00:30:52]
 but the origin. Let's see what that origin is. So I'm going to fix my front end client. Instead of sending a request to the root path of the server, I'm
 going to send the request to the API path. Just to claim the API path like this.
 All right, so I sent, I restarted, I saved it, and it sent the request.
 And now the server is here and the debugger got activated.
 I can look at it from there, it's better than by zero.
 Here, the request object has a headers property right there.
 And that headers property has the origin property right there.
[00:32:07]
 And in this case, the origin is a CTP local host 8080.
 That's the domain name of my front end.
 So that's where my request came from.
 That's why it says origin, it originated from this domain.
 So I'm going to create an object with the origin property,
 and then there's the origin that comes from the request.
 I'm going to send that as a data.
[00:32:54]
 I'm going to press play here,
 and then my front end renders the data right here.
 Instead of rendering the H1 tags and
 t tags it's just rendering the data. Usually you don't render the data.
 Usually you use it, but just for practice we're showing that we can
 receive the data and render it.
 So that's where we have the API file in our backend.
[00:33:47]
 We have the routes folder and the API file. It matches the API function, which matches the API path.
 And it's responding with data only.
 And then the next one, query, a request query.
 So, going through the API path, we can send a request query. Basically, that's a question mark, and then you have your pvalue pairs for
 property and value.
 And you've seen this before when you sent requests an API.
 Like not not this API, but like a photo the date API or trivia API, not this API, but like a photo-to-date API, or trivia API,
[00:34:48]
 you can use query parameters like this
 to specify the information you want from that server.
 So in our front end, right here, front end, I can add, I can add very parameters back here,
 which I do over there.
 So I'm going to, I'm going to activate that line. parameters back here, which I do over there.
 So I'm going to activate that line.
 There's a query parameters right here.
[00:35:34]
 The moment I say it, it's going to run because component did not.
 And here is my back end.
 And it's going to create an object with the origin property and the query
 property. The query, you can see it here. It's in the, it's in the request. There's
 a request object and then it has a query property. Right there. If I press enter, I see that's an object.
 Messonty equals hello. So I'll press play. My front end receives the response and then I see here the response contained query and it's an
 object message hello
[00:36:38]
 okay from the back to this part let's see if that missed anything.
 So we inspected the request and then we added the query to the server response. That's the data.
 Then we added just to the express template.
 And we just forward to that slide here.
 and we just forward to that slide here.
 We install the packages and updated configurations for just support.
 So in the express template. Looking at package JSON, we needed just and add types just. Then let's see what else.
[00:37:47]
 Configurations. So, configurations for that was Babel.
 We had to add Babel preset, E&B, that converts new export import syntax to the old export import syntax, which is compatible with JEST.
 And then we added the npm script for test.
 added an npm script for test. So that's in package j saw there's test and there's npm script. I can even test an individual file like that or I can
 just delete this and run all the test files.
 And then we made sure just was working. So to do that, we've added a test file and a test module.
 Right here in module, I added the test file and a module or a function
[00:39:10]
 And then I can run a new terminal here and type and
 Km run test
 It'll just execute this one file and I see that everything passes
 that finishes the way it's missing the bells
 okay yeah that finishes the just template
 All right, so we're going to go into something new, the tip or tips. I'm going to go through two tips here and this is about the folder structure separating
 the front end and the back end.
[00:40:01]
 We're going to do that here in the sandbox level
 four. Notice here that the templates, I don't have a react template in here and
 I don't have an express template in here. You couldn't put it in here if you
 want, but I keep those separate because I mean you it's is up to you with your preference. And what I do here in level 4 in sandbox level 4 are mostly notes and like examples.
 So working examples in the front end and working examples in the back end.
 So that's basically what I use sandbox level for. For notes and
 examples. Whereas my templates like react template and express template, they
[00:40:55]
 don't have notes and they're not for notes and they're not for examples.
 They're just for me to copy over to create new projects.
 That's why I don't put them in here.
 My sandbox level 4 is focused on notes.
 So let's copy this, and then I'll go through it step by step. and a
 and a
 share my screen now
[00:41:43]
 and a base it into sandbox notes.
 We can apply towards front end or back end or tips.
 I think I'm going to put it under the tips here. Restructuring Sandbox Level 4.
 Okay, so I should put a code sample here.
 Let me just double check what that looks like.
 Sorry, we'll sandbox them before. starting with sand box and then I see sand box level for
 sand box level 4 and then
[00:43:00]
 go with the back end and then the front end holder.
 Then notes because the notes apply to either front end and back end.
 So I put it here.
 I'm not separating out.
 I'm not going to put separate notes for front end and separate notes for back end.
 I'm just going to keep them all in here.
 And there's the workspace sandbox, or code, the workspace, I think. that works basically.
[00:43:48]
 You just double check.
 Go dash or space.
 Okay, so, create a folder in sandbox level 4 called front end.
 I'm going to just jump down my servers here.
 Since I'm going to move stuff around, I know that these servers are on. back to here, let me just add some highlights here.
 back in the heater. Okay, so now I'm just sandbox level 4 called front end.
 So make sure you make it in the root folder front end just like that. Move the front end code into the front end folder and create the workspace.
[00:45:52]
 So my front end folder is empty. I'm going to move the assets folder into it.
 I'm not going to move the disk folder because I can just regenerate that.
 And I'm not going to move the node modules folder.
 This is currently, you know, sandbox L4 is where we have our front end.
 I can regenerate this and I can regenerate the node modules and you probably should regenerate it
 because when you're copying it over it sort of gets messed up sometimes.
 So I'm going to delete this
[00:46:36]
 this folder. I'll just regenerate that later.
 And I'll delete this no modules folder.
 Just gotta put your password if you're if you need to put admin
 permissions, delete it, delete it from here and be it's okay because I can just regenerate it.
 Alright so these notes I'll leave them here public folder belongs in the front end. right end
 we're colder along the right end here
 there's assets older and public older
[00:47:38]
 yeah
 source older low- the same front end
 actually this might start breaking
 away from the to break because that when I add a new workspace file, it'll
 be a little bit of a little piece.
 Okay, so all these other files they go in there too, these are all front end.
 And the root holder up front end.
[00:48:32]
 Oops.
 Actually, we have overspaces back.
 Move that back.
 When you're building your workspace into the front end folder.
 Then move the back. I'm going to put this back to the sandbox holder. Okay, just, just when you heard it so, maybe try that again.
 Okay, so, there.
 What I have right now is sandbox a little little before from hand notes and then work space. all right so I've been stepping the two which was move the front end code into the
[00:50:14]
 front end folder oh yeah I need to create a workspace now for this one for the front end.
 What I'm going to do, to do that, I'm just going to copy this,
 because it's an easiest way.
 Copy it, paste it here.
 Basically I'm just copy the workspace and then I'm going to rename it to
 the front end. So now I can open my project different ways. If I close this, I can open the front end separately,
 or I can open the front end and back end together.
[00:51:16]
 So if I click on sandbox level 4, that opens.
 Well, there'll be a front end and the back end holder it opens
 them together. Right if I just click on the workspace in here, it opens just
 the front end. This is just the front end right here and now I'm going to make sure this is running.
 NPM start.
 I need to re-install everything here.
 PNPM install. Pnpm is held. If you do it this way it's going to use npm to reinstall everything. And let's see if it runs now and we have a start.
[00:52:32]
 In the left, the impact is watching, and it works.
 When then it's working, I've successfully migrated it into the front end folder.
 I can stop this server for now. I just wanted to make sure it's working.
 So I have this front end,
 VS Code O2, from my front end.
 If I want to take notes, I'm just going to have to
 go to the sandbox folder
[00:53:24]
 and have a VS code open for that.
 You can do them all from one VS code after I set it up, but I'd like to have it open in separate windows,
 but I'll show you how to do it all from one VS code.
 After I finish this part here.
 I have workspace in the notes folder and workspace file can stay in the main sandbox folder where they are notes folder and workspace right there create a folder in sandbox level 4 column back in
 back in right there and next to the front end folder
 back in right there and next to the front end folder.
[00:54:29]
 Then copy the express template into the back end folder
 and create a folder space.
 So I'm just going to copy my express template.
 I don't need this to just over. And I don't need this to just holder and I don't need that to go over.
 I'll just create those.
 I'm gonna generate those.
 I'll paste it here into the back end holder.
[00:54:58]
 I'm gonna put it in front end workspace.
 I'm just going to close that and I'll show you how I can access everything.
 One VS code.
 So this is where I just pasted it into my sandbox back end holder.
 I'm just going to rename this template here, call it back in.
 Okay, so that was this step.
 Copy the express template.
[00:55:53]
 It's a back end folder and create a workspace.
 There's already works of workspace.
 I think it was renamed it.
 So now I see I have a back end front end notes
 and a workspace for sandbox over four.
 My front end folder has its own workspace.
 And my back end folder also has its own workspace.
[00:56:21]
 I'm going to start a terminal to see if I can get the back end running.
 To do that, I need to switch to the back end folder.
 And then npm start from here.
 npm run start.
 So it's not going to work because I don't have anything installed.
 I'll press Ctrl+C to cancel.
 Openizable install with npm.
[00:56:58]
 I'm going to install with npm.
 PM PM. Now I'm going to try to start this out because there is no disc holder.
 It's looking for the disc holder.
 It's not built yet.
 It's not in here.
 The disc holder is built with webpack.
 So I'm just going to build it with webpack right here.
[00:57:52]
 Which automatically opens a window.
 Nothing's happening here because my server is not running.
 I need to open the new terminal for that. For him to end the end of the start, or npm, let us start.
 I need to go to the correct folder.
 This is sandbox level 4. I need to go to the backend folder. So it's this year on 8,000.
 I will put this in refresh.
 Any questions?
[00:58:47]
 Anybody with clarification?
 When you are working in just one BS code and you open new terminals, you need to remember
 in a split student correct holder.
 Oh yeah, another thing.
 Okay, yeah.
 If you are in the wrong folder, like for example, in the loop folder like this, there
 are no scripts here.
[00:59:19]
 See there are no scripts, so it's not going to run anything. You have to switch to the front end folder and try to run that and we can start.
 So here I'm running the back end and the front end and one BS code.
 And I can even start going to leave here so this is the front panel.
 So we're going to go into the brick now. [wind blowing]
 Okay, see ya after 10 minutes. think see you have to tap minutes [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And now what we're going to do is just practice.
 And actually this time, let you guys practice on your own at your own pace.
[01:11:26]
 And here's a practice.
 Back in routes practice.
 Where you practice how to communicate with back end routes that send different responses.
 So communicate with the front end and also with the browser.
 So in the back end, use the ExpressGet method.
 You know how your app has a get method.
 Let me show you here. back and index.
[01:12:15]
 So your app express app has a get method right there.
 Use a get method to assign the route home to handler.
 Create the handler, then the next step, create a handler module in the routes folder.
 This was the, I just talked about this.
 Code the handler to respond with an HTML string to render a home page.
 So that's what the template is already doing.
 When I want you to practice this with the home path,
[01:12:55]
 just make a separate path called home.
 And actually, don't do this in the sandbox.
 Don't do this in your template. I don't do this in the sandbox. Don't do this in your template.
 I don't do this in your template.
 Our template is done.
 You don't need to change that.
 Do this in your sandbox now.
[01:13:14]
 So the sandbox, your sandbox should now have a back end, sandbox should now have a back end that you can run experimental code.
 Don't touch your, don't touch the template anymore unless there's something that you
 want to add there.
 You can experiment and do tests on these in the front end or in the back end.
 Okay, so add a path to the back end and a handler for that path.
 But that path will be route, I mean, that route will be home.
 Then in the front end, use Axios and the component to render the response from home.
[01:14:15]
 And then you're going to do another thing in the backend.
 Use the ExpressGet method to assign the route client to a handler. So make it
 basically make a new route and a handler for it called client. Create the handler
 module in the routes folder. So it wouldn't be called handler, it'll be called client.
 The file that you make will be called client.
 And also the function will be called client, because you got to match your route with
 the filename and the function name.
[01:14:59]
 Then code the handler to respond with an object that has three key value pairs. So in your handler,
 create an object that has three key value pairs and respond with it.
 I think I skipped a step here. So for the home path, use the browser to render home route.
 And for the client path, use the browser to render the client route.
 And also, in the front end, use Axios and the component to render the response from the client route. So let's use the remaining minutes of this hour to work on these practice
 steps. Just let me know if you have any questions in the meantime. I'll for capstone types. Good.
 OK, Chris, you have a question?
[01:16:27]
 Yeah, after we instal my packages for the front end,
 I ended up with some odd errors. One, it looks like in the render practice assignment,
 where we pushed the elements into the buttons into the element.
 And those are showing some red underlining and then also that create root body tag and index that t at sex and the front end is also showing an error can get rid of either.
 Did you create a workspace for that folder yet.
 Yep. >> Yeah. >> Okay.
 I'll let you share your screen.
[01:17:12]
 Okay. I can also check mine too.
 >> Okay. Yeah. That would be great.
 >> Let me see. I'll share my screen and see what's going on because it's probably gonna have similar things.
 It'll either be similar or maybe it's working.
 You said the sign in stuff.
 Well, this is my sandbox.
 I don't have that sign in stuff in my sandbox.
[01:17:42]
 'Cause we just made this.
 If I render this sandbox, it's this part to tell which one's which here. That's for front end. My front end is running. I don't have the sign in is just these here.
 So I could, should I just create it?
 Maybe it's maybe it is the workspace mode,
 just create a new workspace for the front end instead of.
 You can.
 Well, I'll show you what my workspace looks like.
[01:18:22]
 It's pretty, the file is pretty empty.
 I'll show you what my workspace looks like. It's pretty the file is pretty empty
 So here's my
 Front end folder actually here's my word sandbox level for it. See it's pretty empty and
 That's okay
 That's all it looks like it's just like a
 Borderplate for a workspace. So my front end workspace is just the same.
[01:18:49]
 All I did was copy it and then rename it.
 - Oh, that's interesting.
 Yeah, I had done the same thing,
 but it created an error,
 but when I deleted it and then created a new one just now
 and it was okay.
 I've done nothing wrong for some reason.
[01:19:02]
 - Okay, yeah, you might have,
 yeah, or you can also try restarting VS code
 because once you move things around,
 it sort of, you know, it gets confused sometimes.
 - Gotcha.
 - Okay, thank you. - Okay, thank you.
 - It's working now, thank you.
[01:19:18]
 - Okay. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Silence ]
 >> Does that sound a question?
 >> Yeah, I'm still just trying to get my fun and back
 and set up.
 It seems like when it seems like I have them separated,
 but when I'm going to change this to my back and files,
 it's updating my front and main.
[01:35:16]
 Front and it's updating in front and main.
 OK.
 Yeah, that should not be happening.
 There's two separate processes. two separate WebPACs going.
 Yeah, and they're both the paths are set from the position of the WebPAC.
 So they should, I'm not just getting any changes like it's not.
 It's not.
[01:35:43]
 It's not.
 It's not. That's you. Sure.
 Scream here.
 Even if I just were to change something like this. Doesn't seem to be updating my main.
 Yeah, you need to have a webpack running.
 Oh, I'm sorry. I'm not running yet.
 That's you're in back end right now.
[01:36:43]
 Oh, no, I know. That running that. - That's you're in back end right now. - Oh, wait.
 - Oh, no, wait, no.
 That's the back end folder.
 Right there, if you look at the left,
 it's like, I haven't running currently.
 - I'm not running the code.
 - Currently running.
[01:36:58]
 It should be. - Okay, yeah.
 - Okay.
 - Yeah, it should be building.
 - Yeah. - That's the back end. - Right. - But it should be building. Yeah, that's the back end. Right.
 But it doesn't seem to be
 like nothing's changing there.
 Well, you made a minor change and it might not even appear on that front page or those first 29 lines.
[01:37:23]
 But she didn't recompile the or repackage it?
 - Yeah, it should be repackaging them.
 But it's like it's unsafe here.
 Doesn't seem to be,
 even though it's-- - it's it's I see it it's changing.
 Yeah, go ahead and make another change right now it says 688 milliseconds there.
 Right. But making another change.
[01:38:01]
 Shouldn't this show changes to it. I don't know. Like I said, it, like I said, it, you mean change the color. No, because
 that should be under to get, wait, let's see. Is that under you probably don't have get set up for that.
 - Oh, I see.
 - Yeah, none of that.
 There's nothing indicating that you have get set up for that.
 - That makes sense, okay.
 Yeah.
[01:38:36]
 - But it looks like it's recompiling or rebundling.
 When you make a change that 688 seconds,
 milliseconds changes.
 - It's just that I need a minor change to it.
 And then it just, I felt like it should have,
 I felt like it should have propagated
 or it should have shown that on the front end.
[01:38:58]
 But.
 - Oh, no, it's not gonna show it in the,
 you have to refresh your front end.
 - Yeah.
 - I mean, you have to refresh the browser. Oh.
 It's not like the front end.
 It's not like the front end that it has the, it's two separate servers.
[01:39:19]
 And the only way the front end will refresh when you change the backend is if you have
 the front end actively refresh when you change the backend is if you have the front end
 Actively checking the backend. Yeah, I had to like check in that port
 So it was it was when I had no I mean like the JavaScript like checking it every second or something
 who one
 Well like we see back in find
 Oh, yeah. >> Not right.
[01:39:48]
 >> The checking part, 181, is that the correct part?
 >> The back end is not in 9,000.
 When I had them separated,
 when I had like the server running from Sandbox and then the express template running.
 When I would make changes to the template,
 they would propagate to the server, the front end.
 The real time.
[01:40:17]
 - I don't know how that happened.
 Maybe,
 'cause mine doesn't do that.
 And they're not supposed to do that unless it's actively checking.
 So I'm not sure how that, how you might have done that.
 I see. Okay. Maybe I would just do something out.
 Okay.
[01:40:38]
 There needs to be a, basically if you're, if you have a browser,
 set up, like a browser checking port 9000.
 It's not gonna update because it's just a browser
 and the browsers don't automatically
 check servers if they're updating.
 - Oh, like this.
 Like if I run like,
[01:41:03]
 - Yeah, that's a front end.
 That's a front that just in front end. Okay.
 If before when I would like to find me changes to
 see now it's populating here, okay, maybe it just needs to be refreshed. That was
 weird though before it was doing it automatically. Maybe I was running a live
 server or something. Is this so this is what pack right now?
 The server? I think that is actually a live server. Okay.
[01:41:33]
 Okay, I don't know what happened. I'll figure it out.
 Yes, it's checking different ports right now. Yeah.
 I got you. - Okay, thanks. - Okay. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, I'm going to start a break right now. [inaudible] [ [ []
 [
 [
 [ [
 [
[01:55:38]
 [
 [
 [ [ Inaudible ]
 Mr. Rollz, all your mics belong if you didn't know.
 Okay, thanks for letting me know. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and we're going into the third hour of class. In this third hour, you can continue to work on the practice.
 Then anyone finished the practice?
 If not, then how far along did you get?
[02:05:15]
 Did you get halfway through or?
 Just getting started.
 Was the progress on that.
 So, yeah, so some couldn't even get started're going to have a new practice, you're going to start falling
 behind on the practices.
 If you don't work on them, we're going to have a new practice tomorrow and it's going to be more advanced
 than the one today.
[02:06:12]
 So I suggest, you know, getting ready for that.
 I'm trying to catch up by tomorrow with anything that you need to catch up with.
 I'm trying to catch up by tomorrow's before tomorrow's class.
 Okay, so other than this. So in this,
 other than continuing to work on the practice, there's still that assignment,
 capstone back end.
 And remember, this was,
[02:06:56]
 you're just adding that template
 and just making sure your front end
 can communicate with your back end.
 You don't have, it's not to be a full-fledged back end or
 anything practically yet. It's just that template
 and make sure it can communicate
 with the front end and between the back end and front end.
[02:07:20]
 So I'm going to start a, I'm going to start
 the breakout rooms.
 And I'm going to also be available for mini evaluations.
 Let's see here at 30.
 Okay. Okay, so break our rooms made a submission for evaluation corrections.
 Or you can just volunteer in the chat if you want to do your mini evaluation
 Corrections or mini evaluation
[02:08:37]
 Okay, break our rooms are open now
 Let me know if you have any questions. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] I'll see your question there. It was in I
 Showed how to replicate that error and how to fix that and
 I forgot Saturday because this Thursday's notes where I'm getting the error
 Right, yeah, you get all the first types. Yeah, you're gonna get the did you finish all of Thursday
 types. Yeah, you're gonna get the did you finish all of Thursday? No, I'm almost done. Okay, okay, so we'll see. So the later on I show how to fix it. Okay, but it's confusing because on the
 video when you do it on your setup, you don't get the error right away. Okay, I might have fixed
[02:31:00]
 it the day before that then.
 - I should be. - But literally in the video,
 Jia Kors was just installed, that's why I'm confused.
 I'll keep, I'll close to the end of the video
 and then watch Saturday and see if I missed it somewhere.
 - I see, okay.
 Yeah, it'll probably be in the review section of Saturday.
[02:31:28]
 Yeah. Yeah. So, I can check right now. Let me, let me see here. the
 the >> Yeah, it's really where on Thursday when you showed us the example of how to do it,
 you didn't get the error.
 >> There are probably a skip to the, let's see what slide number that was.
 >> The slide that says fetch.
 There's a slide that says fetch. There's a slide that says fetch.
 And then you're supposed to get the error.
[02:32:29]
 And then--
 That's fine.
 I can't.
 On slide 53, that's like the whole video series.
 And maybe I skipped past it too quick.
 And you--
 Maybe.
[02:32:44]
 You're showing the H1 with the Europe path is saying their mind doesn't do that mind just gives the cores that are maybe you.
 Yeah, I just fixed the core is error. There should be another slide where I talk about the core's error.
 Okay, I'll skip past anything I can't do and then come back to it.
 Okay. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] I like to say that I give you a screen share so you can tell me what's going on. So, okay, so that's the, that's the browser on looking at
 I'm looking at port 8000.
 Is this your front end? Yeah, it looks like it's front end.
 And so this is front end and let's see what your front end is.
[02:46:36]
 Let's see your front end code.
 You see the code for the front end where it's fetching. It's fetching local host 9000.
 That's correct because the backend is 9000 in the front end is 8.
 Okay.
 All right, so are you able to open the browser
 to local host 9000?
 - I was earlier.
[02:47:16]
 - Okay, let's see.
 Just open a new tab to local host 9000.
 Okay, that's good.
 Okay, now let's look at your back end code.
 Okay, that's your back end code.
 There's cores.
 It's imported.
[02:47:42]
 Let's compile your back end code. Oh, maybe that's the problem. It's not building. Yeah, it needs to build. I don't remember if I, I honestly don't remember if I compiled the back end or not.
 Yeah, so that one's just starting the back end. You have to also build it.
 also build it in a separate. Oh, in a separate terminal, right?
 Yeah, so it can build every time it can rebuild every time it
 changes.
 >> It's not going to show anything because the server is down right now. You have to press.
 >> Please, sir.
[02:48:33]
 >> You have to put npm start for your server.
 And a different terminal and the other terminal.
 >> This is the other terminal.
 I have two bash windows. >> I guess it didn't just it didn't show me the
 it's slightly behind. No, I canceled it so that I could build and then
 relaunched the. Yeah. Yeah, you should be able to reload the page now. Okay, there.
 And then that should work. You should be able to communicate with it now. Okay, there. And then that should work. You should be able to communicate with
[02:49:06]
 it now. Refresh your reocc
 Okay, I forgot to compile it on the back end. There are so many things to remember.
 Mm-hmm. Okay, cool. I'm good. Thank you.
 All right. So remember, Alexandra, when you start your server, it should have instructions for you
 to follow so you don't forget any steps.
 So make sure to add those instructions as reminders to yourself.
 They're actually in there. I just didn't read them when I started the server. Okay, that explains it. [ Pause ]
[02:50:50]
 Okay, so the breakout rooms have closed that everyone's back. If anyone did go into the breakout rooms.
 So in conclusion, we restructured the sandbox level four to have a front end and a back end. I'll contain into one project,
 but they also have their own projects.
 So there's basically a sandbox level four project,
 or workspace that contains front end and back end.
 And the front end has its own workspace,
 and the back end has its own workspace. We also started the
[02:51:27]
 backend backend routes practice. We'll to catch up by tomorrow.
 Make sure you take your attendance. There's three minutes left to mark your attendance.
 Other than that, class is dismissed. That's today's lesson on express.
 That's today's lesson on Express. Especially focused on practicing it.
 I'll stick around for a few minutes just in case anyone has questions. [BLANK_AUDIO] [ Pause ] >> Chris, you have a question?
 >> Yeah. So when I run NP-X server on the front end, it doesn't seem to get resolved
 to path, but when I run live server, it automatically resolved in the path, but I don't really understand
[02:53:26]
 why.
 Do I have-
 Okay, let me see what's going on. I'll give you screen share.
 Okay.
 There you go. So if I run live server, it resolves it.
 But I just run in to Xwebpack server,
 because I just have a pass somewhere
[02:54:15]
 that I have to have set up something different.
 Something's finding the index file.
 OK. Okay. Okay.
 All right.
 Okay, so let's look at it.
 Let's look at, okay.
 Let's look at your public folder.
[02:54:41]
 There's nothing.
 There's nothing you might public.
 That's why it's not working.
 Yeah. I forgot when I copied it over that.
 Do I just need my, just a copy of my TSX index file in there?
 No. You need to put your index ACML file in there.
 Okay. Nice to see. Okay, nice. And then you have to update the script to just say the name,
[02:55:10]
 you have to update that line 17 to just say the name,
 no, not of yet up there, just say the name of the bundle file.
 Don't put the folder,
 just put the name of the bundle file. So delete this.
 Is that the, is that the, and that's it?
 Okay.
 Hi, I totally am so not, I'm so not too, used to the other file folder.
[02:56:01]
 Okay, so the ports for the server and the front end, they don't have to be the same port number. You just direct the
 Yeah, they should not because they won't work if they are heard of the same port, but
 But you are here is where you set
 We see here here is where you set where to look for that, right?
 So I basically said where to find it at.
 Mm-hmm.
 Yeah, that's where your back end is.
[02:56:31]
 Gotcha.
 OK.
 OK.
 I see.
 If that's what you set it up as, if you set it up as 9,000.
 Yeah.
 OK.
[02:56:39]
 OK.
 You can do that in your index HTML.
 Right. I mean, index CS. All right. There it is. You can do that in your index 8,0.
 I mean index CS.
 All right.
 There it is.
 Okay.
[02:56:50]
 Oh, God.
 That was too too much time just to set up that just a
 destructor or two.
 You can figure that.
 Okay.
 Thanks.
 I'll get it.
[02:57:01]
 We're down this thing.
 Okay.
 They can easy.
 Bye. Bye. They can easy.
 Bye.
 Bye.
 Good night.
[02:57:08]
 Bye.
 [BLANK_AUDIO]
 [BLANK_AUDIO]
 Bye. [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 25, 2025 19-50.txt"

Transcript from Mar 25, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four week three day two. And the theme of this week is express, but
 Mostly emphasizing practicing with express.
 Today is agenda. In the first hour, we'll take attendance, do announcements, review, and I have some tips for you.
 Then second hour, practice some express.
 Third hour, I'll do MIDI evaluation and you guys can work on the assignment or work on the practice.
 Be sure to take your attendance and on over to the code X account and mark yourself present if you're here right now.
 Now time for announcements. Let me get that loaded up. Okay, the announcements are here.
[00:01:40]
 I'm trying to get on the screen now.
 Okay, so we have a regular class schedule
 evenings on the weekdays,
 but Friday's a day off and then morning on Saturday.
 Many evaluations, remember, you need to add a submission to the mini evaluation
 to be placed in the waiting list for the mini evaluation.
 And there's due dates for them.
[00:02:09]
 Many evaluation week two closes Tuesday before class.
 So that's today week two.
 Everyone got a perfect school on week one. Week two, corrections are due for this.
 So, late credit until March 25, corrections can be submitted until March 25.
 That's today before class. So if you're interested in submitting
 corrections for week two, many evaluations, they should have been submitted before class today.
 If you missed that time slot and you're still interested in submitting corrections, because
[00:03:09]
 you need at least 75% to qualify to even take the final evaluation at the end of class. You know who to contact if you missed this time slot to submit to make a submission for corrections.
 You need to contact student success team.
 Many evaluation week three that was due before class today. So to get that point, the on time point,
 many evaluation week three.
 That's due today before class to get yourself in the lineup in the waiting list.
 To take the mini evaluation to get the point, you need to do the evaluation when called upon and also by the end of the week that it's due. I should probably clarify that as
 due by the end of the week that it is due. So
[00:04:34]
 many evaluation week three, you can get this point here if you do
 the evaluation by the end of this week.
 The assignment so capstone type script poses Thursday before class. Appstone TypeScript is right here.
 Corrections can be submitted until March 27th before class.
 So make sure, so that's Thursday.
 Make sure you just make a submission. I'll have your assignment graded
 probably by the end of today or tomorrow. Just have your submission. I mean, just submit the corrections by March 27th, and I won't be able to grade it right
[00:05:49]
 away.
 So, even if the corrections are not done, you should still submit it on time before the assignment
 closes.
 And you can still work on the corrections at least for a few days while I, you know, until I can grade these assignments, the corrections for the assignments. Okay, so practice problems.
 Make sure you, you know, these practice problems that we had here because they are part
 of many evaluation three
 Here in many evaluation week three
[00:06:53]
 At least two of them are part of this
 Probably explain how to code the solution for handler testing practice
 That's this one. And properly explain the code, how to code Okay, so if you get stuck as a reminder, seek help. If you get stuck for 15 minutes or more on coding and you're just not sure of the answer
 or there's no progress at all for 15 minutes.
 Please post your question in July cohort.
 Also please post the answer if you find a solution.
 So, okay, there's doesn't look like there's any new questions here, but whenever there's
[00:08:08]
 a question, make sure you, you know, you post a solution or if I make a suggestion here
 and it works, you should also say that it works so that, you know, just to confirm to others who are meeting
 that the solution might work.
 A days, remember to manually mark your days as green when you've mastered the topics.
 mark your days as green when you've mastered the topics that were discussed on those days. So today is day two. I know some of you are absent so make sure you're going
 through each day one at a time, going through the notes, taking notes, going at your own pace,
 but remember going order, and I'll jump around, or else you'll get confused
[00:09:14]
 to use a day's in order, catch up with the recordings,
 and now I want you guys to focus, to take notes, to type what I type, and to type any good information that I say.
 And remember, if you have a hard time focusing right now,
 try watching the recording during a better time.
 And remember to catch up with the recordings before the next class so
 it won't be confused about the topics. Now get your microphone ready,
 especially for the mini evaluation at the end, or if you have any questions
[00:10:00]
 about the review.
 Okay, so time for the review shouldn't be long.
 Okay, so what we did is we restructured sandbox level four to have this kind of structure right here.
 And Box level four has a back end folder with all our back end stuff.
 Not the template.
 I mean, we copied a template into the back end, but then we're leaving the template. I mean we copied a template into the back end, but then
 we're leaving the template alone so that it's clean. We're gonna start
[00:10:52]
 editing the back end to put our code samples and things that we want to try.
 We have a front end folder.
 It was based on the react template.
 And our react template is, you know, in a separate folder untouched, clean.
 So that whenever we want to start a react project or a new one. We just copy that template and start making edits
 in a new project.
 We have a Notes folder, I mean, yeah.
[00:11:34]
 A Notes folder, which contains Notes for both the front end
 and the back end.
 And then the workspace.
 There's actually a workspace for this sandbox level four folder.
 And there's a workspace for the backend and the front end.
 So I'll show you that.
 So I'll show you that.
[00:12:47]
 And we looked that up for you guys. Okay, sandbox level 4. I'm sharing it on the screen and we see here.
 There's the back end folder, front end folder, notes, and then the workspace.
 The back end is right here.
 It has its own workspace and it's based on Express. It has its own start
 scripts or npm scripts which is different from the front end. The front end is here.
 It has its own folder structure.
 Its own files.
[00:13:33]
 It has its own workspace.
 It has its own NPM scripts.
 It starts differently than the back end.
 But we have a different set of scripts for that.
 And the notes they're all here,
 easily accessible.
 So the benefit of having multiple workspaces
[00:14:01]
 is that you can open your back end separately
 or your front end,
 but you need to do it from file explorer.
 So if you have file explorer and you want to open those separately, you can just click
 on back end, and then open the workspace from there. So this is the back end only.
 And there's a front end.
 You can click on the front end folder from
[00:14:38]
 Windows Explorer or whatever file system you have.
 If you click on the workspace,
 it opens the front end only.
 I'm going to keep them, it's easy to keep them separate. I'm sure you know how
 how to keep them separate already and how to run them separately.
 So I'm going to not run them separately, I'm going to just run them from the same VS code.
 So it's your preference. If you know how to run them in separate windows or separate
[00:15:26]
 VS code windows and you can do that. But just in case you're interested in how to run
 them all from one VS code, that's what I'm going to do.
 And the notes for that, so the fingertips here.
 Let me see if I missed anything.
 So they have their own node modules.
 So they're all perfectly separated,
 but they're all inside sandbox.
[00:16:11]
 So basically two separate projects.
 And one main project that shows that they're related.
 So they have their own node modules and their own package JSON and we did PMPM to install these.
 I then copy even those modules into this folder and I did copy this disk folder here either.
 I just copied the source and all these other files here. And then
 I manually installed node modules with PNPM and I manually created this folder by running Webpack.
 Same link for front-end. I didn't copy this modules and I didn't copy, well there is no
[00:17:07]
 just older here so I didn't, I guess I didn't render it yet. I didn't build it yet.
 You see what else is here? Okay, so yes, they're perfectly separated.
 And this was a practice that we had yesterday. This was based on creating routes in the back end and sending different responses from those routes.
 Like the home route sent a HTML string and the client route sent a data string.
 But if you're using Axios, it doesn't look like data when you receive it.
 Axios is convenient that it doesn't already, it already converts the JSON string to an object by the time you receive it.
 When you use XOs. So you don't need to, because usually servers they send strings,
[00:18:36]
 like if you're sending an object through the client around here, if you're sending an object,
 the client throughout here. If you're sending an object, it's actually get sent as a string. And you receive it as a string in the front end and you're supposed to parse it and
 then that turns into an object. But axiels turns into an object for you when you receive it.
 So it's a little bit more convenient than using the fetch function.
 The built-in fetch function.
 Any questions about this one? Anyone get stuck here?
 Anyone still working on the setup or did you guys finish these problems here?
[00:19:34]
 We're going to get a new practice today.
 It's just a little one step up from this.
 It's not that much harder than this.
 Okay, so, yeah, just let me know if you have any questions about these steps here. Alright so for new information so we can take notes now that's it that was
 it for the review. I'm not gonna go over the answers not just yet but you
 gave me time to figure it out first maybe tomorrow I'll give you time to figure it out first. Maybe tomorrow I'll go over the answer for that first practice.
 Okay, so first tip.
[00:20:43]
 So we saw that we were not able to use async and await with component did mount.
 That's because when you put async in front of a function, it causes that function to return
 a promise.
 Well, TypeScript says, "No, you're not allowed to do that with component did not.
 Because if you return something with component did not, it's like you're setting it
 component did unmount.
 If you remember, component did unmount, we need to return a function.
[00:21:24]
 And then that function will run on the
 unmount. TypeScript says if you return something from here and
 it's not a function, and there's a problem. If you, if you, you
 know, stick async in front of this function, it causes it to
 return a promise. You won't see the promise, but it's, you know, stick async in front of this function. It causes it to return a promise. You won't see the promise, but it's, you know, it's under the hood, as they say.
 It's under the hood, the moment you put async here, you cause the function to return a promise.
 And that promise is not a function that component did not expect.
[00:22:04]
 And TypeScript doesn't expect it either.
 So if you want to use Async and await,
 Paulay function and use Async await from Async and await from there.
 So let's just copy this here.
 I'm gonna share my screen now.
 So under tips here, maybe this should go under react.
 So I don't have a React section here.
[00:23:07]
 I guess I can just make one.
 So you can either put it on the tips, or if you want to be more specific, it's for React.
 Maybe I'll just make a code sample here, JavaScript code sample, and that's where you have a component
 did melt, and you can put a function in here like get response. Like you're using axios to contact your back I'm going to highlight this because it's code.
 And I'm going to add here an example. Okay. switch over to the front end here and the gets in my home page.
 on the server. It's in the server page here.
 So I have all these promise.then that I'm experimenting with, and then I have a handle response
[00:25:48]
 because I was using the promise to get there.
 See if you put a sync here and you want to use a sync and await with axios.
 I'm going to get this error here.
 Right here because it expects a, well this one's either return nothing or return a
 destructor which is like a amount function.
 But instead I'm returning a promise if you put a sync here, you returning promise automatically.
 That's why there's an error there.
[00:26:30]
 If you remove this, then remove the error.
 So that's why we use the dot then.
 So now I'm going to change this.
 So I'm just going to rewrite this here.
 I'll save it.
 I'll just comment it out.
 And I'm going to rewrite this.
[00:27:00]
 I'm going to delete the mount. Now I can use, I can call Axios. I need actually, I need to, I want to get the response.
 So there's the function. I could said here, that component did mount, call a a function like get response.
 And then let the function use async and away.
 So here I'm going to put it inside and enter function.
 Why do I want to do that?
 Because it's going to be similar to a handle response right here where it uses a state variable.
 So I need to do that inside here,
[00:27:53]
 Interfunction, not an outer function.
 So here I can use async with no problem.
 See, and now I can await axios to get a response.
 And that's going to be from my back end. I can get it right away here. There's my response. I get it right away. This is basically just waits for this.
 And then it gives me the response right away instead of having to extract it from this resolve value.
 And then what did I do here?
 I stringified the response because it comes in as an object.
[00:29:04]
 because it comes in as an object. And then I just, and then I just,
 I stored it in the state variable.
 So this response is going to become an object.
 I mean, it will be an object coming in.
 Stringify it, basically, that's going to use a function called JSON, start dot stringify, and it's going to make a string version of the object.
 And then again, at the server response,
 so server response is a
[00:29:52]
 same variable right here.
 And I wanted to render the server response right there.
 So I'll set this server response here to whatever was unified.
 I'm going to just put an debugger right there.
 And I'll start this front end.
 And here I'm start for, I'll just put in here and run start.
 Okay, so I guess I didn't install the, oh, I'm in the wrong folder here. CD front end.
[00:30:43]
 I need to change folders to the front end or change directory. That's what that means.
 Ls means to list the files. So I can see that I'm in the front end. I can do npm start because
 the package.jsot is here. That's where it gets the script from.
 The reason why I didn't work before is I was in this folder here.
 I was in this folder and there is no package.json to supply the script.
 But if I change folders to front end, I see that there's a package JSON file which contains the start script.
 Right here. Here's the package.json file and it contains the start script.
[00:31:40]
 So I can run it from here from the front end holder, NPM run start.
 And then in the meantime, I'm going to head on over and make sure the back end is working so I can send a response.
 I'm going to actually, I'm going to put the net with a JavaScript debug terminal so I can put great points.
 and put great points and can run start. Oh, I need to go to the back end here.
 The back end has the package JSON file,
 which has npm run start scripts.
 start scripts.
[00:32:54]
 The drawback to using the bugger is it shows this new bug screen. It pops straight to it.
 If you don't want to see the screen, then go to the JavaScript debugger, but then you won't be able to debug. But if you're used to seeing it in terminal,
 that's how it looks.
 You have to switch to it.
 Otherwise, it won't switch to this debug screen,
 which is slightly smaller.
 And so it says, is this a on-local?
[00:33:17]
 It's 8,000 open and new terminal and type NPM1 build.
 So I've made myself a message there.
 Actually, I need to go to the back end.
 So it's not as simple as just type npm run build.
 I need to go to the back end and do npm run build from there.
 And it's a go to the back end and do NPN run build from there.
 And this combination script that opens up this, this browser will do automatically.
[00:34:11]
 There's a warning and that warning is vertical dependency, the request of a dependency is an expression that's coming from the express package.
 But so far, this warning is not really affecting our project,
 because we are able to run the express server just fine.
 Now, I'm gonna switch over and open a front end browser here.
 front end browser here. If I click on server that should start component in the mount. and then we can see the the the
 the
 the
[00:35:19]
 the
 the
 the it's not found. So let me see what's going on with my back end.
 So we're here. there.
 This is the back end.
 It's about a thousand.
 I mean make sure my server is calling that happily in the close 8000 axios.get
[00:36:13]
 let me see if I got any early scenario
 and then you can hear the eyes here and here just like this. So we should be stopping here in the server before this.
 And you have to go here.
 And you can leave over right there.
 And again, it's not stopping at the info here. [BLANK_AUDIO]
 [BLANK_AUDIO]
 And make sure my foot pack is correct
[00:37:50]
 You need this hard color to be under here.
 Just to make sure I can stop here.
 [BLANK_AUDIO] [inaudible] So the...
...and the whole speaking, the ring to us. I'm going to show this character.
 Now, usually, that's there. and you should require it.
 Let me just build it then. Npx.
 Not this thing.
[00:39:29]
 I'll just put it back in.
 On to try building the front end.
 Npx.
 Red cact.
 to X red cact and
 the production
 it's going to build it
[00:39:58]
 into the disk folder You can see that helps.
 See you probably [no audio]
 [inaudible]
 [inaudible] And it doesn't look like this would be... Okay, I think.
 Anyplace could not have this?
 Maybe because I'm running, I'm not saying.
 Maybe try to run even from separate.
[00:41:21]
 So I'm gonna try to pull the knees and I'm gonna circle the knees. I just use sand box of a nose.
 You can not play other beats.
 And then I'll open up the front end by itself.
 Right here. And I'll open it to the back end by itself
 right here
 and then I'll start to back end first first. And can start. and one empty I'm gonna build
 and then open up this
[00:42:52]
 and
 open and do it without the wrist over. And it starts.
 So just let's start the impact of the good active server.
 And then I can start the end of the other here
 the same exact problem
 axial
 the test failed to sense
[00:43:58]
 both in the corner
 [BLANK_AUDIO] [BLANK_AUDIO]
 [BLANK_AUDIO]
 [BLANK_AUDIO] It's not even stopping, I should be able to stop it there.
 And stop saying it's good.
 And it's axios.
 Should stop here at the end. [inaudible]
[00:44:47]
 [inaudible]
 [inaudible]
 Oh, is it because, uh, [BLANK_AUDIO]
 [BLANK_AUDIO]
 Stay here and get the response.
 [BLANK_AUDIO] [inaudible]
 Actually, you didn't even spot here.
[00:45:33]
 You didn't see it.
 It seems like the,
 that's fine.
 I think the not the source map is not working properly. there and then it happens line
 and so it's been mixing here just fine
 It didn't stop here at all And then we're going to go back to the blood working.
 See if that makes a difference. to look less working.
[00:47:06]
 See if that makes a difference. [ [ Inaudible ]
 [ Inaudible ]
 [BLANK_AUDIO] [BLANK_AUDIO]
 [BLANK_AUDIO] I think it's actually listening on that port because I remember earlier today
 after a whole bunch of
 processes
 and things that I was pretty here
[00:48:19]
 we need to restart
 everything in here?
 I can't see anything. I can't see anything.
 I can't the key files in here. I can put the key files in here.
 I can put the key files in here. [BLANK_AUDIO]
 And again.
 [BLANK_AUDIO]
[00:49:29]
 So it's communicating with 8,000,
 if the host of thousands.
 [BLANK_AUDIO]
 [BLANK_AUDIO]
 [BLANK_AUDIO] We're going to source now.
 Okay, so it got through this side.
 It worked in response.
[00:50:27]
 So I'm going to deactivate this now. I think just getting rid of the maximum processes.
 If you didn't know how to do that, then it would probably just be starting to improve
 here. probably just restarting the computer.
 Yeah, so I worked now.
 If you've restarted your computer and everything, it worked fine.
 But I did it so that I didn't have to restart my computer.
 It remained public in the task manager here.
[00:51:02]
 There was some extra node processes. and now there's a bat.
 So I had to just make sure I kept my end of those, and then somehow I got it working.
 Alright, so there you have a response.
 And, yeah, a little bunch of stuff here.
 So, it works. This is how you can use async.
 And await, with the moment, is called as a separate function.
 From your phase here.
[00:51:52]
 So yeah, it's stopping properly. So when I can do this now,
 if I press play, it will wait.
 So I get a response from the back end, and it's going to give me back the response here as an object.
 So the response is an object with all these properties right here.
 Oh no.
 Yeah.
 Okay. So I've triggered the wrong thing. I was supposed to stringify response dot data.
[00:52:29]
 Because response is an object with a data property.
 So I should stringify the data instead.
 And string refresh that.
 And then stringified data is just that string right there. That's the HTML string.
 Okay, so that one's correct.
 That's the HTML string right there.
 But like I said before, it should be communicating with the backend. I mean the part of the backend that sends data not
[00:53:07]
 ACML. So that's that was this API route. So the response is going to come
 in here. It has a data property and now it's an object that's going to stringify that object and it
 looks like that. I'll press play from there.
 We see that, so we see that a,
 a significant await can work with a component. This is long as you call that function separately
 from component of math.
 So first is getting an error.
[00:54:14]
 Okay, so that means you're missing at types node.
 So you should have this package here.
 App types noted.
 Because, because, uh, TypeScript,
 needs to know about those built-in, built-in JavaScript,
 uh, functions and objects and classes and
 that's what this does, have TypeScript.
[00:55:02]
 Okay, so I think it's time for a break.
 And then I'll just you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] All right, so we're back from the break.
 And I was supposed to have time to talk about this in the first hour, but came across
 that bug.
 But so let me just take this time to talk about this TypeScript topic.
 Shouldn't take too long.
 Something that you might be experiencing is is a function for image maps. So TypeScript
[01:06:52]
 declarations for external scripts. So that bootstrap object comes from an external script.
 From the CDN, same with the image resize, that comes from an external script.
 The TypeScript doesn't recognize functions
 that come from external scripts like CDN files.
 So to fix those TypeScript errors,
 we just need to inform TypeScript
 that we do expect to use those functions and objects.
[01:07:25]
 So add functions from external scripts.
 I should add here add functions and objects from external scripts.
 Here are the TypeScript declaration files.
 So let's copy this.
 And we'll add this to our, I would add this to the TypeScript notes.
 I'm going to share my screen now. Copy this.
 Can switch to the sandbox notes. You could have a TypeScript file here.
[01:08:26]
 There it is.
 You can put this one at the bottom of the TypeScript file. sample code, but your JavaScript.
 I'm going to add this part here, add functions and objects from external scripts to the Type for that file.
 Index.d.ts.
 And then what is going to be this comment is going to be add functions and objects from external scripts here.
 So, for example, one of them is the bootstrap object. So like, it's like we're declaring that there's a bootstrap object.
 We're going to just take the easy route and put any.
[01:10:15]
 So that's the first code sample there. I'll put it here in the TypeScript notes.
 And it's here too.
 And then there's one for image maps right here.
 I'm just going to manually type it out. So the one for image maps.
 So it's a function, but I'm going to use a class declaration for it. And I'll show you
 why. But let me just do this first Image map resize is the name of the function.
 And I'll just put any, also that's the easiest.
[01:11:11]
 I mean, the more advanced and the more precise way
 is to actually define, see, we're asserting something, right?
 We're using a colon, we're asserting it as any.
 We should assert image map as a function.
 It's just easier to put any,
 but the more precise way is to assert it as a function,
 not as any.
[01:11:36]
 And the bootstrap is, we should assert it
 as some kind of object instead of any.
 But we'll just go for this until you get more, like more, more knowledgeable
 about TypeScript and you're able to define these yourself. So let's see.
 We had a, I'm going to just copy over some of my things from
 sandbox level three, such as the image map.
 So I'm just going to get sandbox level three loaded here.
[01:12:24]
 And copy. I'm just gonna get sandbox level three loaded here and copy
 actually the tool tips.
 I'm gonna copy the tool tips.
 First, start with that.
 Actually it's not called sandbox three, it's called react workspace.
 All right, so where are my tool tips?
 I think it was in the home page.
[01:13:07]
 Yeah.
 I don't have a separate tool tip.
 So I'm just going to make a separate component for that. Tool tips.
 And then import react and react and export function to the tips. I'm going to make this a section so I can just stick it into the gallery page or something. I have a gallery page.
 Now, I just stick it in the home page. That tool tip belong to an image.
 Let me just copy that image here.
 And I should kind of import an image here.
[01:15:28]
 Okay, so I have an image to just copy that tool tip. The initialization object right there.
 I'm going to need when the component mounts.
 I can't do it before because the tool tip needs to see the stuff rendered.
 That's why I need to wait for component to mount.
 And then the tool tip will see this render and then I can access it.
 So here's the code. So I need to get the new year ID here.
 It's going to get this item right here. That's, that's why I have to wait for a
[01:16:29]
 perimeter so I can get this item. And then I can initialize that tool chip for the, for that image tag.
 So here we see bootstrap is the object.
 It's an object.
 So usually when we create an object,
 we can go like my object is like that, right?
 And then we can add properties to it.
 So if this was like the bootstrap object up there,
[01:17:05]
 it would have a tooltip property.
 Actually, we'll have a tooltip method.
 So I'm showing you these before.
 Like you can create a function,
 but you can use that not in this function.
 And then it would like do something here. So that's that's this is how
 you would basically define an object like this. It would have it would be an object with a tool
[01:17:37]
 chip method. And then we implement it right here. It would take in some kind of element.
 See, this is an element, right?
 So I just put here, this is how you would basically define it.
 If you were going to go in here instead of putting any,
 you would say that it's an object that has a tooltip with a function that returns nothing.
 Actually, you would probably have to use an arrow function and say it's like that.
 You define it here, but you can just put any.
[01:18:29]
 This is how it would look if you were to define it more precisely.
 So that's an object.
 And then the one for the image map, let me see if this works though. We can just add this through the home page.
 Add it before this. Two little tips right there. So if this works, I should just be able to
 little tips right there. So if this works, I should just be able to put up the home page mouse over the picture and it says happy New Year. Yeah, there it is. So You don't see a TypeScript error using this bootstrap.
 Anyway, what's in here?
 But if I remove this, right here, if I remove this,
[01:19:35]
 there's the TypeScript error now.
 And I'll find bootstrap. And it doesn't really tell you how to fix it.
 That just means, you know, you're using an external script and
 TypeScript doesn't know about it. It's a, that external script is coming from the index HTML file.
 And TypeScript doesn't know about this one.
 It just knows about anything that's connected to index JS or index TSX like anything that's important.
 And it knows that we didn't import this bootstrap object anywhere.
[01:20:29]
 So imagery size, so let me just copy an image map here.
 I'll copy this component.
 Paste it into my views here.
 Turn it into the TypeScript.
 There's no errors.
 So that's good.
 And we see here image map resize. There's no
[01:21:04]
 actually, let me it's not going to work because I'm not And we see here image map resize. There's no actually in the
 It's not gonna work because I'm not
 And using in these map resize in here, so I'm gonna add it
 Just gonna copy it from my index h-CML file from here where it was working properly.
 So there's that external script.
 This is the one where who's here?
 Who's here?
[01:21:41]
 Who's here?
 Who's here?
 Who's here?
 Who's here? Who's here? Who's here? Who's here? Who's here? Here, whose shop is coming from this external script?
 Gonna paste in that image map script right there.
 And I'm going to insert that image map right after the tool tip. See if it works. free size is not refined. Again, you need to restart this front end because I change the
 oh, I need to copy that, uh, I need to copy this index 8 CML to the public folder.
[01:22:54]
 And then just remove this gist right here, just make it the name.
 Make it the name that's being bundled. So I have two index HTML, one in the public folder.
 That's this one, and I have to make it the name as being bundled.
 And then I have the other one that's for GitHub,
 I have to have the path for it.
 So it should work now. Oh, I turned to put the shapes here.
 Copy shapes from these assets.
[01:24:01]
 So whatever image map you used, you can just copy it over to your run end.
 And so I have a drum on the part here. Shapes.
 Okay, drum and port right there.
 Okay, that should do it.
 All right, I'll give this one here.
 And I will leave these logs there.
 Okay, that looks good.
[01:25:05]
 And this map is working fine.
 I should be able to expand it.
 Okay, I'll make it 75% here.
 Okay, it's bigger. and this map is working fine.
 So image map resize.
 We see that it's a function, but when we declare it here, we're declaring it like
 an object, because it's constantly using the green making an object with const. with cuts, nothing you should know that functions are also objects.
[01:25:46]
 Let me show you.
 So image map resize image map resize if I press and, see it has these properties here. It even has a name.
 The name, well it's a blank name.
 Image map resides.
 So basically this is a function, but a function is also an object.
 It has a length.
 Probably not going to see much about that length.
[01:26:54]
 And you see what happens if I put length.
 The length is 1.
 So it doesn't make much sense, but it's still an object.
 But it's still an object.
 But it's also a function, image map resides.
 If I press enter, then we see the function definition right there.
 So that's why we can do const and put image map and put any because functions are also objects.
[01:27:31]
 If I disable this, then we see here same problem.
 TypeScript doesn't know where it's coming from. So that's why you're getting this error. And we're telling
 TypeScript here. Don't worry, I know where it's coming from. Just treated like any other object.
 And that's what this does.
 So then the close this one. This is React Workspace from level 3.
 Don't need that anymore.
 Let's see if I missed anything here.
[01:28:14]
 Okay.
 Then we add this sample code to the top.
 That's the image map resize declaring it as any object.
 All right.
 So that's what you do to get your TypeScript errors off of your external objects and functions.
 All right, so now we're going to spend the remaining time or of this hour on practice.
 So you have about 30 minutes or so.
[01:29:07]
 Front end request practice. Here you can
 observe the difference between request from the front end and from the
 browser. slight differences. Maybe you'll notice it, maybe you won't.
 You have to pay close attention. So in the back end, add a route called headers
 and process it with a handler.
 So this is just one step, but there's
 many steps involved to get this done.
[01:29:40]
 This is a heads-up there.
 And then in the front end, use Axios to send a request to the headers route.
 And I didn't mention here what you're supposed to do with this headers route yet.
 That's because I wanted you to do this.
 Use a JavaScript debug terminal to observe properties in the request object.
 I should put here in the back end.
 In the back end, use the JavaScript debug terminal
[01:30:14]
 to observe properties from the request object.
 Because your back end is going to have a request object.
 And you can inspect it with a JavaScript
 in the log terminal. And then I want you to code the handler,
 because your handler receives that request object, let it respond with three
 values from the request headers. So that request is going to have headers. Respond with three of those values from there.
 Then use the browser to view the response from the headers route.
[01:30:58]
 You'll see you might see a difference, a slight difference there between what the front end gets and what the
 back end gets. So in the front end use the component to render the response from headers.
 So your browser looked at the header's route and your front end looks at the header's route.
 See if they have any differences in what they render.
 Then in the back end, add the route request and process it with a handler, so you're making
 another route and another handler. Go the handler to respond with the request path method and origin.
 So the request object has a path,
[01:31:48]
 a method and the origin, respond with those.
 Then use the browser to view the response
 from that request route.
 And also render that response with your front end, a react component.
 Can you tell that you work on this for the remaining of this hour?
 Does that mean that if you have any questions?
 In the meantime, I'll work on grading. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, I'm going to start up the break now. [ Pause ]
[01:55:09]
 >> All right, so you have to look great. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 All right, so we're back from the break.
 And in the third hour, you can continue working on the practice.
 Did anyone finish the practice problems?
 Thumbs up if you did.
 Thumbs up down if you didn't.
 Halfway.
[02:05:44]
 halfway. So working on it. Okay.
 Well, in the third hour, you can continue working on the practice or work on the assignment that's due on Thursday.
 App stone back end.
 So I'm going to start the breakout rooms.
 And I'm going to call on mint mini evaluations. So as usual, there will be room for collaboration, one for silence, one for many evaluations, and the main room will also be available.
 Okay, let me see who's first on the waiting list. [ Pause ] I'm not saying anyone wants a volunteer. [ Pause ] Okay, so I can work on corrections right now. Alexander, do you want to do your correction?
 For a week two.
[02:09:10]
 I could try.
 You can try. Okay.
 I'll see you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 All right.
 So, we're back from the breakout rooms.
 And we're going to just conclude the class.
 So we learned that you can use Async and await in a React component.
[02:50:39]
 You just have to just let your component the mount call a separate function.
 We also learned declarations for external scripts.
 So if you're using external scripts,
 TypeScript will complain.
 So we didn't have to fix that.
 And then we started front end request practice.
 request practice. Okay, so the attendance, make sure you mark your attendance. You have three minutes to do that. Other than that, fast as dismissed. Less today's lesson on Express,
[02:51:26]
 and I'm just gonna conclude my meeting with Alexandra
 here in the breakout rooms, I'll reopen them.
 Let me see, there's a question there.
 For the practice, the request path and method resolve properly, but the origin
 is showing anything. Now that's that's that's one of the things that you'll see differently there, the origin, depending
 on which you're using.
 Depending on whether you're using the browser or the front end, the origin changes. Does it mean you did anything wrong.
[02:52:27]
 You have no control over that request object.
 So if it says the origin is blank, then the origin is blank. That's how it is.
 Okay, so there's going to be only three more days.
 Let me see.
 Wednesday, Thursday, and Saturday, three more days left, and five
 more and five many evaluations to do. So calculate that. If anyone can stay and do a mini evaluation after a class, you should do it because
 somebody is going to get left out and miss a point. Okay, so I've opened up the, uh,
[02:53:47]
 Okay, so I've opened up the room. I'm just going to confirm. [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 26, 2025 21-28.txt"

Transcript from Mar 26, 2025

[00:00:00]
 Good evening, everyone.
 Thanks for coming to class.
 Welcome to Code X Academy, level four, week three, day three.
 And all this week, we've been practicing with Express.
 In the first hour of today's agenda,
 we'll take attendance, do announcements, review,
 and I'll go over some new expressed topics.
[00:00:33]
 Then in the second hour, we'll practice express.
 Third hour, there'll be time for many evaluations
 and working on the assignment.
 Remember, there's only three more days of this week.
 And no one has done their many evaluation for this weekend. So there's some of you who might
 get zero points for many evaluations.
 are zero points. I mean, you'll be getting zero points for a submitted on time, but you can still get some points for, you know, late doing it late.
[00:01:19]
 Now, make sure to take attendance.
 And on over to your code X account and mark yourself present.
 And now time for announcements.
 Then get that loaded up for you. [ Pause ] Alright, so on regular schedule and make sure to put your name in the waiting list is you just click on add submission and
 while the instructions are there,
 for the mini evaluation week three.
 Click on add submission place at least one character in the online text section.
[00:02:46]
 And then click on the Save Changes button.
 Because if you don't put this one character, it won't let you change changes.
 This is how you get when you click on that and you're able to save changes,
 then you'll get on the
 waiting list to take your mini evaluation and then if you take your mini
 evaluation this week you can get one point here.
 So, many evaluation week two, that was corrections. It closed yesterday before class.
[00:03:35]
 And to get on the waiting list for week three, many evaluation, we should have submitted
 that yesterday before class.
 If you missed any of these, if you missed this one here and you need to raise your grade
 to more than 75% you need to contact the student success team to have it reopened
 free.
 Okay, so the side fits,
 the TypeScript.
[00:04:12]
 Okay, so I'm going to get this done today,
 like the grading for it.
 I'm going to get it done today.
 So that you can still submit corrections by Thursday.
 And even if you don't finish your corrections for this capsule's TypeScript,
 just submit it for corrections anyways because I won't be able to create it right away. So submit it for corrections and keep on working
 on keep on correcting your assignment until I'm able to grade it. back end. And this is due on Thursday before class. So basically these assignments,
[00:05:11]
 you have one week to complete them. If you've been paying attention in class, it probably So, I'm sure to take that long.
 Practice problems again there are here on the side and the mini evaluations include
 these.
 I'm going to include the practice problems for this week.
 I'm going to add it here to week 3.
 So as a reminder, practice problems will be part of many evaluations. evaluations and then help seeker if you get stuck for 15 minutes or more please
 post your questions in July cohort. I haven't checked it to me. I can throw down these.
[00:06:27]
 You start that.
 Okay, there is something in here.
 Can see it.
 Okay, so there're seeing this stuff.
 All right, let's see here.
 All of the handle factors are now passing. [BLANK_AUDIO]
 [BLANK_AUDIO]
[00:07:14]
 [BLANK_AUDIO]
 So let's see here.
 Yeah, this is not going to work.
 Type of the name equal number. So you're actually passing a number instead of a string then.
 But if you're getting form inputs,
 if you're getting form inputs, they're always coming in the strings.
 What you're supposed to do here is you're supposed to convert the string into a number.
[00:08:11]
 Okay, I was leaning toward that, but I wasn't sure if that was the right thing.
 So this may this will never be true right here because they're always this name if you're getting it from the form is always going to be a string. - Right, and that's what that AI was saying,
 but it never actually said,
 compared the string to a number.
 It was doing all kinds of other weird things,
 so I ignored it and left it until I could ask you.
 - Yeah, so it seemed very developed.
[00:08:40]
 Okay, so we had another person here,
 T-me-d practice.
 Some traction test.
 So I might have to give her strings to numbers at that point there. Yeah, well, it's going to be a
 it's going to be a TypeScript problem.
 It's going to be a TypeScript issue.
 Else the compile.
[00:09:13]
 What you could do is you can force it.
 So you see maybe you can force it.
 I think we should notice that in one of the lectures also.
 Oh, and Chris replied there, but I didn't see
 Not in the hearing settings
 So I don't know which
 Or should my
[00:09:41]
 I don't know if he was reporting
 I don't know if he was reporting. I think it's according to this one, but if the person puts a number for their name, it will be a number.
 So, I have to give her a ring to it.
 That's the A/D part. This subtraction one is.
 So, I can do it to ignore that error and compile it anyway. as the D-bar. This subtraction one is... So yeah, so...
 I can just ignore that error and compile it anyway.
 Yeah, the learning is textured errors,
[00:10:10]
 so you should be able to run the test anyways.
 That's just type of telling you
 that you're putting in the wrong...
 Yeah, remember if it passed or failed.
 I think it did fail that test.
 I don't remember it.
 Okay, yeah, this one is probably just from the top of right? Not from actual
[00:10:31]
 tests when you run it. Right, right. Yeah, that's the VS code here. Yeah. So yeah,
 you get TypeScript errors with our favorite business. You know, TypeScript, it checks, it checks which here, it checks how you're
 using a function before you run the program, but when you run the program, there's
 no more TypeScript. So if you're receiving like input from a user, sometimes the user
 will put numbers sometimes and put letters so
 you have a number you're going to use. So there's no more types like I said
 there's no more typeskip when your program is running.
[00:11:17]
 So the title is just their typeskip is just there to prevent the bugs before you know the problem.
 But if it's not about then what you could do is you can you might be able to put as
 number right after this or as any.
 Oh, that's it.
 You can and then you're not gonna have any more tactical bearings, so they write out to this as any.
 This is kind of what expects a number, and if you just make it as any,
 then it's gonna let it go to here.
[00:12:32]
 You make your pages points. So you're getting up, you should have a different repo for your front end and a different repo for your backend.
 Basically that means combined.
 Otherwise you'll have to change something to your ratio.
 And it chooses from a branch.
 He needs to render from a branch.
 So it becomes more difficult so if you're trying to put
 get help can only render your front end
[00:13:17]
 so let's see
 let's see how it's moving yeah you should have a
 let me see so have you done that the folder structure because so far Okay, so it needs to. You configure your render in the front and holder. Yeah, so I need to show you the like how to configure that,
 since we're putting both the front and the back end in there.
 Sorry, I have a comment on that here.
 I'll do that.
 So I'll show you how to do that tomorrow.
[00:14:27]
 What you could do is, I mean, you can have one project and then that includes your front end and your back end, but
 your front end and your back end have separate repos that might make it easier.
 But I'll show you a way how to do it if you have a separate program.
 You just want to do it for one more weekbook.
 front end. So the question is which so we put in the front end folder. So the front end folder is you need everything that you had in your front end basically except for
 the notes. Everything in your front end folder. Everything that you use for front end,
 the webpack, Babel, get ignore, index, HTML, source folder, this folder. So everything
[00:15:59]
 that you need to run your front end should be in the front end folder. And your back end is different.
 It's not going to use the same files. And they might be similar like the content that
 might be similar like the web pack might be sort of similar to the front end web pack,
 but they're not the same. So they're completely separate. So when I've been showing you how to do back end,
 I use a different project for that.
 And that shows you a clear, clear difference,
 or a clear line of separation between front end and back end.
[00:16:39]
 Once you do it like that, you have two separate projects.
 Basically, from an end project that goes in the front end
 folder, the back end project that goes in the back end folder.
 The question is, how can it be deployed if it's in two
 wheat bottles?
 So if there's a front end repo that can be deployed, that cannot be deployed
 because that's back in. And GitHub only renders front end code. We're using GitHub
[00:17:19]
 for our backend code in there so I can see your code. But it won't run there.
 I'll teach you a way to run your back end code. I mean to deploy it, but it's nothing to get there. We have to get there first and we're still working on back end.
 So there's no notes section that's fine.
 So there's just going to be, you know, for a capstone, it's going to be set
 where it's going to do the sand box.
 So the sand box folder structure is here.
 So it's going to be a set where folder structure, except there's just not going to be a similar folder structure except there's just not going to be a notes
[00:18:07]
 folder.
 But there will be a workspace for the root and then a root space for the back end.
 And then a root space on the front end. There won't be any notes over if you're talking about the capstone.
 How did they communicate if they are in separate repos?
 They won't communicate right now because the back end cannot be deployed in GitHub.
 So your front end is not going to communicate with your back end yet.
 I haven't shown you how to...
[00:18:51]
 Whether you're front end when it's deployed,
 it is not going to communicate with the back end
 because the back end is not deployed.
 It's just...
 You're just going to put a copy in...
 You're going to put a copy of it and get hub.
 And that's about it.
[00:19:25]
 The deployable link will just be for your front end. There's all the deployable links for the back end yet.
 We are going to use AWS NAML to do that.
 We're not quite there yet. I think it'll be next week we can do it.
 We'll go to the back end.
 Just get everything to work locally and then just basically you have a front end and
 the back end that can work locally. Push it to get in hub, and just know that when it's in GitHub,
 they won't be able to, your front end cannot communicate when you're back in.
[00:20:12]
 Not yet, I haven't shown you how to communicate when they're in the cloud.
 I just want you to get familiar with getting them to communicate locally.
 I just want you to get familiar with getting them to communicate locally.
 Yeah, if you're confused, why are they not working in the cloud? It's because I haven't talked to you how to do that yet.
 How do you kind of get them to work in the cloud?
 I just want you to get them to work locally first.
 [BLANK_AUDIO] [BLANK_AUDIO] So if you wanted to render without errors, you should check the root path.
[00:21:13]
 That's one way you can do it.
 If you check the root path, and if you're a root path right now is in GitHub, then don't
 do it in XCO's request
 Don't don't send a request if you're if your
 If your root your root path is in get that side We have marked good days, one at a time, and we're going to go and hear the review now.
 Let's see to you.
 Right now, I'm gonna see if I can cheat you
[00:22:08]
 how to hit your front end to deploy even though it's
 in a separate folder.
 If me or me not, we possibly haven't tried it like that.
 I usually haven't been separate people that are...
 I'll go to check.
 So let's take notes now.
 [
[00:22:22]
 [
] Alright, so yesterday.
 So yesterday, we talked about this and had some technical difficulties and took longer than I needed to show you this when it should run by and now.
 So basically you can use async and await a react component, but not in component did
 mount within a separate function like difference plus. And notice where we're going to react in D. Here it is. and the instruction right there.
 See it work.
 Can you just get this and start it?
[00:23:53]
 And then start.
 I say, you can go to the front end.
 It's not going to work in the water. Because I don't have any scripts in the water. [BLANK_AUDIO] and that.
 The problem is that when I had them running them in one project, so it seems that that will happen again. [BLANK_AUDIO] So we see what we find. [no audio] So here when the component mouse is going to call a different spots, that's where I have my a sync and wait and it's really easy to read the code here.
 So it's going to check the API route, get a response and the response, the data and the response is inside here,
 and this data property, it's going to come in as an object.
 So I need to signify it.
[00:26:53]
 And then I save it inside in this state,
 where if I don't certify it, it's just going to say object object.
 So this one right here here is a safe variable.
 It's rendering a string instead of an object.
 You'll even get a TypeScript variable if you try to put a C.
 When you set the initial value here, Type script sees that you want the string.
 It's just an empty string right now at the beginning.
[00:27:31]
 But then later on, I put in another string.
 But if I just put in response.data,
 Type script will tell me hey there's something not right there.
 Actually it's not like it's any. So it could be a string and it could, it might not be a string.
 So type script doesn't catch it. When you use any, just like this one, it basically
 enables type script.
 It doesn't check.
[00:28:10]
 So type script doesn't know that it's coming in as an object,
 because this data might be a string or it might be an object.
 But when I test it out and I try to render response not data instead, it shows me object
 objects.
 So instead, I stringify it first. Okay.
 All right, so this is another thing.
 Um, types good decorations because they're here.
[00:29:13]
 Not importing them with JavaScript, when importing them with index HTML.
 So here's the bootstrap script right here.
 And here's the image here size here.
 When they are in here, TypeScript doesn't know about them.
 So when I try to use them,
 I think it is. [BLANK_AUDIO] Okay there it is. Two tips and evidence map.
 So, two tips.
[00:30:30]
 Right here, I'm using the bootstrap object.
 But notice I'm not importing it anywhere.
 That's because if I import it through an external script like this,
 then everything connected to this file has access to this new step object. The TypeScript
 doesn't know about it. So I had to create this declaration file index.b.ts and I'm declaring that bootstrap is any value. It's just
 the easiest way to do, but it's better to make it the exact value which is bootstrap is an object with a two-chip method, which accepts an element and returns void.
 So if you don't know how to write that from the tool, you can type it for any of your stuff you have to have any for now.
[00:31:47]
 And that image resize, or if it's not resize it's a basically declaring it's a like an object here
 x because functions are actually objects to and I'm just saying it's any kind of object or any kind of value.
 It's just easier.
 But it's better if you can be more precise.
 Image map resize.
 Instead of being an object, you can be more precise and say it's a function
 that accepts no parameters and it returns void.
[00:32:47]
 If I decide to save the leaves here, then you'll see the texture of the error.
 All we need here is even though I didn't save the file. here then you'll see the texture here.
 This one just tells texture to that.
 I'm using these items or these objects in this function is known and I'm just telling
 try to prepare and know about the information we're about.
 Okay, yeah, we also did the front end request practice.
 We made some some routes and looked at the request object.
[00:33:52]
 some routes and look at the request object and experimented with it in a little bit. Did anyone finish this practice?
 Thumbs up if you did or come down if you did it.
 How far did you get with this practice.
 This one should be pretty easy. I mean, you should be able to do this with in 30 minutes.
 If it's done with it, it's better.
 It's a bit of a sense curious to learn again.
 You know, I want you to get to the point where you can just do this pretty quickly. I'm not going to go over that practice right now.
[00:34:36]
 I'll let you figure it out.
 If you have any questions like something's not clear, just let me know.
 But remember the practices will be part of many evaluations.
 So it looks like we, the practices that we're seeing this week,
 you get asked about it next week.
 So you get your notes ready. This is a new topic on Express.
 This is the new topic on Express. So this is a review. So in level two, we learned about proxy servers.
[00:35:15]
 If you try to communicate directly with an API, sometimes get blocked. And one way we got around that is with a proxy server.
 The server doesn't get blocked. The server can communicate all at once with another API.
 And none of the responses get blocked.
 and none of the responses get blocked. And so from the front end, they
 process a proxy server was required to receive a response
 from APIs.
 And these are a list of the APIs that we talked about
[00:36:02]
 and proxy servers that we used.
 So make sure that copy this down and put it in the notes.
 And then turn my screen now as I put these on the notes.
 And as I show my reads, and it's like so many things.
 What size they get so you can run for their color work.
 This one's like about express, so I'm going to express this. And it goes in your [ Inaudible ] Okay, so open TV dot com.
 This is a trivia website.
[00:37:14]
 It's an API that gives you trivia questions. If you want to put choice, give you a question and open for choice.
 And another website that we used that I showed you as an example, but we were free to
 choose any API from the long list I provided, but this one's
 same keys with stands for favorite quotes.
 So what way you can get your API response is like this one right here.
 Basically it's this web page and then put QOG need code in the date, that's what it stands for.
 And then it sends you a several response with the code in the date.
[00:38:16]
 It looks like this if you're using Chrome, but it looks a little bit better. and and
 actually
 before
 I can
 Okay, so
 If you have it now, okay, so
 It doesn't happen to be on edge. Like it's like changing the one.
[00:38:49]
 It's available here.
 So the quote is,
 the world is changing very fast.
 Big will not be small anymore.
 And will be the best, the biggest level.
 And we have an author, the product. Those are probably the only two things that we've used from all this
 information. So when we send a request to the server, we see a response that's like this. Similar to your So, I'm just going to leave the URL. I can paste it here. It gives me the question while Apple was formed in California in which
[00:40:11]
 Western state was Microsoft. And then I have possible answers here watching some Colorado
 Arizona. But the correct answer is "me" next to it.
 So if I sent a request to this API, send me some data that looks like this, and I can
 form it into multiple choice questions on my website.
 But if I wanted to communicate with this API, I had to use a proxy server to do it.
 Because if I communicated directly from my turn
 in, it will be a press gets blocked.
[00:40:49]
 We use proxy servers like--
 we use proxy servers like
 a core proxy right here.
 We use proxy servers like forest proxy right here.
 So forest proxy, what we do it is it's like we put a question mark and then the URL property
 equals and then you put the URL and it lets lets you communicate with that API. This is the URL of the API right here, including the key, the multiple is the value.
 Another proxy that we use is the thing proxy.
[00:42:04]
 And the way this work is, is you just put your, after the, after this, right after this
 link, you just put your, your API URL right after, you don't need to put that question
 over.
 Sometimes, we have to switch back and forth because for like one API may be
 think proxy will work and course proxy will not work but then for another
 API course proxy will work but think proxy will not work here.
 And that's just a review of how we use APIs and how we communicate it with them. And then here, we're going to teach you how to make your own proxy.
[00:42:59]
 This one's pretty easy.
 I think we could finish this right until the great time. Let's copy this here.
 and sun is in the distance. [noise] So we're going to start with TDD first. Write tests or a function called get_vote.
 Note parameters.
 The contents of the function properly returns information from the fake choose API. the right. Code get put.
 According to test specifications,
 add a route in handler.
[00:44:30]
 Ten, seven a response.
 The results of get code.
 And then in the front end use exhales in a compartment to render the response.
 Okay, so there it is.
 So TDB, this is going to be in the back end.
 Because we're talking about a proxy.
 This is the back end.
[00:45:01]
 So we're going to close this in the back end.
 So it's going to be a module.
 A bit full.
 Right test, we're going to function called get_pope with no parameters.
 So I'm just going to function with the root.
 Get_pope. Not test. Not cheat test. the module. And then I need to include the tests. I'm going to use an arrow
 function here. You can either use an arrow function or you can see, or you can create like test.
[00:46:07]
 I'm just going to do it like this for now.
 If you put a narrow function here, it's basically
 that is your call back function. Your arrow function is your call back function.
 But here, it's making it very clear that it's a call back function, it's separate.
 Okay, so, just hit "hold".
 Or I can call it "all tests". for the whole testing.
 And then
[00:46:57]
 what is get code supposed to do.
 It is supposed to return information from paid queues API.
 Okay, so one thing I can test for it, it receives a response from the choose API. I'll put a I use arrow function for this one.
 And then for the range phase, there's nothing I need to arrange.
 It's not taking any variable any parameters.
 So basically, there's the act base. Get quote is the function.
 It doesn't take any parameters.
[00:48:11]
 And I should be receiving a response from it.
 It's going to return a result to me.
 That's what I expect. I haven't given
 the function yet, but I'm creating Gitful. I'm expecting to get a result, but that's
 going to take time, so I need to await that. And to await that, I need to put a sync
 right here. So now I just need to make the output before I do that.
 Let's put here what I expect.
[00:48:52]
 I expect, I expect results. You can also just experiment.
 You can also just experiment.
 You can also just experiment,
 you can just go to and then you see a whole business stuff here.
 Here it is to be defined.
 OK, so I can do something here.
 Get full.
[00:49:41]
 I need to create that.
 Function. get pulled 92, create that function, get pulled.ts and it's supposed to be a function that takes my parameters and it returns something. So I'm just going to return 123 for now.
 I know it's cheating, but at least I can get this test to pass.
 And let me wait to see this because it's not an honest. Let's see if we can get the test to run.
 We see the response in case.
 So it's probably not good in the ground.
 I expect result to have, as you have, property and the author. and we should also have a something like that.
[00:51:07]
 Let me see here exactly. I can see exactly if I go to
 5q.com. I can see
 what values I'm supposed to get.
 They are supposed to receive an object that has a So it's not called called called body.
 Let's see if I have a test here.
 And if the script. [no audio]
 [no audio]
[00:52:19]
 [no audio]
 [no audio]
 [no audio] [no audio] back in a second. And you edit the script for your back in, because we're in the back end.
 And you head on a little bit, and then you turn the back in here.
 And it came test.
 It's going to fail because it doesn't have an offer.
 I can lock it, let you quickly pass by turning the cost results, people's walk there and
[00:53:06]
 you say that's a fog and then
 the body
 is
 among the world
 send us up you can test that.
 It passed, but it's not actually doing what I want.
 I just wanted it to get somewhere.
[00:53:39]
 So I need to test for something now.
 I need to do a brighter, better test.
 Maybe this is not good enough.
 So it's--
 I just-- I'm just going to do it properly.
 What we need to do is, just at the point of your property, return information from
 the case API.
[00:54:18]
 So I guess this is good enough.
 We're going to do the wheel now.
 Using axios.
 [INAUDIBLE]
 Right, is this one?
 It's not here.
 In the back end.
[00:54:39]
 Yeah, it's not installed in the back end,
 so I need to install it. Even in the clean end, install X-E-S.
 X-E-S.
 Get.
 And it's pretty easy here. This is the website for the URL.
 I need to await that and get a response. So, I need to have a sink here
 and then I can get a response.
[00:55:32]
 Then the response will have
 not given sure what I'm going to get. Then response, we'll have,
 I'm not giving sure what I'm gonna get. So, I think it's gonna have data in it.
 I can test it.
 So what I need to do is run this,
 and JavaScript,
 debug terminals like an watch it happened,
[00:56:04]
 or debug this. So I'm gonna do that. You can do that. You can do that. You can do that. You can do that.
 You can do that.
 You can do that.
 You can do that.
 You can do that.
 You can do that.
 You can do that.
[00:56:11]
 You can do that.
 You can do that.
 You can do that.
 You can do that.
 You can do that.
 You can do that.
 You can do that.
[00:56:18]
 You can do that.
 You can do that.
 You can do that.
 You can do that.
 You can do that.
 You can do that.
 You can do that. You can do that. You can do that. You can do that. and I need to go to the back end here and see how it's actually
[00:56:36]
 it's not going to be one spot
 but let's see if I can cover the response
 see if I can cover all your spots. Then I can see it.
 Let's see what it's going to respond to.
 Then you select "Snot".
 Then you tap on the here.
 From the clean and blood pack with that.
[00:57:35]
 So it's now,. That's why.
 It has a data.
 It has a data object which has a root which has a root and it has an author and a body.
 So I can work with that.
 So the author is response which has a data as a data property which has a code property which has author. So that's not going to save an author and put it in the body.
 It has that's the risk.
 They can the response object data property, code property and body. So I'm just going to press play here and I can see I can see it's just going to go like
[00:58:56]
 this. the results better.
 So I'm just going to let this one
 come in.
 Around this year,
 it's going to get the quotes. It's going to get a result.
 And this result is nicer because I'm made this result,
 right?
[00:59:29]
 I made this proxy.
 And it gives me an author and a body, right away.
 I don't have to--
 I don't have to wait through all those properties here.
 I don't have to wait through all these properties that
 were from response because my
 my proxy gives me exactly what I need and I just basically need the author and the body.
[00:59:55]
 I can call it a factually I think I should rename it to quotes.
 I'm going to rename it, I don't like calling it body, I want to call it quotes. And instead of calling it body here, I'm going to call it a quote.
 That's better.
 I'm going to try it one more time.
 Okay, so this one's going to, it's going to use my proxy server.
 This is the proxy server right now.
 I got a result in the command.
[01:00:37]
 It has an author and a code.
 So it's going to expect to have an author and a code property. And the test passes.
 So, so I did this. I coded get code according to the test specifications. And
 now I just need to add a route and a handler in my back end.
 And then in the front end, I can communicate with it.
 So I'll take care of this in the after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and we're going to continue with this lesson on express
 specifically the custom API proxy.
[01:12:52]
 So one thing I can test for as a results, the quote will not be the same as the second time I asked for it. So what I could do is put result one and result two. And they are going to be objects. There's supposed to be objects that have a author property which is a string and a quote property which is a string.
 Actually, I could put them on the same line here. maybe I can't.
 I guess I can't.
 Maybe to be separate.
 I mean, I could put the model the same line, but then I still need to
 put this here.
 Alright, so I'm gonna have a result one and a result two and they should be different.
[01:14:12]
 I've already declared it up here, so I shouldn't be declared right here. I'm going to to also have those properties. and I can expect them to not be equal. So I can expect result one dot author
 this one I can put not
 not to be the result to author.
 So the author should not be the same, and then I can expect the result one quote, not to be the result to quote.
 The result to the quote. Okay.
 So I'm asserting a lot of things here and this is
 at least it makes it more interesting.
[01:15:56]
 Actually I could have two tests. I'm going to, I think I should break it down the two tests.
 Break it into two tests. The three responses
 which are different.
 So that's for that one.
 I'm going to just clear this up. I'm clear this one up here.
 Actually, I can keep, I guess, the
 better to have that, something in the
[01:16:34]
 arranged phase right there. I just
 declare the, declare the variable.
 So two different tests, specific purposes.
 One just checks it.
 If it will receive a response from the acute API and where I can check that if it will receive a response from big Q's API. And where I can check that is that I will receive a author and a quote.
 And then I check, you'll receive responses which are different.
 So I'm getting, I'm preparing two variables.
[01:17:19]
 They're both going to receive responses and we want to make sure that those responses are indeed
 from faith cues and that the author is not the same in both responses and that the I'm going to test it now.
 Test past.
 Now the next thing you need to do.
 Okay, so we're working pretty good.
 We have a handler there.
 I'm going to focus it on module.
[01:18:15]
 And the next step, add a route and a handler to send a response.
 We'll just start with this.
 Add a route and a handler.
 That's in the back end.
 I'll start here. Move that I call it "app"
 Against.
 That's gonna, I'm just calling it "poke".
[01:18:52]
 So I guess I'll print the handle of "poke".
 I'll drop the router and the router holder.
 So, the port.ts.
 So, I am going to handle this by back end server.
 I am going to have a router or a path for a slash port.
 When someone gets that or when the front end is set,
 we're going to go through the code handler, which I'm going to create right here.
[01:19:36]
 Export function code. And it's expressed handler, so those received a request.
 And the type of that request is from Express here.
 See it's from Express.
 And they also receive response object.
 Right here.
 This is the one coming express.
 Okay, so I have my hand or my round hand over there.
[01:20:15]
 Let me import it here. Alright, so this one should be handling that.
 I can test it actually.
 Put it in the bunder there.
 Put it in the bunder right here.
 We'll extract and get in here.
 I'm going to hit the middle.
 I'm going to go to the front end here. [BLANK_AUDIO]
[01:21:06]
 >> I have a quote in the hammer to set a response with a result of get to.
 Next, I can test if I can get in from the ground here.
 Local host 3000, There's a route, and it's spinning and spinning because I'm able to debug her, I need to start the server.
 So, this is my back end, right here.
 This is the server because it's saying this is on the whole state thousand.
 I need to start this on the JavaScript. It's not this good. We both turn it up.
 If I want to see the above the modding server,
[01:22:11]
 the other one is for a test.
 This one is for a test.
 It will activate the aboveing for a test,
 but this one, if I want to activate the aboveing for my server,
 I need to start in a separate
 time to go to the front.
 So I'm starting from the web terminal.
[01:22:41]
 It's like an email to my server while it's running live [inaudible]
 Oh, front end.
 That's the point.
 The point, I need to go back to the back end here.
 [inaudible]
 Okay.
 I should be able to, my server is started.
[01:23:31]
 It's building.
 And I should, there it is.
 It's got in here.
 It got into the handler.
 That's good.
 And now I can do the next part, which is send a response with a result of gate flow.
 Once you send a response, so this response, and I want to send the results of get both.
[01:24:07]
 So I'm going to get the results here.
 Get.
 And it doesn't take any parameters.
 And you see see a weighted.
 That takes time to get the pulse.
 So if I want to weight that, I need to put the sink right there.
 And then, I want to get the capture the result.
[01:24:38]
 So this get coat will return the result.
 How do I capture it? I capture it with a equal sign here.
 You capture it with a result into the variable.
 Or the result with one of the terms of results [no audio] I get it authored and then I hope if I refresh this I should get something else.
 Okay it's popping other people.
 I don't need to say it will happen at all.
 There's two tarts and there's the and another photo. And I can refresh it a little differently. Okay, so that looks good.
[01:26:12]
 Last step.
 In the front end, use axios and a component to render the response.
 So before I get to that step,
 I just want to show you
 Here's the handler and it's basically calling this, which this one does all the work for us, and it's testable.
 And then once I get something from there, I just send it out.
 That's how you can test your routes.
[01:26:41]
 It's an easy way to test routes.
 You have some kind of helper, some kind of module
 to help it, and then that's what you test.
 You test that to help the route helper.
 Now I'm going to go to the front end.
 to the front end. And we have the movement to render this.
 What I will do is I'll create a code component, I guess. and the bolt react. the bottom of the hole. And then drop this
[01:27:47]
 screw in.
 That's in here.
 8-3, called
 " " " "
 "
 "
 "
[01:27:59]
 "
 "
 Let's see, I'm going to try to render it in the home page.
 I guess I'll disable this tool tab to a tip.
 I'm going to use map from now, so that I'm going to move a end card description. or
 just give me some
 this is the easy
[01:28:34]
 uh
 course
 some my whole page the render now.
 And it says "Pope" that's good.
 Now all I could do is edit this "Pope" component in the...
 I could... and the bracket. And so I'm going to create a button here instead
 of using the back.
[01:29:12]
 Click.
 So you can get the button.
 So if you want a photo of your automatically,
 then you use the component did mount, this one in a code only after it's clicked.
 So I'm on click. So what I want to have, what do I want to happen when it gets clicked?
 I want to call this request from the server.
 So I'm going to use Axios.
[01:29:58]
 And I'm going to request from the server.
 The servers URL is the whole host. And I need to go to the I can do a sink here because this is a this is a headler it's not
 componented now I can put a sink right here basically I want to await this
 and then I get that red line so I put a sink to get rid of that
 So I put a sink to get rid of that. And then I capture the result.
 For the response, I mean just this response.
 And the quote.
[01:31:02]
 I know the quote is going to be, it's going to be response.data.
 Here's how I'll show you.
 And that I need to render this somehow actually I think that I would do
 the code in there, same to the author here
 this cost of data and author Then I'll use a setter.
 This one just makes a really obvious that I'm extracting the total of the object.
 But I need to have a, if I want to render those, I have to have a state variable.
[01:32:07]
 You state.
 And that's going to be for my clothes. and then pour my hot air and then I it off.
 And then center it off.
 And then the other.
 And then author.
 So obviously I want to do some things here.
 Actually, I think I wanted to be JSX. [BLANK_AUDIO]
[01:33:30]
 Next, I'll speak with people for now.
 So the code is going to include the quotations.
 I need an infant quotations here. [BLANK_AUDIO]
 Actually, there's an animal.
 [BLANK_AUDIO]
 [BLANK_AUDIO] and then off here, let's just see how that looks.
 Click to get a quote.
[01:34:16]
 If you got the chayman, I think I don't need that VR space here.
 [inaudible] [BLANK_AUDIO]
 [BLANK_AUDIO]
 All right, so, there's that response object.
 It's actually value.
 Okay, so it has a data.
 That response has a data which has the author and so this response has the data property and it has a quote
[01:35:49]
 and see here and the data property and it has a quote and it also has an author property.
 So I'm saving those variables and then I'm going to put them in to the state.
 And then it renders it here.
 And the next one is here.
 And put some folks in there.
 So I just think it puts some changes in. and then off the rod you put it a dash in front of it. the front wood. That's the easiest way.
 I'm going to look right now.
[01:36:52]
 If you get a coat.
 If you get a coat, [no audio]
 all right so it's putting that
 [no audio]
 now it has close, and it has a dash in front of the up.
 We can often.
 So, in the front, we use axios and a component to render the response.
[01:37:44]
 So, this is the response.
 So this is the component. There's Axios, because it's the
 quote route.
 It gets the response and I extract the values from there,
 save them into state variables.
 The value is from there. Save them into state variables.
 And render those state variables right here. There's a code state variable in here to author state variable.
[01:38:18]
 I can make this italic here. I think it's the i.
 I think it's the eye.
 The eye element.
 Yeah, there it is. It's eye-time to count.
 Okay, so that's a simple custom API proxy. You just send the request to it and then it does the work for you.
 And it just responds back.
 The server, it got a response from favorite quotes.
[01:39:02]
 It filtered out the information that we need so
 that when we get it back in the front end we just have the author and the quote.
 We don't have all that other stuff that we don't need. Our proxy, our custom
 proxy, will turn out all these other things and sent us the information that we need without all the other goods.
 Okay, so now, time to practice, you can use the remaining of this hour to work on this
 TDD query practice.
 We'll send queries from the front end and develop a back end handler to process the response.
[01:39:53]
 So in the back end route query and process it with a handler.
 Here we route. Then in the front end we create a query string that has three value pairs.
 So that query string is that question mark and it has the message equals hello or color equals red.
 Those are the value pairs and each one has the n symbol separating the color equals red those aren't
 you now you pairs and each one has the
 end symbol separating them so remember So maybe the key value pairs is a question mark and the key would like this and then the value will be below then to separate
 them for the end sign and then the next key is like this and then the value will
[01:41:16]
 be red and to separate them but another at the inside
 and maybe a year and put 25 here and then to send that to your server just
 put your server location over here. Local host, green county.
 It looks like that.
 The query looks like that.
 So three key value pairs.
 Use axios and the component to send a query string
[01:42:01]
 to the query route.
 Okay, so I didn't add the query route there. So if I were to add the query route. Okay, so I didn't have the query route there. So, by
 words, and the query route.
 That's like that. That's going to go to the query route.
 And then use JavaScript debug terminal to observe the query in the request object.
 You can see it come in, you can see the request come in and then you can observe the query in there.
 Okay, and you want to see the get quotes again.
[01:42:44]
 So after I show this, actually,
 the good quotes.
 Next, you write, so that query route is going to be empty.
 Basically, it's going to be empty.
 The handler is going to be empty.
 We don't know how to respond yet.
 This is how we'll, this is how we'll respond.
[01:43:06]
 We're going to write test for a module function called get message, which accepts a query
 object. So this function is going to accept your query object. This one here.
 from here. And then we're going to test, write test if the function properly returns a sentence that uses values in the query object. So this, get message is going to return the sentence using the query object using the values
 inside the query object. So for example, if my query object looks like this, or it has
 a message of color and a here, and maybe the sentence would say, "Hello, user.
 Your favorite color is red, and the year is 2025."
 Something like this, some kind of sentence,
[01:44:19]
 using the values in the query. So we write tests. So what are those tests to be? What if one of
 those values are empty? What if the whole query is empty. But you
 expect how do you expect get methods to respond. You, you get to control how you want
 it to respond. So if something's missing, you get to control something like, oh, you forgot,
 you forgot their message. You can, or you can just return the empty string.
 It's up to you.
 You decide how you want to get message somewhere.
[01:45:13]
 Then you code the function.
 You code a function called get message according
 to the test test specifications.
 So pass five tests.
 Then into a likely and unlikely possibilities.
 So five tests.
 You know the possibilities there.
[01:45:33]
 Then let the query handler
 send a response with the results from get_mesits.
 So just like I did with the,
 just like I did with the, just like I did with the back end here, the back end,
 the route, the foot route, which used a function.
 And I got a result from it, I think the results. I respond and
 with the results in that function. So that's what this is about. Then we're
[01:46:13]
 ninth. Let the period handler, send a response with the results from getting
 message. Then in the front and render the response from the theory route.
 Okay, so I'll let you guys use the rest of this hour here on this.
 Next we use this hour on this one.
 I'll give you, well, you'll have the rest of this hour, which is about seven more minutes, and then we can put it on a two or a half over a break.
 Okay, so this wants to see it.
 So we get the post. It's right here.
[01:47:20]
 It's inside of my
 handler. My route handler is my route handler there.
 Here's get quotes.
 I'm going to put it in the modules folder.
 My route handler is here in the routes folder.
 Get quotes.
 And here.
[01:47:47]
 Sending a request to
 www.faveq.com/api/potabledayorqtd.
 You can use the debugger.
 Once you get the response, use the debugger and extract out the
 extract out the values that you need here. So I created an object, extracted out the
 author and saved it into the author property. Then I extract body, and I saved it in the code property there.
 Inside of an object, then I get to in the object here.
[01:48:34]
 So, just use the debugger to experiment and explore, don't just copy and paste what I'm doing here and explore the object and see what other information is in there.
 And decide which you want to extract out of it.
 But, you know, I'm providing the code here, but then I'm going to ask you to work with another API that you have to extract out the values.
 So I'm not going to turn it on to do it.
 I see on this, or some other things.
 or some other things.
 And the meantime, I'm going to do some grading, or you can ask it.
[01:49:30]
 Some questions if you need clarification. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] And we're going to start up in break here. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the group.
 And this is a third hour of class. You can continue to work on the practice
 problem for you can work on the assignment, which is caps done back end due tomorrow before before it fast. Again, let's do tomorrow.
 The backend will not deploy anything. It's just going to be their code in the GitHub.
 I haven't taught you how to deploy it.
 It doesn't have an index HTML page. It only responds when the request is sent to it.
 And it has to be running.
[02:05:54]
 So, you're getting, well, only render your front end.
 Not the back end stuff. So I'm going to start the breakout rooms.
 And there's going to be 43 minutes.
 it's for collaboration, for silence, and one for many evaluations, any volunteers.
 Otherwise, we'll just go in order.
 Otherwise, we'll just go in order. Based on when I received it, or based on when you went into the waiting list.
 Okay.
[02:07:01]
 Okay, so David wants to go first and then...
 Okay, so you can... so David's going to give it up and let you go.
 Alright, so you can see in the breakout room.
 Okay, you've already... already. Okay, so I'm just going to go to the breakout room now.
 And the need time you guys work on the assignment or the practice. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so the breakout rooms are back.
 Yeah, the breakout rooms are back.
 I still need to finish the evaluation with UKE.
[02:50:16]
 But in conclusion, we learned how to make a custom API proxy.
 Basically our front end, it contacted our back end, which
 contacted favorite quotes, favorite quotes responded to the back end, and then the
 back end gave the results to the front end. So our back end was our custom API proxy.
 And then I introduced the TDD query practice where you,
 you know, you start with test-driven design, start with your test first, and then make the function afterwards.
 the function afterwards. So make sure you take your attendance. There's three minutes left in class to do that.
[02:51:15]
 And that class is dismissed, but I think some of you might want to stay because there's only three more days for evaluations,
 many evaluations, and, you know, there's still a lot of people who need to take evaluations.
 But that's today's lesson on Express.
 I'm going to start up to break our rooms to finish the evaluation with Yuki. [ Pause ]
 >> A/B/P/RC and the breakout room.
 We need evaluations.
 [ Pauseause ] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/Mar 27, 2025 20-37.txt"

Transcript from Mar 27, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four week three day four and the theme for this week is Express and, do announcements, review, talk about GitHub and how to
 get your front end to deploy. Second hour, we'll talk about express topics. Third hour,
 We'll talk about express topics, third-hour, we'll do many evaluations, have time to work on the assignment or practice. So before we get started, make sure you take attendance.
 Make sure that you head on over to yourex account and mark yourself present.
 Now time for announcements.
 This one should be quick because there isn't anything new unless, well,
 there is something new, but I didn't get to put it in announcements.
[00:01:54]
 Which it looked like how you guys see it. Okay, so many evaluations. Let's see, so, yeah, just make sure we only have two more days for many evaluations for week two corrections or week three,
 many evaluation. And if you miss your window, if you miss your slot and you
 don't meet the great requirements, You'll have to contact the student success team
 to give you a chance to review your mini evaluation
 or re-submitted assignments.
 So the corrections, it says it's supposed to close today but I
 didn't get a chance to finish all the grading so it'll close on Saturday
[00:02:52]
 morning.
 Saturday morning for type of type capsule type script corrections. This will be
 changed to Saturday morning, but this one will
 remain capsule and back end. I see that there's some questions about it. And
 when you deploy your when you push your back end to GitHub, it will not work.
 So I mentioned this yesterday. it's not going to work,
 because it's not actually deployed. You're just copying your code to GitHub so that I can see your
[00:03:33]
 code and grade your code, but it's not deployed. GitHub doesn't deploy backends, it only deploys front
 ends. So if you're wondering if your back end will be able to,
 or if your front end, your capsule front end will be able to communicate with your capsule
 back end while it's in GitHub, the answer is no, they will not be able to communicate
 because GitHub only deploys front ends.
 because GitHub only deploys front-ends. Basically, it needs GitHub.
 The voice things that have a HTML file.
[00:04:16]
 That's why it's front-end.
 It has an HTML file.
 And it'll just enable the deploy as a website on GitHub.
 Well, your backend, it doesn't have an ACML file.
 And it uses commands that don't run in the,
 it uses commands that don't run in, in the browser.
 Remember I said that JavaScript in your browser
[00:04:47]
 is different than JavaScript in your terminal?
 The JavaScript in your terminal is called Node.js,
 or Node JavaScript.
 There's objects there.
 Like, for example, the JavaScript in your web
 browser, it has the document object.
 It has the window object.
[00:05:09]
 While the JavaScript in your terminal doesn't have the document object in the window object.
 So those are slight differences.
 So if you try to run some commands in your terminal, that needs a document object and a window object.
 It's not going to work unless you do some work around, but it's only virtual.
 It's not going to be an actual site.
 But my main point there is JavaScript in your front end is slightly different than the JavaScript in the backend.
 And GitHub only deploys or creates a live site for the front end which uses JavaScript for the browser. Your backend uses JavaScript for the terminal,
[00:06:08]
 and GitHub does not deploy those.
 I will teach you a different way to deploy the backend,
 which is with AWS Lambda.
 So the purpose of putting the backend into your repository is so that I can just view the code for now.
 And it doesn't matter if the front end and your back end are in the same repository.
 They can be in separate repositories, but your front end will be able to deploy or render by itself.
 Again, the back end, when it's in the repository,
[00:06:51]
 it doesn't run when it's in the GitHub.
 It's just there to view your code.
 Okay, so any questions?
 Okay, I understand you don't.
 It's a little, it's a little, the, the way that the assignment set up, it seems like we're supposed to communicate is a set up
 communication into render and the SEO stuff. So it seems like it doesn't specifically say it
 was supposed to do what it says is set it all up. So it's kind of seem like trying to
[00:07:34]
 supposed to do that. Okay, let's say we have two repos on to the front end and one for the back end.
 How are we supposed to render the front end without any errors if it's in a front end
 folder?
 Because it's looking for an end-based and a main, neither of which are showing up.
 So I understand we're going over today, but how are we?
 I mean, I spent so much time trying to get this done before today.
 I just ended up pushing what I had.
[00:08:03]
 But was there another way that we were supposed
 to build a path to front end folder into this
 that I'm not aware of?
 Yeah, so I'll teach you guys how to deploy your front end
 from the front end folder.
 So there's no easy way to do that on GitHub. If you even search for it, it's not,
 the answer is not easy, but I'll show you that it's easier than it sounds.
[00:08:35]
 So I'll show you how to do that. But if you're wondering about your front ends is supposed to communicate with a back end.
 And it'll probably show some errors if you're running Axios.
 You communicate with a back end. That's, that's not existent.
 So I mentioned it yesterday.
 Use your, let your front end check for your temporarily. Let your front-end check for the root path.
 Use that to determine whether or not to send the request to your back end.
 If your root path is GitHub,
[00:09:21]
 then don't send the request to the backend.
 That's how you avoid an error.
 Because if your front end is in GitHub
 and is trying to communicate with a backend,
 there's going to be an error.
 Because the backend is not up and running in GitHub.
 And there's also your backend also has to have a URL, right?
[00:09:49]
 How can you and communicate with a backend if it doesn't have a URL?
 Right now the URL is localhost, but when it's in GitHub, it doesn't have access to localhost.
 Why is that?
 Because everybody has local host. There is back which one is it going to communicate with?
 So basically local host is just on your computer.
 And it doesn't go out to the internet.
 So even if your front end is in GitHub,
[00:10:18]
 and it's trying to look for a local host back end,
 it's not going to find it. So to avoid an error, let your front end check if your root path is in GitHub.
 If it isn't GitHub, then don't send any axiosoupests to your back end. Basically, you need to use a if statement. Check your root path.
 If your root path is local, then yes, go ahead and send the request with Axios. local film center request. For now let's how you avoid errors.
 All right so practice problems so we've been working on some practice
 problems. I've added them a third down there.
 I'll add it to me.
[00:11:33]
 And yeah, just push what you have for the capstone back end.
 It should render your front end by today your front end should render. If it renders in
 your locally then it should render in GitHub when I show you how to render it from the folder.
 Let's see what else. Okay so there are questions in Delico, Heart, and I didn't get a chance
 to go over them.
 Camp zone is rendering locally.
 So
[00:12:35]
 So let's see, Webpack is compiling it with any issues. So 8,000.
 So I think what this means is that it's trying to communicate with your--
 when you load a site, it tries to communicate with the backend.
 Because I think is this your backend?
 No, my backend is 9,000. My front end is 8,000.
 Okay, and...
 I think the setup might be wrong. We can take a look at it right now.
[00:13:11]
 Can you share your screen?
 Let me open it in here.
 I had to reboot my computer before class.
 Okay.
 But now everything is not in the same place because I did the back end conversion.
 Back end conversion.
 Well, you're talking about your front end. So your front end should have a folder.
[00:13:38]
 You shouldn't be in the stuff.
 Yeah.
 So we just wanted to make sure your front end is rendering and we'll see what's wrong.
 Bad things are happening.
 It was probably in the current folder, sharing, hoping that it was a nice time. Nice to try.
 Uh, that's nice. Oh, no, it opened a song that everything was in song?
 I press no.
[00:14:37]
 So you're trying to, let me see, I didn't see what you're doing here.
 So I was just trying to open it and I ran in the end of the start.
 - I just do the reinstalled.
 - I just do the,
 - Oh, I think, I don't think I reinstalled
 everything after I converted yet.
 I can't remember now.
[00:14:55]
 - Okay.
 - I have to go back to work, so.
 - Okay, this will put you know.
 - No, nothing can happen.
 - Yeah.
 - You can get it.
 - Let me see if you have a, so you're in the front end folder.
[00:15:07]
 Do you have a node, JS?
 Yeah, you don't have a node, JS folder.
 So nothing is installed right now.
 Right.
 I have to reinstall everything.
 Yeah, you have to reinstall everything.
 After the conversion, but the error was happening before I converted stuff.
[00:15:23]
 So you just basically just move it,
 just move the front end folder, right?
 Don't not create the back end folder in everything too.
 All right, everything's installed.
 Okay, you can run it now.
 I was quick, I'm impressed.
 Yeah, 'cause it's installed somewhere else. So it's just all sharing the same files.
[00:16:04]
 Yep, see a message is, but I tried running the build.
 Okay, so let's see.
 Let me see what command it's running.
 Right.
 Which one did you do? Start or build?
 No, I did start first.
 Now I'm doing build because I want to rebuild it again, but that didn't fix it yesterday
[00:16:27]
 when I tried. The build is, uh, this is front end. It should
 not be on watch. Thank you, but watch there. I put watch there
 on purpose after the error happened because I got an
 way that I had to keep rerunning build over and over and over again.
 - You don't need to build if you're gonna push the GitHub.
 Okay, that makes sense.
 How close is?
[00:17:01]
 Because build will create the files.
 You don't need to create the files unless you're ready to push the GitHub.
 So Webpack Dev Server, it doesn't actually create any files.
 It's all running in memory, which is okay.
 The only time you should push the GitHub is when you're ready to,
 you know, you have everything working, so you can make a build and that's what's going
 to get push the GitHub. So you don't need a watch in the build for the front thing.
[00:17:41]
 Okay, I'm going gonna need to watch that. Let me see here the start is
 Npx Webpack Server and you should have a public folder and it should have a
 copy of index.js. Let's look at your public folder. Index, I, I should have a copy of index.html. Click on that. And the
 line 17 should only have the name of the bundle, not the folder. So we should just be main.js.
 And that should do it. [BLANK_AUDIO]
 So it renders, so you just have to fix a bug here.
 >> Yeah, I'll figure out what that from.
[00:18:57]
 [BLANK_AUDIO]
 So key there is when you're using Webpack then server.
 It's not just the folder structure you need to have a folder structure where you have public and index.acml
 which you also need to change the source.
 It's part of the court of the day thing that's causing the error.
 Okay, thank you. Mm-hmm. Mm-hmm.
 Mm-hmm.
[00:19:28]
 And then, um, David, you were saying Webpack CLI?
 Yeah, problems with that.
 Yeah, my, uh, who was saying it.
 I'll try to do it.
 It just says, okay, you can share your screen. She had my, who is saying, I'll try to do it.
 It just says,
 - Okay, you can share your screen.
[00:20:02]
 - This is what it's giving up.
 Wait, okay, I'm not sure I'm not
 probably not even right I just scroll all the way down and let's see what's I'm not sure what an uncle got a nutty on the right.
 I just scroll all the way down and let's see what's going on.
 So you are right now in the front end folder.
 Then folders right there.
 And so what happens what what shows there
[00:20:47]
 all you need a while ago it was this is where I got that right now but I'm
 don't so you're trying to start the server yeah I was trying to see if I can
 even get it to render.
 Okay, so a little web pack, a PX backpack.
 Public folder, let's see the public folder.
 Index 8, CML, let's see if the name is correct there.
 Yeah, that's correct and yeah online 20. Okay, there's WebExio. I, let's see your scripts.
[00:21:52]
 Okay, let's, what happens when you do NPM run start or NPM start? start. Let's look at Webpack. Webpack and Big.
 Dev server history API followed back.
 I think there might be a typo there.
 Let me see here.
 Has to be a small P, small I.
 Or history API. only a capital a
 Where about looking all right here
[00:22:54]
 Yeah
 Try it again, yeah, see just look at see, just look at the error first.
 In valid options object.
 All right here, see.
 Dev server has been initialized using options object.
 So this is your options object.
 See, this is exporting default line number three export default and object.
[00:23:17]
 That's your options object.
 This whole thing.
 And it's saying there's something wrong in your options object.
 It's saying options has an unknown property history API fallback.
 And it's telling you later on the proper spelling right there, it's cut off a little bit, but you can see it.
 This three API fallback, it has a small P in the small I.
 Can you see that in the air?
[00:23:50]
 Options allow.
 I see where it says it right. And the third paragraph, yeah, that one has a capital API
 but the state right here.
 I see it. Yeah, small API.
 So you should be able to start now
 We should get that one. There's another another error. So let's scroll up to the top of that error. Okay, let's look at where it's in here.
 That is okay. So let me see, okay, yeah, keep scroll down. I see what it is.
[00:24:42]
 This is where I'm going This is where module not found.
 So let's see TS.
 Why is there a Ks in 910?
 That must be. It's probably the Ks in 910. That must be.
 And let's look at your source folder.
 index ts x olets.
 Look at the Babel loader.
[00:25:27]
 I mean, Babel config.
 So OK, let's try it now. We changed that key.
 Yeah, and it's also telling us that in the green. [BLANK_AUDIO]
 Try one more time and then just can't think of anything off the top of my end and
 let's see here. Imagine that I can't resolve the source.
 Oh, says resolve. Let's look at the resolve. Let's look at the result in webpack config.
 Wow.
[00:26:29]
 Not.
 Let's look right.
 Let's all see.
 Oh, right there.
 27.
 There.
 Yeah, just try reading the messages in there.
[00:26:44]
 Yeah, just try reading the messages in there.
 That should do it. the So I'm gonna just I'll see not found
 Scroll up there, scroll up, let me see what else is going on here
 Okay, let's take it that first one
 Contact, Can't resolve. There's a job with script file there. I'm a half to, uh, you probably put JS and said, yeah, you put JS instead of, instead of just where you have to remove the JS from there.
 Did you see? No, I didn't see it from the top of the imports. Oh, these. Yeah. Yeah. Okay.
 Cause it's looking for a JS file. You don't have a JS file.
[00:28:22]
 And you don't need to put those extensions. You don't need to put those extensions.
 You don't need to put those extensions, it'll find them itself.
 Remove those.ts.
 Okay, so you just have to check and you might, you might be including extensions in a lot of your files.
 You don't need to dad.
 I think so.
 It looks like there's one and a controller.
[00:28:55]
 Okay, I'm going to go with Jeff.
 Okay, so I'm gonna continue, maybe just continue with announcements here.
 So we got some things solved, you're able to move forward.
 Yeah, so as usual, mark your day's dream as you learn the topics there and focus, take notes and get ready
 with your microphone especially when it's time for many evaluations.
 Now it's time for review. So yesterday, we reviewed that in level three or level two, we use the proxy server
 because our front end sometimes it could directly communicate with an API. So we had to use a proxy server in the middle such as
[00:30:07]
 thing proxy or chorus proxy. And some of the APIs that, well, the two APIs I
 showed you that you can't communicate with directly with open TDB and paid queues. If you try to send a request directly to these, you're
 going to get, it's going to show you a forest error. So what we did was we
 use thing proxy or course proxy to send the request, we set a request, the
 course proxy which sends a request to fake queues which returns a response to the proxy
 which sends a response to your front end or client.
 And we also learned to make a custom API.
[00:31:06]
 We use our back end as a proxy.
 It was a pretty simple one actually.
 A simple proxy.
 Let me just limit it up here. And here are the notes.
 And first we have to write tests.
 So that's going to be in the back end, write tests in get
 code. So there were two tests. One is it receives a response from
[00:31:57]
 Dave Hughes API. And I don't know what kind of responses I could receive from
 Babe Q's API.
 The way I know is because I was using a browser.
 And I visited the Babe Q's API.
 The browser can talk directly to the Babe Q's.
 And I can see the kind of object it's going to send me.
 And I saw that it's going to send an author and a body
[00:32:34]
 or a quote basically that's what that is.
 So in the range phase, I just set up a resolve variable, which is expected to be an object that has an author and a code.
 So I set up, basically I'm setting up get quotes to just return or respond with the information that I need.
 So I just want the author in the quote.
 I don't need all of this.
 So I decided that I want this function to communicate with the API,
 but only give me the information that I need,
[00:33:23]
 which is this and this author input.
 So I don't need all that glue from the API. This function gets rid of that
 glue and I just have what I need. And then I check the result if it has an author and a clue.
 author in a book. And then I have another test, this I should receive, it receives a response type. It receives responses, it receives responses which are different. So I set up two variables here, two results, got two results and
 compare them to make sure that they were different.
 So for example, the author of result one should not be the author of result two.
 And the code of result one should not be the same as the result of the two.
[00:34:33]
 And I use the not method here.
 Basically this looks like almost like English.
 But we're using functions here. The first part of the
 sorting is making sure I'm getting poke objects. I mean yeah I'm getting the
 right response so I'm making sure I'm getting an author and poke each time and
 then I'm on this part here I'm checking that they're not the same.
 And then, sorry, some rules on the test.
[00:35:18]
 So, basically, I wrote the test.
 The test is to see if the function properly returns information
 from the fake Q2 API.
 Then I code it "get" code according to the test specifications.
 So here's "get" code.
 So it communicates.
 If it doesn't receive any parameters, basically just communicates with the API, gets a response, and then it be an object that has an author and a code.
[00:36:07]
 Because that's what I want. Again, I want it. I basically designed it, right? I don't want to
 receive the bloat. I just want to receive this. So this, I made the design it first.
 And then I programmed it according to the design.
 So I return the result, which has an author in the code. And then I added our route handler to send a response. So here's Here's a round handler first.
 First you need to set it up in the main file here.
 That was [ Inaudible ] Anyway, I'd set up a --
 [ Inaudible ]
[00:37:23]
 Use the get method to say that I want the poke route to be handled by this poke handler.
 And here's the poke handler right here in the routes folder. except the request and the response. It uses the function that I've tested,
 receives a result and then sends it
 in the response.
 Then the front end
 receives a result
 or receives a response and then renders it. and the front end, receive the result,
[00:38:05]
 or receive the response and then renders it.
 So the front end code is here.
 And this one is by the end.
 Oh, right there. and then put it in and then put it in
 put it in
 and then
 let it let it
[00:38:34]
 split
 all the way
 start in
 and then you actually
 open it in a
 different and we actually didn't open it in a different PS code
 We can do a great space to come to
[00:38:54]
 We're all open the same PS code
 [BLANK_AUDIO] This one is just the front end. back in. and it's going to tell me that I need to build
 and paint on the building
 And now I can, and the fountain is in the here and there. And if I click on this code, you should get a code and then
 display it.
 We're going to have to work. So when I click that button, and activate this, which communicates with the back end,
 the code grout.
[00:40:56]
 I'm a SQL response.
 I extract the code from it, extract the author from it, and then I save those in the state variables,
 and then I render those state variables right here, creating a custom API proxy. And we also were presented with TDD query practice.
 Then you can finish this.
 It comes up if you did.
 Or you can just mention like how hard did you get.
 If you get halfway, almost done.
[00:42:13]
 Shouldn't be only working with one route here.
 The thing that might have been
 made difficult is a testing.
 That's why I'm just going to, we're just going to keep drilling the testing until you figure it out.
 We're going to keep testing and testing and keep doing TDD until you get familiar with it.
 That seems to be a weakness of you guys and you need to be able to do this because testing helps you design things,
 helps you design your program. Basically, you're making instructions on how you
[00:42:53]
 are using TDD to write tests which are like instructions. This is how your program should work.
 And if you can do it like that, you'll have a better understanding of how your program is supposed to function.
 And you'll have a better way of designing.
 Like you say, "Okay, I don't want my program to do this, I wanted to do that."
 So like I did with that, the back end, I decided, "Okay, I don't want the full response of that,
 a paved choose API.
 I just want the two things, the author and the code.
[00:43:31]
 So I went from there.
 I used the test to decide what I want.
 And then I coded it.
 So TVB will help you with that.
 So TVB will help you with that. So, yes, and these practices will end up being in one of the many evaluations, so you need to be able to walk me through and say, "Okay, this is how I completed this practice."
 It's what I said.
 Okay, so get help.
[00:44:10]
 Yeah, we have some time. I can show you how to fix your projects when you have two folders.
 And back in, I'll show you how to fix that.
 How to get it to the point. So here's the instructions, which I'll lock you how to fix that. How to get it to the point. So here's the instructions,
 which I'll walk you through,
 and it's all done to the GitHub console.
 So make sure you copy this here.
 Copy this and I'm just going to create a separate file for GitHub notes.
[00:44:53]
 And then I'll walk through here.
 10 pops level 4, connect and some notes here. I'll make a new one.
 You might even want to copy and taste some of your source control and it'll be some
 senior equipment.
 Okay. Okay. All right. So, out in the toy from the specific folder in GitHub.
 So, first you need to go to GitHub repository, settings tab, and then pages in the sidebar.
 So, you don't need little bit of stuff to do.
[00:46:07]
 We can try to follow along with your GitHub.
 So, I have a repository here called Capstone Level 4.
 I have a back end folder and a front end folder.
 If I go to settings and then the page is on the sidebar, I should try to view, if I try to view the site, says 404 error, because that's because
 GitHub wants to render from your route.
 And there's no index HTML file in my route, right?
 This is, in my route, there is no index HTML file file so GitHub is not rendering anything.
[00:47:06]
 My index HTML file is in the front and holder.
 Right here.
 That's what GitHub, that's what I want GitHub to render.
 But I'm going to show you how to set it up to do that.
 So we need to go to settings, go to pages, and then, next step.
 Go to the Build and Deployment section, and pick GitHub actions from the dropdown.
 So here's building the appointment section.
[00:47:51]
 Take GitHub actions from the dropdown. Okay, next,
 pick the static HTML card and configure button.
 There's a static HTML card
 and the configure button.
 Okay, configure button. Next, change line 40 to F and then the on the top of your face to many spaces here.
 Okay, so basically a path to be in front end folder.
 And then update the comment on line 39.
[00:49:04]
 So line 40, high school down here.
 The path should be the front end folder.
 And then instead of upload the entire repository, upload the front end holder for upload a folder in the toggle.
 So this will be uploaded to the GitHub render.
 The GitHub render will basically upload this front end folder to the GitHub render will basically it will upload this front end folder to the GitHub
 render instead of the whole repository. It will just send the front end folder to the
 GitHub render and then commit changes button. So click on the commit changes button. So we'll click on the commit changes button.
[00:50:05]
 That's over here on the top right, commit changes.
 And you can put whatever message.
 And that's it.
 Now you just wait a few seconds.
 Wait a few seconds, and it should render.
 Gonna go to pages here. Okay, I think it'll render now. Yeah, there it is.
 It's rendered from my front end.
[00:50:40]
 And I can, I can make changes. Whatever happens to the front end folder, it'll reflect here.
 So let me just pull that to show you.
 So that it's going to render some changes changes that make some.
 So, in folder, I am going to, I might, I made some changes in the, in the, in the So we see venue 2025 here.
 I'm just going to remove that 2025.
 This is still JavaScript.
 I haven't converted this one yet.
[00:51:56]
 But I just wanted to show you.
 I can be done.
 So I just took up a project, the quick conversion. [inaudible]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible]
[00:52:52]
 [inaudible]
 [inaudible] Now I can trim it.
 And then again, I'm going to pull it. So basically I removed the 2025 from the tile.
 Let's see how fast it is. Okay, so we updated now.
 Okay, there.
 The title is gone.
 Okay, so that's how you deploy from the folder in GitHub.
[00:54:33]
 So, you have a question.
 Chris.
 Yeah, are you links working there?
 Minor just an iron.
 Yeah, okay.
 Okay.
 Okay. Thanks. You have to update your path.
[00:54:47]
 You have to update your nav link or nav bar to show the proper repository.
 And also the root path. You need to update your root path for your root x.
 So I guess I didn't update my root path here.
 Okay, so you need to update your browser router,
 your nav bar, your nav links,
 your nav here and for that, we'll be here.
 Okay, so that is here. So that's it for the first hour, I'm gonna start up a break.
[00:55:33]
 And then, we'll go from there. [BLANK_AUDIO]
 Okay, see ya, through the break.
 [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 >> All right. So we're back from the break.
 And we're going to talk about Express.
 I'm going to do a practice today, because I want to make sure you, you know, I can walk you through a process here. And in this process, we're going to discuss, we're going to make another
 proxy or just another route for a proxy. But this time it'll take query parameters.
[01:06:58]
 Remember our first proxy for a code for the code of the day that then receive any parameters.
 This one that we wanted to receive some parameters.
 I'm going to walk you through this.
 This part will be easy if you did that TDD practice with parameters. You'll really understand this,
 I think, if you did that practice, that TDD query practice.
 Okay, so I'm going back here. And this one is notes on express.
 I'm going to pasted here. So this one is we're making another proxy and
[01:08:11]
 we're going to start with TDD again, right test for a function called get
 trivia. That accepts a query object. Okay, so I could start with that. So this is going to be in the back end.
 I'll put it in modules here. I'm going to write test or get trivia. So there's the file. Test if the function uses the query or the query object to return information from open
 TDB API.
 So that's loaded with stuff.
 So open TDB.
 I showed you yesterday, open TDB.
[01:09:33]
 We should be the notes from, let me see.
 There are those notes, express notes.
 Right here, opentdme.com.
 From yesterday's notes.
 And it has an API section here.
 And if I want to have just one question come and the category will be music. It'll generate an API so I
 can idea how it looks like. I mean it'll generate a URL. And I could see here the query that it accepts.
[01:10:49]
 There's a mount key with a value of one, the category key
 of value of 12, the type key with a value of multiple.
 That's what I chose here. Like, amount one, that was when I put a one here, category 12, that's when I chose music. So music must be category 12. And then type multiple, that's this one here, select type.
 So that was multiple.
 Okay, I'm going to look at this again.
 Test if the function uses a query to return information, so I have to receive a query.
 Write a function. Basically it's going to be get trivia and it's going to receive a query
[01:11:57]
 object. So first describe what I'm going to test. I'm going to test get trivia.
 describe what I'm going to test. I'm going to test get trivia.
 I'm just going to use arrow functions here.
 Whether callback and just write the code directly in here.
 So it.
 It accepts a set of query objects and returns a response.
 And use another arrow function there and I'm just going to code the rage phase right in here, the act phase, and the assert phase.
[01:13:16]
 So I can start with the act because I know I'm going to call the get trivia function.
 And it's going to receive some kind of query object.
 And then I'm supposed to get some kind of response from it for result.
 And I should be awaiting it.
 And since I'm awaiting it, I should put a sync here.
 Basically, you see how I reverse engineered that?
 I just went from what I knew, and then just reversed
[01:13:51]
 engineered it.
 So I knew that I had to use get trivia.
 And then I also knew that it's supposed to receive
 a query object.
 So I put it like that.
 Then I know I'm supposed to receive a result. So, you know, whenever I return something,
 I could capture it on the left side of the equal sign. And now it would take time,
[01:14:13]
 so I put away. And since I put away, I need to put a sink here to enable the await.
 So now I just need to, well, I could, I could make a query object. So I know
 that query is going to be some kind of object. And what kind of object should it be?
 It's going to be the same as these, um, it's going to be, where's it? It's going to be like this, but converted into an object. So a mount is going to have a mount.
 So I mean, this should be in the back end., I need to be working in the back end here.
 Needs to have an amount.
 That's going to be one.
[01:15:17]
 Needs to have a category.
 So, there's the mount.
 There's the category. This one is a number.
 See here, it's a number that was multiple.
 Okay.
 Let's see. So that one's good.
 Next, I'm going to assert.
[01:16:01]
 So what do I want to receive?
 So I'm going to try it. And I can look at this and see what I I want to receive? So I'm going to try it and I can
 look at this and see what I'm supposed to receive from here. So I just want the question And the answers, and I want to know if they're correct or not.
 So I can extract the things here.
 So result, I mean, the question. I expect that to be in result.question.
 And
 answers.
[01:16:54]
 Or choices, actually, I think choices.
 It will result the choices.
 I'm making it up, right?
 I can form a return that conforms to this.
 And then the correct choice,
 the cons answer, well, let's see, should it have an answer?
 I mean, it's always going to be in the, basically I want to set the, let's see here,
[01:17:50]
 actually the answer will be a number.
 I would expect it to be a number.
 It's going to tell me, I'm going to have an array of choices and I want it to tell me which
 one of those choices is correct.
 result.answer. So I expect that to be a number. So I expect this one to be a number.
 Choices, I expect this to be some kind of array of strings. The question will just be a string.
 That's what I expected to be.
[01:18:34]
 And I'm just making this up, right?
 I don't really know what I'm going to get,
 but I know what I want to get.
 I want to get a question.
 I want to get some choices,
 and I want to know which one want to get. I want to get a question. I want to get some choices, and I want
 to know which one's the answer.
[01:18:48]
 So I expect the question to be truthy. So that means just not be blank.
 If the question was blank string like that, that's falsy, right?
 But if it had some letters in it like this, then it's truthy.
 I expect the question to be truthy.
 Or you can also do this like,
 not to be empty string.
 You can do that.
[01:19:48]
 That might make more sense to you. like it's more of a sentence. I expect the question not to be an empty string, but what if it comes back as a like an object and this one is still, well, that's fine.
 Just leave it like that.
 And I expect the voices to be.
 In some stuff, I think you can just tell it to be like what are your choices here.
 So let me go to the Just website.
 Just. just. So, I want it to be a ray.
 So, I think that's instance of, yeah, I think it'll work.
[01:21:21]
 It looks like it'll work. It can be in a sense of array.
 Let's see here. And I expect the answer.
 answer
 see I wonder if you can
 to be defined. I guess I'll work.
 To be defined.
 There's nothing I can check to be, just to see if it's a number.
[01:22:30]
 I don't see here. Let me see if I can find out if there's anything that can check the numbers.
 Okay, number. Okay, I can use a class.
 The number class.
 To be. Okay, I can use a class, the number class,
 to be instance of number.
 I think that's what it'll work.
 We'll find out. And what else can that test for? And so for three objecting return to response, it responds with, it responds with, should respond with something if there's nothing right. and air with the period.
[01:24:24]
 Okay, so I'm going to have the range section again, the act section and the x-back section. So, like I'll put a zero here.
 The fact that I'll change this response with empty values if the amount is 1, if the amount is 0, I mean.
 So I'm going to just copy this query object.
 0 here, even if I have these. Let's see.
 So I'm going to expect the question to be an expected question to meet empty. There it is something for a raise here to have length of zero. So there
 should be no choices. And the answer should be, should I maybe I'll let it be number one. A negative one. If there's
 no answer it'll be negative one, I guess. Or maybe I wanted to be on the flight.
[01:27:05]
 I have to decide that.
 I think I like it on the flight.
 So that's what I'm going to start coding it now.
 I have two tests.
 So I wrote some tests.
 And now I'm going to start coding, get trivia according to the test specifications.
 So, I didn't write the function yet.
[01:27:43]
 I don't even have a file for it yet.
 Yeah, trivia.ts.
 Export, function, get trivia. And then, and then I expect this query to be some kind of object.
 And I can specify the object right here. The object should have a mount which is a number.
 This should have a category, type which is a string.
 There's actually a better way to do this, so I'll show you.
 But I'll just do this for now.
[01:28:59]
 Because you know these types right now, you know these types and I'm asserting that
 the query is going to be an object that has an amount of category and a type.
 So that's what I expect the make a test here.
 It makes me happy this is a copy of the previous one.
 I'm going to make a new test similar to this
 and that test will be a response with empty values if the query is empty.
 Okay, so the query I'm just gonna make an empty object.
[01:30:07]
 So we see here, I'm gonna import this function now.
 There it is.
 Okay, so it's underlining this query because
 it's expecting an object that has an amount of category and a type, but instead I'm giving it that empty object.
 So if I want to just get rid of this error, or it's just a TypeScript error, it will
 still run.
 I just put as any, I can put it there
[01:30:46]
 or maybe I can even put it here.
 Yeah, so I can put it here or over here.
 Or I can even put it here.
 here. So there are different ways to put as to just override it. And then so there's this one. It's it's like that because it's not returning a value yet, and it's not even using a sync.
 But we'll get there. I need to use Axios.
 And we'll get method right there.
 And I'm supposed to send a URL or give it a URL.
[01:31:49]
 So what is this URL going to include?
 I'm going to use a make a template string out of it.
 And it's going to look like this sort of. So I'm just going to paste that there and I have the variables right here.
 So this one is a variable this is going to be the
 amount this cat there's a category here and this one will be a variable I'll
 replace it with a variable the category and this one is also going to be a variable.
 That's going to be the type.
[01:32:51]
 So you see, I don't have these variables yet. So I'm just gonna extract these variables
 from the query object.
 So I have the query object.
 And I can use destructuring. I can
 de-structure it. So to the structure, the object basically
 just make it look like an object on the left side and then
 match the properties. So it's going to be structured that object into these variables.
[01:33:30]
 Because query has an amount, it has a category and a type.
 So it's just going to be structured into these variables.
 And then I'm going to use these variables right inside of this URL.
 And I'm going to get from the URL, but I need to wait for it.
 And I can't wait for it right now until I put a sync here.
 And then I can get the result for the response.
 I'm not really cool. I know what the response is going to look like.
[01:34:10]
 The response is going to look like this.
 So it has a results, it's supposed to get a results
 property.
 Actually, I can just use a debugger and then go from there.
 Let's see here.
 I'm going to make a new object though.
 We're going to make a new object called result and it's gonna It's gonna match this test
[01:34:48]
 Because it I expect to have a question
 choices and answer
 right here
 Question choices and answer
 So result I'm gonna I expect to have a question here in this object.
 Some choices.
 And an answer.
[01:35:15]
 What is this question gonna be? I'm not really sure yet. I don't know yet.
 So I'm just gonna do that. And what's the choice is gonna be?
 It's gonna be some kind of array.
 I don't know what it's gonna look like yet.
 And what is this answer gonna be?
 It's gonna be some kind of number.
 I just put 999 for now.
[01:35:39]
 So I'm not really sure what this should be.
 But I do know that I need to respond with it
 or return this, I need to return this object.
 I know that, it's because of this test.
 Get trivia is going to return a result, which
 has a question property, it choices property,
 and an answer property.
[01:36:11]
 So I can run this with a debugger.
 You can use JavaScript debug terminal.
 And actually let me set up the test here.
 Oops, I'm still in the sandbox so then you get out of the sandbox.
 We just transfer over to the front end here or the back end. It's a tree here.
 That's what I'm working on.
 There's a chest right here.
[01:37:14]
 And I can say, "Json, I wanted to just, on and just, just that file. So I'm just going to edit it right there.
 I'll start the JavaScript debug terminal for the test. So we'll stop on the
 debugger right over here. Actually just start from the beginning.
 Something in the PM.
 Run the test.
 Okay, so a query object is supposed to come in.
 Let's see what that query looks like.
[01:38:13]
 J, so I have a amount of one category 12 and type with this multiple.
 I can also see here.
 Mount this one, kind of, a query 12 type is multiple.
 It's been the structure.
 It's going to send the bar, it's going to form a URL right here with these variables.
 It's running all these tests at the same time. That's why it's coming off.
 So it's running multiple tests.
[01:38:59]
 That's why it's stopping it to move all of the different times.
 So I think I want to start over. That's why it's stopping it to move all of the different times.
 So I think I want to start over.
 If you want to skip some tests and just focus on what,
 you can just skip it like that, or comment them out.
 I'm just skipping.
 You want to start over here.
[01:39:30]
 It should stop on the behavior. There it is.
 So the URL.
 Because the URL looks good. It was formed with the variables.
 It's going to get a response.
 Let's see what that response looks like.
 So it has data.
 So response has data.
[01:39:58]
 So I know if I want to get a question out of it, I need to start with this response object.
 It has a data property. And then
 that data property has results right there. So that results. And then it has, okay, so it's the first. It has...
 Okay, so it's the first...
 Okay, so there's gonna be multiple results.
 So I guess I'm just gonna start with zero here. Position zero, because it's in a right.
 I'm changing it. So, hope if you're not able to change it like this, then just do it one level at a time.
[01:40:55]
 Results object object and then there's zero position. That's what I have there.
 And you just do it from there. And we just have a results object. It has dot data right there. And then your question. So that's where my question is going to be in this zero position.
 where my choice is going to be.
 One of the choices is the correct answer
 right there.
 So I'm just going to start with the correct answer. So that's under response.data.results0 correct answer.
 Under support answer.
[01:42:18]
 And then the other ones are going to be actually let me do it like this.
 And choice two is response data.result0 and then And so it's which is an array that has 0, 1 and 2 positions.
 So I'm going to put 0 position here.
 And I'm going to get the other choices out of it.
 And I'm going to get the other choices out of it. This is the next choice.
 Choice number four is going to be the next one here.
 So I have my choices there.
[01:44:01]
 Four choices.
 And I'm going to stick them into this array.
 So, we're just one, choice two,
 choice three, and choice four.
 Which, and then the answer needs to be the correct one.
 In this case, it's gonna mean position zero.
 So the answer is gonna be just give me a position. I think that's good. So there's the, let me just separate this out.
[01:44:51]
 So this is where I extracted the choices from that object. The choices was the correct
 answer and three incorrect answers. And I just stuck them into a choices array and I have this one that tells me
 which position is a correct position or which position has a right answer. I
 think that's good. I'm gonna just restart this test and I'm going to just see what
 forms how the result forms.
 The creature looks in.
 So I'll put the debugger right after that result.
[01:45:50]
 Okay, so let's see how the result looks like. So the result has an answer property, choices property and the question property.
 I can see the question right there.
 The choices I have are right here, Bob Miller Elvis Adele,
 our Billy Joel, the question was, "Make you feel my love?"
 It was originally written and performed by which singer
 and songwriter and dancer was first under zero,
 which was Bob Dylan. Okay. answer was choice number zero. Which was fine, okay.
[01:46:27]
 So I have some.
 I have a result coming in.
 So I'm going to go into here.
 This is a test I'm writing.
 So I think I'm pretty good.
 I can.
 I'm going to stop the debugger after the result.
[01:46:52]
 So I'm going to extract the question now.
 The choice is and the answer.
 So the question here it is.
 Is it going to extract the choices there they are,
 and it's going to extract the answer which is in position 0.
 So I expect the question to not be empty, so that's right.
 I expect choices to be in a array,
[01:47:19]
 and I expect the answer to be a number.
 Let's see if I did that right. Okay, so it to be a number. Let's see if I did that, right?
 Okay, so it's not a number.
 Expect and constructor.
 It has no form of type, so.
 It has no numbers, I don't have a type.
 So it has to, I don't know how to check for a number.
[01:47:52]
 So I could check if I can do this here.
 Not to
 any end. and the n. Right now, that's not right.
 Answer, so if I do this number, so it converts the number to, if we converts the answer to a number,
 or basically answer is going to be a number.
 And then, and I expect it to not be any end.
 Because if it comes in as a string, because I expect the number, right?
[01:48:45]
 So if it comes in as a string, then it will be an an.
 No, we're stance.
 We're not in number.
 OK, so I can run that again.
 All right, so I got the result again and I'm extracting out the question and the choice or I mean the choices and the answer
 So
 The question is here here are the choices right there
[01:49:37]
 0 1 2 3 4 or 0 1 2 3 the answer is in position 0
 The answer is in position zero.
 So in the question, I expect it to not be an empty string. The choices I expected to be in array and the number.
 I mean, the answer I it not to be NAM.
 And then it passes.
 Okay.
 So that gives you a run through of how to do this.
[01:50:21]
 I use the parameters that query.
 So this is supposed to simulate a query coming from a request.
 So let me show you here.
 Add a route and a handler to send a response.
 Okay, so let me just add that little bit.
 So I'm going to have a new path here that's going to be the trivia path and
 my handler is going to be called trivia.
[01:51:15]
 I'm gonna match it with the path.
 We make the file here, trivia.ts
 And this is going to be a route handler so that's
 export a function called trivia and it's going to take in a
 request
 Which is a request object from the express here
 Gonna get a response object from the express here. I'm going to get a response object from the listener.
[01:51:51]
 The one from the express.
 And then I need to use that function.
 Which is get trivia.
 But I need to give it a query object where do I get that query object that comes from request.query. So I can just put it in two steps here. That's okay.
 So that's that's going to come in there. What does it say here?
 So it doesn't like it how it's commissioned or like the types.
 So I'm just going to put any here, get rid of that pair, types of pair. And then I'm going to receive some kind of result from it.
[01:52:52]
 It's going to return a value and I'm going to capture it here on the left side of the
 equal sign into this variable.
 Then I'm going to send the response.
 Basically, what I'm going to send is just this result.
 Not going to touch it or anything.
 I expect this function to do everything I need and all I need to do here
 in this handler is just send it.
[01:53:32]
 So, so I added around in a handler and I send a response, which is the result of get quote.
 Oh, right.
 Which is the result that I'm getting through. Then in the front end use
 axiels and the components around there the response. So I guess I think
 you guys can figure that part out. Let me just import this one here.
 one here. But I this part here to.
 Should work now.
[01:54:31]
 Yeah, I should be able to refresh.
 Basically just change the.
 The path.
 When I should be able to.
 Can you be able to back in here.
 The route was trivia.
 It's not gonna work properly because I need to be
[01:54:50]
 providing query.
 So it's not gonna just gonna receive an empty object.
 And provide it query. The query would be something like a amount of people's horn,
 and the category was multiple.
 Now it's one category is 12 times the total.
 So it didn't grow.
 Let me see why it's real.
[01:55:47]
 Correct answer.
 Okay.
 Let's double check this really quick.
 I'll put a debugger.
 Right there.
 After we start this, we can crash.
 I don't know how to fix it yet.
[01:56:20]
 So I need to restart this
 We send this one
 This is the back end, I should be starting at the end.
 You've run through them all here.
 I should be able to keep on it now. There it is.
 Let's see if these came through.
 A mount category in type.
[01:57:13]
 A mount is one.
 Category is 12.
 Type is multiple.
 And it's going to send it response.
 And see if I can get these choices out.
 And at a time.
 And let's see if this one is open.
[01:57:47]
 Results has answer choices in question.
 Okay, that looks good.
 Then it's going to end up going to the
 and there here it's as opposed to send it
 so I'm going to put the debugger here
 either side now
 it's skipped in the bug around the path again I've forgotten that I forgot to await this.
[01:58:27]
 That's why.
 I forgot to await this.
 So it's going to result here will be a promise.
 See, problem is pending.
 I need to await this.
 Okay, there are this would have better results. And it is just a place here.
 And I see it in the browser now.
[01:59:11]
 The question, some choices and an answer.
 So it's a different format than what I got from here.
 This is sort of loaded.
 But I'm getting back from my own proxy.
 I'm getting something that's more concise.
 There's a question and my choices and it tells me which one's the right answer.
 So eventually I'll get it to like mix up the answers here.
[01:59:38]
 And that will tell me which one is which position is correct.
 Okay, so let's take a break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] All right, so we're back from the break. And,
 right, that's because it's the wrong.
 Oh, that, this is the right slide.
 Yeah, so you can take this time to work on some of your previous practices.
 Or you can, you can work on the new assignment. This is a new assignment.
 Tapstone proxy. So as usually you have one week to finish this assignment.
[02:11:15]
 Use the capstone backend. The proxy and API request for your capstone front end. So basically what I just showed you today and the
 day before, how to proxy. Next week, next week, I'll show you how to deploy your back
 end. So your front end will actually be able to communicate with the backend.
 But for now, just make sure it works locally. Like that their front end can communicate locally with your back end.
 And the next week is when I teach you how to deploy your backend so that it
 can actually work when it's in the cloud.
 So here for the backend, create a branch for using PDD, basically, that's your testing first.
[02:12:15]
 To test a function.
 With function, here's an example, get API response.
 Today, my function was called get trivia.
 So, it depends on your API.
 So, you will call that function depending on what your API is
 or the generic one is get API.
 So, right at least two tests to check if the phone should properly returns a response from an API.
[02:12:49]
 That's like what I did today.
 So at least two tests.
 Today I had to test, but I could make a lot, actually.
 There's a lot of possibilities.
 Code the function according to the test specifications. I could make a lot actually. There's a lot of possibilities.
 Code the function according to the test specifications.
 You can either get the response back, the way the API gives you the response
[02:13:15]
 or you can rearrange the response
 so that you only get the information that you want to get.
 Just like I did today and the day before. And now, so that was working on testing a function.
 For example, get API response.
 Then the next branch is for adding a path and route handler.
 So maybe you'll call it the API route.
 Today I called mine the trivia route.
[02:13:57]
 So whatever makes sense for whatever API you're using.
 Let the route handler send a response with the results from the function above.
 So just like I did, my route handler sent a response and it was just the same thing that my function gave me.
 All right, the next thing is for the front end.
 Create a branch for establishing communication
 between front end and back end. So in that branch, you're going to use axial and react
 component. Display a back end response. And then you're going to repeat the steps above for authenticating with DynamoDB.
[02:14:50]
 So I'd watch your front end to be authenticating with DynamoDB.
 I'll watch your back end to do that.
 So you're going to move some of your functions to the back end
 because I'll watch your back end to be communicating with DynamoDB.
 So basically the front end will just send the front end is going to take in the user email
 and password. I want the front end to just send that to the back end. Then the back end is
 going to just say, "Yeah, that person's authenticated," or, "No, that person is not
[02:15:30]
 authenticated." So the back end is going to do the work here. The front end is just going
 to say, "Okay, here's the email in the password that the user gave me. Just tell me if they're authenticated or not.
 So as usual, to branch to main whatever the branch is done and then push main and the branches to get help.
 Now I'm going to start the breakout rooms.
 Three as usual and
 gonna do some mini evaluations
 for
[02:16:31]
 Let's see here with 33 minutes. My room is for collaboration.
 Other room is for silence.
 Third room is for many evaluations, any volunteers? Any volunteers for many evaluation?
 So I'm just going to pick from the list. I'll exchange what's going to go.
 Okay, I'll see you in the evaluation room, mini evaluation room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 All right, so the,
 the breakout rooms are back.
[02:50:07]
 I'm still finishing up my mini evaluation with Alexandra.
 There's only one more day left for mini evaluations for this week. In conclusion,
 I taught you how to deploy from a folder in GitHub.
 And I showed you how to create an API proxy
 that accepts query parameters.
 And I introduced you the capstone proxy assignment, basically adding a proxy to your capstone.
 If you haven't taken your attendance, you have three minutes to do that. Make sure you head on over to the codex account
[02:51:05]
 and mark your attendance.
 Other than that, pass is dismissed,
 but I'm gonna just finish the mini evaluation
 with Alex andra, so I'm just gonna start
 the breakout rooms here.
 Restart them basically
 hey they've restarted [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]

///// FILE: "Level 4/transcripts/Mar 29, 2025 14-23.txt"

Transcript from Mar 29, 2025

[00:00:00]
 Good morning class. Welcome to code X Academy level four week three day five and the theme of this week is Express.
 Working on the back end and practicing on it. agenda, first hour will do attendance announcements review. And then many evaluations
 since we're behind on many evaluations will just basically spend all day doing many
 evaluations and catching up to anything that we haven't finished. So make sure to take attendance and on over to your code X account.
 Mark yourself present.
 And now it's time for announcements. Let me get that loaded up. Okay.
 So we've had regular schedule all throughout the week and every Saturday it's a morning class.
[00:01:35]
 Many evaluations.
 So if any of you submitted corrections for Tuesdays.
 Many evaluations I can do those or I can do your week 3 evaluations.
 And you should have received notifications about this. I wasn't able to grade every capstone type
 for assignment.
 So I had that pushed to Saturday before class.
 I mean, it closed for corrections before class today.
[00:02:34]
 before class today. So Capstone back end was due on Thursday. It will close, it will close for corrections next week Thursday. The practice problems are here on the side.
 I forgot to add the other one. Okay, I'll add that during the break.
 I'm going to add it in.
 Okay, let's see here.
 As a reminder, if you get stuck on anything, like there's a bug or you just can't get
 anything that works, post it in July cohort.
 Hopefully you get an answer so that you can get unstuck.
[00:03:33]
 There's nothing new there. And then for days,
 yeah, I just continue to mark them as you take notes and you learn everything in that day.
 And you ask all the questions that you needed to ask,
 and you got all the answers that you needed for all your questions, then you could mark it green,
 and then go in order.
 The reference guide has been updated for level four.
 Reference guide, if you go into there.
[00:04:18]
 If you go into there, it's all updated.
 I think every, all the dates are correct.
 It's all updated. I think every all the dates are correct. It's updated up to
 Thursday
 Thursday is when
 capstone proxy was introduced
 The new assignment about adding
[00:04:41]
 a proxy
 Dear capstone adding a proxy through a tabstone.
 And so now let's focus. We're just going to review today and then I'll answer any questions that you might have. So let's see here.
 Let's see. So you keep saying you got handler testing done.
 But working on function and tests with activate on click. Close captioning.
 Yeah, I'm not sure how to do that.
 Basically just scan through the slides.
[00:06:02]
 As each topic that I talk about is related to a slides.
 So I tried to get code's captioning, but I don't know how to do that.
 I don't know if it's possible with this one, especially since they keep making changes to big blue button.
 But you can't scan the slides.
 So let's see.
 How would I, like if I wanted to know how to deploy from a folder in the GitHub repository.
 I can see that it's supposed to be on a video in March 27.
[00:06:54]
 So what I'm going to do here. I'll go and look for March 27. That was this class
 right here. So I'll just look at the slides and then I'll think to myself which
 one is going to be most likely related to GitHub.
 So this one's about proxy.
 I can see that here.
 So that's probably not related to hosting on GitHub,
 but here's, this one's pretty easy.
[00:07:38]
 I see a GitHub slide.
 And then, then I see a slide right after it.
 So this one's most likely gonna be my best bet.
 So you know, just, yeah,
 the slide's not gonna tell you everything.
 But try to remember,
 try to remember like,
[00:08:01]
 which slide could it possibly be in.
 Like you can, you can even see the, remember like a wood slide could it possibly be in.
 Like you can even see the,
 you can even see sort of what will be talked about.
 And if anything is like along those lines. And let's see, what else if I wanted to know how to add a path.
 Add a path.
 Or route.
[00:08:54]
 So I see here on March 19.
 I talked about paths and path handler functions.
 So, I'm going to go into this list and look for the 19th.
 So this is where I talked about it.
 I would go into there.
 And one of the strategies is if I see that it's being talked about here on the 19th,
 I could maybe look at the review on the next day, 320 where it goes a little bit faster,
[00:09:52]
 but the details are talked about on the day of, but the reviewed a little bit faster on
 the next day. So if I wanted to look for a path, what slide would be about paths, then it's
 most likely not going to be in the review section. So I'm just going to skip all that. All these are part of the review.
 And then here's a new section right here after the review.
 And I see here path.
 So that's most likely where I'm going to find the information I need in this slide.
 And if I take a closer look at it, I can see the slide. It says, "Backend
[00:10:52]
 get method. I see path." So this is most likely what I'm looking for. So I don't think
 it's too hard, even though there's no closed captioning. I think that if you just you
 know use some reasoning and look at the words in the slides you can sort of
 guess where I talk about it and if it if I'm going to slow in the slide and
 you can't go you can't find your exact topic you can put on two times speed
 here and sort of scan the slide,
 and watch it at two times the speed. [ Pause ]
[00:11:53]
 Yeah, so it might be time consuming, but the benefit is that you have a better understanding
 because you're reviewing the topic instead of just going straight for the answer.
 When you go straight for the answer sometimes you don't find it doesn't give you a complete context.
 And you also have notes. You should be taking notes on it instead of looking for answers.
 So if you didn't take notes on this day here, you should go
 throughout this whole day and take notes. And then you can go into your notes and So I'm going to load up sandbox level four.
 And I can, I have a note section here in sandbox level four.
[00:12:55]
 And I know that pads are part of express.
 So I can just look for the word path if that's where I'm trying to figure out how
 to work with.
 So, there's another way to do it.
 But yeah, we don't have any closed captioning.
 So, if you want to find text, that's, you should be depending on yourself to take notes.
 And thorough notes at that. If the text, if these notes are not good enough for you, you should be adding more context to it.
[00:13:39]
 Like, like if you need more information about back end handlers and this information here is not enough, you should be
 Like including like some contacts here at the bottom
 You can put in here like
 text
 or whatever
 Just put it in a block section and then put all your notes like extra notes going to here.
 So yeah, it might be time consuming to look through the videos, but if you're
[00:14:19]
 just looking for information, you should already have it somewhere in your notes. And you should
 already have it somewhere in your sandbox, in your examples, you should have something
 in there. And if you can't find it, just ask it in July cohort.
 Okay, so another question was about on click.
 So let's pull that up right here.
 That was a TDD practice, I think. Activate on click.
 Okay, so one thing you need to know.
[00:15:19]
 So this one is going to be front end.
 So I'll just
 add something here in the front end.
 And this one was called PDD practice. And since these are multiple, uh, DDD practice is about multiple, well, 30 functions. What I'm going to do is what I would do here is make a function called activate onclick.
 So I would go have a function called activate Okay, now what's my spelling here? Okay, capital C.
 Okay, so if you're making tests for these, activate on click.
 For example, I would start with the scribe. What happened here?
[00:17:26]
 I renamed, oops, not MD.
 Should be PS.
 The scribe activate on click and then put my callback function in here. I'm just going to use an arrow function and suppose that accept an object to The test of activate on click returns a result of activating the on click method in the object.
 Well, first thing I would test for is returns a result.
 It returns a result.
 Well, this is an easy test to pass.
 If I take it literally, it'll be something like this.
[00:18:56]
 It's going to take in an object. [ Writing on Board ]
 >> Activate on click, accepts an object.
 Okay, so it should have taken an object,
 but there's no real way I can test that.
 It takes in a, I mean, I don't know how to assert that.
 Well, there is a way to assert that
 sort of, but it's not really dependable.
[00:19:36]
 So I'm just going to not go through that.
 But I want to see if I can get a result.
 Some kind of return result.
 Activate on click. So it's a function that accepts an object. So I'm going to pass in an object there. And then I will assert I expect result to be defined.
 Some kind of result or I can put to be truth be.
 Or maybe it won't be truthy. I just need to be defined because maybe it will return an empty string, I don't know.
 So I expected to be defined.
[00:20:37]
 Maybe it won't be defined here. It returns a result if given an object with an onClick method.
 So with an onClick method, this one makes more sense. Okay. So this object should have an on-click method. So we need
 to put here a property called on-click. And it's a method. So it's some kind of function and
 I'm going to make it a anonymous function and it's supposed to returns the result of activating the onclic method in the object.
 So this object or this onclic method should be returning something. So we turn the number five.
 So basically, I'm going to make it look like a function here.
 Or I can do this. I'll put an inner function here.
[00:22:25]
 So it doesn't look as confusing.
 I'll put here function, my function,
 return five.
 So this is an inner function.
 So on click will be my function.
 So activate onclick is supposed to activate the onclick method of this object and then return the result of activating this on-fit method. It returns a result with an on onclick should return a result.
 Because activate onclick, did return going to take in an object.
[00:24:19]
 You could name it anything you want.
 I'm going to put a type, I'm going to put a type here.
 This object, I'm going to assert the data type here.
 So this object that have an onclick method,
 which is some kind of function.
 And it's supposed to return something.
 It's supposed to return the result of activating the onclick method.
[00:25:13]
 So this is like something I need to do.
 It should return the result.
 Return the result of activating the onclick method of the object. This test will pass, right?
 Even though this function is not made properly, this test will pass because it's not testing everything that I need to test.
 Gonna, gonna go in here,
 edit my test for the front end,
 on the test that module, module. That's TD the practice. Think this one. If you're going I put a space in it, yeah. Then you lowercase this, so it's easier to
[00:26:48]
 PDB practice, lowercase and hyphenated.
 If there's a space in the file name,
 we're folder name, you need to put
 quotations around this.
 Otherwise, it thinks it's another parameter.
 And I'm testing your Mac for date on click.test.ts.
 So I can go into here and npm run test.
[00:27:24]
 I put folder in my end here. You need to go into the
 front end folder. NPM run test. This one's about activate on click. Okay, let's
 see what happened here. No test found that I put a typo.
 Oh, should be an s there.
 Okay, found it. It says the test passed.
 But it should not pass because it's not doing what it's supposed to do.
 So I need to keep writing more tests to make sure that it's doing what it's supposed to do. So I need to keep writing more tests to make sure that it's doing what it's supposed to do.
[00:28:11]
 So the thing is, you need the pass it an object that has an on-click method. Remember,
 a method is a function inside of an object, or a function that's connected to an object.
 It's not that I don't want to enable those captioning.
 There's no...
 There's no... there's no feature to do that.
 Or like you want transcripting, right? So there's no feature like that.
 I mean, I tried to do it before, but then I had to
[00:29:00]
 like download the video. I tried it before I had to download the video and the post captioning was horrible.
 So if I could add a transcript, I would.
 It's not available for big blue buttons videos.
 So, and, yeah, it's just different for big blue buttons.
 If they added that feature recently, I would activate it to give you guys the the most chances of
 finding the information you need, but we have to work with what we have and what
 we have are the slides that you can easily scroll through. You know there's differences between Google Google Meet and
[00:30:10]
 Big Blue button pros and cons
 So this is what we have to work with I'm personally I like I
 Like seeing the slides It's easier to it's easier to
 You know see what's going on and what the topics are.
 You can see them very easily and clearly.
 It goes slide by slide, whereas Google Meet, it's a video.
 Then you have to scroll through the video and see where each slide changes. But here you can actually see each slide.
[00:30:48]
 So, you know pros and cons.
 So, the pros are you can see the slides.
 And you have a good idea of what each slide is about. which topic is talked about on this day, on which
 day.
 So that's the best we can do to balance out one of those cons.
 The one of the cons for big blue buttons, you can't have it.
 It doesn't have a transcript feature, but at least we have some other features to sort of balance
[00:31:27]
 that.
 Okay, so I was talking about announcements here.
 All right, so what we're going gonna do is go into the review.
 Oh, let me see here.
 There was some more questions.
 (
 (mumbles)
[00:31:59]
 (mumbles)
 The video somewhere.
 Yeah, so you'd be saying it's between the review session and,
 you know, you can see the new stuff.
 If you're looking for the new stuff, it's after the review section.
 I mean, you should know this already.
 You've been in classes for a while.
[00:32:23]
 I can see the, I can easily see the
 review slide. It's right there. And then if I've
 future scrolling, I can see where the, the new section is right there.
 And I can see what's being talked about for these sections.
 Yeah, so if I were, you know, if I was looking at this video for the first time, I would start from the beginning, watch it, and if it's going too slow for me, I would watch it at two times the speed, and
 then I would pause it on any part that I need to catch up on.
 If I need to type something, or OCR something, I would pause it, copy it, and then continue
[00:33:28]
 watching in two times speed. And then if anything seems confusing, I'll slow it back down again,
 or pause it.
 Let's see here. And then if I wanted to see
 Let's see here and then if I wanted to see
 Like the I can see there's break sections
 So the break sections tell me where the first hour is and where the second hour is where the third hour is
 Another break section right there. You guys know the format of the class, where I'm likely to teach the new content.
[00:34:14]
 So you just keep all that into consideration when looking for a topic. And, you know, just like in those times when we were in grade school, when the teacher
 is lecturing, we don't transcribe the teacher when they're lecturing. We just take notes and back then it was hard to record the teacher.
 If you had a recorder in your hand, you can barely understand the recorder. But now we have these video recordings and we can easily Understand because the audio is it's clear it's clear and we can see each section that's being talked about
 All right, so
 All right, so now we're gonna go into the review you should already have the notes for the review
 So now we're going to go into the review. You should already have the notes for the review.
 So we should just be,
[00:35:34]
 just going over what we learned on Thursday's class.
 But you can also type in anything,
 just to say, just in case I say anything new or just in case I say anything that you sort,
 you might have missed in Thursday's class,
 you should, you could add that to your notes.
 But yeah, let's focus now and also have our microphones ready just in case you want to ask questions.
 I'll also be doing many evaluations
[00:36:09]
 Right after the review
 Well, actually it looks like the review this would just take an early break if we finish this review quickly
 We'll just take an early break if we finish this review quickly. So, in Thursday's class, I taught you guys how to deploy from a specific folder in GitHub.
 And basically, just go to the repository, click on the settings tab, click on the pages folder.
 That's the usual deploy folder.
 I mean, pages section.
 This one was a new section that we usually don't look at.
[00:36:58]
 The build and deploy section.
 Use GitHub from the drop-down.
 I'm going to share that here.
 So pick your repository.
 Go to the settings. Go to the pages section here, and the build-in deployment
 section, and choose GitHub actions from the drop-down. And when you do that, you will see like
 some kind of a card that looks like this, and you would click on "Configure" and just change, it'll show
[00:37:50]
 you a file and you just change "Blind Number 40" to this right there.
 And that file will end up being in your repository.
 So this is how that file looks like when
 you're configuring it. It's going to end up in this kind of repository right there or in that
 folder. In the GitHub folder.github.workflows static. the animal.
 And then line number 40 is what we edit in here.
 Just put the folder that you want to render or deploy from.
[00:38:41]
 The comment here, you can make it more clear if you need to, but I already know what this is about.
 Basically what this is doing is it's going to upload a folder into the GitHub's renderer.
 So you can make the comment more clear if you need to. But I know the effect of it when I put a folder here, get hub renders it.
 And then,
 then if I want to view my page
 click on view site or visit site site and I see it there.
 And it says Capsule Level 4 up here and my links work.
[00:39:32]
 But it's not going to work right away.
 It even works on Refresh.
 It's not going to work right away because you have to update the root path.
 Because you moved your files into a new repository, you need to update the root path.
 And also the 404 file.
 If you want the refresh to work, you need to update the 404 file.
 You need to update the 404 file.
[00:40:14]
 Right here, your front end 404 file needs to be updated. Because your 404 file loads redirect.js.
 And you need to put the GitHub, the GitHub group here for the GitHub. And in this case, it's a repository name.
 Any questions about that?
 Okay, so the next one was we developed an API proxy with query parameters. So basically the previous day before we learned this, we learned how to proxy an API request, but it didn't receive any parameters.
 So let me load that for you.
 That was in the backend.
 Actually, I should open it in another VS code and leave the sandbox for notes.
[00:41:31]
 It's just easier that way.
 The debuggers don't conflict if you open it in.
 If you open the backend and the front end and different VS code windows.
 Okay so this is the one that this is the API that we will on Wednesday, we wrote a function called get_coat_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_it_ and gave us the result. But in this one, the one where we add query parameters,
 now one was trivia. Right here, the trivia path takes in a request and a request has a query
 It has g value pairs. Let me show you how that looks
 Actually, I didn't do the front end part
[00:42:58]
 So I can show you how the front end part looks for that
 show you how the front end part looks for that.
 So it had a front end in the front end use axial and component to render the response.
 So I'll just quickly
 fill that here.
 Sort of left that to you guys, but So, I'm going to work on the front end here. So I have the front end loaded up. I would
 make a new component called trivia. It's going to very much resemble my
[00:43:54]
 quote component. I have a quote component. I think I'm just gonna copy it. And then make another one for trivia.
 There's a state variable set trivia.
 All this trivia variable.
 Okay, so I'm not sure about this one.
 Instead of both, it's called trivia. I'm gonna receive a trivia question from the server.
 I'm gonna update this one, think to get a trivia question.
 That should be a question.
[00:45:16]
 Okay, since I don't have an author, because I'm copying from my previous element or component, I'm just editing this to make it make sense for trivia.
 Okay, so this is the route I was talking about.
 I can test it with query parameters.
 It's going to go through the trivia, the trivia path.
 And then to add query parameters, I would add it here.
 And the way that I set up the back end was,
 well, I should have another test I could add here is that the query should have a
[00:46:08]
 amount of category into type.
 So that's one of the things I can test.
 But I'm just going to skip it for now.
 I'm just going to write the test here. Good.
 Accepts a query object with a amount category and type.
 Part of this is a, it's like documentation about what this function is supposed to
 do. So, the get trivia function. These are the things that it's supposed to do.
[00:47:05]
 So it looks like documentation.
 So it accepts a query object within an amount category and type.
 So I should probably put this closer to the top.
 Since it's like gives us idea how it should work.
 So it would look like this sort of,
 and then I would put some kind of tacked phase and a certain phase.
 And in this case,
[00:48:01]
 you can see in the act phase,
 You can see in the act phase, record you that when you listen to the top, because this is more appropriate on the top, because it's like describing to me how to send a parameter
 to this function.
 So this was get trivia. It accepts a query, right here,
 accepts a query object. And what should'm just going to get the result.
 returns for itself
 So I would expect
[00:49:11]
 result
 to be defined
 for true feed
 which I want to invest for that
 I'll probably don't need to, I think it'll work, probably don't need to skip it. But yeah, that's, it's going to go, we have a trivia route, and you start from here.
 A trivia route, going through the trivia handler which calls on get trivia which accepts
 a query object and that query object should have an amount category in type. This is where I structure it.
[00:50:10]
 And then I add these variables into the API URL.
 I go ahead and contact the API here, get a response, and then I form a result, which
 has a question.
 It has core choices, and it tells me which one is the answer. Which one of these choices is the answer? Position 0 in this case.
 For now, eventually, I would want to have a test here.
 If it's not done, it randomizes the position of the answer.
 Eventually, I'd want something like that.
[00:51:18]
 And I would make a range phase, act phase and assert phase for that.
 So the query comes in from the front end and that query
 will look like the needs in the mount.
 I'm going to set that to one. It needs to be separated by
 an and then category equals 12 and then it needs a type which is a string.
 I don't need to put quotations. Everything in here is a string.
 Type equals multiple.
[00:52:16]
 So there's a query string.
 You can also split it up into base URL path and query.
 So here's another's the base URL. Now I can see it easy, easier, and then a query.
 It's going to be this one here.
 Put it together based URL plus half plus query.
 Or if you want to make sure how it looks like, you can save it in the URL.
 You are available so that you can make sure your URL is
[00:53:47]
 when you are debugging, you can make sure your URL is forming correctly.
 When you are debugging, you can look at each variable and what it turns into.
 But if you just put this into here, you're not sure if you might not be sure what your
 URL is forming.
 If you just put it directly in here, you're not really sure what your URL looks like.
 But you're sure how your URL looks like.
 It's saved into it very well. saved until a variable. So I would get a response here and that
[00:54:36]
 I have to sort of I'll be thinking just stringify it for now to get an idea.
 maybe just stringify it for now to get an idea.
 Results, the result would be like response. data.
 I would stringify this because if you just If I just put it, then I get to see the whole object.
 I'm going to put up the front end and start, start up the NKM
 Start Open another terminal
 NKM
[00:56:15]
 Open the M1 bill
 Take next Next, open up, open the inside here.
 Here you can get trim course in and there it is there's a trivia
 there's a lot of these to trivia object I would want it to go on the next line so I
 should at least have a I should at least put this in the div
 have a, I should at least put this into the div. See the letter here on the next line. Or if you just put a B on it, it's not a bit. So there it is. I have a question. I have
 the choices here, which are years, and then I have the
[00:57:25]
 position of the answer. So I can use this object to form a better looking response
 instead of this data here. At least I know I'm receiving the data.
 So it's now time for break because of the slides here. Yeah and then after the break, we'll do some linear
 valuations. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 >> So we're back from the break.
 This finished the review. So in the second hour,
 you have time to work on the assignment,
[01:09:11]
 and this was the past assignment.
 Capstone back end,
 you basically need to have this work on the new assignment,
 which was issued on Thursday, which is this one. It's about using
 the capsule and back end to proxy and API requests for your capsule in front end. So basically,
 for your capstone front end. So basically some of you already have an API in your front end.
 Well, we want your front end to instead contact your back end,
[01:09:57]
 which contacts the API.
 And then that API gives the response to the back end
 and the back end gives the response to the backend and the backend gives a response to the front end
 And and then in this case over here repeat the steps above for authenticating with DynamoDB
 your front end would basically send the
 Users email and password to the backend
 back end gets the backend talks to DynamoDB
[01:10:29]
 and DynamoDB gives back like what the DynamoDB gives you
 a the email and the correct password.
 The backend is supposed to look at that and say, OK,
 let's see if the password that the user put in
 is the same as the password that DynamoDB gave me.
 And then the backend is supposed to tell the front end, OK,
 this person is authenticated, or this person is not authenticated.
[01:11:04]
 this person is authenticated or this person is not authenticated.
 So basically the front end is just asking, okay, I have the users, I have the user, they enter the user email and password, here you go back in, let me know if it's authenticated.
 Next thing you know, back in comes back and says, "Yes, they're authenticated."
 So back end does all the work for that.
 So you can work on that and I'm going to start up the breakout rooms here. Here.
 And it's going to be for many evaluations, directions. Any questions? any questions. Okay, so I'm just going to call somewhere up for this week's evaluations then. [BLANK_AUDIO] Okay, so. So, the next step is Chris for doing the, for this week's mini evaluation. Okay. So Chris, I'll meet you in the many evaluation break-out room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're going to take a break, but I still need to finish the, the mini evaluation
 with Chris. [ Pause ]
[01:49:35]
 So I'll see you after the break.
 Then I'll continue the minute evaluation with Chris. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And we're going to continue to have time to work on our assignments or whatever we need
 to work on.
 We should be coding, though, and should be related to the class.
 Again, you need to have the capstone back end. You need to have this
 done to even complete this one, the capstone proxy. And this one will be due next week on Thursday
[02:00:18]
 before a class. I'm going to continue the breakout rooms. And I'll continue the the mini evaluation with Chris.
 And let's see here. For 47 minutes. We have 47 minutes until the breakout rooms will close again.
 Okay, the breakout rooms are open. You guys out here can continue to work on the assignment. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so the,
 all right, so I just have a few more questions with Chris, so I need to continue that.
 But, let's see.
 So the conclusion for this class,
 now that the breakout room goes back.
[02:48:51]
 We got a chance to do the review of Thursday's class.
 Catch up on anything that needs catching up. And actually,
 I'm still working on the mini evaluation. I think that maybe 15 more minutes will be
 done. So if anyone wants to stay, I'll take one more mini evaluation after class, after I finish up Chris's evaluation, many
 evaluation. Make sure you take attendance, three minutes to take attendance,
 you can head on over to your Codex account to do that. Other than that,
 classes dismissed, that's today's lesson on express, but
[02:49:47]
 if anyone wants to do their mini evaluation after class, just, I think I'll
 be done with Chris's mini evaluation after 15 minutes. So just let me know.
 Okay. So, I'm just going to continue the mini evaluation with Chris.
 If anyone wants to do a mini evaluation right after his, You can post it in the.
 In the chat. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 >> Okay, Ray line.
 I'm here.
[03:13:51]
 Waiting.
 Just finished the mini evaluation with Chris.
 We can head on over to the mini evaluation room.
 Ray line.
 Okay, dopeause ] [ Writing on Board ]

///// FILE: "Level 4/transcripts/Mar 31, 2025 20-7.txt"

Transcript from Mar 31, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four week four day one and our topic for this week is AWS
 In the first hour, we'll take attendance, do announcements, short review, and then go into AWS topics.
 Then in the second hour, go into more AWS topics, third hour, many evaluations,
 and time to work on the assignment.
 And particularly about AWS is how to deploy your back end server to AWS.
 Now, if you haven't taken attendance yet, make sure you do it right now.
 Head on over to your code X account.
[00:01:14]
 Mark your self-present if you're here. And now time for announcements.
 Let me get that loaded up. Okay, regular schedule this week. Remember to add a submission to be placed in the waiting list for the mini evaluation.
 We have a new mini evaluation for this week.
 Week 4, AWS, there's the mini evaluation. So let's do April 1 before class. So get in the lineup before April 1.
 Get in the waiting list before April 1 so you can possibly get this point here.
 Submit the evaluation on time.
 Just because you submitted doesn't mean you'll get, you'll do the mini evaluation
[00:02:48]
 right away. We still have to do like corrections for last week and things like that.
 So I'll let you guys choose which one you want to do. Like do you want to do corrections the mini evaluation or both.
 The questions for the mini evaluation are things that we've been going through the past two weeks already. So it's sort of overdue. This one's about TypeScript. properly explain array types. You know, with a capital A array, and then how you specify the type for that.
 Custom types.
 That's with the
 with the keywords type interface and class.
 Fallback types that's using arrow functions, to specify the callback
[00:03:50]
 types, and function return types. So you can assert what a function will
 return. That's in the you would do that in the function signature.
 function signature. Properly explain how to send requests to your back and server.
 So you probably familiar with this already.
 In the front end, describe how to make a request with axiels and then how to send query
 parameters.
 That's basically using template strings.
[00:04:27]
 You send query parameters.
 Probably explain how to receive request and respond.
 So in the back end, how do you receive query parameters?
 How to view the query parameters?
 How to send a response based on query parameters,
 not just like any response,
 but a response that related to the query parameters
[00:04:57]
 that were sent in.
 So like for example, the trivia,
 the trivia API, we're able to send query parameters to the backend, and then the
 backend looks at those query parameters and request some trivia and receives it based on those query parameters. And then that back end sends a response.
 Basically it just removes the bloat from what it gets from the API and sends a
 cleaner response to the front end. So it's related to the query parameters, the responses related to the query parameters.
 What's the naming convention for routes, route handlers and their file name.
[00:05:59]
 Last one is properly explained communication between front and end back end. So like how to receive and view a response.
 like how to receive and view a response.
 How to use data from a response. So these are related to using the VBUGGER.
 You could you could do them with console log.
 But it's better if you can do it with a debugger.
 That way you can understand what's going on and less typing too.
 Especially if you just put break points.
[00:06:35]
 So that's this week's evaluation, mini evaluation.
 So I just closed it.
 So it's due tomorrow before class, if you be submitted until April 8.
 That's basically one a week later. I still need, I guess I need to update this assignment.
 So there's still the back end assignment.
 Do the Thursday before class.
 Let's see here.
[00:07:40]
 Oh, wait, I didn't post it yet.
 Okay, I'll post that soon. Oh, wait, no, here it is.
 Yeah.
 Wait, yeah, it's already, it was due last Thursday in the back end assignment. And I know I assigned another one last week.
 I'll check it out.
 But that one's basically do this Thursday.
 Okay, let's see.
[00:08:40]
 As usual, practice problems are listed here.
 I'm still missing one here, so I need to put it here.
 Let's see if there's anything in July cohort. I'm going to load it here.
 Okay, there's when making API calls while testing returns trivia results. So if it's so you're guessing that it's because there's too many responses going on at the, I mean,
 too many requests going on at the same time.
 If you need to send two requests and you need to put a time gap there, you can use
 set time out.
[00:10:58]
 But the problem with that is set time out doesn't work with, it's not compatible with
 promises.
 I'll double check what's, where are some other ways, but if you need to put a delay in between them,
 think it's set timeout or, or even just might have a delay feature. It might
 have a delay feature. I haven't used it like the lay between tests.
 So, yeah, check on that if there just has a delay feature between tests, that would be easier than using set time out.
 If it does have that feature. And if you find it, find out if you can put a delay between tests, please post it in here.
[00:12:16]
 What your findings are.
 And then continue to mark your day's green as you watch the recordings and take notes and
 ask all the questions you need to ask.
 And now let's focus because we're going to learn new things here.
 We're just going to do a review of some AWS topic.
 And I think most of you have done it already.
 I mean, have finished that.
[00:12:55]
 What I'm going to talk about in the review, but we'll find out.
 And have your microphones ready for the mini evaluation. If any of you want to do corrections.
 So, you can set he wants to do corrections.
 So, he'll be the first one.
 During the third hour to do the mini evaluation.
 an hour to do the mini evaluation. Okay, so for the review, it's just this one right here,
 because it's related to what we're going to do either today or sometime later on this week, AWS, IAM practice. So this was something that we,
[00:13:50]
 that we saw in level three at towards the end of level three,
 get out of quarantine and apply a stronger least privilege policy for more security.
 So you need to be familiar with this process
 because we'll need to make a new set of access keys
 and another user.
 So let's see.
 Step number one was log into the AWS root account and go to the IAM console.
[00:14:31]
 Step two, click on users in the sidebar and create a new user.
 All DynamoDB practice.
 Step three, do not allow the user access to the access to the
 Access to the
 Access to the
 Access to the
 Access to the
[00:14:53]
 Access to the
 Access to the
 Access to the
 Access to the
 Access to the
 Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access to the Access Access to the Access Access Access Access Access Access Access Access Access Access Access Access Access Access Access Access Access So DB read only access. Then set five, create the user.
 Then select the user.
[00:15:09]
 Select that user, which is Dynamo DB practice.
 So did anyone finish this practice? If you did, thumbs down if you didn't.
 Step number six was choose a security credential tab.
 I mean, choose a tab and then create an access key
 for an outside application.
 Download the CSV file.
 Select the user whose access keys were limited.
[00:15:48]
 So that would have been your admin user.
 Remove the quarantine.
 And then click on security credentials tab
 and deactivate or delete the access keys.
 So need to be familiar with this process
 and it looks like you guys are.
 So, let's just wanted to make sure
[00:16:19]
 so that you'll be able to follow
 when I talk about it later on.
 So, now we can talk about the new topic, AWS.
 Let's create some notes for it.
 We're gonna create AWS.md.
 And the first note will be about environment variables.
 So copy this down here. Environment variables.
[00:16:54]
 They are variables that are stored outside of your app.
 But your app has access to them.
 Well, you'll see later on how this works. But just know that there's your app, which
 is inside of your computer.
 And then environment variables, they are outside of your app.
 Because think of your computer as the environment, right?
 And your app is inside of your computer. There are variables that can be stored in your computer, but your app is, I mean, it's outside of your app, but your app has access to these variables.
[00:17:49]
 app has access to these variables. Environment variables can be accessed through the process object. So there's an object called process. And that's the one that contains your, that
 contains the environment variables. And that process object is provided to apps running in no JS, not in the browser.
 So these environment variables are available to things running in Node.js.
 Anything that you're running, and you use the Node command to run it, or Node.mon, which
 uses the Node command.
 If you're running an app using that Node command, then it has access to environment variables,
 variables that are outside of your app.
[00:18:54]
 And this is important because AWS can be configured
 to run apps in node JS.
 So AWS, it can run your server because AWS can run apps in no JS.
 And I'll show you a way to run no JS apps in AWS.
 That will cost you anything for a personal use.
 It's less, I think it's less known
 how to do it.
[00:19:39]
 There's more traditional ways to run your no JS app
 or more traditional ways to run your Node.js app or more traditional ways to run your back end server
 in AWS, but it'll cost you something.
 But I'm gonna teach you a how to run it in AWS
 without costing you anything.
 At least for personal use.
 If you create a server and it's getting a lot of traffic,
[00:20:02]
 then it'll start, you know,
 it'll start, you know, racking up the bill. But you'll need like a lot of traffic.
 You need a very popular website. And if you have a popular website that's getting that kind
 of traffic, then it's going to be easy to pay whatever the bill is. But for personal use, it's going to be free because unless you code something wrong and
 you make it get into like an infinite loop and it's just sending requests after request,
 you're going to, you know, you're going to rack up the bill if you do it that way.
 If you accidentally create an infinite loop,
[00:20:46]
 you don't want to do that.
 And the way that we're programming,
 we're not really using loops to make requests.
 So I don't expect you guys to accidentally
 make too many requests to your server.
 But a file called.env.
 Can be used to declare or change environment variables.
[00:21:20]
 So let's just save this in a...
 a new nodes file.
 And box level 4. Use my notes AWS. Amazon Web Services.
 This one's about environment variables. object is a keyword, so I'm going to highlight that here.
 Process Object. It's like
 the back end has a process object,
 but the front end has the window object.
[00:22:40]
 The front end doesn't have access to the process object, and the back end doesn't have access to the process object and the back end doesn't have access to the window object.
 So they're both JavaScript, the front end and back end, they're both JavaScript, but they just have, you know, different
 different things, different capabilities and different objects that they're working with.
 And this one's also going to highlight this one, ENV file.ENV. environment variables route. So we can we can, you can take some notes on it. So basically in
 the backend, we're going to create a file called.env in the root folder. And then we're
 just going to basically, this is how we create an environment variable. In that file, we're
 just going to put mode equals development.
[00:24:05]
 So the variable is mode.
 The value is development.
 Notice that there's no quotations here.
 There's no semicolon.
 Everything in the environment file or dot e andMB file or everything.
 Basically, every environment variable is a string.
 That's why you don't need to put quotations.
[00:24:30]
 They're all strings.
 So then we'll just follow these steps right after that.
 So let's go and save this in the notes.
 Let's go and save this in the notes.
 And then,
 then we're going to follow the steps when I had a time. I'll highlight some things here.
.env.
[00:25:15]
 Mode equals development. We're going to create a route /env.
 We're going to install a package called.env.config and here's that process object right there. Let's see how that looks in the preview.
 Okay, so we're going to start with this. In the backend create a file.
.env in the root folder. I'm going to open a different VS code for the backend. You use the back end.
 You're going to create a file called.env.
 It's going to be next to like the config files here. And then that mode equals development.
 So mode equals development.
[00:27:22]
 So basically this means development mode. While we're here, you should add
 this file to get ignored. We got to put it in there. That E&B right there to get ignored.
 Confidential file that's added here.
 Add dot e and v to dot e get ignore.
 Okay, the next one is create a route and a handler to send environment variables in the response. So let's just break this down for a so create a route slash in the
 So to create routes you need to go to the
 Indexed at a CL file. I mean index that ts file add your route there
[00:29:01]
 This is how we're gonna test it out with routes
 This is how we're going to test it out with routes. This will be the slash b and b route.
 And we're just going to create a handler that matches the name.
 We don't have this handler yet, but we're going to make it now. You can close the EMB file.
 That's all we're going to put in there.
 We're just going to put the mode equals development and that's it for that.
 So I'm going to go to the routes folder and put our route handler in there.
[00:29:41]
 The name of it is going to match.
 So it's called ENV. And the function name
 is also going to match ENV. As usual, you're going to get a request and a response.
 And the types of these so that we get.
 So that we get IntelliSense or these pop-up menus.
 The request object and the response.
 I mean the request type and the response type
[00:30:25]
 or express as to be for express.
 And we're going to send some kind of response here.
 When we're going to send, we don't know yet.
 We're going to send something.
 Then I'm going to import something. Then I'm going to import this ENV file or this handler.
 Okay.
 So I created the ENV path or route. I set up the route handler created the file,
[00:31:08]
 pnv.ts where I got the pnv function or the handler.
 I got it ready for what's about to come.
 for what's about to come. And it's supposed to send environment variables in the response. So what I'm going to do is I'm just going to create a data object. I don't know what's going to go in there yet, but I know I'm going to do something with
 it.
 So I just got started with data right there.
 So we're going to install a package called.env. This is going to be a dependency.
 Not a dev dependency because we're going to import it.
[00:32:16]
 So in the backend again. And then we can install a package, PM install.
.env.
 So basically the file is spelled, I same thing called the B and B.
 Okay, so I have that installed.
 We need to initialize it in the handler.
 So in that ENV file,
 the ENV.ts, that's where our handler is.
[00:33:12]
 We just initialize it with that ENV.config.
 So first we need to import it here.
 Import.env. This is the default import.
 There's also, we don't see the three dots here.
 There must be some TypeScript support for it already. So there's also, we don't see the three dots here.
 So there must be some TypeScript support for it already.
 I wonder though, if I don't import it,
[00:33:52]
 then if I type here dot e and b,
 dot config.
 So there is no automatic imports.
 When you have default imports,
 you don't see them in the list.
 So that's one of the drawbacks for default imports.
 You don't get a pop-up.
[00:34:17]
 So I'm just going to import comment here. What this does, does it attaches the variables in dot E and B, the file.
 So that's the file, right?
 Because there's a variable that's in that file.
 We made a mode variable. It attaches that variable
 to the process object. If you don't do this, if you don't initialize.env,
 your variables in.env file will not get attached to the process object.
 That's the only way you can access your environment variables through the process object.
[00:35:37]
 And then we can access the environment variable with process.env.node.
 And then send it in the response.
 So for example, process is the object that's containing environment variables.
 And it has a property called env, which is also an object that contains the environment
 variables.
 And then your variable is mode.
 So that's how you're going to get the value for your variable that you put in this
[00:36:23]
 not EN the file.
 Basically, you just put your variable name right here.
 And these are your variables right here. This is their value.
 So that's how I would get it. So what would the value of this be? The value would be development.
 Because I'm accessing the mode variable here.
 So what I'm going to do for the data is I'm just
 going to put mode.
[00:37:06]
 That's the property.
 I'm just making up this property.
 And here's the value.
 Right there. Okay.
 Again, I created a object here, created a property called mode, which is basically matching
 this.
 And then the value is going to be here, and that value is going to be development.
[00:37:47]
 Okay, so I'm going to start the server.
 NPM start.
 We're going to test it out.
 And it's reminding me to NPM run build in another terminal.
 Okay, it opened visit the EMB cap and there it is mode development.
 If I change, if I make any changes to that file, like if I go in here and I change this to
 hello world, hello world, but I need to restart the server because it doesn't know,
[00:39:00]
 this is outside of the server. So this is outside of my source files.
 So it doesn't know that I made changes here.
 If I refresh this, it's not going to reflect any changes.
 I need to restart my server.
 Because it's only tracking the server is only checking my source files.
 It's not tracking environment variables.
 So now if I, it's, it started, my server has restarted.
[00:39:40]
 If I refresh this, now it says node equals hello world.
 If I refresh this, now it says node equals hello world.
 If I don't,
 if I don't, I'm trying to get to the back end here.
 Okay, so if I don't initialize the config here,
 or if I don't initialize.enb,
 this will restart the server if I save the file.
[00:40:09]
 So I've cancelled out this.enb it's not initializing and my server has restarted.
 If I take a look at this and refresh, there's nothing there.
 Because this variable and this value were not attached to the process object.
 The only way to attach them to the process object is with this.
 You only have to do this once somewhere in your app, but since this is where we're using
 it, we're going to initialize it here.
 And it doesn't hurt to initialize this in multiple places, but you only need it once. You only need to run the
[00:41:08]
 initialization once. Okay, so the server restarted and I can take a look at
 this again and refresh and it says mocha. mo hello world. I'm gonna change it to the correct value
 Development
 This is environment variable so I say changes here, but my server didn't restart because this is outside of my app
 but my server didn't restart because this is outside of my app.
 My app doesn't import this file at all. So you can dot E and V file. I'm not importing it all.
 I'm not importing it. So my app and my server doesn't know about it. Only only dot ENV right here only dot ENV will know about it, but only it only know about it when it runs this command. So basically those
[00:42:17]
 environment variables are outside of our app and we have to restart our server if we may change this to those environment variables.
 Okay, so now I've restarted my server. It should say development here. There it is.
 So environment variables, they are variables stored outside of your app,
 which is going to be useful for security purposes.
 Okay, let's with the next slide, that's where we talk about AWS Lambda.
 So make sure you copy this here.
 AWS Lambda.
[00:43:41]
 So that's a service that can be used to deploy your backend server.
 That's the one that we will use.
 It's not a traditional, it's not a traditional way of deploying backend servers, but it's
 going to be the free way to do it with AWS.
 As if we try to deploy our backend server the traditional way with AWS,
 you'll get charged even if nobody is sending requests here back in servers,
 as long as it's running, it's going to rack up the build.
[00:44:23]
 But not if we do it this way with AWS Lambda.
 So your backend server will not actually do the listening.
 So that's already something non-traditional
 because we know that the backend server is supposed
 to listen, right?
 We're supposed to listen on local hosts
 8,000 or whatever.
[00:44:44]
 But when it's on AWS Lambda,
 it actually won't do the listening.
 AWS Lambda will receive the request.
 So AWS Lambda will do the listening for the request.
 And then it'll run those requests through your route handlers.
 You know, you have route handlers, right?
 And then you're Express app.
[00:45:16]
 Is this going to run it through the route handlers?
 So let me just save these in the notes.
 Okay, so you have route handlers here in the backend.
 Right here, these are route handlers in the route folder.
 That's what AWS will you, AWS Lambda will use.
 It will will use these
 It's not gonna use your it's not gonna use the listener
[00:46:19]
 You know how but you have a listener right here. It's not going to use that. It's basically just gonna use this And AWS lambda is called a serverless service because it runs more like a function.
 You know how you have functions and they're not always functions are not just like constantly listening for someone to call them.
 Functions, they run only when you call them.
 So AWS Lambda, it runs only when called
 or when a request is sent.
 And only uses your handler functions,
 not the express listener.
[00:47:13]
 So it's gonna, so this is a non-traditional way.
 And so it's gonna just, you know,
 we're gonna have to tweak some things
 so that it works fine with AWS Lambda.
 The reason why we want to use AWS Lambda is because AWS is a partner of codex.
 And you want to be able to use their products because you might be hired by AWS since they are a partner of CodeX. So you want to be able, you want to at least be familiar
 with their products.
[00:47:54]
 The product that they have,
 which runs back end servers the traditional way
 are called EC2.
 back-end servers the traditional way are called EC2.
 That stands for, I think, elastic compute.
 But if you use that, then, you'll get charged.
 But if you do use EC2, like, if you work for a company that does use the AWS EC2, you run traditional backend servers, it's not that hard to use because it's going to be traditional,
[00:48:37]
 like how we've been doing in our local machine.
 It'll be traditional, so it's not going to be hard to adapt to. But we need to
 adapt to AWS Lambda if we want to use a product of AWS to run our back and server for free.
 Let me see what the next slide is.
 So we're going to go into a break, but I'll show you what the next slide is just in case
 you want to try or poke around in AWS lambda. Here it is.
 Where you create an AWS lambda function.
[00:49:35]
 Okay, so there's some steps here.
 And it's pretty easy.
 But we'll find out after the break
 if you're able to follow those steps.
 Let's take a break now.
 Make sure you copy that. switch to the break screen now.
 Okay, see you after 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and we're going to continue the topic on AWS. Specifically, AWS Lambda.
[01:00:51]
 So we're going to create an AWS Lambda function.
 So if you haven't copied this already, make sure you do that.
 We're going to walk you through the steps here. [ Writing on Board ] If anyone got a chance to do this, turn your break.
 Thumbs up if you did.
 So I'm just going to highlight some things here.
 So they're just easy to see.
 They're not actually code.
[01:02:15]
 But there's like buttons and things like that. Okay, so I hope you're all logged into your console.
 I need to get logged into mine.
 Let me do that first.
 So you can follow along.
 Make sure you log not your root user.
 Just a good practice to do that. Okay, lambda, you can search for lambda up here, and there it is.
 But before I do that, let me just quickly show you the traditional way.
[01:03:42]
 It's called EC2. This is a traditional way to make back end servers with AWS.
 Basically, you just get it set up and upload your code.
 Like you've up similar to how you upload your code to GitHub.
 You just upload your code there and somehow it just deploys.
 After just a little bit of setup setup your code deploys as is.
 Well with EC2 it's simpler. You can just upload your code to EC2 and then just with a little bit of
 setup it'll just start working. But if you start doing that, if you do that with EC2, you'll get charged.
[01:04:32]
 So instead of doing that, we're just going to take a little bit of a harder route with lambda,
 but at least it's going to be free for personal use. And we get to do something with our AWS partners. I mean, use, we get to use our products.
 Okay, so the steps here,
 from the AWS Lambda dashboard,
 click on create function.
 So that's this one right here. So I'm in the lambda dashboard. There's create function.
 Enter a function name. Next hand box level 4.
[01:05:28]
 Right here, don't worry about this stuff.
 Just how the defaults are fine.
 Sand box level 4. This one's fine too.
 Everything here is fine.
 All the defaults.
 And then create function.
 That's how you create a function.
[01:06:02]
 Lab the function.
 It's not going to be coding it.
 But before I press that right here,
 this is where we tell AWS Lambda
 that we want to run our app inside of Node.js.
 There's different choices here.
 Like you can run it in Java and Python and Ruby, Linux, other
[01:06:28]
 choices, but we'll just pick the most update up to date one, node.js. And then just create function. All I did was put a name here, it's handbox level 4.
 And there it is.
 There's the, this is just getting it set up.
 There's no code in it.
 I mean, there's a like a template code here, which is going to look kind of strange to you.
 I might not understand it. It's using an arrow function, a sync arrow function.
 It's exporting a handler. It's exporting a handler function.
[01:07:25]
 It has a response object.
 So it looks unusual compared to our express.
 But that's their base.
 That's their example code there.
 But we're going to overwrite that anyways.
 So don't worry about it.
 The next slide.
[01:07:56]
 Lambda zip file.
 The server code can be manually typed
 or uploaded as a zip file.
 So let's just copy this first.
 So you saw there, there was some code.
 Look, unusual, but it was still JavaScript.
 So you could manually type your code in there.
[01:08:30]
 So you could manually type your code in there, or you can upload it, which I'm going to show you.
 So copy that and then we'll copy the notes here. So we need to select our lambda function. What's already selected.
 Then click Upload,
 click the Upload from button and choose zip file.
 So there's our sandbox level for map the
 function, for page, think of it, whatever, but this is where your actual
 functions or code will go into right here. We're gonna click on this upload from and zip file.
[01:09:50]
 And it presents us with this menu.
 Next, we're going to zip the files in the disk folder.
 So you might want to build your back end or if it's fine and it's working, then you can just zip them up. So how do you do that? How do you zip up
 the files in your just folder? Because AWS, AWS time is now asking for your zip file.
 When you upload a new zip file package, it overrides the existing code.
 You can only upload a zip file. It won't let you upload other files.
 So you need to compress your files into one file.
[01:10:47]
 So here's a sandbox, back end, I have a disk folder.
 I'm just going to select everything there.
 If I right click, I see an option to compress to a zip file.
 I'm going to do that right now.
 And I'll just take whatever name it's going to give me for now.
 Because I'll tell you now it's not going to work the way it is.
 We have to make some tweaks, but I want you to want to take you on this trial and error
[01:11:36]
 run to see what goes on if you just try to upload your code. So I have a zip file now. All I did was go into the disk folder, right click, and it gave me an option to zip them or compress them into one file right here. And you have to find that.
 Okay, there's the zip file.
 Let's see what happens if I try to upload the JS file.
 It has invalid input.
 You see that?
 Trying to upload the JS file. It's not taking it. I'm going to give it the zip file instead.
 Okay. So Chris is saying there's send to.
[01:12:42]
 So Chris is saying there's send to.
 Send to zip. For me, I have when I right click.
 I have to select everything that I want to put into a zip file.
 When I right click, I have the option to compress to zip file.
 So Chris is saying that there's an option if you use send to.
 So Chris is saying that there's an option if you use send to
 Let's see. Yeah, right here compress zip file
[01:13:13]
 If you have windows 11 then
 If you have Windows
 11, you can compress to and save it.
 And there's a code. There's a code.
 My map file, my Js file, is all in here.
 It's the, you know, the one that was built.
 So the code doesn't look so nice. That was bundled.
[01:14:22]
 Okay, so we did that. We uploaded the zip file to AWS lambda. the WSLANDA. Any questions to the next slide?
 Test and view logs.
 Make sure you copy this here.
 What we're going to do is we're going to test, we're going to run it.
 We're going to run the code.
 The lambda function can go for a test run, and logs can be viewed.
 So basically, we're going to click on the test button.
[01:14:57]
 So I'll show you where that is,
 OK.
 I'm not sure where to find that.
 I'm going to first save this in the notes.
 Test and view logs.
 This is how you run your function or your code. This is how you run the code.
 I mean, just a test run.
[01:15:31]
 In the first, in the test tab,
 you'll be, I'll highlight this in the test tab.
 Click the test button.
 Click details to view the lines.
 So there's a test tab right here. Click on that. Then just click on the
 test button. Don't worry about the other things that they're applying. Click on the
 test button. You should see some errors. Because like I said, it's it's not set up
[01:16:14]
 the way we need it. It's not set up properly for AWS lambda. We need to make a few changes to make it run properly.
 And what do we see here?
 Says error cannot find module index.
 And you can scroll down some more and.
 And it still says the same thing cannot find module index. Okay, so that's that's all we're doing for this slide.
 Just testing it and then looking at the details. So this is the error that we saw.
 Error cannot find module index.
[01:17:13]
 So this means that basically AWS Lambda requires a JavaScript file called index.
 Right now our file is called main. So what we can do is configure
 webpack to change the bundle file name us so we don't have to worry about every time. Right now Webpack is naming our file main.js.
 It's going to get old really fast if we have to just keep into the notes right here.
 And we're going to edit the webpack configuration file and add this object right there. Okay, I'm just going to use this view right here.
 Edit the configuration file.
 So we're going to edit the configuration file for the backend.
[01:19:01]
 That's webpackconfig.ts and we are going to add this object.
 Output right here. You can put it just under this target. Or under the last line.
 There's output. You can even see it right here, it's telling us, okay, that's
 a valid property. Okay, so output the filename to index.js.
 Okay, so pretty easy to know what this does, right? You can, it's going to output a bundle file,
 and that file name is going to be index.js.
 When we don't have this, it automatically just
[01:20:14]
 calls it main.js.
 If we want to override it, we need to put,
 we need to manually, like, specify it here.
 So name the bundle
 change the name of the bundle file. The default is main.js. So we can we can try this out.
 Let me just check the note here.
 Okay, so let's just try it out first.
[01:21:19]
 This is the server.
 Server is fine.
 We can just be that running.
 Actually, we don't. I don't need to run this server right now, but
 just be with any ways. This is my webpack and start rebuilding again so
 NPM run build or for you if you didn't make a script and it would be Npx webpack
 Npx webpack watch.
[01:22:07]
 Okay, so, actually at the disk folder.
 Look at the disk folder.
 I see index.js and I also see main.js.
 I see main.zip.
 They're all in here. It's kind of messy.
 So the next step, let's see update npm scripts to use a new bundle name.
 Okay, let's do that too.
[01:22:55]
 So in package JSON, I have some npm scripts and it's looking at main.js.
 This should be looking at index.js now because I just reconfigured webpack.
 So I've renamed. I've edited the script to use a new bundle name in
 text.js.
 I need to restart my server since it's going to use that name.
 Let's see if it works.
 It's running just index.js.
[01:23:44]
 So it looks like it's working fine.
 I can even run this one and it's fine.
 The server's running.
 I can look at the ENV path here.
 That's running.
 OK.
 Now let's delete the dist folder. Okay.
[01:24:05]
 Now let's delete the disk folder.
 Since there's like some, we're not using, we're not using that main Js file anymore.
 So, and it's okay to delete the disk folder because it just gets regenerated anyways.
 So I just delete this.
 It may or may not delete, let's see what happens. Okay, it deleted.
 So after I deleted it, this one crashed.
 The server crashed because it went,
[01:24:42]
 the file disappeared.
 If I just want to rebuild it,
 then I can actually,
 I can just type this command,
 MPX, Webpack.
 Actually, no, I'm just going to go with it.
 I was thinking of building it with mode production.
[01:25:06]
 But sometimes that can be slow.
 So NPM run build.
 Just going to rebuild it with webpack.
 Right now my server is down.
 OK, now it's up.
 Can refresh this to make sure.
 Okay, that means I have a new disk folder and it's clean.
[01:25:34]
 It's just has index.js in it.
 See that.
 It just has index.js.
 And now, so we deleted the disk folder. Now, as we build, we did, we rebuilt the server with npm run
 build.
 Now, we're going to rezip the file.
 the file
[01:26:12]
 in the disk folder and select everything there, zip them up
 and you can just take whatever name is there, it's fine.
 It doesn't matter the name here. Next, upload to AWS Lambda. Upload it back and send that index to save it.
 Okay, it's uploaded.
 This one now it's looking for main JS because that was the old one.
 This says editor could not be open because the file was not found because I don't have
 main JS anymore.
[01:27:21]
 It's index JS.
 So I'll just click on this. Looks exactly like my main.js, but just a different name.
 So the next step, test, and then view the logs.
 So let's test it. Go to the test tab.
 Click on test. see what happens.
 Okay, so some kind of error, it failed.
 Okay, the error looks different.
[01:27:59]
 Looks like task timed out. This is the error here.
 Index.handler is undefined or not exported.
 That's what this means here.
 I mean that's the main thing that's breaking this code.
 Index.handler is not defined or not exported.
 So I'll show you what that means. At least we can see here, we can see here that this is,
 these are console logs from my listener. So did run. See, it says, listening on local host 8000. It did run. But AWS land is saying something is not right. I can't
[01:28:52]
 run it the way it is. Indexed on handler is undefined or not exported.
 Okay, so we saw the logs and we saw that error.
 So this is the reason.
 AWS lambda requires a function called the handler to be exported from the index file.
 So let's copy this. So that's pretty easy, right?
 It needs a handler. It needs a function called handler to be exported from the index file.
 So can you think of like how to do that?
[01:29:58]
 I'm going to share my screen now. So this is about the AWS Lambda exported handler.
 So we need to edit index.ts and export a function called handler. We're just going to make it an empty function for now.
 Okay. So let's do that.
 Let's edit index.ts.
 And we're just going to export the function called handler. And we just leave it as an empty function
 for now. Because if it works, then we shouldn't see that error or the error should be different
 because we are, because remember, the error set this index. handler is undefined or not exported.
[01:31:24]
 the error set this index. handler is undefined or not exported.
 So it's saying like, uh,
 you need to be exporting something called handler.
 You don't know what it that's supposed to look like yet,
 but at least we're exporting something called handler and maybe that error will look different.
 and maybe that error will look different.
 Okay, so we edited the file and since it's one of our source files, we went back, rebuilt,
[01:31:56]
 we should have rebuilt it, but let's just make sure.
 Let's just delete that this folder.
 I'll need it for now.
 That's rebuild.
 This is trying to run the server.
 There it is.
 It's running.
[01:32:28]
 Okay, so it's rebuilt
 let's zip it up here's a disk folder I'm gonna zip it up again so like all the files in the disk folder put it in a zip file
 the name doesn't matter
 I'll leave that there and then put it back into AWS lambda just go to the code section or a code tab, upload the zip file, choose
 that zip file, save it. Now let's test if it works.
 Did it do anything different?
 Let's see.
[01:33:35]
 I click on test.
 Now I can see the details.
 And it's still saying the same error.
 Index.hander is undefined or not exported.
 Well, then I, then already, then I just exported.
 I'll show you why it's saying that error.
 James, I'm done with this note.
[01:34:05]
 We're going to go to the next slide.
 This is the reason why there's an error.
 Tree shaking.
 Webpack tree shaking. Make sure you copy this here.
 So Webpack tree shaking.
 So tree shaking refers to Webpack's ability
 to exclude unused code.
[01:34:43]
 So if you look at this picture, you see that some guy shaking the tree and
 some leaves are falling out. When you shake a tree, leaves fall out, right?
 Those are the leaves that are not really connected to the tree anymore or the tree doesn't really need them.
 So that's why it's called tree shaking because the tree
 represents our code and the dead leaves represents the code that we're not using. So we can see here
 unused imports, unused code, Unreadable code.
 This tree is our bundle.
[01:35:30]
 And then these leaves represent the code that we're not using.
 So what does that mean?
 Where's that unused code at?
 It's unused code is in your node modules.
 So let's see here. The webpack bundle only includes code that was imported
 into your app. So your app imports code, right? It imported the course. It imported cores. Well we can observe tree shaking efficiency like we can
 see how efficient tree shaking is by comparing node modules you know that
[01:36:15]
 folder node modules. We compare that to the the bundle size. Let me just share my screen.
 And let me just put this is the folder.
 So if we look at the node modules folder, it's right here, sorry it's small, I can't
 make that any bigger unless this. I like magnifying my window.
 But this is the node modules folder.
 If I look at the size of that by checking the properties,
 it shows that it is 68 megabytes.
[01:37:27]
 68 megabytes.
 That's the size of like all the files inside of the node modules holder.
 And you can even see in here there's like a whole bunch of holders in here. There's, I can see the packages express just node mon.
 So there's webpack too.
 So there's, there's something here that our app is not using directly.
 So when we bundle, we don't even, we don't need webpack to be in our bundle.
 We don't need TS node to be in our bundle.
[01:38:03]
 We don't need open CLI,
 node, mon, kill, port, just, we don't need all these. So these got shaken off, tree
 shaking. These fell off the bundle. We don't need these. We do need express. So this
 stays in the bundle. We need. EMB because that's for accessing our environment
 variables.
 We need cores to allow cross origin resource sharing.
 We don't need Babel loader.
[01:38:38]
 We don't need this package.
 We do need axios.
 So we can proxy or request.
 We don't need these app types. We don't need Babel or anything like that.
 We don't need those to be bundled
 because those are all depth dependencies.
 The regular dependencies are the ones
[01:39:02]
 that get add into the bundle here.
 So that's tree shaking.
 All these dev dependencies got shaken off.
 And only the main dependencies are inside of our bundle.
 So you have the question. Do we have to use that?
 And the answer is no, we don't need to use it.
 There's a different way to do it.
[01:39:44]
 But oh, yeah, we're going to compare it. But oh yeah, we're going to compare it. So that this node modules folder is 68
 megabytes. If we look at our zip file, this zip file is 788 kilobytes. So it's less than 1 megabyte. So you can see here that that tree really
 got shaken and from 68 megabytes, you got cut down to only one, we'll just say less than
 1 megabyte. So it's very efficient. We don't have to copy all of that code.
 We just need to get the code that we're actually using.
 We don't need all that code in those modules.
 Some of it that we're actually using for our app.
[01:40:52]
 So this thing, tree shaking also excludes exports that are not being used. So here, we're exporting something, but we are not using it.
 Webpack tree shaking will not include this.
 So this gets shaken off but we don't want it to get shaken off.
 By default Webpack will not include, I will not include the unused handler function in the bundle.
 So by default, well, the thing is with Webpack we can configure it.
 Well, the thing is with Webpack, we can configure it. So, let's do that.
 Library files.
[01:41:38]
 Let's make sure you copy this because we're going to tell webpack that we have a library file.
 When our library files.
 So library files contain unused code that are meant to be used by other files. So you already know
 library files like Express is the library file. It's unused code. It's like exporting
 something. It's exports. It exports the express
 It exports the express object, right?
 And the core is package it exports the course package, but it doesn't use cores itself
[01:42:37]
 we use it It's called a library meaning like
 Like a book when you have book, it doesn't use itself. It's not useful to
 itself, but it's useful to us. It's meant as a reference. So, like the express
 object is not useful to itself, but it's useful to us on the outside. So your
 packages, all your node packages are libraries.
 You're basically importing something
 from those packages.
[01:43:14]
 And those packages are exporting something,
 whatever they're exporting,
 they're not using it themselves,
 we're importing it.
 So we're gonna configure Webpack
 to include the exported handler function.
 So AWS Lambda can use it. So we're just basically going to tell Webpack, hey, our file right here
[01:43:35]
 is a library. It's a library. It's meant to be used by something else. So let me export this object so that someone else can use it.
 And that someone else is AWS lambda.
 Okay, so it just takes a little bit of configuration and a little bit of new concepts, but once you know it, it'll be, and once you set it up, it's easy.
 Okay, so we're going to edit the Webpack and fake file and add to the output.
 Output section.
 The Webpack and fake file is here.
 So we already have the output section.
[01:44:43]
 We need to add the library property.
 We see it here in the pop-up.
 So we just need to tell it which file is a library,
 which file has something that's exporting.
 It's exporting something, but it's actually,
 it's not using it itself.
 Our index 8CL, our index TS file is exporting something,
[01:45:07]
 but our index TS file is actually not using it itself.
 So, we have the library.
 We need to have a type.
 The library is going to be an object.
 Like this.
 My brazin object, that object has a property called type.
 We see it in the pop-up right there.
[01:45:38]
 And that type, the value is common JS. So what does this line do?
 Pre-vance tree shaking on used exports, especially particularly the tree shaking of the export of the index file of the bundle prevents tree shaking of unused bundle exports.
 So, for you can also where it has allows, Okay, so libraries again, its library files are just files that contain unused code that are meant to be used by other files.
 And we're going to just have one more slide, then we have to take another break.
 So we can try it now.
 Oh, wait, no, we're supposed to rebuild zip and upload.
 So let's do that.
[01:47:47]
 Let's rebuild this one here.
 I've already, I've edited the webpack file.
 If you edit it, you have to restart webpack
 so this will rebuild
 next one is it needs to
 we need to zip
 so let's hit and delete this
[01:48:28]
 Because that's the old one. This is the new stuff here
 So I deleted the old zip file. I'm gonna make a new one
 There it is just go with the name that's there.
 Upload it to AWS Lambda. Okay, so there it is.
 Can I upload it?
 Save.
 Okay, next step is to test it.
[01:49:21]
 I see it here.
 I was tested.
 Let's see if that did anything. Okay, so it's testing.
 There's another error. Okay, so let's see. Okay, so it doesn't show that error anymore. It doesn't say there's no exported handler. It shows it does show our listener
 Local host 8000
 So right now we can't continue
 Right now we can't continue.
[01:50:10]
 Basically it looks like our server is running and so we expect okay, why is this not working? It's because our handler is not correct.
 It's just an empty function and that's not what
 Namba expects and we're going to learn about that tomorrow.
 How did how to set up the handler.
 Now we need to take a break.
 So let me set up a break here. Okay, so I'll see you after 10 minutes. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And for this third hour, you'll have time to work on your last week's assignment.
[02:01:19]
 Or it was introduced last week.
 Capstone proxy.
 This was when I was not remembering earlier today.
 Use the Capstone backend to proxy an API request
 for your Capstone front end.
 And this was taking the TDD approach where you create a function, like get API response,
 or get trivia, or get quote, whatever makes sense.
[02:01:58]
 But this is the, a generic name.
 Write two tests. the generic name, right to test, right at least to test.
 So the function according to the test specifications,
 so you start with your tests
 and then you code it afterwards.
 Okay, so basically your test is gonna say,
 okay, get response, get API response.
[02:02:28]
 I wanted to take in these parameters and I wanted to return this result.
 You're designing it.
 You decide what you wanted to take in and decide what you wanted to return or to output.
 And so you decide that.
 Basically you decide that with your tests.
 Your tests are basically designing your function
 and then you do this one code the function
[02:03:03]
 according to the test specifications.
 And then you're just going to, you know, create the path for it or the route.
 This is a generic route called API, but you can call it whatever it makes sense, like, quote or trivia or whatever API you're using.
 And let the ground handlers and the response
 with the results from the function name.
 So whatever result that you get from this API,
 get API response, that's what you send as a response.
[02:03:50]
 And then you're going to establish communication between front-end and back-end using Axios.
 You're going to display the response.
 And then you got to make it work for your authentication.
 And then you got to make it work for your authentication. DynamoDB.
 You have all the knowledge and all the all the techniques you need to get this to work.
 Maybe for the TDD when you're doing too many.
 Too many requests,
[02:04:27]
 too fast, then it might break.
 So actually, let me see how did I do it.
 I did the test, like, if you saw how I did the consecutive calls.
 I did the old music word and I put it.
 Let me look at the other one here. My tests are here.
 I think it was quarant. So I did them consecutively and I just awaited and then have any problems.
 If they're not going consecutively like this, if you not and it's not working.
[02:05:45]
 You could try using set time out but you need to send the promise.
 You need to let it need to create a new promise.
 You need to await that promise and then set timeout will resolve it.
 So that this is a case where you need to know how, like the old fashioned way of working
 with promises works.
 If you wanted to work, you need to, if you wanted to put a delay in there, create a new promise,
 await that promise, set time out, resolve that promise after like five seconds,
[02:06:36]
 and then it will continue running your code. Okay, so I'm going to start the breakout rooms and I'm going to start with
 Yuki. He's going to do corrections for his mini evaluations from last week.
 from last week.
 Anyone, if you wanna do your
 some kind of evaluations after class,
 put it there in the chat.
 As usual, I'm creating the bridge out rooms. And they're going to be up for 42 minutes.
[02:07:50]
 Okay, you can
 I'll see you in the breakout room
 In the meantime everyone else out here
 Work on something like the Capstone Proxio Simon. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] All right, so we're back for the breakout rooms. Can you see if anything happened in the chat?
 Nope.
 Okay, so in conclusion,
 we learned about environment variables.
[02:50:10]
 That's where variables are stored outside of your application.
 We learned about AWS Lambda.
 That's where we're starting to run our back end server.
 Not quite working yet.
 Tomorrow it should be working.
 Appreciating that's where we're getting rid of unused code and just
 stripping down the bundle to what's actually being used.
[02:50:39]
 And then library files, we learned about that.
 Where you output a bundle that actually can be exported
 and used by something else.
 Now you can take three minutes.
 You have three minutes to take attendance
 if you didn't do that already.
 Add on over to your codecs account
[02:51:03]
 and mark yourself accordingly.
 Other than that, classes dismissed, that's, oh, I forgot to, forgot to update that.
 Classes dismissed, but that's today's lesson on AWS. I need to just finish,
 finish up one thing with UKE, that's probably going to take 10 minutes or less. If anyone
 wants to stay and do like correction corrections for there are many evaluations they can do that.
 But I'm going to start up the rooms again.
 Okay, I'll see you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/May 1, 2025 21-39.txt"

Transcript from May 1, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 This is week eight, do announcements, review.
 If there's still time, we can go into the second hour a little bit.
 The topic there is AI, the new AI topics. Then in the third hour, time for many evaluations, or work on the assignment, and I'll take a poll towards the end of the third hour. Now it's time to mark your attendance.
 You have, if you're here right now, just head on over to your code X account and mark
 yourself as present.
 And now time for announcements.
[00:01:21]
 Let me load that for you. Okay, so again, in the class schedule, they could look at it. last day of class Saturday May 24 final evaluations is Monday 12 to Saturday May 17 so that's basically
 So these are the weeks laid out right here
 Evaluations week 10
 evaluations week 10.
 That's the 12 to the 17th. And then
 presentations from 19 to the 24th.
 Presentations, that's when you practice presenting your
[00:02:44]
 your capstone project, first you'll practice with each other, and then
 you'll present them to the cohorts and the codec staff. That's your practice
 or being hired. So you should know everything about your website, not just the front end, but also the
 back end.
 You should also know everything about the code.
 You should know the technologies that you're using, such as React, Redux, CSS, AWS Lambda, DynamoDB, Amazon S3, Amazon Cloudfront, Google Cloud,
 App Engine. So you're using a lot of technologies. Webpack, Babel, you use just, you use detest.
[00:03:46]
 So, you know a lot.
 And you need to show people, you know a lot.
 But to show them, you should also present it properly.
 So you're gonna be ready.
 You're gonna be ready after that
 after presentations week.
 So get ready.
[00:04:13]
 We're going to, and also I have here
 Capstone Finelli.
 So that's when week nine, that's next week.
 That's when we start polishing our capstone. I'll wish it and make it presentable
 through the
 the codex school.
 The survey is still available. It's right here from Lillian.
[00:04:58]
 This one, you know, just make sure you get a chance to fill it in. Because they just want to make sure.
 It's usually usually the level is supposed to take up to eight weeks to finish.
 But it's been extended to give you time to catch up and finish your work.
 So they want to do a survey and make sure everything is okay.
 Or that if something is not okay. I've been using the second hour to give you chance to work and catch up.
 Usually I would be teaching from the first hour to the second hour and then the third hour,
 sometimes lab or working on assignments or
[00:06:05]
 sometimes some more teaching. So I've had to slow it out down for you guys so
 that you guys can catch up because I know some of you have work, some of you
 have been absent, life gets in the way, health and medical gets in the way so I had to give you time to catch up.
 So let me, let me, let me just remind you to fill it in this survey And you can be honest.
 I won't know what your answers are.
 Only the upper stack will.
 Okay.
[00:07:07]
 Many evaluations, again, the time limit is 60 minutes per submission.
 You should arrange your notes.
 So that you can go through that many evaluation quicker.
 You'll know exactly what to talk about. Use that add submission button and be placed on the waiting list and also qualify for the on time points.
 So we're still doing the corrections for many evaluations week seven.
 Until Saturday. So you have a few more days for corrections here. Other than that, the
 rest are closed. Many evaluations for week eight, they close next week assignments.
[00:08:07]
 So the Redux one was due today before class.
 I mean, I mean, not due today.
 It was closed today.
 It was closed today before class.
 That engine one was due today before class. That engine one was due today before class.
 Take a look at it.
 Let's make sure you saw the,
[00:08:38]
 the submission requirements here.
 The submission requirements, it's longer now, so in the
 online text, GitHub repository, GitHub LiveLink, AWS Lambda LiveLink, basically
 the deployed site, or the deployed backend. And then there's a Cloud front live site link.
 And there's also the Google Cloud App Engine live site link.
 And then some credentials like emails and passwords
 for logging in.
[00:09:25]
 like emails and passwords for logging in.
 Okay, so make sure you include those in the online text.
 Or if you missed it, you can just add it to the comments.
 Of your submission. Make sure if any of the assignments closed on you, but you need more points on them.
 Contact the student success team.
 Let them know which assignments you need reopened and why you've fallen behind.
 Practice problems posted here on the side, in the sidebar.
[00:10:07]
 You'll need to know some of them.
 You'll know which ones you need.
 They're all useful, but some are more important than others.
 But you'll know by the end of today which one's you should really focus on
 Help seeker so there's no new questions, but make sure if you have any questions posted in July cohort instead of being stuck for a day
 posted in July cohort and you'll get unstuck faster
 Notebook LM in July cohort and you'll get unstuck faster.
[00:10:48]
 Notebook LM.
 So there's the transcripts have been added.
 German's link wasn't working. Herman's link.
 Oh, let me see here.
 Oh, is this calendar?
 Just send a message then.
 So if this one's not working,
[00:11:31]
 invalid, okay, I'm just going to put his gonna put his
 gonna put his name here.
 This contact and directly. Think that will work.
 Yeah, you can just send them a message.
 Okay, all right, so what else? I should have removed this by now.
 But yeah, make sure you go through these days in order and get all the notes and concepts
 that you need from them. Don't skip the review sessions,
[00:12:46]
 because sometimes I tell you new things
 in the review session that you should be taking notes on.
 But, okay, so now we're gonna review.
 You should have most of the notes,
 but if I say anything new and the review,
 make sure to mark those things down.
 Take notes.
[00:13:14]
 Also, I have your microphone ready
 for any questions you might have
 or for the many evaluations.
 Okay, so now it's time for the review.
 Okay, so install external. So because external are not bundled, they must be installed separately to the app works.
 So in this slide, we demonstrated that, let me just load the project here. Okay hold on, just loading it up. [BLANK_AUDIO]
 [BLANK_AUDIO]
[00:15:00]
 [BLANK_AUDIO] There's the two.
 There.
 And solid sternals. So in the back end.
 In the Google Cloud backend. We had the disk folder and we compiled our bundle
 there in the disk folder.
 And the day before we established that the bundle needs, as I know, the transform Transformers externally. So in this slide,
 we demonstrated that if you don't include the node modules,
[00:16:17]
 if you don't include the node modules,
 either here, actually,
 either inside of here or out here, if you don't include it, the app will not run,
 because it needs Xen for platform per system.
 So to test it out, we temporarily set a port in the environment variables.
 It's not here anymore, but we did have a port just to test it out because our app needs a port.
 And then we found out after deleting those modules our app didn't run.
[00:17:23]
 So we installed it. When we installed it, it added an entry here,
 because this this package JSON file was basically didn't have any dependencies. Well, now it has one, in over-transformer because it needs to be installed separately.
 So now the package JSON inside of the disk folder should contain the dependencies
 that could not be bundled.
 When the disk folder is deployed to App Engine, it will install these dependencies.
 And run it from the App Engine side.
 It'll run the start script automatically, and it'll automatically run NPM install,
[00:18:20]
 which will install this.
 And we needed to test it out. We use npm, not PnPM.
 Because npm, it uses, it uses, it uses package JSON lock.
 And that's the one that App Engine is looking for.
 Sometimes if you use K&M, it might interfere with your other node modules, if you put it in here.
 But now that, you know, we tested it out and we saw that it doesn't run.
 If node modules is not installed, I mean, if it doesn't run, if node modules is not present, we can delete this now because App Engine doesn't download this anyways, right?
[00:19:30]
 It doesn't download it right here in the Google Cloud Ignore. It ignores node modules.
 So we can save the space and delete this node modules folder now.
 I'm going gonna delete it from
 final explorer, it's just easier there.
 Okay. We also saw that this, even if node modules is not in the disk folder, when we are running,
 when we're trying to run this locally, this bundle, it'll, it'll look up the chain so it'll it'll first look for node modules in the
 disk folder if it doesn't see it there it'll look in node modules over here
[00:20:32]
 outside of it in the root folder. So just to demonstrate I'll try to run that bundle file from the route.
 And remember, I've deleted the node modules inside of the disk folder.
 Now there's only the node modules in the root folder.
 So node is the command to run a JavaScript file. The
 JavaScript file I'm going to run is in the disk folder. That's the bundle.
 It's gonna first look in the disk folder for as you know which
 transformers. It's not gonna find it. Then it's gonna look in the root folder.
[00:21:21]
 And it's going to find it there and then run it.
 This works, yeah. Listening on local host 8000.
 You can even double check if there works.
 [INAUDIBLE] I'm just open it and I'm open.
 I'm open for host $8,000.
 Yeah, it's working. Let's see if that AI route is working also.
 Yeah, that's working too.
[00:22:11]
 This is the AI route.
 AI is working even though I deleted it in node muck in the disk folder.
 I mean, I deleted node modules in the disk folder.
 As long as it can find it, it'll work.
 And as long as app engine can install it, it'll work.
 And app engine can install it because it's in the package JSON file here.
 App engine will install that.
[00:22:56]
 We also deployed the AI to App Engine.
 So basically, we deployed the Disfolder, but we had to remove the port, the temporary port, otherwise it might interfere because App Engine uses its own port and if we try to say use port 8000 instead,
 it might not be the right port and it won't get a connection. We're supposed to be using map engines for it.
 Map engine provides the port environment variable.
 It's own port environment variable.
 You don't need to specify it.
 And make sure a copy of the AI models folder
[00:23:44]
 is in the disk folder.
 So here in the disk folder there's AI models.
 I could have just copied it from here and then put it in there.
 That way when it's in here, you don't have to, it doesn't have to be redownloaded again.
 All you have to do is just copy it, which is faster than downloading it.
 And App Engine will know we should get a response from the deployed
 back end.
[00:24:33]
 So it's deployed, and let me see here. the link in the npm script.
 Yeah, it's this one right here.
 I created a link called open live, which means it'll open the browser tab to the live site right there.
 This was back when we just established Google Cloud App
 Engine without the AI.
 But now that there's AI, I can run this code here.
 Well, I can stop this AI local.
[00:25:29]
 I can stop the local one.
 And P.M. Run open live.
 This will open the live one.
 It's right here.
 So it's live and then the AI should be able to take a question here.
 Oops.
 Okay, let's see if this works.
[00:26:11]
 All right, so the question was what is California?
 And then I gave it a context from Wikipedia's,
 which I showed to you guys yesterday.
 Actually, I got just one paragraph. When I got a bigger paragraph, like three of them,
 it couldn't answer it.
 And the reason was because of
 the next slide here.
[00:26:54]
 Very parameters, special characters.
 The browser may insert special characters
 into query parameters.
 So in this case, we saw that when we try to send query
 parameters to the backend AI server, spaces were automatically replaced by I'll show that again here.
 I'm going to do a simpler question.
 Actually, yeah.
[00:27:34]
 I'm going to send the question to the live AI here.
 Question is, what's my name and then the context is my name is
 Oh, sorry. Okay, so there's no I'm using spaces here, but then when I send it, the spaces get
 replaced by percent 20. Sometimes it'll get replaced by a plus.
 So let's special characters when you're using it, you know, great parameters. Aye interference.
 Aye interference.
 So we saw that the special characters can interfere with Aye answers.
[00:28:38]
 The Aye may not be able to answer or it might respond with percent 20 or a plus in the answer. And you don't want that.
 And the way I did that was, I'll guess I'll put the show again.
 What is California?
 What is California? And then the context
 will be
 there goes the wiki page. I'll give it a little bit more than one paragraph.
 I was able to answer the question when I gave it one paragraph like this, but I'm going
[00:29:33]
 to give it a whole section here.
 Give it the whole section.
 And then let's see.
 What is California says 20.
 Probably sees a whole bunch of percent 20 and things okay must be 20.
 California must be 20.
 Okay, so the AI got, you know, the data went to the AI wrong. I mean, the AI was just seeing a whole bunch of percent 20s in there.
[00:30:19]
 So the way to get around that is use the HTTP method called host.
 The send data as is without replacement characters.
 And then that's when we went into taking notes and
 express.md for details.
 And you can create a link like this with
 In the square brackets that's the text that will be displayed
 And then parentheses that's the path to the file.
[00:30:58]
 So if I didn't have this, actually if I click here, it loads to express envy, preview.
 So we started talking about the HTTP method called post.
 So post is a H-C-T-P method, a way to communicate with servers like to get methods.
 So post is one of the methods that a client can talk to a server.
 And the way we tested it was with these steps right here.
 So I'm just going to go through this in the screen share here.
 Okay, right here. Add to the AI backend index TS.
[00:32:16]
 So let me just get that followed.
 So we can see it index.ts.
 We're going to add app.post.
 There's a path.
 And then there's a route and a route handler. Okay.
 Okay.
 Okay.
[00:32:55]
 Okay.
 So here's the index file.
 This is what we added right here is a method not just like a function that's connected to an object.
 Yeah, that's a method, but it's also a HCT method like a channel that clients and servers
 use communicate.
 It's like a channel.
 So, think of this like channel one, communicate on
[00:33:27]
 channel one. This one is communicate on channel two. Think of it like that. So not
 all of these are an object method, but it's also an HTTP method. A channel which the client and service communicate on. So add the round handler post demo.
 So post demo, we added that round handler right here post demo because it's it's a demonstration of post method and all I did was
 pretty much copy the other route API route.
 Then we tried to use a browser URL bar to send the request to post demo path and there was an error there. start and start to
 So if I try to communicate with that post demo path from the browser, it won't work because the browser using the get method to
 to listen to this, to listen to this route.
[00:35:32]
 We are using the post method.
 I can put a note here since this is new code.
 Use the HCTP method post to listen on this route.
 So post is like a channel.
 You can put that here post is like a channel
 that the client and server communicate Then we started using Postman as a review.
 We usually use the get method.
[00:37:00]
 We've been using the get method when using Postman. Then we change that yesterday.
 Now we know two methods,
 HTTP methods that is.
 So there's different methods here.
 Brouser is communicated with the get method,
 or think of it like the get channel.
 What I mean by that is this right here.
[00:37:34]
 Whenever you send, whenever you visit a URL,
 it's using the get method or the get channel.
 So that's what this means here. You will send your request using
 the get channel, which will not work. See, I don't have a listener on the get method, or the get
 channel, or the hour read, you want to conceptualize it. So we get an error there.
 conceptualizes so you get an error there. But if I use a post method, I should get a response back there We're going back to the get method. We have the API route and you put query parameters on it, you can see it here in URL.
 And then you can send it, 'cause the API route is listening on the get channel, and get method.
[00:38:57]
 Here, just API route, listening on the get method.
 under get method. And this is a response. It basically sees our query parameters here.
 Same as read right here, but it turns it into an object for us. Or no, this is not an object. This is all the one string j's on string
 Okay
 And Then we started sending post request to postman
 man. And there's that drop down where we can choose HCT method that we want to use. So we picked the post method. And we got a successful response. I showed you that already. Post data. So using the, they're here in the URL.
 And you saw that I had query parameters appear in this URL.
[00:40:35]
 They're exposed.
 They're exposed.
 Like I can click on the back button.
 Like if someone got off the computer, I can click on the back button. If someone got off the computer, I can click on the back button.
 If there was someone's password up here in the URL box, I can see their password and their email.
 So it's not secure. It can pass that data up here. With the post method, you can send data,
 but not with these, um,
[00:41:13]
 with this color.
 You don't need to send data to query parameters.
 You can, but you don't want to, then,
 this needs a purpose of using the post method.
 So we're not sending data through the query parameters,
 so that's secure now.
 It's not going to be exposed in the browser. to send data. We need to choose the body tab right here. Okay, so we're switching from
[00:42:00]
 the parameters because this was for query parameters.
 Right here, it adds query parameters.
 You see that?
 That's grams.
 But if you want to add data, hidden data,
 pick the body tab.
 And then you can choose a data from there
[00:42:22]
 and notice that you don't see that here.
 It's not exposed.
 And you have to choose this one here.
 Xwww, form URL encoded. Okay.
 Okay.
 And so you did that.
 Request body.
[00:42:59]
 So, express must be configured to receive data through the post method.
 The hidden post data is received by the back end server and request on body,
 not in the query, but in the body.
 So let me show you what I mean here, or clarify that.
 Here's request query. That's when you send query parameters.
 You see them here here.
 You're this content.
[00:43:37]
 But if you send
 with a post method and you send data it's gonna be
 the body property.
 And we use the debugger to observe that request body is not in the post demo handler.
 So it was not there before.
 It was only when we added this code right here
 that we had access to that data.
[00:44:22]
 So let's look at that, let's look for that data. So let's look at that and switch for that code. That is in the index file.
 Here it is form URL encoded.
 And we're able to send, we can send this to the,
 actually what's gonna happen?
 I'm using the post method here
 and trying to connect to the API route,
 what's gonna happen?
[00:45:14]
 There's going to be an error
 because this API route is only listening
 with the get method or the get channel.
 Channel number one.
 It's only this one that's listening on channel number two
 or the post method.
 So there should be an error because there's nothing
[00:45:38]
 listening on the post channel.
 So I'm going to try to send the request to the API route through the post method.
 There should be an error. There it is. There's nothing's listening there.
 I changed it back.
 Now actually, um,
 it switched to the correct API here
 AI
[00:46:11]
 it's a I route
 Big send
 or was it something else
 the notes.
 Now post them all.
 You can set the data to the post demo route which is this thing with the post method. Here's the data right here
 in form URL and code. It returns to us. It shows us that the query parameters,
[00:46:56]
 the ones that were up here, like if you put them up here, it's empty.
 But the data was stored in this modding property.
 And we see that the question and the context is there.
 This data is accessible to the mod property in that material.
 You can even put a debugger there just to watch it happen. [inaudible]
 And we have starts.
 [inaudible]
[00:48:00]
 And we request
 [inaudible] and request. If you go here, you can now look at this request object.
 There's a request object. It has a body property.
 The body property is an object. You see here the curly braces. That object has two properties.
 When it's context, when it's question,
 context is a string.
 That string, the value of that string is my name is L'Ozzard.
[00:48:38]
 Question is a property, and it's also a string.
 The value is what's my name. If we scroll down some more,
 we see that query periods in the object because we didn't send query parameters. We sent
 post parameter for URL encoded parameters.
 or URL encoded parameters.
 Or URL. So I'll just press play here.
 Basically, this data is going to get the request body
[00:49:16]
 and put it in this property right there.
 And then it's going to show it to us right here.
 So the body. And then it's a to show us right here. The body and the question in the context.
 And then we sent the response that includes the data from the request body.
 So you just saw that, we use the debugger, we access the request body and sent that data back just to make sure that we were able to send it and also receive that data.
 And just check what's the next slide here.
 And that's the last slide of this review session. So now we're going to go into the break.
[00:50:24]
 So we're basically, we were able to get the post method
 mark.
 And we're able to receive data and access the data
 to it.
 Now we're going to after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And now we're going to continue with new topics on artificial intelligence.
 So you see it so far that it's not quite complete yet.
[01:01:32]
 So we're going to keep on working with our, you know, we were just working with artificial intelligence in the back end.
 We're going to finish that up.
 And then we're going to head on over to the front end. First, we're going to convert the AI route. We're going to convert it to the post
 method, because right now it's listening on the, on the get method. So use the post
 method to securely send unaltered data through the AI route.
 Because right now it's listening on the get method. And remember if you do that,
 and you send query parameters, it adds percent 20 or plus sign.
[01:02:28]
 So we're gonna use a post method and we're gonna send URL
 encoded parameters so that they come in on altered
 and also secure because you don't see them in the URL bar.
 So this one's going to go into the AI notes.
 So we're switching back to the AI route. So we're going to use the post method. And we're going to edit the index TS file.
 Use the post method.
 We're going to use a data from request body instead of request query. Instead of query parameters, we're going to get the URL encoded parameters.
[01:03:55]
 Okay, so we're going to start from index TS.
 Next TS. There's index TS, what do we need to do?
 Change the AI route to use the post method.
 So the AI route is using the get method right now.
 How do we change it to the post method?
 Just like that.
 And you get to the post method.
[01:04:48]
 Use the
 H-T-P method
 post
 to receive
 data securely and unaltered unchanged, basically,
 without special characters, like percent 20.
 So that's changed now.
[01:05:40]
 In the route handler, in the AI route handler,
 use data from request body.
 So we have some routes, and one of those routes is for AI.
 And we are getting the question and context from the query parameters, that's not going to work anymore, because they're going to be in the body now, not in the query object.
 Then use Postman to view the response. So oh yeah, let me run this server.
 I stopped it.
 I will
[01:06:49]
 start it in the debugger mode
 so that we can watch it come in
 and here it starts right there
 This is gonna be
 And game start
 Run start to run start to.
 Instead of calling it build, I change it to start to because they're related.
[01:07:31]
 I always run them in pairs anyways.
 And I change the build command to, you know, actually building for production.
 I mean, I change the build script.
 Okay, so it's running now. I can use Postman to send a request to the AI route.
 Notice I'm not providing any query parameters here.
 So it's not going to receive them through the query object.
 It's going to receive them through the body object.
[01:08:16]
 And what values I'm like going to provide?
 I'm going to provide a question and a context.
 I'll send it, then the bugger should stop, and it context. I'll send it, then the debugger should stop, and it does. So that
 request came in, and the request has this request object is right here. You see
 there's currently braces. The data type is called incoming message.
 type is called incoming message. There's the body property, which is an object. It has
 this object has two properties, the context and the question. And we are going to destruction. So this body object has two properties and we will
[01:09:06]
 destruction them into these variables. Remember, the job of script is going
 always from the right to the left and always from the inside to the outside.
 So right to that, starts here.
 One body object gets the structure into two variables right there.
 And extract the question and the context from there.
 And we can see it now.
 Right here the question is now what's my name and the context.
[01:09:44]
 These are the variables. These are these
 variables right here. See, they got extracted. The value's got extracted into those variables.
 Now we're going to let we've already tested this function. So we should get an answer.
 Okay, I'm going to stop these. I mean, can remove these, let it do its thing.
 Okay, we got an answer, there's the answer right there, roll this out.
 And Postman right here is still waiting, you see these, this line is still waiting
 for the response.
[01:10:22]
 So I'm going to let it send the response now, which is supposed to be the answer.
 And it's just a string right here. It says roll a zar.
 I change this. Instead of roll a zar, I'll change it to
 Roll is our I'll change it to
 Jake or John whatever
 Let's try it on click send
 I'll stop this people over now
[01:11:02]
 And we see the response that we got with Jake.
 I'll change it to John.
 And then we should expect this to change the John down there.
 There it is.
 We got the answer.
 That's the response.
 So we viewed the response from Postman. So this is the next slide. Front, front, front end AI interface.
[01:11:48]
 So we got the the back end working fine now.
 We were able to send post request using postman.
 Now we can start working on the front end to have some kind of interface.
 So we're going to create a front end user interface that accepts a question and the context.
 So we're going to start working in the front end now.
 That's copy this into our notes and I'll just put a thing here, a question and context.
 There's also a code sample there.
[01:12:56]
 So I'm going to put it after this.
 We're going to create a React component called AI.
 It's going to render a form that accepts a question in the context.
 And we're going to use the name attribute.
 To easily access values.
 Through form elements.
 And I'll show you what that means.
[01:13:34]
 So I'll hit a load up the front end now. [ Pause ]
 >> First step.
 Create a React component called AI.
 I'm just going to put it here in the views folder.
 There's a lot of components here.
 You could start organizing them by page.
 I'm just going to leave it like this for now.
[01:14:26]
 It's all in the group folder.
 AI.GSX.
 Remember how to make a React component.
 Export function.
 This is a React function component. We use a function to create it.
 And it should return some kind of JSX. So I'll just put empty empty element right now, empty tags. Remember to import react. And I want to render this
 in the home page. So I guess I'll use this. I haven't updated this to use.
[01:15:26]
 Oh yeah, this updated.
 This is updated to use Redux,
 I haven't updated this one again, but let's see.
 Let's change this component.
 Now, I'll make it easy and just make it obvious.
 I'm gonna put it here.
 Load that AI.
[01:15:48]
 I will actually, I'm gonna disable this.
 [
 So this home page should render the AI component.
 And you just start this and here, start. and it just holds all my extras. And it holds your actual towels.
 Okay, so it's started, I'm gonna just,
 it's rendering on the local host 8000.
 Or 80, 80, I mean, I can open up a browser, but I'm gonna just use the S-code D-loader.
[01:17:11]
 So there's nothing in the AI route. I mean, the AI component, so let me just fix that.
 It changes to each one for now.
 Our official intelligence
 and so close to going here
 and put it underneath the code
 I'm just going to go down there. Let it render a form and that accepts a question and a context.
 Okay, so it's going to render off the one there.
[01:18:07]
 And then, so since I'm going to, since I want to render these side by side, react will
 allow that, so I need to surround them with only one element.
 So I'm going to just put them in a bit.
 Okay, there's the dip, there's the fork. I want to do taking a question.
 So I'm just going to make this quick and easy though, the quick and easy way.
 And then the context, I'll use a text box for that. A text area.
 Just take a look at the spacing.
[01:19:15]
 The next each other. I'm just going to put VR here.
 Sc a bootstrap grid system or something like that to organize these.
 So it looks like this now. There's a question in the context. Oh, I should also put a submit button. [BLANK_AUDIO]
 If you look at it, okay, there's a submit button right there.
 Take the question and the context and this is the myth button.
 Use the name attribute to use the access values to inform elements. So I'm just going to
 add the name attribute to here. So this input, this for the question, so I'm going to put
[01:20:48]
 question here. And this input right here for the text area, this is for the
 context, so I'll put context here. So that's what it means by use the name
 attribute for easy access to the form elements. And you'll see what this means.
 For the code sample, you have the input element and it has the name attribute of question and the text area
 So that's the, so handle the form submission and get the result.
 Okay so let's copy is first. A lot of this should be reviewed except for the,
 maybe the form elements part might be new to you.
[01:22:32]
 If you haven't discovered it yet.
 We're going to set up the debugger and explore something
 in the form handler. So I didn't make a form handler yet, so let's do that now.
 So how do you handle a form submission? Basically go to the form element and on submit you give it a call
 back I haven't made it yet but I'm going to make it as gonna be called
 handle submit so basically it's gonna call a function when it's when this form
 is submitted.
[01:23:27]
 I could even put this function outside of the react.
 Wait, no, I won't actually, I won't be able to, but I'll put it outside for now.
 I'll put it outside for now so we can see what happens.
 Okay, so it's going to follow the handle submit
 handler.
 As usual it takes in the event.
 If I try to make this the event object,
[01:24:02]
 I'm just going to show the red line here. So that's why I'm just going to put
 any. If you want to know the exact data type for this, it's going to be this is how you find out.
 You just take that out and just put a temporary arrow function.
 Let me see if I did it.
 Let me try it again.
 Okay there. I just put parentheses. So it should be,
 see this is a, you see parameter, I mean parentheses here.
[01:24:57]
 The parentheses is, you know, it represents a function taking in a variable, the event variable.
 It represents a function taking in a variable, the event variable, and the data type is form event, HTML form event.
 So this is how that would look.
 So form event, right here.
 And then, okay, okay it again it has angle brackets and it says
 HTML form element so angle brackets put it in your HTML form element right there
 so that's the exact type.
[01:25:45]
 Now we don't have any error here.
 And we'll submit.
 There is no error.
 Okay, so we can basically just reverse engineer the type.
 If you don't know how to reverse engineer it, but any,
 but if you know how,
 put the exact type there.
[01:26:12]
 You're going to add a debugger here, but as usual, you want to do prevent default.
 And did you notice that too, the properties popped up here, prevent default.
 So in this case, we get, you know, the IntelliSense.
 And we remove the TypeScript error. If you know the exact data type that grows there.
 Then I forget to paste this into the notes. system so it melts. We're going to use a debugger to explore event target.lements.
 We're going to extract the question and the context values from the event target elements.
 We're going to send that question and context. So, Molly, who will call, get answer.
[01:27:48]
 We don't have that one yet.
 At least not in the front end.
 Okay, so this is, we're going to observe the, we're going to set up a debugger.
 Right here and watch the, we're going to look at the event object.
 And the question I'm going to put here was my name and the context.
 the context. Submit it. It gets stopped by the debugger.
 Now I can explore that event variable.
[01:28:35]
 Event object.
 So here's the event object.
 It has some properties. One of those properties is target.
 And we don't directly see a property called elements. I mean, we can see, we can see the element sets inside of this form. When it's a little bit harder,
 like the input element for the question is in
 position two.
 The input element for the context is in
[01:29:20]
 position six, but there's a easier way. And it's not here. It doesn't show up here.
 Maybe it's in the prototype.
 Nope, it's not even there. So
 it could be like a secret variable, then you can see it if you pick the debug console.
 Event dot target. variable then you can see it if you take the debug console event.target.elements right
 there. What is this object? It's this one here. So now it's organized. My input for the question is in position zero. My input for the
 context is in position one. Now it's in now it just has the inputs. But what's even better is I have a context
[01:30:29]
 property that directly takes me to the context input and I have a question property
 that directly takes me to the question input. You see that?
 That's because of this name.
 If I don't put a name, then it won't have any property that
 connects it.
 So I'll show you what happens if I take out this name here.
 Let's try that again. Okay, can you use this? Do you have no console again?
[01:31:31]
 Okay, Chris is asking why the text area and why input field.
 So question, one reason is so that I can, you know, show you that there's a difference between the elements instead of everything being input. We're trying something else different.
 So text area is bigger. You can actually resize it and it puts
 it meant for like bigger input.
 So you can put more things in it.
 The question, since I've just been asking one small question,
 it's a smaller input.
[01:32:18]
 That's another reason.
 But you could just put--
 if you want to have space for like big questions, you can use a text area for this to
 I just wanted to use different elements doesn't have to be those use whatever works
 So this one is super resizable, but it's stuck right now.
 So the event variable has a target, has some elements.
 If I look at it, I can see the input elements in order, but I lost the question in the context.
[01:33:07]
 So I'm going to put those back.
 I don't see the question in the context. I don't have direct access.
 I want to have direct access by the name.
 So I put the name back.
 I'm going to use to admit this.
 I guess it doesn't save things when you put something at a text area.
 I don't see the automatic pop up here.
[01:33:50]
 Okay, so we've bent the target. Done elements.
 Now I have access to the question and the context.
 The context is the input element.
 I don't want the input element. I want the value.
 put element. I don't want the input element. I want the value. So this context has a value. It doesn't show you. So let me just go like this. The event.target.element. target. Element
. context.
 If I put.
[01:34:35]
 value.
 You can see the value is my name is
 role is that's what we really want.
 We want the value that's in it.
 We don't want the actual element. We want the value.
 So one way we can simplify this is we'll just say, I'm going to, you know, there's a event. It has a target. It has some elements.
 I'm gonna make a shortcut and I'll just say that's the form.
[01:35:12]
 Let's just say that's the form. And, and it has this TypeScript area. I'm just gonna put in here.
 For now, get rid of this.
 Oh, it's not. It's not going away.
 What way to make it go away is this way?
 Would that be ugly?
 So I'm just going to see if I put that in.
 It's not going away.
[01:35:46]
 So the best choice here is just to annoy you.
 I mean, it will still compile.
 But it annoys me, and I don't want to make my code agree
 with those parentheses.
 Just going to put any there.
 But now I know that the form-- I have a form, but I'm just going to put any there. But now I know that the form, I have a form.
 But I'm just going to connect it to the elements object here.
[01:36:09]
 And I'll show you the effect of that.
 And we put a leaf over down here instead.
 Okay, so it's stopped on the debugger. This form, what does this form look like?
 If I type here form, it looks like this,
 and it has a context property, and it has a question property.
 This form is an object that has a context property and a question property.
 So I can actually go like this form.context.
[01:37:10]
 If I do that, this one gives me the element.
 I don't want the element, I want the value.
 So form.context.value.
 There it is.
 There's the actual context that I want.
 So now that I've reversed engineer this, I can go like this.
 Context.
[01:37:34]
 What is the context? It is form.context.value.
 Just like what I showed you here.
 Form.context.value. That's what I want to get.
 That's what it's important to me.
 We're going to do the one for the question.
 Form.context.no.
 The question is form.question.value. If I just put question, that's going to give me the element.
[01:38:10]
 But if I put value, it's going to give me the string that I want. Form. question. value.
 Say there. I've extracted those values that I want.
 Let's try that again.
 Actually, I'm getting tired of typing in those things.
 So I'm just going to put here a default value.
 value. The all value is what's the name. The all value for this will be my name is the Lizzar. Everything works well. It should already be in there.
 It's already in there, even if I refresh this, it's already in there.
[01:39:09]
 I'll have to do a submit for the form.
 And I can see here that the question is going to be extracted already.
 What's my name and the context?
 My name is rule of the time.
 My name is Roll We didn't create it yet, but you get an idea. So get to answer.
 We're getting an idea of what we want this to look like.
 It's going to give us an answer if we give it a question
[01:39:58]
 and a context.
 Save the response and a lump of variable. So, this is going to give me a response, right?
 I'll save that in a lump of variable.
 I'll answer.
 There's a typo.
 I mean, there's a TypeScript barrier because I haven't made this yet.
 And with that, we're going to get to the next slide.
[01:40:36]
 We already know that it's going to take some time for just to get the answer.
 So I'm just going to jump the gun here and put the weight.
 just to get the answer. So I'm just going to jump the gun here and put the weight.
 And this is an async function to enable this weight.
 So it's going to take time for get answer to contact the back end, back end calculates the
 response, and then it comes back here.
 But the NAI module TDD. So we're going to create a file called get answer.ts.ts and we're going to design our module here.
[01:41:25]
 Remember, we're using that get answer function, but we haven't made it yet.
 But at least we know that it should take in a question and a context.
 You can start from there.
 So let's face this, let's let it know.
 Create a file called getanswertest.ts. Then we'll write test or get answer to accept
 a question in the AI.
 Code get answer according to the test best of cases.
[01:42:36]
 And then use the axial post method to send
 data to the back end server.
 Okay, so hopefully we can get this done before the third hour.
 Which is the sample.
 And the sample here.
 This is the input sample.
 This is an example. Let me put, let me add some code samples to the previous one first.
[01:43:15]
 Code sample for this is, right here. This is how we extracted the values.
 Using the form elements.
 This one is going to have a close apple with axOs.
 You can see if you can get there.
 Alright, so we're going to create a file called, we're going to create the test file.
 Get answer.test.ts.
 Logi.
[01:44:11]
 I don't have anything called get answer yet.
 We don't have the module yet, but we're going to write the test first.
 In the modules folder.
 Get answer.
 Not test.
 T.S.
 Okay so by usual we described what we're going to test.
[01:44:43]
 And we are going to test getancer function.
 I'm just going to use an arrow function and start the first test here. So what should it do?
 Get answer. It should it well it returns a response when given a question and context.
 Okay, so to create the range phase,
 I'm going to start the question here.
 What's my name? And I'm going to add the context here. The context is, my name is going to add the California one, you're going to have a long
 range function, I mean a range section if you do the California and put all those paragraphs in.
[01:46:05]
 But you could do that.
 The act phase is we're going to get an answer.
 While we're going to use the get answer function, and we're going to give it the question
 and answer a context, we're going to give it the question and answer a context.
 We're going to get the answer from it.
 So we capture that on the left side of the equal sign.
 And we need to declare it.
[01:46:35]
 It's going to take time.
 So we need to await this.
 And since we need to await it, we need to put async in front of the function.
 And the assert phase. I know the, this word also is used for data types.
 Well, interesting it, what it means is that, you know that you're asserting the results.
 Where you expect answer to be defined.
 We're not checking for the answer yet.
[01:47:20]
 Okay, I'm gonna copy this.
 Now, the next test I'm gonna do, I'm gonna to copy this. Now next test I'm going to do.
 I'm going to write this.
 I want to get the check if it receives the correct answer.
 It returns the correct answer when given a question one here.
 It returns a response when the answer is unknown.
 So what kind of response do I want it to be? Like, so what's my name?
[01:48:36]
 I'll put here D is an instructor at the x academy.
 So what do I want the answer, what would I expect it to be?
 I wanted to return the response.
 I'm just going to put, sorry.
 Sorry, I don't know.
 I'm going to go with that.
 So it's not exactly the same as not exactly the same as my back end server.
[01:49:22]
 I'm going to different.
 server. I'm going to be different. Okay, so I wrote the tests that accepts a question in a context that the module return and answer from the back end AI server.
 Okay, so we're going to code the get answer according to the test specifications. I should put this like put these all the way around.
 Okay, so now I can start coding it.
 I've designed it now.
 I can create the function, getanswer.ts.
 So I'm going to export a function called getanswer, which takes in a question and the context.
[01:50:31]
 I know the data types for these, the question is the string and the context is the
 string so I can put those in.
 I'll put the return value to it's going to be a string.
 Actually it's going to need to eventually change this though.
 I'll change it now because I know I need to wait.
 wait. So to get an answer from the back end AI server, I should use the axios post method to send data to the back end server. So I'm going to create a data object.
 Will this data include?
[01:51:36]
 Actually, let me just rename this to avoid confusion. I'll call this user question.
 I'll call this user context.
 So the data that I'll be returning is question, which is the user question.
 And the context.
 So I'm creating properties in this object, right?
 And I'm setting their values.
 That's the value.
[01:52:08]
 That's the data that I want to send to the backend server.
 And it says here,
 use the axios post method.
 Use axios post methods to send data to the back end server.
 So how do you do that?
 Axios, I need to import that first,
 where it's imported, the Post method.
[01:52:40]
 Just like how it sounds, it's post and it's a method.
 But it's also using the HTTP post method.
 I need to give it the URL to communicate with.
 And also the data.
 So what is the URL that I want to send it? Send the response to?
 The URL is
 now it's gonna be the local
[01:53:14]
 and put local host
 a thousand on the AI
 route I wrapped.
 And now I know, okay, I need to wait.
 Whenever I have axial here, I need to wait and get the response.
 Since I have weight here, I need to put a sink here.
 Eventually, this response is going to come in.
[01:53:58]
 I can take a look at it when it comes in.
 And I still need to return the string.
 So I'm just going to leave that as like that.
 I am going to--
 now I'm going to--
 Now I'm going to, what you should know that is this response object is going to have a data property.
 I guess I'll show you first.
[01:54:34]
 I'm going to have a data property.
 So I'm going to run the test.
 Actually, before I run the test, I'm going to change the NPM script for the test.
 So, I'm just going to get answer test. And Pm test should stop on the debugger.
 Actually, it's not because I'm not.
 We will console. And P can test.
 Sorry, and then after I finish this topic, I'll go into the break.
[01:55:34]
 So go into the heat builder and the second one. [no audio] Oh, I need to import this first because we can't even get access to the function.
 Let me import this now.
 And now it says it can't, okay, this is okay because I haven't returned the value yet. So let's try to run again.
 And focus and swap here. Oh, a pass.
 Let's keep on here again.
 And then it starts. Let's see if it gets in there properly.
 Yeah, that's right.
[01:57:12]
 First of asking, should we return you a promise to pad?
 That's correct.
 So I'll fix that.
 So let's run the test again.
 Let's see if it's getting in here properly.
 I'm going to just pick one test to run the top one by putting only on it.
 And again test.
[01:57:47]
 I see that the circle is not solidifying.
 If my time even is up, you might have to type in the booger.
 Okay, there it's not.
 So we've got a question in the context. The answer is going to come in here.
 And we see that it got into the--
 got into the back end.
 Let's see, the question in context come in.
[01:58:22]
 No, they did not.
 They did not. Okay so what happened here so let me
 second finish it today. We're gonna get the answer.
 So we use axial system data to the back end server, but it did not go through the question and the answer did not go through.
 The question and the question in the context they show undefined.
 I ran this line and they show undefined. We're running out of time.
 And continue this tomorrow.
[01:59:16]
 It's going to cause this to crash because it was not.
 Yeah, it crashed.
 It crashed because we didn't make it robust enough to handle an empty question and context. So we got up to this point.
 We use axios post methods to send data to the back end.
 So we saw that I'm going to add here.
 Back end server. observe that the back end
 observe that some
[02:00:18]
 see the data
 the data. The sample code here is axios. axios.post. It takes in the so it's just on the front.
 Okay, that way it's more complete.
 Okay, now we can go to and break.
 And we'll fix all that. We'll fix these things tomorrow. [BLANK_AUDIO]
 Actually, there's no passing or I mean on Saturday.
 [BLANK_AUDIO]
[02:01:37]
 Fix everything on Saturday.
 [BLANK_AUDIO]
 Or you can try fixing it on your own.
 [BLANK_AUDIO] And then you'll see if your answers or your fixes are the same as mine.
 See you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, slide.
 This is, we're back from the break. And now is the third hour where we have a chance to work on our assignments.
 And it's the time for a new assignment.
[02:12:37]
 Here it is.
 Capstone finale.
 Add artificial intelligence and finishing touches to the capstone project.
 I'll post the details for this
 tonight, so you have as much time as possible to focus on the details.
 But I'll tell you about them here.
 But I'll tell you about them here. Properly designed and programmed the front end to provide an overall good user experience.
[02:13:14]
 So, what does that mean? It should be like an actual website.
 Like, you know, if you have a portfolio website, it's in function like a portfolio website.
 I know, you know, like a shop kind of website, then it should function like a shop and it shouldn't.
 And if you're going to add things to it, don't make it look like a sample page integrated somehow.
 Don't have a, basically don't have a sample page.
 Like if you're going to have just like a sample page,
 oh, I just want to show you that I know how to let you sign in and sign out.
[02:13:58]
 No, don't have a sample page.
 Actually, integrated somehow into your website.
 Like it's the actual
 website that you go shopping on or if you have a portfolio website, if they sign in,
 if they sign in, they can view their promo code or something. If it's a shop, maybe they can save the items in there, like save something, like how
 many items there are in their cart.
 Try to integrate it somehow because you'll be presenting this to your classmates and it's
[02:14:52]
 better if you can show them something that's integrated instead of showing them sample code.
 When you go to your job interviews and recruiters, yeah, they'll look at their sample code, but you'll have an
 edge if you actually integrate the things into your website and make it work like
 it's actual production website that people are supposed to shop on or people are supposed
 to use or your website offers services. You know, integrated.
 Make it a good user experience instead of, you know, just samples.
 Create a branch for updating the front end and back end to use the post method.
[02:15:39]
 So we're learning about the post method.
 Not, well, we learned how to use it and how to send data with postman, but we're adding
 the finishing touches for the front end and back end.
 Right now the data didn't get through.
 So we're going to fix that on Saturday.
 But you're going to have a branch for adding the post method. And you should also convert all your,
 all the other routes to the post method inside of the get method.
[02:16:18]
 Only if you should be sending secure data.
 So for example, in the backend,
 you have some routes.
 A lot of them are for data.
 Like the API route,
 you might have a trivia route or photos a day route.
 We have the API route, those are all sending data.
[02:16:41]
 I would make all of those the post method.
 I would use the post method for those,
 because the users should see those kind of data
 in the URL, in the browser URL.
 But you can have a get method for your route, your route path.
 So that you know that your browser,
 I mean your backend is running.
[02:17:07]
 So when you load the root path on your browser,
 for the backend, you should just see something that tells you
 that the backend is working.
 But all the other paths, especially if data is going through
 and you wanted to securely go through, use the post
 method. It's not going to be that hard. You just basically change get where you have
 app.get, change it to app.post, and instead of getting your data from request.query, you're going to get your data from request.body.
[02:17:48]
 Next one, create a branch for adding artificial intelligence to the backend server.
 So far that we've been working with artificial intelligence in the sandbox.
 Add that artificial intelligence to your
 capsule project.
 What I would do here,
 since it can give answers to questions,
 what you could do is provide a fixed context.
[02:18:21]
 Like, for example,
 you have a shop website and you have items in there.
 So what I would do is I would provide a fixed content context that describes my website.
 So in that context, I will already have like descriptions of my items. The prices may be how the website was
 made. What's the inspiration? Who's the author? Who's the maker of the website? What's that
 author's favorite hobby? So basically, I won't let the user provide the context. I will provide the context about my website.
 And then the user can ask, OK, what is this item?
[02:19:11]
 Tell me about this item.
 How much does this item cost?
 What is the website makers favorite hobby?
 It'll basically answer questions about your website and about you.
 You provide the context.
 That's just an idea.
 That's a way to actually use the artificial intelligence, but you could set up to receive a context from the user.
[02:19:40]
 If you figure out how to integrate it that way.
 Or you might look into the other task in the hugging face, and you want to try those other tasks.
 Right now we're just using the question answering task.
 But if you figure out how to use the other ones,
 you feel free to use those too.
 But integrate the Transformers.js artificial intelligence
 into your backend server.
[02:20:15]
 Create a branch for adding an interface
 to use the backend AI.
 So today we were working on the interface.
 Tomorrow, I'll show you some techniques to make it look nicer.
 Create a branch for adding a sign of feature to your front end.
 Okay, so you learned all the credit.
 The CRUD create, read, update, delete.
[02:20:47]
 You learned those.
 The sign-up feature, I previously posted a practice.
 We looked sign-up practice, how to do that.
 So if you follow this, if you follow that practice, you can complete this part right here.
 Create a branch for adding a sign-up feature.
 Where they have a button that says sign-up and they can add their email and password and
 the account will be created.
[02:21:24]
 Next one, create a branch for adding an editable account feature to the front
 end. So after they signed up and they log in to your website, give a ability to edit their
 account. Like they can add their name or their phone number or address or whatever you want to ask for.
 I will be posting a practice for adding how to add this feature on Saturday.
 I can even, you know, fast track you through it and, you know, walk through some of these practices. If they're giving you a hard time,
 if you're getting stumped by them.
 So yeah, let them, after they've signed in,
[02:22:17]
 they can click on a account or edit account button
 or profile button or whatever you want to call it
 and they can change the
 name, their phone number, things like that.
 A editable account.
 Great of branch for adding a persistent login feature.
 So this one's not that hard.
[02:22:38]
 It's basically adding some local storage lines. You should already have a login feature on your website.
 You just add a few more lines to make it a persistent login.
 Then create a branch for adding a login expiration.
 So I provided practices for these.
 You know, practices for these. So you should be able to do these, and I can walk through some of them,
 if they're getting stumped on it.
 But it's just a few lines of code using local storage.
[02:23:20]
 And in this case, this one's using the date class
 to find out when they logged in.
 And when a day has elapsed,
 they'll get automatically logged out.
 And meet all the requirements
 of the previous level four capstone assignments. So basically your capstone is just been building it up and building it up to this point.
 So this one should just be automatic.
[02:23:53]
 Meet all the requirements of the previous level four capstone requirements,
 assignments.
 That should be automatic because we've been building our capstone.
 From those assignments.
 Merge a branch
 to main whenever the branch is done. So we have some branches here.
 Go in one branch at a time.
[02:24:21]
 And then merge it to main.
 And then push both to GitHub.
 Make sure that whatever you push to GitHub, it's a working product.
 It doesn't crash or anything like that.
 It's always working.
 Whatever's in GitHub is always working.
 Whatever's in your main branch is always working.
[02:24:42]
 Always working.
 Nothing is buggy.
 And the main branch, nothing is buggy and GitHub.
 Only do your new coding in the branches so that you can mess up the branches all you want,
 but never mess up the main, never mess up whatever is, you know, pushed or never mess up what is deployed.
 Okay, so
 I'm gonna just open up the brick arrows for 20 minutes and then we're gonna use the last few minutes of class for polls.
[02:25:24]
 Maybe few minutes of plastic for poles. Maybe, uh, let's see, maybe 25 minutes.
 Okay, so as usual collaboration room, silence and one room for silence and one for
 many evaluations or corrections.
 And now just assign people to the room so that you see the room just in case it gets
 buggy.
 So the breakout rooms are open. Anyone need to do evaluations for a week 8 or corrections
 to do evaluations for week 8 or corrections for week 7. Same one one volunteer.
[02:26:41]
 Okay so you're just going to do the one for this week.
 So I'll meet you in there in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] I'm going to continue with the U.K.'s mini evaluation after this.
 So I'm just going to conclude the class really quick.
 Breakout rooms are back.
 And in conclusion, we learned about the post method.
 We actually started using the post method for the AI feature that we have.
 That we got started in the sandbox.
[02:51:43]
 Then we started working on the front end AI interface.
 Now we're going to take some polls.
 Okay, so let me see if I can get something some polls started here.
 Let's see.
 Okay, so what do you think of the remaining three weeks schedule? So we have three weeks coming up week nine.
 That's next week, which will be focused on capstone finale, such as basically we'll
 catch up or polish capstone projects.
[02:52:35]
 And then in week 10, we're going to focus on final evaluations.
 We'll conduct evaluations and also do the
 corrections for them. Week 11, we're going to focus on presentations where
 we practice presenting, then present to other students. So these can be, you know,
 somewhat overlapping.
 If you need more time for evaluations,
 you might be overlapping into week 11.
[02:53:21]
 But week 11 is the final thing.
 I mean, we're going to stop on the 24th.
 That's it. Nothing passed that.
 So, let me see how many responses do we have.
 Okay.
 All right. So, we got all the responses now.
 So, thanks for answering. So, here's the response. We got one answer for two shorts.
[02:54:07]
 And three said that it's just right.
 It's just the right amount of time to catch up and finish level four.
 You short, not enough time to catch up.
 So that's what those mean.
 Now I'm going to take another poll here.
 The last one, this is the last poll.
 This is what do you think of shortening it to two weeks?
[02:54:38]
 Because upper management is thinking maybe you guys want to just get it over with.
 And I don't think that's a good idea, but they want to know what you guys want to just get it over with. And I don't think that's a good idea,
 but they want to know what you guys think.
 So if we're going to shorten it to two weeks,
 and the class just ends on the 17th instead,
 it's going to look something like this.
 Week 9, final evaluations.
[02:55:04]
 Then week 10, practice presenting, then present to other students.
 So is that if you think it's not enough time, then you would pick something too short,
 not enough time to catch up and finish level 4. If you think, if you just want to get things over with, you'll say, maybe you might
 say it's just right. So, yeah, I think all the responses are in. Here they are, everybody
 said, that's not enough time, it's too short.
 So I'm going to give this response to the upper management so that they know that it's
 not a good idea to make it to rush things, basically.
[02:56:00]
 So we're going to go ahead and conclude the class.
 We're going to finish the class is dismissed now
 But oh, I don't know if you're gonna be able to take attendance if you didn't get a chance to take attendance
 just send me a message or
 put it in the chat or something and
 I can mark it in the attendance logs. Other than that,
 classes dismissed. That's today's lesson on AI. We're going to finish everything up on Saturday.
[02:56:37]
 Hopefully. But we'll still talk about some things Next week, even though it's called Capstone Finale, anything that I teach you there, it's
 pretty much be like optional.
 But it will, if you like some of the things that I teach next week, you can add that
 to your Capstone.
 Especially if it's going gonna be a quick fix.
 Okay.
 All right, so gonna, so that's the end. Yes, you can enjoy your day off.
[02:57:19]
 I'm gonna continue the breakout rooms with UQ.
 Okay, UQ, I'll see you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, let's just continue in here.

///// FILE: "Level 4/transcripts/May 10, 2025 12-39.txt"

Transcript from May 10, 2025

[00:00:00]
 Good morning class. Welcome to Codex Academy level four. It's week nine day five.
 And the theme of this week is Capstone finale.
 The days of gender in the first hour take attendance to announcements.
 Review. to announcements review practice.
 So the review is not gonna be from yesterday,
 but the review from the previous day before yesterday.
 I mean, from Wednesday, second hour,
[00:00:42]
 if we need more time to finish that, the practice, we're going to do the Redux
 sign up practice.
 So, we'll see if we need more time for that in the second hour.
 Third hour, there will be time for many evaluations and working on your assignments.
 Make sure you take attendance.
 And on over to your code X account, if you haven't already done so,
 and mark yourself as present, if you're here right now.
[00:01:20]
 And now time for announcements.
 I'll share my screen.
 Okay, so there was a student collaboration day on Thursday. How did it go? Any thoughts?
 Did you make progress?
 Did you learn anything from each other?
 Soon in collaboration day?
 Do you have any lingering questions? I see one thumbs up.
[00:02:13]
 So codex survey is still available.
 Who else has it filling that in.
 So next survey is still here. Hopefully y'all finished it.
 I'll stop announcing it next week.
 Okay, so again, many evaluations is 60 minutes per submission. So just get your notes ready.
 So we can just go line by line and talk about it and let your notes guide you. So week eight, many evaluations is closed, but open for corrections until the end of today and after class, if you need some time right after class.
 So if you need to put in corrections for week eight,
[00:03:23]
 today's the best day to do that and evolve in tears.
 And then many evaluations for this week,
 it closes on Tuesday,
 but on time credit will be given until Tuesday also
 because there was less time this week
 to do many evaluations week 9.
 Okay, so assignments are still in the process of being graded.
[00:04:02]
 I'm supposed to get them all in today and I was looking at
 at some of the assignments and some of them are not complete so if I have to
 get them all graded today some of them will be low scores.
 within will be low scores. But at least you have a chance for corrections.
 And your corrections will be all the way up until--
 well, I still need--
 I will need time to grade them too.
[00:04:41]
 So the corrections will go up until the last week of class,
 but I need time to grade them so they can't be the last day of class.
 They can't be turned in by the last day of class because it takes time to get the grades in.
 So, corrections.
 I mean preferably you can hopefully can get in men
 by week 10 but corrections will be
 also accepted on week 11.
[00:05:23]
 So we have some closed assignments.
 Oh yeah, this one is closed now.
 App engine.
 Capsule and finale.
 It's the due date.
 The all time due date has been rescheduled to the 15th.
 If you take a look at it.
[00:05:59]
 Do on May 15th.
 This is Capstone finale. Do on May 15th.
 Late credit until May 22th
 And contact the students success team if you need to get more points on anything that
 is closed.
 Practice problems are in the side here.
 Help seeker, July cohort.
[00:06:41]
 And make sure you don't get stuck for 15 minutes or more.
 If you're stuck for 15 minutes or more, not making any progress, that's not a good use of your time.
 Post it in July cohort and maybe transcripts to notebook L.M.
 Maybe it can help you answer your questions.
 The transcripts are available up to 9 day 4 now. 9 day 4.
 We have transcripts available.
 So this day was the student success.
[00:07:34]
 I mean student collaboration day.
 The recording was started in the middle.
 In the middle of the.
 The student collaboration day.
 And let's see here. I'll call you guys, are you all caught up with your recordings?
 You have a few more to go. I see some typing here.
 And then, yeah, now it's time to focus.
[00:08:35]
 I'm going to review the walkthrough from before.
 If I say anything new, make sure you take notes on it.
 I did include something the last time about mapping object.
 I didn't put that in the notes, because it's extra.
 You don't need to know it.
 I could put it in the notes, so I guess I'll do that,
 but you don't need to know it.
[00:09:17]
 So time for the review.
 But it's about expiring persistence practice. So in this practice, we are able to get the, you know, before that, we were able to
 keep the account logged in, even though the page was refreshed or reloaded, with
 expiring persistence practice, we got it to log out automatically after a set amount of time.
 So that's for security so that people don't stay logged in and then if they forget to log out, nobody else can access their account.
 So here's the steps where they practice.
 I'm going to load these up in the screen share. [no audio] Okay, so I have it all moving up here.
[00:11:15]
 Practice. So on the front end, we're going to use authenticate, get a current time stamp with date
 now.
 So on the front end, that's right here.
 When they authenticate.
 So that would be from the sign in model.
 Actually, let me get the server started.
 I'm sorry, right there, back end.
[00:12:03]
 And get started. And then start to [BLANK_AUDIO]
 [BLANK_AUDIO]
 So this one, this is the page.
 [BLANK_AUDIO] So when they click on the sign and that's when they have an opportunity to authenticate.
 So that would be in the sign and move.
 It's not theup from there.
 Here's the sign in the handle sign in the tent.
[00:13:11]
 We get in the couch.
 So when we get in the couch,
 we save it in the products state variables right there and this is where we get a time stamp
 Next step for the user's email password and time stamp in the nonject
 So here's the object
 So here's the object. This is the data type.
 The custom data type that I made.
[00:13:49]
 I'm not so worried.
 You can see the data type is supposed to be an object where you're currently
 braces.
 The email password and timestamp.
 In this, it's going to be a one is going to be a string. This one is going to be a string. This one is going to be a string. This one is going to be a string.
 And this one is the time stamp from here.
 This is the number.
[00:14:08]
 This is how many milliseconds have passed.
 Let's see what the date becomes from.
 So what is the date that comes from?
 This is the number.
 This is how many milliseconds have passed.
 Let's see what date that comes from. So Java's here. It starts from January 1, 1970.
 So the number, the number, or the milliseconds that's saved right here is a number of milliseconds that have the laps ever since January 1, 1970.
[00:15:14]
 Next, use persistent login practice instructions to store login info with local storage.
 with local storage. So it was already coded here. Just store their login info, convert this credential object to the string, and then save it. And then use local storage, set item
 set item to save that login string into the credentials key. So these are key and value pair and this is the key and value pair.
 So think of local storage like an object.
 This is the key and the value that will be stored in it.
 Like this is an object and this is a key and this is the value that be stored in it. Like this is an object, and this is a key,
 and this is the value that's stored in it.
[00:16:16]
 And so that saves the login.
 When the sign in area melts, we get the current type stamp with date now.
 I know which is the sine in area.
 The component did melt right there.
 Here's the component did melt. mouse right there.
 Here's the component that melts.
 So, since we are
[00:16:59]
 using a function to run the persistent login things.
 Even though we are in the component did not reuse a function to bring it out to
 refactor everything for async functionality. That's where we can use. That's where we can This is scooping it all over there.
 And that is right over here.
 So in this step, we are getting the persistent login. This one is, these persistent log in practice instructions to get vlogging in post-in
 local storage.
 So this is the function I guess log n info from the local storage.
[00:18:05]
 Here's local storage. We're going to get the value stored in this key.
 Now basically be our log in string.
 So if there is a log in string,
 we're going to convert that string.
 So this is the string. We're going to convert it into an object right here.
 We expect that object would look like credentials.
 We can email password and time stamp.
[00:18:37]
 Then we're taking those that newly created object and destructuring out the properties.
 So we have access to them individually without having to use documentation.
 This is the time sample of when the sign in area melts.
 So when this will melt, we get a timestamp. It's not a timestamp of when they
 locked in, but when it now is. Okay, so after we have the login information right there,
 we've recovered logging information.
 If the login was saved, convert it to a login object with JSON.
[00:19:30]
 Or if the file is already talked about that.
 So, drag the current timestamp and the timestamp from the login object.
 So, this login had a timestamp and we also have a current timestamp from when the page loaded.
 If you look at the difference, when do they log in right here and when the page load.
 So that's our last time. Check it to difference is greater than 86,000,400,000.
 So if the difference is greater than 86,400,000,
 that means that's gonna be a Boolean
[00:20:28]
 and we call that variable is expired.
 If the difference is more than one day,
 so we're an empty string for the login.
 So if it's expired, we're gonna store an empty string for the login. If it's expired, we're going to store an empty string for the login right there.
 This is the key. The value will be an empty string.
 Basically the empty string in the case and the expired expired login and will require users to authenticate.
 But it's just not expired and we're going to go ahead and authenticate for the account right here.
[00:21:18]
 Which was from the first-person login. So we're going to authenticate the account. We'll get the account information.
 If the account information comes in, that means it authenticated. That means the email that and the password nets.
 So if it comes in, we save it in the read-up state variable.
 We'll go to account.
 But if they don't authenticate,
 then you'll clear the login.
 Just in case it wasn't already there.
[00:22:12]
 And that's it for the practice here.
 One thing I was also doing was converting the used to be like this
 used to be if statements, right, so if the button, this was my placeholder because I wanted to render the
 sign in model. But since I can't save that in Redux without any errors, I
 save the placeholder instead. And then when it recovers that placeholder or string it comes in as a string
 then it gets converted to a component here
 that component gets rendered there
[00:23:19]
 but I change this code
 to this code right here which accomplishes the same thing.
 One line and a few lines of code replaces these.
 Actually it's sort of actually it looks like one line of code but it's
 actually includes this line of code right here. What's in that? So what is going on here?
 I'll put it, put it up right here.
 Use the mapping to choose the component.
[00:24:22]
 So this is a mapping.
 This means here's a mapping right here.
 That means if, think of these are strings.
 Because they are actually strings.
 So I'm just going to add something here just to show you that these are actually strings like if I if I use the placeholder that was like this instead
 sign
 Okay, see, I saved it, it remains a string. Why is it?
[00:25:08]
 Because these minus signs, job is good.
 We'll interpret them as minus signs if you don't put rotations around them.
 But if you want to use those dashes, then you can put quotations around it and actually all of these are strings
 but pretty you just remove the the quotations here because they're not
 necessary when I say that pretty or move the quotation so think of these the strings so the string
 sign in modal corresponds to the sign in modal component and the string sign out I'm using the, right here, this is bracket notation.
 I'll make it clear if we use bracket notation.
[00:26:18]
 I'll put here just the specified object bracket notation. If you're not in the array, it's an object.
 Use bracket notation and give it a string.
 And it tells you, or use bracket notation, give it a property represented by a string. So this button is going to come in and
 it'll either be this string here or it's going to be this string here. It's going to
 check which string is it. Then it's going to return the value. So if this button right here was the sign in modal string,
 it's going to look at this object before the sign in modal string.
 So here's the object.
[00:27:22]
 It's going to look for the sign in modal string.
 Then it's going to give back the value stored there.
 So it gives back the value stored there, which we put into.
 It's very simple.
 So this ends up being the actual component.
 Which gets me under the hooker there.
 That's a much more mapping object.
[00:27:56]
 That's optional.
 There's a need to be in your notes if I would, if I would going to put it in the notes.
 Let's see what I can do here. [BLANK_AUDIO] [no audio]
 [no audio]
 I'm going to take this, that was the same example.
 To show us that there were strings.
 So I'm just going to put this to show us that they were strings. So I'm just going to put that in those strings.
[00:29:09]
 This is prettier that takes away the rotations,
 because they're not necessary. and
 it's bracket
 it's notation
 and
 object bracket
 and you use can use access properties. I guess I'll put a sample of that back implementation here. So we're going from the string, starting off as a string, access the button map, give give it that string it gives us the value which goes into here
[00:30:49]
 object bracket the facing can be used to access
 properties and store their values
 Use the mapping object
 that's this one, it's a mapping object
 to associate strings that's this one, this is the mapping object. So you associate these things with values.
 So, we're all in the next section. So, we're all in the next section.
 So, we're all in the next section.
[00:31:55]
 So, we're all in the next section.
 So, we're all in the next section.
 So, we're all in the next section.
 So, we're all in the next section. you'll get their values.
 So just like if I went like um
 so for example, this would be almost the same. This would be basically the same as this
 but to map dot sign in the middle of it. So I'm going to get the value that's
[00:32:27]
 stored in here stored there. But this way it comes in as a variable and I can
 whatever that value of that variable is I can get the value from there.
 I can get the value from there.
 It's dynamic, right? The value of this change is depending on if the user is logged in or logged out.
 So that's when you need to use bracket notation.
 It's when this one, if you do dot notation, that means it's not dynamic.
 It's static.
[00:33:03]
 It doesn't change.
 Basically in this example, I only need the sine and molar, but I need both.
 So I need to use a very low and change it as necessary.
 This one changes depending on whether the user is signed in or signed out.
 This one changes depending on whether the user is signed in or signed out. So just, we don't have to know this, but it's useful,
 to understand objects and bracket notation.
 To make the code a little bit cleaner.
[00:33:44]
 Let's just do some little tip of the trick there. [BLANK_AUDIO]
 Replacing
 hip statements
 [BLANK_AUDIO]
 Also the,
 I'll put the statements there.
 [BLANK_AUDIO]
[00:34:38]
 Put the comma that's because they're getting in place.
 [BLANK_AUDIO] place.
 Just like that.
 So we see that they get replaced. I've seen them in the piece of the flap,
 because the title is replacing the things.
 If the statements are right there.
 So that's it if this works.
[00:35:27]
 It's assigning by refresh.
 It's no sign that says I have the options to sign out.
 One of the expires this once it changes. So it should lock me out basically.
 So I'll change the expiration.
 Instead of 1 day, I change the expiration to 10 seconds.
 So it says sign up. That means I'm signed in because I have the options to sign up. So it's a post-expirative, 10 seconds, and it's expired.
 Now I need to sign back in.
[00:36:35]
 Well, just remove this and put it back to the back to one day.
 And we're also at that's the ex-pippant expiring persistence practice.
 Now we're going to do this with read-ups sign-up practice. This will read us sign up practice since we sign up is part of the capstone.
 Let's use read- front operations, great,
 read, update, delete.
 If your website doesn't use them in a practical way.
 So when you sign up or want to use their signs up,
[00:37:41]
 that's going to use the create part.
 or when a user signs up that's going to use the create part.
 Let's do this. Copy this.
 Use the notes. and then the walk through is practice. We'll create a sign-up component to sign up. We'll put in a model, and that the model can take a sign up for.
 And ask for a female.
 And password is going to look almost just like the sign-in page.
 Or sign-up model.
[00:39:01]
 When it's submitted, check out the email the email is in the database.
 If it is send an error message and then the account has previously been created. You can see the email is not in the list. Create a new account.
 So account.
 Think of that as an object. When they sign up, on magnetic vlogging the user by setting the proper reader state,
 let the sign up components, select the reader state, so that's the selector.
 When they're logged in, I'm designed to component.
 When they use the logs out, set up the proper unit of state and show.
[00:40:15]
 The sign of the component.
 Okay. Okay. Okay. Okay.
 Okay.
 Okay.
 Okay.
 Okay.
 Here's that.
[00:40:38]
 Great.
 A sign-up component will sign up button and a mobile.
 So since that's very similar to the sign-in button,
 here's a sign-in button, it has a model and it takes in an email and password. The
 sign-up form should also take in an email and password. So what I'm going to do is copy the sign in and sign in and just change it forward the same up.
 And six times. The problem with copy and paste is you might forget to change the values and let call
 this plug.
[00:41:52]
 Not using the new state anymore.
 Just using the Redux now.
 I'll need that.
 So this is going to be called sign-up level.
 I'm going to just comment these out for now.
 Actually, no, I'm just going to move them.
 Just make sure we get out the phone.
[00:42:32]
 We're not popping this in the microwave.
 We should have the phone right here.
 So it's going to require sign up content. I need to create that.
 This is one that provides an email and password inputs.
 So I need to change this.
 Actually it's going to look exactly the same. I could probably use it.
 Just basically repurpose for the sign-up.
[00:43:14]
 You can receive this.
 Here.
 Here.
 Here. You know the task that it's going to take enough exactly the same.
 So I could actually use that.
 I'll reuse it.
 It needs an error message.
[00:43:44]
 So I think I'll the pink back.
 I see it's not the correct error message.
 It's going to be this.
 Sign it.
 I have a message.
 I need one for the side.
 Up there.
[00:44:16]
 I need to change this.
 Sign up more.
 And I need to create it.
 Actually, that means just
 even like that for now. [BLANK_AUDIO]
 It's not rendered yet.
 So let's see, let's try it to render it.
[00:44:54]
 [BLANK_AUDIO]
 It seems it's a little bit too tight to go. I can change the width here, side up.
 That's enough.
 I need to use.
 Put the mold on this. on the other side.
 So let's remember it first. So, I can just hold my head here to this one is marked up to the template head here.
 So I can at least render it.
[00:46:15]
 When the redox state shows the user is logged in, I have the sign-up component, or here,
 actually this one.
 When the user logs out, when the redox state shows the user-up component, or here, actually this one. When the user logs out, when the Redux state shows the user's logged out,
 show the sign-up component.
 This button mapping takes care of that for me.
 So I can actually combine these. I don't know if that's confusing to you guys, but basically I'm going to rename this
 to buttons and they come as a pair basically. You either have the option to sign in or sign up,
[00:47:07]
 so they come in pairs.
 I can do it that way or I can just go individually.
 And basically the cone will,
 it'll be somewhat redundant, but I'm gonna do it because they come in pairs so I'm gonna do it like this.
 Basically I'm off to
 and render this one and the sign in and sign up.
 And I break this into some of the things that. So let me just disable it.
[00:48:07]
 And then just disable it. Put a place plates here.
 When I click on the cyan button it says "sine in" so I need to fix that. [inaudible]
 Okay, let's see.
 Consistent now. If I'm side up, everything should save. [ Pause ]
 >> Oh, I'm alive.
 Oh, I'm alive.
 Since I copied and pasted, they have this ID right here. That's what loads the model.
[00:50:14]
 I need to change these IDs.
 That's the map.
 that. So that's what that's a problem to copy and facing because this is some values.
 The model was expecting an ID which wants to load.
 And I have multiple models with the side in with this ID right there so it just
 picks one. I need to make this unique
 now it says sign up and it says sign up right there. There's a placeholder for
[00:51:02]
 the air message.
 Air memory messages.
 For now it's a placeholder.
 [no audio] [no audio]
 you can put a gap here
 [no audio] Basically, you have to put, this is, see this is the button map, right, and you are
 putting the code right of this.
[00:52:10]
 Bring off your depth.
 Pretty mind your guys.
 Import it styles.
 Or component styles.
 Sign. [BLANK_AUDIO] [BLANK_AUDIO]
 [BLANK_AUDIO] I'm just going to identify this as an ID.
 I do both.
[00:53:14]
 I put here the scientific model.
 I put in and off with the styles and the margin.
 I put in and on the right. and
 it
 and [ So you added the margin there. I should also add a margin right there.
 So, let's get this one here.
 I can look for large index.
[00:54:48]
 The two full sides.
 And they can't collect right now.
 It has a large.
 Okay, so now there's a review of component files. We're going to take a break now and continue with this review for this walkthrough after the break. the brakes being on the right now.
 Okay, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] All right, so we're back from the break. And again to the second hour of class.
 And we're going to continue with the practice.
 So we did, we created a modal sign a form that asked for an email in the password.
[01:06:08]
 Now we need to work on this.
 When the sign of form is submitted, check if the email is in the database.
 So that's just like one statement right there, but a lot of things need to be done.
 And just that one statement, which we will see here.
 We need to handle the form.
 As we have a sign of form, we need to handle it when it gets
 when this user clicks on sign up. Okay, so it's this one right here, handle submit.
[01:07:14]
 And we'll code it from scratch.
 Function handle submit.
 And we need to get the information out of the form.
 Name, email, and name password. Okay, we can get those out.
 We're gonna get an event here, put any.
 Otherwise, we're gonna get, well, we could,
 let me just put the long one here.
[01:08:01]
 I'm gonna put the long type.
 I'm going to put the long type. Here is that handle on some bit.
 So to get the type, just start putting a arrow function here.
 What is it not? Form event, ACML Form element.
 So it's a function.
 Here's the parentheses.
 It's a function that takes in an event.
[01:08:42]
 And the type of that is form event with angle brackets, a
 symbol form element. So this event should be form event. And then in the angle brackets HTML form element right there.
 Now I can put this one back and it looks a bit.
 There's no type error.
 Okay, so I need to get the information out. So there let me just start from here the event has a target and
 Then also that target has elements
 See that if I don't put any here, then I can't I'm gonna get this TypeScript here, but I know that I have elements
[01:10:09]
 Because I put name here. I put name
 this form right here. Therefore, I should have access those names here, the elements here.
 So instead of putting this, I'm just going to put any to just get rid of that time to get paired. What I should be able to do is email is form.email.value. And then the password.
 Form.password.au. I can test it out, see if it works.
 I get those properly.
 Email that it go through.
 Come on, there it is. And then here's a password right there.
[01:11:33]
 Okay, so I need to check if these are in the database.
 Actually, I should make a route, a separate route, or sign up.
 So what I would do is make a separate route for that.
 But basically, the way I wanted to look like, almost like the sign-, we'll go here.
 Almost like this.
 We see that it's actually it takes in the event. And it does all the extracting for me.
 So I can do something like that.
[01:12:22]
 But instead of calling it handle sign in the tent,
 I'll call it handle sign up attempt.
 and the angle sign of the attempt.
 Export function, angle sign up attempt this one I'm back in the letter take in the event object
 actually since I'm not requiring any TV here and
 think I want the same time
 I'll let it take in the event object
[01:13:21]
 but usually you should the head object.
 But usually you should use some TDD to make sure it's working properly.
 Since harder to create that event object.
 But if you're using TDD it's easier to just take in a, oh, I guess I'll just take the TVD.
 It's the right way, but do it a little bit quickly.
 It's going to take in an email in the password.
 And what it will return is either I wanted to return in the count.
[01:14:18]
 If it was able to create it or nothing. If it did not create it.
 So, let's see if your handle is signed.
 Sign up to the template. So, I'm looking at this as a template.
 Signing the template.
 It's going to return in the count or undefined. So this one is basically this is sine in.
 This one's the sine up is going to sort of mirror that.
 The return value will be a promise either in the little step.
[01:15:09]
 Send in the account or the vote.
 This account is the data type we already have.
 and now just like this right now Next, we can get these types of errors out of the way.
 So, I just set up a variable and I'm returning it.
 Time to get from those that it's supposed to be in an account.
 And I got rid of the type of errors.
 So, let me just do some TDD here or a sign up attempt.
[01:16:27]
 [inaudible] describe
 handle sign of the terms.
 We need to put quotations there.
 Otherwise, the test will work properly.
 So what should said is, do it returns and account
 if the email is not database.
 database. Basically they're going to sign up and the email is not in the database. That means they can sign up. It's available. The email is available. Which means not in the database.
[01:17:41]
 So I'm just making up an email. And then the password, it doesn't really matter.
 That's the orange phase.
 A surf phase.
 A third phase is I'm going to use a function called I'll call it great to count. And now pass it the email and password.
 Oh, I need to call this one here, handle signup attempt.
 It's that's what I'm testing.
 It's going to take a while so I need to wait that and if I'm going to wait that, I need
[01:19:08]
 to put a sink here and then I need to capture the value.
 And then, we're going to notice this is the search right here.
 I expect the result to have a property. Email.
 So accounts have an email and they have a password so that's what I expected them to have
 at least. Actually, you can do that, and we'll sign up with "10" and then the next test.
 It returns nothing.
 If the email is not available,
[01:20:33]
 which means already in the database.
 This one doesn't matter here. results should be undefined.
 So now I'll code it.
 So the site the
 function signature here. Thanks in an email and a password. Because that's what it says here.
 Takes in an email and a password.
 And they'll return in account.
[01:21:38]
 So here I'm checking for an account.
 So here it returns an account. Here it returns nothing. So it should
 be returning undefined if there is an email that's already taken. So here I'm specifying
 that in the function signature that that can also return undefined.
 Now I need to write the code.
 So basically it's going to use axios
 and it's gonna use the post method
[01:22:21]
 to contact the backend server.
 I need to give it a URL.
 I have a base URL.
 And it's going to
 go to the VELEMDA back end server.
 I've set this up
 separately, so I have something that chooses the base URL
[01:23:09]
 Depending on whether I am
 Depending on whether this front end is deployed or not deployed so right now it's local so this base URL will change
 Depending on if it's local or not
 But eventually it will want to connect to the lambda server or the back end lambda server so that's the
 base URL that's
 Then I want again, get to. Remember, you should be, you should devise a way in your capstone to choose a URL that
 it should connect to.
[01:23:57]
 So this front end should connect to the local backend.
 If this front end is local, but if this front end is deployed, it's
 you connect to the lambda back end.
 So this is what this does.
 Just basically use a conditions and do that.
 That's that's easy things.
 Some of you have figured that out already.
[01:24:23]
 So I'm not going to show you how to do that, but look here
 I'm just using object notation. I'm not using a function here.
 And in the data.
 It's gonna be an English list, it's gonna be a thing.
 So the data will contain the email and password. Okay, fits on one line.
 Maxio is going to contact that URL and send the data.
 I'm going to get the response.
[01:25:39]
 I need to await this. this then the account [BLANK_AUDIO]
 >> It's on its back data.
 It's gonna come back and it's gonna have a data field, so
 [BLANK_AUDIO]
 It can make this a constant.
 [BLANK_AUDIO]
 I'm not gonna change it.
[01:26:23]
 'Cause they'll either have something or nothing.
 I think that's impressive.
 It depends, it just basically depends on what the server gives me.
 So, now going back, I need to count this function here handle, sign up the tent, give it the email and the password.
 It's going to give me the account. I need to await that.
 And then I need to do something when I receive that account.
 It will either be something or nothing.
[01:27:38]
 But I'll leave it at that because I don't have my back end server set up here.
 These are the tests.
 Let's keep the keyboard this.
 That's my bit of metric if it appears there.
 So it needs to contact the neck and server.
 Oh, I don't have a path for the URL.
 URL is going to be from the name of the server.
[01:28:19]
 For the server that's supposed to be on the name of the path.
 I'm going to make one.
 Sign up.
 What this kind of path is going to do the, this path or this route is going to do the,
 the checking for you.
 Let's see what this looks like right now. Sign up.
 I'm going to put a,
[01:29:08]
 I'm going to sign up. [BLANK_AUDIO] and you can expect that the front of the tent.
 Either it's written in the account or undefined. [wind audio] Try to let it in.
 Try to extract the email in the password.
 It's handled the sign-up for 10th.
 You are out of it, so you are out of the fee.
 Right now it's going to be local host.
 8000.
[01:31:22]
 Sign-up. I didn't create that one yet.
 I didn't create that one yet. So it's not going to work, it's going to basically have it there.
 Because I don't have anything listening on the sign-up route.
 I don't have a sign-up route.
 I'm just going to have a sine of brow. I'm going to make it. This is the back end.
 Here's the index.
 I'm going to make a new route for the sign-up
[01:32:11]
 and I'll create the sign-up handler
 It's called the same name as the route. It's going to take you in the name request object.
 And it's going to take in a response object and it's going to get the data from request.
 Not body.
 When you get things from the PUMS method, it sends the data to request our body.
 And I want to send that data. This data is going to be basically a account.
 And I want to send that data to assign a function
[01:33:56]
 or a single icon here I can let this do the, I can let this do the, I can let this do the, I can let this do all the logic ground that it So I don't have anything for that.
 So I'm going to take in that data.
 With the expect from that.
 So I put away here because it's going to take a while because it needs to contact the database. I need to put a six here.
 And then I'm going to capture the value.
 What will send me?
 It'll either send me a account for it.
[01:35:38]
 So create a account here.
 I can create that now and use some TV for that.
 three account access
 T.S. So this is these are concepts in these are concepts about the credit assignment
 and GDD and express routes.
 So what does it do? It returns and account.
 Almost going to look like the, copy that.
[01:37:15]
 They're going to be pretty much synchronized.
 Except this one it's going to take in data. I'm not going to take in email and password it's going to take in data.
 And the data is going to be this. [BLANK_AUDIO]
 >> That's the data.
 that's the data.
 Then it should return nothing if the email is not available.
 You're testing the function called create account. Have it made it yet. it takes on it to take in the data object
[01:38:28]
 it's like what we have here in the sign-up route this is taking the data object
 response that's saying account so it's going to send the account whatever it gets that's what it's going to send the account whenever it gets as
 what it's going to send.
 This data object created right here. [no audio] Okay, so I have an idea of what this function is in here. I can create the function now, create count.
 Okay, so I see this, it's async.
 I export these things function. The name is create account. Next door placing Thompson.
 The name is Create Account.
[01:39:47]
 It's supposed to take in an account. I can specify that here and there.
 It says it's missing some properties.
 So let me just preview this thing.
 I think the account will also require [inaudible]
 The account will also require, the account also requires name and form.
 I could just make a separate data type first line-up.
 I'll just stick with this report. that is pretty good. The return value, what's the return value is supposed to be, is since it's
[01:40:50]
 async, it's going to return the promise, but that promise will return a
 result value. So basically in the end, what do I want this to return? I want it to return an account.
 Right here, this is what we expect, some kind of account.
 Or we expect it to return nothing.
 So, let's get rid of that air, just going to put that in front of the front. [BLANK_AUDIO] I'm excited.
 I can, I can at least import this in my tests. I put in here since it seems like things.
 I put any because otherwise this is expecting an account for properties.
[01:42:42]
 It's missing a name and bone number. But the data is not
 going to include that. It's going to override it right here. So I need to code this now. It needs contact dynamo unique check if it's there check if that count is there if it is
 then it's gonna return nothing so let's see
 gonna compare to what I have here, read it.
 Right now it's not, it is taking information.
 I mean, it has a key and quiet what you guys should have made a function that provides us for you.
 So I'm going to do that. and we also have that already so we can just quickly create that, get, down the low, Nice pipe.
[01:44:34]
 Information I need to import these. Then I'll export that nice client. This is going to look a lot bigger now.
 I need to put the core.
 That's it.
 And I can figure it otherwise if my path be able to get those very close here.
 This one is a pretty nice bite for me.
 I'm either blue or blue. I mean, um, the other one.
 Now I don't need bees.
[01:46:10]
 I don't need this anymore.
 I'm just editing the read account.
 I can get the nice mine.
 Actually, I won't do this either. Without the nice pipe.
 There it's been pouring. So it looks just like before. Doesn't look like a
 function or anything. I've already created a nice pipe. It's exported from the
 function directly. I mean it's exported from this file directly. There's a nice
[01:46:54]
 pipe and then I'm just using it right here. It's imported right right there. And I use it like that.
 So this create account is going to basically read.
 It's going to do the read and find out if the email is already there.
 So I can do that.
 I'm going to copy this in a little bit.
 I'll fix it. Anything that means fixing.
 This one is, this one is, this one is put test, but I didn't make any test that checked with this.
[01:47:59]
 I have an account right there, so I'm going to use that instead.
 I'm not checking for a pass with this side.
 That's one of the movements there. [no audio]
 Let me check the log it's for the log.
 I need to extract. I need to get the target email.
 I need to extract it from the sign of data. So this sign of data has, actually, it has an email. So, we will check that sign up for the data in the, we may making this for the next one since.
 Okay, so it looks like sign up for your mail. The sign up for your mail, it's gonna check for that.
[01:49:30]
 That's the only thing I need here for now.
 I need to check if it's there.
 Gonna do a read command.
 It's gonna just check if it's there.
 If there's an account that I want to--
 this one will return an account if it exists, right?
 So if there is an account, then I want to-- So what's going on here is I'm going to capture if this email exists. If it does, then I'll have an account.
[01:50:56]
 If I have an account, that means the email exists already.
 Here, let me just do this.
 Does the Galaxy exist?
 I can't believe that the user account is not. [BLANK_AUDIO] So if it exists, actually that might make more sense about this quick view in terms of the client.
 I usually just put one return statement at the bottom, but to make it more understandable
 to me, to what it should be in the rightum, which means if the account exists, return on the line,
 that's what this test says.
[01:52:34]
 It returns nothing if the email is not available before it is already in the database.
 So that's what this means return from the line.
 So that's what this means for some point of the time.
 So if there's not exists, that's when I can create it. [BLANK_AUDIO]
 So I'm gonna look at the,
 [BLANK_AUDIO]
 the three eights, then we'll hear. [no audio]
[01:53:30]
 Copy that.
 I'll change it.
 [no audio]
 [no audio]
 [no audio] If you could use axi for this one over here, but it makes more sense like this.
 This is what we've had.
 If I put this one and replace it and put it up here. If we'd also get the same result,
[01:54:25]
 we'll have the same effect.
 But if you don't understand what that means,
 I'm just going to do like this.
 And actually, so a return statement causes a function to stop. So if it does reach this point
 right here and it returns then nothing from the need that we run.
 This down here will run if it passes this line.
 It may or may not pass this line because in this You know, exit out of the function, it beats at that point.
[01:55:27]
 And then, so I'm basically going count at this point, if it exists, we turn nothing, but if the Then I want a great new account so that email would be signed up.
 After email, in the past, it would be the sign up for the password. and send request to the nice client and have a status.
 It should be okay though.
 So I'm using it to get to be that line without a narrow every single spine.
 The count will just basically look like the sine.
 The sine up is coming in with an email in the past here. Remember when this response comes in, it's just going to show
 if it was able to create the account, it's just going to study status 200. It's not
[01:57:35]
 going to give me an account. So I'm happy that you're creating an account. And since the
 sign-up looks just like the account, I mean, yeah, the sign-up
 basically looks like the account. That's what I can return.
 I can run this, just try running this test here. [BLANK_AUDIO]
 And PM test.
 [BLANK_AUDIO] [no audio]
 I'm starting to be longer to see what I'm doing.
[01:59:01]
 What I'll do is I'll continue this after the break.
 And to the sunrise, we're still stuck on the step here.
 And the sign of form is submitted. Check it. Email this in the database.
 We're going to take a break.
 We'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and we're heading into the third hour of class. We have a chance to work on your assignment.
 This is a assignment here.
 So I can continue working on the walkthrough or I can answer any questions that you might
[02:10:07]
 have if you're working on your assignment and you got stuck somewhere.
 I can answer those questions.
 So does anyone have any questions?
 If nobody has questions, I'll continue with the walkthrough.
 See some typing. Okay.
 All right.
 So I'll just continue with the walkthrough.
[02:11:07]
 No questions.
 But if you don't want to watch the walkthrough, I can all open up the breakout rooms.
 So one for collaboration, one for silence.
 And then I'll just put everyone in a room just to see it.
 And let's see here. 30 minutes.
 37 minutes.
 Okay, I'm going to do the walkthrough.
[02:12:24]
 Continue the walkthrough, I mean. Recarons are open just in case
 we want to do something else.
 Okay, so here's the, we were running the tests.
 One thing I realized is this was wrong. That's probably one of the reasons
 Okay, so I'm double checking here
 Okay, so I'm double checking here.
 My Dynamo DB, I have some accounts. There they are.
[02:13:16]
 And here are my tests.
 The returns, here, returns an account
 if the email is available.
 So this one's gonna be available. This is not in the list.
 And it returns nothing if the email is not available.
 So this one's in the list already.
 So this one should not be able to create an account.
[02:13:38]
 So it should return nothing.
 Then you just run these tests.
 Actually, this is the wrong. This should be looking at the back end test right here.
 I just, yeah, I need to fix these tests. Okay, so then you cancel this.
 It's watching right now.
 I'll watch so we can see it happened.
 Okay, so I'm just going to run these tests.
[02:14:22]
 And the test.
 See if it works.
 And they both passed.
 Okay, so that looks good.
 One thing that should be done though is
 there should be cleanup phase right here,
 cleanup, why it's because this account is going to get created.
[02:14:56]
 Next time I run this test, this test will fail.
 Right, you saw that the CTAS pass right here.
 If I run it again, it fails. So it didn't run again because it's on watch.
 Because this account is already created.
 Right here, it's already in here.
 I'll refresh this. It's already in here. So it's basically not available.
 So I need to have a cleanup function
[02:15:28]
 or a cleanup section here.
 This is where the leads, the email account.
 So,
 I need the account. so it becomes available again.
 Insert, come here to delete the account so if you don't think I'm going to leave it.
 So until I insert that code, I need to manually delete this,
 if I want the test to pass.
[02:16:18]
 I'll stop this. It's watching right now. So I'm just going to manually delete it.
 I know the tests are passing. Okay, so this path should work now.
 The front end, because I have the back end going, now I can run the front end test, see if
 they work.
 Here's the front end. I'm going to put the same information here, a cleanup phase. So it comes available again.
 This is the front end now.
 And you just up this terminal right here put it back in.
[02:17:45]
 That was for the test. The back end seems to be working properly now.
 There's something here so let's see what I've got.
 I forgot to import this.
 So that fixes that.
 And this one I forgot to import this. That fixes that.
 Back end should be working out.
 Around the test, everything passed. So let's run the test for the front end. Here's the front end. Open the neutral over that.
[02:18:27]
 Make sure you can make it.
 I can trace on.
 Open up the test for me. and then we'll test handle sign up on the channel.
 If I look at the accounts here,
 I'm going to find their back to
 not available emails like here.
 So I can run just testing the front end, see if it works.
[02:19:15]
 And then we'll test. [BLANK_AUDIO]
 [BLANK_AUDIO]
 This task can't run.
 [BLANK_AUDIO]
 Because I need to set up a chain as dumb's the test environment. [BLANK_AUDIO]
 [BLANK_AUDIO]
 >> I'm teaching guys how to make a complete file and see the name.
[02:21:21]
 [BLANK_AUDIO] >> Probably a little free.
 Where I have the windows for just. [BLANK_AUDIO]
 I can just use the
 ok ok
 so you have to set up the config
 file
 ok
[02:22:34]
 so you basically
 just So we basically just do the just default settings.
 If you want to be able to test the front end properly, because I have the front end checking for windows.opening.
 You need to make a change in the just configuration. [BLANK_AUDIO] We don't look at that.
 I need to configure it to the S-style. here at JS top.
 Actually the 19th year. Considering the JS top, just environment. [BLANK_AUDIO]
 Okay, we can just actually just put this and it should, and you don't have to create a,
[02:25:08]
 you don't have to create
 you can take file [BLANK_AUDIO]
 [BLANK_AUDIO]
 [BLANK_AUDIO] just environment, JST. Go into install that.
 In the end install, just
 the entire room is
 JST.
[02:26:19]
 Same JST. [BLANK_AUDIO] Let's try it.
 Okay, so that one was good.
 We'll wait to, so you don't have to put this. You don't have to remember this right there.
 I'm going to create it.
 If I take this out, it's going to break.
 It's not going to be able to run the test. And it's that same earth.
 And it created a just config file. [inaudible]
[02:27:47]
 [inaudible]
 [inaudible] [BLANK_AUDIO]
 [BLANK_AUDIO] I can just have two in the night here.
 What?
 What is theta type for theta?
 Just in big object.
 It's not going to work with TypeScript.
[02:28:58]
 That's what I'm just going to have to know it test environment
 your test environment
 j
 test top [BLANK_AUDIO]
 Put a note here, must install. [ Inaudible ]
 Okay, so that's your work.
 I'm now complaining about JSTOM.
[02:29:59]
 Okay, so we don't see it complaining about data storm anymore.
 That's good.
 That's a just config file. There's a package that we installed.
 Running this one here.
 Let's see if it created anything. So I want to run the test again. Okay, one failed still.
 That's the one which turns nothing if the, okay, got a, they got an empty string.
 Okay, so that's, I have to override something here.
[02:31:40]
 So, we'll get some empty string because that's what this one is returning.
 It should be returning undefined.
 So what I want to do is if there's no count, then return undefined.
 It's going to be-- basically, it's going to come in as an empty string.
 I mean, you could do this for count equals empty string.
 Return undefined.
 Whether it doesn't like that, it seems because we expect an account.
[02:32:35]
 There's no type of script errors that I do.
 This basically means if there's no account,
 like it's an empty string then just return on the find instead let me reset
 this here
 Okay, the test pass. That's good.
 And it's just delete this thing again until I put in the cleanup code, I have to kind of delete
 this. practice. When the sign of form is submitted check it
[02:33:55]
 female is in the database. If it is in an error message then in the counter as previously been created.
 Okay, so back to the front end here. find we're getting the result we want from it for now.
 Here's a sign up in the little, I think what I it and make a different one.
 I make it sign up content. I mean sign up content.
 We don't have basically the same things as the different things.
 We'll have the same inputs, but at least I can customize it if I need to. [BLANK_AUDIO]
 [BLANK_AUDIO]
[02:35:33]
 I want to use a site of contact instead to make it consistent.
 [BLANK_AUDIO]
 There, everything there says sign up.
 [BLANK_AUDIO] Sign up there, sign up here, sign up
 here, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up,
 sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up, sign up I'm gonna expect to get an account for undefined.
 So if it's undefined, actually let's start from this.
[02:36:13]
 If there's an account, then I'm gonna do something.
 Else otherwise there is no account
 that I wanna do during that phase.
 Let's see. When the sign-up form is submitted, check if the email is in the database.
 If it is, send an error message that an account as previously been created so I need to have an error message
 so that means I need to set it up basically the way it would look is like this so
 so it will be basically here if the account already exists [BLANK_AUDIO] [no audio]
[02:37:49]
 I'm just going to put here
 here, here, here.
 Actually, it's going to be simple because I need to use the
 the set
 set and sign up mobile every message. Sign up mobile every message. I didn't create this
 variable yet. I'm going to create it but this is what it's going to look like.
 I need to send the miss except the account is already been created.
[02:39:16]
 And we're counting that email already exists. That's going to give me an action
 for work order and if this batch needs to send out that work order. So now I have an idea of what this, the state variable should be.
 So I'm going to change this now.
 Error message is selected. Select signup mobile error message is selected select sign up mobile error message. Okay, so that's correct sign up model. This is the sign up mobile and it's going to be an error message.
 So I need to make the selector. I need to make the state variables. So I'm going to head on over to the next here.
 over to me next year.
 One, two, three, one, three, five.
[02:40:37]
 So it's time to stay variables.
 Sign up. [no audio] [no audio]
 [no audio]
 [no audio]
 [no audio] that's like initial state for that. The selector now.
 Whenever there's a pattern like this, like they have patterns, like they're almost the same.
 There's a few differences. You can rewrite code to automatically create this pattern. Automatically do this.
[02:41:28]
 Select the sign of the sign of the model.
 Everyone message.
 Just going to rename this.
 That's the correct variable.
 And that's a selector.
 A good check if it's working.
 Let's see if that's selected for me.
[02:41:55]
 If we go here.
 Our message is nothing right now.
 And then we just change the default value
 just run it again
 since the same test and there it is
 then you can do that
 so the select is working fine
[02:42:31]
 now the center The sign of the moment is very missing.
 We have to change a few things.
 The set is going to be working fine now. So in the contact, I think that's fine.
 That's fine. before I try it, I'm going to be over here because there's nothing in this part.
 So I'll try to sign up with an email that already exists.
 Okay, so there's a checking email and then it's going to handle the sign-up attempts.
 Let's see what results we get back.
[02:43:58]
 So the account is undefined because that email already exists.
 So I'm going to set up the error message here.
 And let's go to set an account with that email already exists. So that's where you find one.
 That takes care of this.
 So if that email exists in an error message,
 that an account has previously been created.
 If the email is not in the list,
[02:44:38]
 create a new account in the database,
 on a successful sign-up automatically logging the user like setting the proper
 re-lex theme. So this one will be automatic. Our back end is already
 used this for us. We tested user. If they sign up successfully.
 So this is the part right here. So how do we log them up? Log them in. Basically just set the
 read up state
 set
[02:45:32]
 Google account I think
 As my account is global
 And you look at my screen frame.
 You can hold the count right there.
 Set the blue.
 Count.
 See the count? That's going to get an action.
[02:46:07]
 Then we're going to need to discuss that action. [no audio] We're going to try a new email and that doesn't exist in this list.
 I already did the test board so we shouldn't work.
 That's really black. I'm going to check the email in the password, and then handle the sign-up attempt.
 If everything works fine, I should get in account.
 So if there's an account, lock them in by setting the proper read-up state here.
 Basically save the blue-hole count, and we, I mean save this account in the global account.
 Okay so it's signed in but then there's that issue with having to click the buttons and it's stuck in this modal mode. So I should, I'm gonna basically just copy the copy and paste the
[02:47:52]
 code from the floor, but I should probably, I should probably, I should probably put it out or re-factor it to a difference.
 Re-factor it to a different function.
 So I don't have to copy it.
 Here, put this one.
 This one takes care of it
 close button [inaudible]
 [inaudible]
[02:48:54]
 [inaudible] and it's actually this one is actually fun.
 I think it's fun.
 Okay, so the breakout ones are back.
 I'm going to just conclude the past here.
 So we got up to, uh, this is not the practice.
 But so the breakout rooms are back and inclusion.
 We're almost done with the readout signup practice.
[02:50:07]
 I can continue that on Monday.
 And make sure you mark your attendance. You have four minutes of Mark your attendance.
 Other than that, class is dismissed. That's the days that's just weeks theme on capstone finale. I'll stick around just in case anyone has any questions.
 If you need to help with anything.
 Otherwise have a good weekend, but, you know, it's crunch time, so
 trying not to have a two good weekend.
 If you're if you're burnt out, then you're arrested a little bit, but you should be able to
[02:51:03]
 get back to work.
 Especially if you have a lot of catching up to do, no time to rest.
 So yes, once again, 15 minutes, just in case you need to. [BLANK_AUDIO] [ Pause ]
 >> Alexander, you have any help anything?
 If you're coding, I can watch a code
 or are you stuck on anything?
 Have any questions about the corrections?
[02:53:02]
 Are there Are you there?
 Yeah, you can see your typing.
 If you're saying something, I can't hear it. [ [ [wind blowing] [BLANK_AUDIO]
 Is there yet? [wind blowing] Okay, I'll give you a few minutes to check it out. Okay, I heard something.
 Can you hear me now?
 Yeah.
 Okay, I don't know what it was.
[02:55:45]
 I just connected the USB mic and plug it back in,
 maybe the cable is loose.
 Yeah, I'm trying to finish off the backend account.
 So I'm not, the create ones and the read one,
 read stuff works now.
 So I'm on the update one, but before I can actually finish
 the function, I have to finish writing the tests.
[02:56:06]
 - Yeah.
 So it's a lot of tight-roofed curves that create
 one thing in wasting time to figure out how to fix them.
 Okay.
 Yeah, well, the tight-roof error is like if it's wasting
 what's time to put any, if you can't figure it out
 like within a few minutes, just put any.
[02:56:29]
 But what you should do, I think, is your capstone is not
 rendering properly because it's still trying to use an API
 that's local host instead of your instead of,
 which one is it, instead of the one that's deployed in lambda.
 Right.
 Like, but do you have one that's deployed in lambda?
 I think you do.
[02:56:59]
 And on your my capstone, I can't get past these stupid tests to get there.
 And I still have to do things in order.
 And then by the time I get to the part where
 I've already done the lecture on that,
 I can't remember how to do it anymore
 'cause I've already done it in the sandbox
 and then I have to go back and relearn everything.
[02:57:21]
 That's what's taking me so much done it.
 - I see, okay, well I can walk you through some things. So
 right now, I'm better at the tests. So now, like the tests are, I won't say they're easy,
 but they're not as hard as they were. Yeah, that's good. If it's working in the sandbox,
 then all you have to do is just, to do is just change some things to make
 it work for the capstone.
 So, I gave you screenshare.
[02:57:54]
 And so for lambda, you're back at--
 >> But I'm not in my grand, so wait a minute.
 I don't know what branch I have anymore.
 And now I've got--
 It says, I can't read it right now.
 It's blurry.
 Capstone back.
[02:58:12]
 It's smaller.
 That the bottom left fixes the fixes.
 Yeah, I'm in this case branch.
 OK.
 This is the branch where I'm fixing the back end
 capstone assignment. OK. OK. But I haven't committed this work yet.
 Okay. Well, what else do you need to fix?
[02:58:32]
 On here, I need to fix to update and delete.
 Okay. So update user account.
 So if it successfully updates, you wanted to give you a message.
 Yeah, I was about to write the message when.
 Okay. I have to change this message.
 Email address, may have to change the test.
 Email, no record was found for this.
[02:59:20]
 Email address.
 An account must be created before it can be updated.
 And I'm seeing all kinds of cool ways where it could in the future,
 not in my portfolio, but like, you know, if there no account was found,
 my modal could pop up and say, "Hey, you know, if there no account was found that my
 model could pop up and say, hey, do you want to create an account and then go
 into the client thing, but that's way too complicated for this. Yeah, I just work on
[02:59:53]
 the minimum requirements, but that's something I could work on in the future.
 There's some ways.
 Way far.
 I'm not so.
 No, I mean, it's something I designed for the office of motor vehicles where they have a thing like that.
 I didn't write the code, I designed it. There's different.
 Yeah.
[03:00:19]
 So, there's more.
 There's more.
 There's more.
 There's more.
 Yeah, I'm trying to think of what the other tests were, because I just copied the, I copied
 some other test files to make this one.
 So, up to a C-count successfully throws an error, the email address doesn't exist, because
[03:00:34]
 there's no account.
 Throws an error, it will get email.
 That doesn't, it's not a valid test because that's a great thing.
 I don't know what's it says.
 You need it or change it?
 Well, if you're not sure, then you can just delete it and then just make up something when you think of something.
 No, I don't want to delete the test. I just want to skip it until I, but I only, I can't think of any more tasks for update because the only thing that's required to update is the email address. You could, you could just, oh, I don't want them to be able to change the email address. Yeah.
[03:01:17]
 Because the email address is I'm a key. There's an error. It user tries to update email address.
 Email. I don't know if that was time.
 Thank you.
 OK.
 I don't know if that's possible.
 Should not be updated.
 Because if you provide an email, I got one.
[03:01:40]
 They really can't change it.
 Yeah, that's what I'm saying.
 So they shouldn't be able to change it.
 I mean, like, if you put a different email, it's not going to be found.
 Oh, that's true. It's not going to work that way. You're right. You're right. You're right.
 That would work if you tried to use the primary key.
 But I had to delete the user ID, the created in the active column.
[03:02:11]
 The old from the user account because it was causing too much complication.
 So.
 I simplified it down to just these five fields now.
 Okay.
 Well, you could.
 I would either comment out that test or delete it since. down to just these five fields now. - Okay, well, you could call that.
 I would either comment out that test or delete it
[03:02:27]
 since you're not gonna use it anyways.
 And you could use it a couple of years.
 - There's no test for that, they're all gone.
 Like I've taken everything related to that away.
 - No, I mean, like the one that you're editing just now.
 Like it's--
 - Oh, no, I wanna use,
[03:02:43]
 but I wanna use this data for a valid test. That's the thing. Okay. Well, let's look at the other test and see if they they make sense.
 Well, missing a username doesn't make sense because
 You can use not
 Okay. In fact, you never update your username theoretically, but
 I should never update your username theoretically, but
 There's an error. Okay, well what's the other test that you have?
 Oh, try the chains are username, okay
[03:03:19]
 I don't want to change it There's an error for an invalid email format. That's a legit test
 And I already know how to write that test because I'll have that test in the create one with the red jacks.
 - Okay.
 - So it's F5, one, two, three, four.
 That's five tests.
 So I just need one more test to put here that I can't think of.
 - Email is empty.
[03:03:47]
 - Yeah, I Have that test.
 Our password is wrong.
 Our password is wrong.
 Oh, yeah.
 It's password incorrect.
 That's better because I already know how to write email as empty.
 I should learn how to validate password. So still continue writing the test with the proper assert.
[03:04:14]
 And proper arrange.
 Your pass account records sound with a stimulus. the password provided is not valid for this account.
 Make sure the password is wrong.
 Go back up there and put a different password.
 Is that the wrong password?
 I have no idea.
 Wrong password.
[03:04:51]
 Yeah.
 And the email should be valid though.
 Oh, wait, no, that's the.
 Is the other one.
 Update is a mean.
 I think you picked the wrong password for that.
 Okay. All of this test data is not valid for this test. I'm going to have to go through and check all the test data anyway.
[03:05:17]
 Okay. This is go back to the wrong password one.
 Okay. Wait. we're moving.
 I'm like, okay, there it is.
 Okay.
 - This test is valid, but the name,
 okay, so here's my problem is,
 if I wanna update only certain fields in the account,
[03:05:42]
 do I have to send all of the properties?
 That's your choice. You're deciding what to have. I only want to update the phone number,
 for example, then I could just send that. You see, no, eight yells at me. Yeah, and then just put any.
 Oh, for you here, any. That's what you were saying or that makes more sense.
 Or you can put question marks to mark optional fields.
 I works. I've been doing that in some other places.
 I would rather do the question mark.
[03:06:23]
 Easy easy. So I can put out question.
 Yeah, put it in the, no, you need to put it in the, the, the, the time.
 The data time.
 Oh, in the user account.
 Yeah, user account data time.
 What happened in a name named as weird.
 I must have deleted it by accident.
[03:06:56]
 Okay, fixed that. And so doesn't like, can I just send it?
 Oh, you use your account?
 No, it should be fine.
 Something happened. Maybe it's not importing the correct user account.
 It didn't save. There's no question marks there.
 I know, but it's imported up here. It's been importing the correct one.
 If you changed it, it looks, the, uh, the question marks are gone. Click on user account. The question marks are
[03:07:50]
 gone.
 Okay, that should be fine now.
 Okay, so the other ones.
 You know, maybe update the front end when my accident.
 I did.
 Somehow I had to front in one open.
 What was good because they need to match, but that's fine.
[03:08:20]
 Okay.
 Somehow I did the front end one by mistake.
 Coz it's.
 - Thanks.
 - So it's working.
 So the types work there.
 - That's.
[03:08:29]
 - Okay. So this one is the test.
 Let's look right.
 Finish writing the test.
 - Okay.
 Stick on.
 If the user tries update username.
 So I don't need to update this.
[03:08:44]
 Got. I have to use the name so I don't need to update this.
 I have to use the names and I have to change.
 Okay, but at this point then I could solve this entire problem if I just didn't display the username field in the component for update. But this is the backend. So I can still test it on the backend.
 And then to solve the, you need some redundancy.
 What if someone does make a field for a username in the front end?
 Well, you need your backend to double check that.
 >> I'm just copying the same message for the invalid email from here.
[03:09:51]
 Where does it go? Okay, that's done.
 Um,
 Sure. [no audio]
 Okay.
 Thank you.
 This is an external resistors.
 No record is found.
[03:10:19]
 This email address.
 You know that.
 I could read that. I could try to update something that doesn't exist.
 And I just need to go ahead and produce one. That's probably not a valid one.
 Where's the line?
 one. There's black.
 Nope.
[03:10:45]
 Here's
 two
 different.
 Why it keeps two minutes when I placed the next case. Boom.
 Okay, but I want to send the new password.
 And the name is your name.
 I'm just going to be harder because I just sign it up so that they can't change their passwords for now because right now you're validating their password.
[03:11:41]
 Right.
 That was what I was worried about.
 I was about to say that then I was like, okay, so does email.
 So we've written that password as the question.
 But it's required that they put in the correct password because you don't want to just be
 changing when someone's account if they just provide their email.
 Like, if I have your email and I your email and I don't know your password,
[03:12:05]
 that can go and change their account information.
 - I'm gonna take the--
 - Because I'm testing a username in the other test.
 Basically, you want to validate the password
 to see if they have authorization to change the account.
 Okay, so it looks like all the data should be good.
 Hey, there's some errors here.
[03:12:37]
 Fallen can't be zeros. Why?
 Check if there's a right number of zeros.
 Then eight nine ten. Oh, it's a right number of zeros.
 Then eight, nine, 10.
 Oh, it's an actual number.
 Just put some like a number.
 Zero zeros.
[03:12:51]
 Because it was not a zeros.
 Not by itself.
 We can start it with one.
 Five, four, eight, nine, two, three.
 OK.
 That looks good. >> Oops.
 >> I think the phone number will come in.
[03:13:12]
 I think the phone will come in as a bring inside a good number.
 >> It's a number in my function.
 >> Okay.
 >> It's a number in the database.
 So they were able to go where it works.
 It's when the data gets transferred from the front end to the back end.
 It gets it comes in.
[03:13:36]
 I mean, you are they invited as a number, but it gets converted to a string.
 Everything gets converted to a string when it goes through.
 Okay, but I haven't finished over here in the function yet. Okay, yeah, let's fix the function.
 You need to use the update. it. This part's to read that we wrote the other day where we're reading the account
 first. If it exists. And then I am not evaluating the password here.
 >> Yeah, you don't need to.
 >> You don't need to.
[03:14:36]
 >> Yeah.
 >> Okay.
 >> We're not authenticating.
 >> Yeah.
 >> There it goes. >> Okay. >> Are we telling you? >> Oh, no, I guess. Okay.
 We're telling you.
 Oh, no, that's not right. Just send the request in.
[03:14:53]
 It didn't work.
 Just put the request object.
 It gives so errors. So this is a type error. So there's something missing. Yeah. When I put get command it puts the error away.
 Oh, no, send. It's not that you're not supposed to use a send method there.
 Oh, I mean, suppose he's the get method. That's why. Okay. Let me fix this one then.
 Because do I have the send method in this one too?
 Where is it?
[03:15:32]
 I do.
 I don't know why.
 I don't know where that came from.
 I think I had to get method in some things since X error was happening where I forgot
 to change the send and whoever was helping me which could have been an AI at that point decided that that was the right syntax.
 And so I very, very strongly no longer trust to AI to even write code of its own anymore, because it doesn't do things that make sense. It does things that don't make sense.
 But I don't really need to return anything to the user.
[03:16:14]
 I can just console all of this.
 Or I can reach out.
 You need to.
 No, you need to follow the tests.
 Yeah, but the tests. Yeah, but this is the same test. The test part is just a paper.
 Yeah, but I mean, that.
 No, wait, open the test.
[03:16:37]
 The test.
 Okay, so, and so you're looking for if it exists, right?
 Or if it doesn't exist, which one do you want to check for first?
 I'm checking that it successfully updated first.
 Okay, that's just okay. We'll take the happy path.
 The happy path means everything is going well.
 I was going to do the happy path first and then I go to the other.
[03:17:02]
 Okay. Yeah.
 It's right.
 Because usually the happy path is the easiest one. Most of the time. go to the other. Okay, yeah, that's why the easiest one most of the time it is the easiest
 or someone that you expect so
 wanted to expect. Yeah, maybe not the easiest. So you're not going to use
 yeah, comment that out even the get method right there because
 >> Yeah, comment that out, even the get method right there, because maybe you're not checking for it yet.
[03:17:27]
 You're just going to go straight and update it.
 So you need to use a create a correct request object there.
 >> Any way.
 >> You need to correct the correct request. >> Yeah, it needs to be the correct request.
 Yeah, it needs to be the correct one.
 So yeah, you need to key first and then you need the properties after.
 So do you know?
[03:17:55]
 No, you don't have a target email anywhere.
 Where's your email going to come?
 Where's the email going to come from?
 At this point, no, because this is the back end and we don't know what's on. email anywhere. Where's your email going to come? Where's the email going to come from?
 At this point, no, where, because this is the back end, and we don't know what's on the end yet. So the happy path says that if someone uses a function, they're going to be sending
 the parameters in. Where do you, where do the parameters come in?
 Where do the parameters come in?
[03:18:27]
 On the component, on the front end. No, I mean like in this function,
 where do the parameters, where are the parameters?
 Online 32, right?
 9 13.
 That's the parameters that's gonna come in.
 So I'll be user account.email.
 Yeah, that's where the email will come from. >> Me too, with these.
[03:18:50]
 >> Okay, that looks good.
 Do we have that key?
 And then we're going to perform the update.
 >> No, you need to provide the update information in the request.
 So this would probably be another item.
 You should double check.
 The update demo to see how to properly form the request.
[03:19:23]
 That's how my other screen.
 Don't just guess there because yeah, that was the attribute of baseline.
 Okay.
 So I don't want to take the password.
 I'll update the name and phone name before the comma.
 Yep, I was missing a bracket. There we go. Okay. So name, but the value is going to be the squiggling thing.
 We're not easy recount dot name.
[03:20:25]
 I'm getting it.
 It's just taking me longer than I want.
 Okay.
 That works.
 And then return.
 Well, do the request first. I mean send it, Do the request first.
 I mean send it send the request,
[03:20:47]
 but you're not going to use the send method.
 You're going to use a different method.
 When he's the put method, if I remember correctly.
 Maybe they can. I'm going to use the update method. So if everything works right, then what should be what you do be returning according to the tests.
 Okay, so there's a time error because you didn't put string in the return in the function
 signature.
 And the find the other one of the options that in your tests.
[03:22:02]
 It was for the other. It was that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one that was the one was the one that was the one was the one that was the one was the one was the one was the one was the one was the one was the one was the one was the one was the one was the one was the one was the problem. Yeah, that's fine. Yeah. So this one there all streams are in the
 cup coming through.
 It passed.
 Okay.
 There's a there's a typo there on line seven.
 On this.
 Why is there a typo on that?
[03:22:53]
 Oh, I'll let the dot.
 I can't see.
 Okay.
 All right.
 So the next test is.
 If the email address did not exist, which I have here.
 No, that's not the balance for empty email.
[03:23:23]
 Yeah, that's how I treated not exist.
 No, what you what you mean is that the email account
 that's not that.
 Hang on. I thought I had one of those in here somewhere.
 I might not have tested it. I thought I was testing it.
 For an already existing email,
 I said, oh yeah, does not exist as a totally different test.
[03:24:03]
 Okay, so, but with similar, similar, uh,
 structure. [BLANK_AUDIO] [ Pause ] So how do you check if an email exists in the database?
 I'm wondering now right now.
 So I would have to use the get command here to read the thing.
 So then I wouldn't need the second.
 Yep.
 Yeah, it has to go. No, I still need the license client.
[03:25:41]
 I mean the new client definitely needed.
 So then.
 Yes.
 Yeah, move that down.
 Yeah.
 It's down.
 Or even after the.
[03:26:03]
 I wasn't going to put it after the get input.
 >> Yeah, after the request.
 After you send it, after you get a result, basically.
 >> Yeah.
 >> You have to get a result first.
 Send the request.
 You have a line for it already.
[03:26:21]
 It's commented out.
 >> Yes.
 >> It's a line 27 it already. It's commented out. We have a blank 27, 28.
 So your Boolean has to do something with a result.
 Read result.
 Julian has to do something with a result, read result. You imported something on 9.10 on accident.
 No, that was, I don't know where that came from.
[03:27:01]
 That's mess.
 The, uh, it's going to be read result that item. Is that's where your items come through.
 You always get a result from.
 From the get that.
 Oh, it was right. Okay.
 That's how I did it in the read one.
 Okay, let's try it now. I think it'll work.
[03:27:47]
 Yep.
 Maybe, maybe put that comment on line 25.
 Put it closer to where it belongs.
 I'm going to put it belongs. I'm gonna put it on 9/16 because then I'll just put all that stuff on
 in and I'll put a new comment down here that shows update account information.
 I like to comment my code because otherwise it makes no sense.
 I like to comment Michael because otherwise it makes no sense. Thank.
[03:28:27]
 Why is this having a thing you're hearing here?
 I think it's wrong.
 What you can do is just turn it into a separate function.
 But yeah.
 That way the name of the function is the comment.
 If you have a function called update account information,
 that's your--
[03:28:49]
 >> This one's contact.
 >> That's your account.
 >> For example, on line 30, you have a comment that says
 data account information.
 But if you had a function called update account information,
 and it did all that stuff then your function would be
 also in the comment.
[03:29:09]
 Oh, just making another function for that?
 Yeah, but you don't have to do it.
 I was just providing an idea, but you can do it like this.
 This is fine.
 With a comment.
 If I feel like I have to put a comment like that, I usually just turn it into a function.
 But it's OK.
[03:29:35]
 You can do it like this.
 If for now is good, in the future, I can do that extra word.
 So response is not doing anything now though.
 Yeah, because usually when response comes in, it, it, everything is fine.
 So you don't really have to get, get a response. I just, I just quit the way.
 Yeah.
 Because that's how you want to actually want to check the response and make sure you get a status of 200.
[03:30:10]
 Well, I might need you for the next test, but for now, for this test, it works.
 The way it is.
 Okay.
 That's a wrong test. We should be looking at.
 I mean, this one.
 So the password is incorrect. >> That's the wrong test. We should be looking at. >> I mean, this one. >> Yes.
 >> So the password is incorrect.
[03:30:31]
 Row and error.
 So I guess that would have to happen before the update as well.
 >> Yes.
 You can put a comment there.
 So, technically, I could take this client up here out of the loop. No, you need the client. Oh, yeah.
 No, I need to call a new client every time.
 No, no, no, no, that's no, don't call it.
[03:31:16]
 Just every they'll all use that one.
 That's what I'm saying.
 If they're all using it, it could go outside the loop.
 Yeah. Technically, there's no loop. There's just a comment. It's a section.
 We'll take it out of that system.
 And we'll request read is its own section too.
 Okay.
[03:31:37]
 And it's whatever they're doing with the results. So.
 Yeah. Okay.
 Oh, but if I call read result again.
 You don't have to call it again. You'll get all the information there.
 You can get the password from there.
 Yeah, that can all go up here.
 That's good. Why did this? [ Pause ] So this is going to be more problematic because I did. I took it away. So it was like, yeah.
[03:33:26]
 Okay. No, how do you check as the password is correct?
 Yeah. That's it.
 Okay. Now you can run the test.
 You're going to run all the tests. You didn't put only.
 No, it's right now.
 I let it run all of those tests on purpose.
 It passed the first three tests.
[03:34:20]
 Okay.
 So the next one is oops.
 Is it typo? [BLANK_AUDIO] [ Pause ] [no audio]
 [no audio]
 [no audio]
 [no audio]
 [no audio]
[03:36:01]
 [no audio]
 [no audio] [no audio] I think you want instead of checking read result.
 I think you wanted to check.
 >> I want to check users.
 >> Yeah. That's true.
 >> Yeah. [BLANK_AUDIO] [ Silence ]
 >> There was four developers.
[03:37:14]
 I was so nitpicky on the error messages, being explicit,
 so that the user would know what to do.
 >> Mm-hm.
 Well, this part is right for the developers.
 >> This part's for the developers, but no, every time I work on a project and the developers
 just write like, "This was that," and I'm like, "No, no, no, you have to tell them
 in plain English what the problem is and how to fix it."
[03:37:38]
 You can't just tell them what the problem is.
 They're not going to know how the users don't know how to fix stuff.
 The worst of it was getting the errors back from the mainframe written from 1970 to 2013. '39. '19? '39. I think there's something wrong there.
 It's not. >> Yeah.
 >> Okay.
 Let's run the test.
 >> I think it's still failed.
[03:38:24]
 >> It passed. I think it's still failed.
 Wait, something else happened.
 The first test, the first test now failed.
 Probably because it's test data.
 Okay, yeah.
 This specific test data. Okay, yeah, this specific test data, that email address may not be in the database.
 Let me see. Yep, that email address does not exist in the database. Let me grab a different
[03:38:56]
 address.
 Yeah. [BLANK_AUDIO] [ Pause ]
 >> Still failed.
 [ Pause ]
 >> Wait, what happened over here?
 >> Something don't worry about that.
 That one's done.
[03:39:46]
 It's because the other one is failing.
 >> No, but this is not a valid email address.
 >> Oh, that's not okay.
 >> This is the one that's failing.
 The updates to valid information.
 >> Yeah, there's no app symbol there.
 >> I see that, but that email doesn't exist.
[03:40:07]
 Okay.
 The email exists.
 Something happened in AWS just taken you out.
 All right, I will just use.
 Really.
 What is this one?
 Because I know this one.
[03:40:23]
 Up. [ Pause ]
 >> Pathowards should be matching to.
 >> It's the correct pencil. Oh, okay, it's tripping the username password on that test, even though I'm not updating these or naming.
 - 'Cause you put,
 that's the name that's not easy.
 - Yeah, 'cause you put, or put a debugger there on line 36.
 Put a debugger there.
[03:41:27]
 Yeah.
 Like right on line 36 or right before it.
 And then after it also.
 You can catch it.
 Oh, I started console logging and stuff because it was easier.
 Oh, OK, yeah, you can do that too.
 I'll just run a debugger for now because that way, I didn't have to go through the debugger and I could see it immediately and attached to result what the error was.
[03:41:57]
 Okay, we went and it says wait, I have to open a debugger.
 Yeah, and start the test in that terminal instead.
 Wait, I just opened this and will never history or call.
 You should just be able to put a red dot instead of the bugger, the word the word debugger. >> Well, I have now opened it from the workspace.
 I haven't tried to do that since.
 So we stopped there.
 >> Okay.
[03:42:33]
 >> So we know.
 >> Okay.
 >> So let's put only one.
 Okay. That's going to be the first test.
 Okay. So we know that there shouldn't be a username.
 I mean, yeah, there shouldn't be a username in there.
 You can verify that.
[03:42:47]
 Check in the side handle.
 In the next section, it's not in the local section.
 It's user account at the bottom.
 There's no user name there.
 Okay.
 So in that case, user name is undefined.
 And is username entered defined?
[03:43:31]
 No, it's right because we have it. We didn't run that line yet.
 We're trying to remember which step step into.
 Yeah.
 It's still undefined. Well, it hasn't finished yet.
 It didn't run the line yet.
 Okay. It's still undefined. Or hasn't finished yet. Did they run the line yet?
 Okay. No, true.
[03:43:49]
 Well, where is it?
 The line is wrong.
 So, yeah.
 Basically, you have to fix the line, Jack.
 Something is...
 I'm going to take the bore out for now.
 Okay.
[03:44:04]
 I don't want to have multiple variables there. Something is I'm gonna take the ore out for
 Okay, I don't want multiple variables there
 causing problems so the logic is wrong so
 But undefined instead instead of empty string ah
 That makes sense. But it's also possible that they could put an empty string, but, you know, that's for a different
 test. Okay. That looks good.
 And press play now.
[03:45:10]
 - I did. - Let's look at the results.
 - He still failed.
 - Okay, let's why I did it failed.
 - This time he says the password.
 - The password is wrong. - No, no, that's the wrong it fail. It's time it says the password.
 No, no, that's the wrong test.
 That's the update.
[03:45:29]
 I exceeded the time out.
 So I just press this replay and then it's
 just press play through it.
 It's not there.
 No, it's just exceeded the time out. Just this, you could take out the debuggers.
 And play to, or play, yeah, play through it. >> Yes. >> Okay. >> Okay. >> Okay. >> Okay.
 >> Okay.
[03:46:06]
 >> Okay.
 >> Okay.
 >> Okay.
 >> Okay.
 >> Okay.
 >> Okay.
 >> Okay.
[03:46:13]
 >> Okay.
 >> So, this is not working.
 So why is it telling me the password is there?
 >> There is a user tries update username.
 So that's another test.
 >> That's the test we were just working on them.
 >> Okay.
[03:46:22]
 >> Oh, okay.
 >> Oh, yeah.
 Okay. >> I'm not going to put in the right password. >> Yeah working on them. >> Okay. >> Oh, yeah. Okay.
 >> I'm not a student in the right path.
 >> Yeah, the password.
 >> Okay. Let me just use the known one.
 If I want to log back in to AWS, I have to go
[03:46:36]
 mess with the authenticator app and get the code and
 expand on this.
 Okay.
 >> Okay.
 >> Oh.
 >> All right.
 >> So, I'm going to do that.
[03:47:01]
 >> Okay. back on the debugger.
 Okay, one more test to go.
 Yeah, we haven't written this test yet, so.
 Okay.
 Whoops, what the nook, I'm just trying to make it smaller.
 Stop scrolling. And tip the bug is out before I forget.
 And you should just be able to put a dot instead of typing those in.
[03:47:36]
 Yeah, I'm going to try that next because I haven't.
 I'm going to go on the cell.
 Yeah, I already did that at the top so that there's not even try to get, there's not even trying to, because if this is the wrong format, you don't even want to talk to the nice client
 yet.
 I would even put it in this one.
 I would do it after the email exists because the email exists.
 I think we're still going to talk to the nice client. So, should I just going to say the password doesn't match? Probably what we see is a disarray.
[03:48:41]
 we see. I said this, where in it.
 It says no record was found.
 Yeah, that too. [no audio]
 All of them passed. Thank you.
 For some reason, I find this one harder to be than the create one.
 The create and the read were much easier. - Yeah, 'cause update, you're gonna check for,
 if it exists and if it does exist,
[03:49:29]
 you some other stuff.
 - Well, I mean, I checked if it exists in the create one too.
 - Okay.
 - It was good.
 - Yeah.
 'Cause I don't wanna create something that already exists.
 And DynamoDB doesn't validate
[03:49:43]
 with your primary key already has the same value.
 It lets you duplicate it. It's not handled this way. Okay. So just get me to set it.
 You can come with that. Good committed, but it's not done yet.
 Oh, it's not that. No, I still have to do a piece of that.
 I just have to fix it. Yeah.
 I can make it for everything that I fixed that I haven't yet committed because it's
 everything. And I had to make, yeah, I had to make the process. I had to make. Yeah, I have a way to.
[03:50:26]
 In the process, I had to fix some of the front end items related to this as well. So they've got so six.
 Um,
 but,
 they have to use her account.
 No, this is read. This is create. This is updates all in my branch. I can't I can't have another 35 branches just to fix this. That's
 Already have over 40 branches and the thing
 Fixed back in front and
[03:51:01]
 dynamo
 Actually, it's
 crude. So this is all fixed.
 No, it's not all fixed. I'm just going to recommit with another one. Okay, I'll just say
 crude. I can do it that way." It's a thing.
 "Kruh."
 "Kruh."
[03:51:28]
 "Kruh."
 "Kruh."
 "Kruh."
 "Yeah."
 "That's silly."
 "Yeah, create is done, read is done, I had to fix the routes.
 I don't know if the routes work, but I did fix the routes."
[03:51:40]
 "The routes at least have no TypeScript errors.
 Whether they work or not is questionable.
 Where do you want me to command? I already command it. Go away.
 I'm afraid to merge it to the main, yeah, because it's not done. Yeah, don't merge anything to the main, let's, until you test it here in this branch.
 Yeah.
 And if everything's working fine, then you can merge it.
 Okay, so I saw the fixed update route.
[03:52:24]
 And I fixed the update route. I had to put in as unknown as
 user account in here because TypeScript was having the HSE fit. No, you don't need to,
 you can erase those. It yells at me though.
 - Yeah, it screams at me.
 It doesn't let me fix it.
 - No.
 - Const user account.
[03:52:54]
 Why does it say that?
 Okay, just put user account.
 Put user account at the end as,
 just put it.
 - I tried to.
 Yeah, that doesn't work either.
 A yells for that too.
[03:53:08]
 Unless it's not.
 It's not.
 I'm not.
 But it didn't.
 I tried.
 Oh, yeah.
 All right.
[03:53:13]
 Let me see.
 What is it?
 It is. I'm there.
 Yeah.
 Pars cues is the same error, but with more text.
 And that's where it told me to convert it to as unknown first.
 OK. All right. And that's where it told me to convert it to as unknown first. Okay.
[03:53:28]
 All right.
 Then I guess you can just go ahead and do that then.
 I don't have no idea.
 I don't know enough timescript.
 What you could do is what you could do is just put many user account is any.
 Maybe and then. and then online 11.
 Any.
[03:53:51]
 And then online 11, but as user account.
 That might fix it, but see.
 That is not no to try at the sign.
 No, but as.
 Oops, easier account.
 - Yeah.
 - Yay, don't.
[03:54:17]
 - That's clear.
 - That means more sense.
 That's much cleaner.
 Only fits the other one.
 Not this, close that.
 I'm gonna add to close things 'cause don't want to start taking the coin. Yeah, you only use a colon when you're declaring something.
 When you're done declaring, and that's when you just ask. as.
[03:54:55]
 I'll see the number line number 11. You should take it from user account instead of query.
 All right, oh, sorry, not taking the target email anymore.
 - Okay, yeah, so I don't take the target email, I don't need this whole line here.
 Oh, yes, I do, apparently.
 - Read account, what does that require?
 - I think, read account means that I'm trying
 to read a specific account, So I need the email address.
[03:55:26]
 Right. I don't know. You have to look at it.
 This is the route for the read.
 Easy account. Yeah, let me open the function and what does the function need?
 It can just mouse over it and you can see it too.
 It needs an email. Only.
 It does need a target email.
 So the way I had it was right.
[03:55:54]
 So instead of getting it from query, you can get it from user account or you can just delete the delete line 9 or commented out.
 Oh, it's coming.
 There are old comments.
 Is that right?
 Yeah, it looks like it's right. >> Yeah. >> You're providing an email and the function is >> This is an email.
 >> This is a target email to do all of the stuff over here.
 >> Okay.
[03:56:41]
 >> Yeah, this is where I got very specific and I checked that when things were blank, I checked
 for blank null and undefined, because not knowing which way it was going to be.
 That was a pain.
 So theoretically this route ought to work now.
 And then I just have to read this route.
 Does that read route?
 Does it check for password?
[03:57:13]
 Patching?
 No, I don't think so.
 No, that's that becomes a security risk.
 That means that they just,
 if anyone provides an email,
 they'll have access.
 It does.
[03:57:26]
 But then I have to monkey around with all of this over here,
 and I couldn't figure out how to do that when I was writing.
 - You can just check if the password's match.
 Is there gonna get the account information?
 - Oh, wait, no.
 You have to provide the,
 instead of just taking in the target email,
[03:57:49]
 you can just take in the whole user account.
 - I don't want to take in the whole user account
 for the authentication though,
 'cause that means that somebody's gonna have to
 type all of their stuff in.
 - You don't have to use it all.
 This seems what you need.
[03:58:05]
 - I've just taken the whole user account here.
 Yeah, and then just take what you need.
 It doesn't like me.
 You can get, oh, because I have it here.
 Wait, now I have to re-write stuff down here.
 Okay, so if I'm doing anything. >> If you're not finding.
 >> Yeah. If I change this, then I'll just change everything.
[03:58:54]
 >> Yeah, that's fine. You just extracted extract target email from user account.
 No, that, okay, that works too. Yeah, there we go. The user account down there, user account.password,
 like online 21, I think what you want to check there is read result instead of user account.
 Yeah, I do. So I think that's what I was changing.
 I had to change the read result
 'cause I had the read result used to be called user account,
 but now that I've put user account as parameter,
[03:59:35]
 I can't use it down here for the variable.
 - Everything long-term needs to be changed to read result.
 - Yeah, now everything needs to be read result.
 Now everything needs to be re-released out.
 Not that.
 Okay.
 So you can fix a route and pass in the
[04:00:04]
 object instead of just the email.
 You don't have the object yet, but you're gonna get it.
 You have to extract it from the request. [no audio]
 Oh, it's that guy again. Well,
 we see no high-to-fix it, anyway.
 No, well, just put as user account.
 - No, remember it wouldn't work.
[04:00:49]
 If freaked out and then I had to do unknown.
 - I just showed you a strategy.
 - Wait, where?
 - Number.
 - Oh, to use the any?
 - No, that's not what I showed you. Just put as user account there. the search. And then we put any online eight.
 Oh yeah, that's what we did. Okay, yep. So now the year function called readuser account is getting a lot of information including
[04:01:54]
 the password.
 So you can verify the password now.
 Over here in the green user account. So you could update the test
 to see if the password is not right. Actually, the test will change because the test
 is over. Yeah, just change that to user account.
 Just select all of them with Control B.
 >> I've never received the Control D framework.
[04:02:35]
 >> I have.
 >> Press Control, not on.
 >> It pays to the.
 >> Wait, is it...
 Did it change for you?
 Like, you have a different button?
 For me, it's control D.
[04:02:51]
 In fact, do you have to highlight the thing first?
 No, you have to highlight the thing first.
 No, you have to highlight the...
 Then press control D.
 I did.
 Oh, your control D is different.
 Yeah.
[04:03:07]
 Are you on a map?
 No.
 Just check in because it could be that, too.
 No.
 So your control D doesn't work.
 I don't know.
 I don't know.
[04:03:21]
 No idea where that gets configured.
 I've never seen that.
 Did you install some extensions that changes some of those things.
 These are all the extensions I have.
 No pad plus.
 I said, "Rittier." I could be no pad.
 It's possible that the no pad was.
[04:03:41]
 Do you use that plus?
 I'm not sure if I've been here.
 I don't use that.
 So maybe you can install it.
 Oh, look, control D is duplicate selection in here.
 Yeah.
 Yeah.
[04:03:54]
 So that one's missing.
 I'm not working.
 I'm figuring for duplicate selection that then something else that is not
 this has reconfigured.
 No, this has reconfigured it.
 No, this one reconfigured it.
 No, it did not.
[04:04:09]
 Interaction is control D.
 So I suspect that pretty.
 I have pretty.
 I have pretty.
 I do not be configured the same way.
 Oh, so I just I didn't even change any button map button that I'm not be configured the same way.
 Oh, I just, I didn't even change any button map, button mapping is here.
[04:04:31]
 But I changed that in prettier, and I don't remember what I changed,
 because it was like six months ago.
 You changed some button mapping's in prettier?
 I have no idea what I've done in prettier anymore.
 There were a lot of settings in there.
 - Okay, you can click on settings.
 - Okay, the gear icon.
[04:04:56]
 Let's see, is there anything in here?
 I have me doubt that that was the thing,
 but I don't know, Do you use NotePad++?
 >> I can say I did.
 >> Yeah.
 >> But here, it's code.
 >> I don't remember.
[04:05:16]
 >> I missed it.
 >> Yeah, so I think you can un-solve it.
 If you need it, you can just re-solve it, but I don't think you need that. >> I'll just see that. >> I'll just see if you need it, you can just reinstall it. But I don't think you need that. I'll see.
 I'll see.
 I'll see.
 I'll see.
 I'm just able to.
[04:05:30]
 It's very easy to install.
 I know, but I would rather disable it.
 Because I like no pad plus plus and sometimes I don't like their text editor.
 OK.
 Well, OK, so maybe you can do control D now.
 Yeah, it does work now.
 Okay, first.
[04:05:51]
 So it was.
 Wait, now we won't fill the user account, though.
 Because you don't need to create that object yet.
 So put it back to target email so you can select them all.
 Select them all and then just rename it to user accounts. Press Ctrl+D to select all the target emails. There's two, there's more.
 Okay.
 - No, dude, it's a like them off.
[04:06:32]
 Why not?
 Okay.
 Press control D, keep pressing it.
 - Oh, it was, it was, okay.
 - Okay, now they're all selected.
 >> Okay, I didn't know you had to keep pressing it.
 I thought it was automatically going to-
[04:06:50]
 >> I know.
 It lets you pick one at a time.
 Now you fix the account object.
 It's not going to be a string anymore.
 It's going to be a user account.
 >> Yeah, I've had this guy too.
 We're going to be an object.
[04:07:13]
 We need to make an object not a string.
 User account is an object that has an email, a password.
 No, but I don't want to enter all that. Oh my god. Okay, copy it from the
 other ones.
 I can't find it. Oh, wait, I opened the function not to test. That's right. You placed the whole line.
 I was, yeah, but I need to save this login because it's the one that works on this time. The test will also check for the email.
 I mean the password.
[04:08:22]
 Do you have a correct password for that?
 I have no idea what this one's password is.
 I'll have to go fix it later.
 When I log back into DynamoDB.
 You can just pick an email that works.
 This one is called create account.
 Is it going to create?
[04:08:51]
 You don't need to include all the other information like username.
 This is the read test.
 This is just the read test.
 Yeah.
 So you don't need to include the username and stuff like that. No, I know.
 But I was working from top down in the monofix to the other.
 What the hell?
[04:09:15]
 That. >> You can copy that one all the way.
 >> I'm just going to paste this all all the way to.
 Wait, no, I can't.
 - And I have to go to once that I have because these data account,
 these accounts were specifically paid.
 - Yeah, that's fine.
 - You can just paste it underneath it.
[04:09:58]
 Paste it underneath and replace the email.
 - 'Cause this test was a pain in the butt with the data
 because I had to go make a
 specific not make but choose
 specific data for each test.
 But I don't know what this one's past
 for this.
[04:10:23]
 That one doesn't exist.
 Well, it doesn't mean the password.
 Because that's just if the yes, it does.
 Yeah, because user account requires it.
 It doesn't matter what you put it.
 It doesn't matter what I put there.
 It's testing when the email is not there.
[04:10:39]
 So I don't know how it's going to do anything with the password at all.
 It doesn't need. password at all doesn't need
 yeah, it doesn't need to
 yeah
 this one is defined if you want but
 That works because I don't like typing in valid passwords for the room further.
 Why can't users highlight the whole contents between quotes you so we computer. This one I have to go check it's password later because I don't know.
[04:11:48]
 >> Which has to be the name is not in the table.
 The name?
 >> Yes.
 >> When the name is blank.
 >> Oh, I see.
 Okay.
 >> Yeah.
[04:12:12]
 It wouldn't be undefined. It would be an actual password. Whatever it is in foreign checks when the username is not in this table.
 And no idea what this one is.
 No idea what this one's best for this.
 - Is it requiring, are you requiring for there to be a name?
 - No, well, I was initially, yes, but now I'm not anymore.
 When I wrote the test, I was.
 So now it's fine.
[04:12:43]
 I can still check if there's no name it would just give
 information it'll just say no name was found it's not saying it's required the
 message doesn't do that yeah yeah it's still a valid test
 [no audio] [no audio]
 [no audio] You don't have to put the whole path there.
 You can just put the root name, which is read user account.
 It will find that file for you. >> Just like that.
[04:13:47]
 >> No. Without any doubt.
 >> Without the task. Without TS.
 >> Really?
 >> We move to ask.
 >> Yeah.
 >> That is so much.
 >> Just a root name. Cool.
[04:14:06]
 Siri, open Google Authenticate.
 Oh, come on.
 I do not have to put this ID every day and time.
 It's the multi-button.
 Come on.
 I'm going to pass for it.
 Isn't that correct?
[04:14:31]
 Is that correct?
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
[04:14:39]
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it.
 I'm going to pass for it. I'm going to pass for it. I'm going to pass for it. I'm going to pass for it. - Absolutely. - Okay. [ [] [
 [
[04:15:10]
]
 [
 [
]
 [
 [
]
[04:15:22]
 [ [ empty password. That's good. This one is not supposed to have a new new new
 just using 24. This is not having a name. And it does have a password. It does have a
 password. If the same password, I think I got it and sounding to sound easy.
 The same password repeatedly for these purposes.
 Cause I had it was too much to try to remember eight,
 85 different passwords.
 And this one and different. Okay, that's work. [ Pause ]
[04:16:32]
 >> Wow.
 >> It's going to be a little slow.
 >> The dot works.
 It's stopped on the debugger.
 >> I didn't do any deep over there.
 >> At least it stops.
 You know it works.
[04:16:44]
 I have to put it in the dot.
 - Yeah, I'm actually done it by accident.
 There we go, all of that still works.
 - Hey.
 - I just have to finish the delete one for the thread.
 - And the update route.
 Maybe you can commit that since that's a milestone.
[04:17:13]
 You fix the read user account.
 Whenever you have a milestone, you should commit those.
 But you have to add it for.
 That's what got to add it for us too. That's about to add it again. Yeah.
 Are you cooking? No, there's the pop pop it toy that I'm just
 fidgeting with. Oh, because it sounded like someone was having vegetables.
 >> Oh, yeah. That's right.
[04:17:51]
 >> You can admit.
 >> I would like to approve process.
 >> You updated the re-user account to take in an object.
 Yeah. I'll take care of the delete because that one should be pretty easy. Well, this is a good, this was good. No, it really helped me.
 I have a delete.
 I'll take care of the delete because that one should be pretty easy.
 And I have to go and redo this route with the same logic,
[04:18:54]
 the update route to match the new logic that we did on the other routes.
 OK, so the thing I want you to do is--
 There is no delete route. Yeah, there is no delete route apparently. I have to make one. Okay, so the thing I want you to do is
 Yeah, there is no delete route apparently. I have to make one
 Okay, because there shouldn't be a conflict so right now you're
 Your front end The issue is with the front end. It's not rendering because it's it's always looking at the
 The local host when it's always looking at the local host when it should
[04:19:25]
 be looking at DynamoDB. Are you able to deploy to DynamoDB yet?
 On the front end? I mean, I mean, the back end is the back end.
 Deployed to AWS. Back end. You mean Lamb lambda? Yeah, the back end is already on lambda.
 OK.
 So the front end should be looking at either--
 --be looking at lambda.
 Apparently looking at the front end is still on the browser router.
[04:20:04]
 No, I mean, like when it's like when it's getting a quote, it should either
 look at local host or lambda. And it needs to choose between those
 as a whole bunch of stuff that's going to local hosts on the back end.
 The front end doesn't go to lambda. I haven't got that far because
 I didn't see a point in changing it when the back end,
 don't fw wasn't ready. But the back end is deployed to Lambda, right?
 I think so.
[04:20:46]
 You can try. Yes, because there's a there's a
 file.
 Okay, and do you have a, uh,
 a deployed at lambda script?
 Yeah.
 And the package that I
 json.
[04:21:02]
 Yeah. And the package that I've JSON.
 Yeah, deploy. It's going to build production and the.
 Okay.
 Yeah, so you're.
 You're.
 Lamb to URL in one of the assignments.
 Please use your send me a message that I didn't put the
[04:21:22]
 lambda URL and then I forgot to update it and then I've
 deded it with the Lambda URL last week. Yeah, so I think right now there's an error in your
 capstone because you're what I'm looking at it at the live github site. It can't get
 the code of the day because I haven't been to it.
 So God's working on this code and now it's a simple fix because all you have to do is tell it to
 contact Lambda instead of local hosts. But not from there yet to do it from your front end code.
 but not from there. You have to do it from your front end code. So, I haven't gotten that part yet. I haven't done it.
[04:22:11]
 I think it, let's, I think you should try it because right now it's like, right now it's like,
 and you've deployed something that is not production quality yet.
 So you want to, whatever is deployed,
 you want to make it as much production quality as possible.
 - So you're back to the front of the comments.
 - Yeah.
 But I want to new branch for this, right?
[04:22:35]
 - This is,
 no, you're not doing this,
 - You can do it in the main branch
 or you can do it from back there.
 It doesn't. - No, I want to do it in this branch because it's connected to this work.
 So, yeah.
 Okay, that's fine.
[04:22:51]
 So front and, are you in the front end folder yet?
 Okay.
 The part, go to the part where it gets a quota today.
 That's okay. Let's see here. Okay. So where's the axial's part? Right there. So it's contacting only the local host. So you need to let it choose between local host and Lambda.
 OK.
 You know, where did that go?
 Something like this.
[04:23:47]
 Yeah. No, no, no, it's similar, but you're not going to check process that ENV. You need to check host name.
 Something like that. So I'm going to check whether it's using the local host URL or the Lambda URL from AWS.
 The front end gets deployed on GitHub or on local.
 I mean, right?
 When you're running your front end, it's either on GitHub or on local.
 And in this case, it'll also be in Cloud Front.
 Not bad.
[04:24:30]
 You can also get something that checks.
 You have something that checks if you're running on
 any one of those.
 No, I've never done that.
 Oh, I didn't do it if it was.
 You just basically need to check.
 Like basically if you are, if this front end is deployed in GitHub.
[04:24:57]
 Yeah, that was part of the process.
 And when you just graded it, you said that I have to fix it.
 Yeah. So. Do you remember how to check if it's in GitHub,
 if the front end is deployed in GitHub?
 Was it not my root path? Might get root passing?
 Yeah, similar to that.
 We're setting to the order.
[04:25:24]
 That's in index t-s-x.
 >> No, I have a function that does it.
 I think it's a utility function.
 >> Yeah, you have a function.
 >> Get root path.
 >> Actually, root path is different.
 You can make one before get
[04:25:54]
 server maybe.
 But let's just do it manually.
 Let's do it manually for now.
 So you can get the dome.
 You can get in the get quote or in the component.
 No, you can get do it from get quote.
 This is just do it from get quote.
[04:26:10]
 And then you're gonna refactor it if you need to.
 So before you even do that axios,
 start before that.
 You need to find out what's your location.
 No, what's that for?
 No, I don't know what happened.
 Something weird happens.
[04:26:30]
 Okay, it's possible that my keyboard needs new batteries.
 We'll see.
 Okay.
 Okay.
 So,
 there's weird things happen when the batteries start to go.
 Oh, my God.
[04:26:40]
 So, the main first, get your domain.
 find your domain first, get your domain.
 That one will tell you if you're in GitHub. So if it's in GitHub, make a condition. Or maybe you can make a condition like is deployed
 or, yeah, is deployed. Yeah, it's the point works. I like that. I was going to put, I was going
 to check which environment I was going to make an environment, but environment is the main is the same thing.
 So it's deployed.
 That has to do something with the domain.
[04:27:35]
 Don't, don't, don't, don't, let's see.
 Come.
 There's
 here. [Music] You also need to make a case for a
 upfront.
 These are not to put
 eventually.
[04:27:55]
 No, but that's not.
 I'm going to make one in
 comment.
 Oh, or it's kind of fun.
 Yeah. Okay. But I don't know what the context
 of a CloudFront is. I don't know what the domain would be. Okay, then you can just
 put a to do there. [ Pause ]
[04:28:37]
 >> Okay.
 >> Okay.
 >> Okay.
 >> Yeah.
 >> That's weird. What I would do is I would put a semicolon at the end of 47 and then put the comments after
 that.
 So I colon.
[04:28:57]
 But it wasn't weird to me because I might forget to put it in the right place now, but that's okay.
 Okay, oh, I see. And I can't remember. You just put it or.
 Okay.
 All right, so if it's deployed.
 Then you need to contact.
 A different. contact a different URL.
 That would be the URL of Lambda.
[04:29:40]
 Wherever that is. I would say my comments.
 Why is it outside the parentheses? This thing hates me. [] [] [
 [
]
 [ [
]
 [ which you need to put the path. That's the fake API response path.
[04:30:34]
 No, that's not the path.
 That's not the path.
 No, that's not, but you need to provide the route.
 Like how you have it on line 54.
 Oh, oh, so yeah, I have to put the FAFCute thing.
 Would it be the FAFCute thing?
 Yeah, because it's just basically your back end server talking to Lambda.
[04:31:05]
 Okay.
 And then for this one, I will put it outside.
 But I'll just put else.
 That was. Yeah.
 No, some things are not going to respond to variable is stuck inside the if statement.
 Oh, boy.
 We have to take it up.
[04:31:41]
 If there is stuck inside a code blocks, right?
 Because of scoping holes. So the response, no, no, well, you could, yeah, well,
 what I would do is put that, put that back, put those back,
 put those back, and then on 949, make a new,
 make a response variable.
 Just put let though.
 Let me see now it's in the scope and then you just change it.
[04:32:14]
 No, this put a semicolon there.
 It's a
 TypeScript is going to have a cow.
 Then just put any if you're not sure what the response type is.
 Wouldn't it be response?
 Not sure.
 It depends on what Xioh's gives you.
[04:32:35]
 What does Xioh's give you?
 What does Xioh's give you?
 Put a mouse over the get and it tells you what it gives you.
 This one actually was.
 You see it at the end. There are mostly any.
 No, actually, it was for the process at the end.
 Amazing.
[04:32:58]
 That's the return.
 It's after the colon. So that's the return type.
 No, not promised.
 It said, "Promise in front of it." I saw it. Yeah, but you're not going to get the promise. You're going to get the, you're going to get the resolve value. This is better. Okay.
 And then remove const from line 57 because you want to use the response variable that's already there.
 Right. You can also remove the code block.
 Because that's just a one liner.
[04:33:36]
 Online 57 around line 57.
 You can remove that.
 You can remove that.
 Combine that with else.
 There.
 Only the same.
 I can go. Cool. All right. I'm not going to do that. I'm not going to do that. I'm not going to do that.
[04:34:05]
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
[04:34:12]
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
[04:34:19]
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that.
 I'm not going to do that. I'm not going to do that. I'm not going to do that. I'm not going to do that. I'm not going now before it disappears.
 I haven't actually really lost anything except for the time that I checked out something and I didn't know how to uncheck it out.
[04:34:39]
 Then they were only fake costs. They were just invisible. What you did here was switch between local and the point back end. [no audio]
 Yeah.
 [no audio]
 I think see if it works.
 This, yeah, and this is try running it locally.
 If everything seems deployable,
 run the front end and the back end.
[04:35:30]
 But you also have to deploy the back end to,
 if everything's working.
 - I don't know that everything is working, we'll find out.
 - Well, if it looks fine, then it runs and it renders,
 that might be good enough.
 - I think there are other things in Maine,
 that may not be working fine, but we will see.
[04:35:57]
 - So let's see.
 Yeah.
 So this is the backend, you can run that.
 You could have to enter two commands for that.
 And if you haven't run the build.
 - Yep, oh, that's making you, I mean, you do.
 I still want not to have seven terminal windows, okay.
[04:36:22]
 But it's, it's just a.
 No, it's not, it's not run build anymore.
 It's something else.
 No, you're in the wrong folder.
 Oh, yeah, I'm in the wrong folder.
 I forgot. >> Yeah, well, Alicia back end is running.
 The back end is running.
[04:36:54]
 Let's see if the front end can talk to it.
 Which folder's there?
 >> I was in typing because I I had activated this comment.
 I was happy.
 No comments.
 Are you pressing comma?
 So the where my hand was and where the keyboard was.
[04:37:24]
 We're not in alignment. So I kept hitting the comma when I was trying to hit him.
 It was like off by having to.
 I don't look at the keyboard when I talk but I look at the screen because my hands by now should know where these are so much memory.
 Right. But now she knows where these are so much memory, right?
 I think Webpack is still building.
 Okay, so we have a quote that came in and it's that means it's it's properly getting from the local host.
 I'm just looking to force of habits, make sure that nothing is broken.
[04:38:15]
 But it seems deployable.
 Most deployable.
 Is that pass by sign in supposed to work?
 Is the sign in supposed to work? Is the sign in supposed to work here? We're not yet.
 I don't remember if I updated that or not.
 Nope, that's not connected to Dynamo yet.
 No, no, the sign in modal is not connected to the Dynamo DPA yet.
[04:38:42]
 Okay.
 So at least it's deployable. It's more deployable now than before. So I think you should merge merge it to main and then deploy and main.
 Should I not finish the delete first or should I merge what I have.
 You can, you can merge what you have.
 Because at least it's more deployable than it is more deployable
 now than it is currently.
 It was because currently it's looking for local server. >> It seems to be merged.
[04:39:35]
 >> Yeah.
 >> We have to merge the front end.
 No, I haven't merged the front end yet.
 Or does it merge everything?
 >> It merged everything. Okay.
 Oh, but you didn't push the back ends. I didn't push the back ends, but I guess you didn't
 make any changes to that fake cues anyways. No, I did all the work that we did that I
[04:40:00]
 do down the brow to everything was all in the back end and that's never been pushed.
 that I do don't have a route and everything was all in the back end and that's never been pushed.
 Oh okay submitted.
 Yeah, you never pushed it to lambda.
 Okay, so you can push it to our deploy to lambda.
 Oh wait, not yet.
 What am I doing?
[04:40:19]
 In the end.
 When you have to build it first.
 Oh yeah, it's going to build for you.
 We're running a build yet. No, it builds going to build for you. >> We don't even build it.
 No, it builds in it builds production in the command because we fixed that in class.
 >> Oh, well, good.
 >> Yeah, I took all of that stuff that was done in the sandbox and moved it to here because I did the lambda thing entirely.
[04:40:40]
 I just didn't do the S3 in the cloud in the capstone yet.
 Okay. So it used to have deployed. I just didn't do the S3 in the cloud in the capstone yet.
 Okay, so it
 gives you have deployed more more what more more more more more more more more more okay, I'm just gonna kiss
 okay, I'm just gonna argue okay
 So let's you can push to GitHub that will deploy it
 the front end I mean.
[04:41:13]
 What you could do is edit the script. The deploy script will just be get push.
 That way it's honest.
 Yeah, it would be the.
 It already is. It's been okay free. Yeah, it would be the. It already is.
 It's been an effort for my already.
 Yeah, we do that a long time ago.
 I just forgot.
[04:41:33]
 This has been so long since.
 Stop.
 I'm here.
 I'm going to play.
 Yes.
 Okay. So if everything's working fine, you should have >> It's in settings and pages. >> I'm just checking to see the comments.
 I know where it is.
[04:42:12]
 I just before I go to the deployment,
 I always check the comments folders to see if it's done.
 >> Okay. So look at the [inaudible]
 >> Oh, there's no quote.
 >> Let's see. >> Oh, it's still loading. It didn't build the front. I did not build the front and potentially.
 Yes.
 >> So maybe include the build in the
[04:42:30]
 DePaul script.
 So at least.
 >> I would say that's not
 connecting.
 >> I think it didn't build.
 You didn't build the front.
 >> I didn't build the front and potentially.
[04:42:44]
 >> Yes. >> So not build the front end potentially.
 Yes.
 So maybe include the build in the deploy script.
 So at least I was thinking about that when I was typing it,
 I was like, maybe I should add that.
 Yeah.
 I don't have it.
[04:43:00]
 Yes, I do.
 Yes, I did.
 So before that, but NPM run build,
 and push, right?
 typo.
 A dias, a typo there. >> Aye, Bo. >> Aye, Bo. >> Aye, Bo. >> Aye, Bo.
 >> Aye, Bo.
[04:43:27]
 >> Aye, Bo.
 >> Oops.
 >> Aye, Lassadee.
 >> That's better.
 >> Oh, it's not good.
 Oh, the problem here is you need to commit it.
 You need to commit the build.
[04:43:42]
 >> You're not commit the build.
 Can I commit the front end already?
 No, the build creates new files.
 Right? It creates new files in the display. We have to make the build first before I get to land it.
 Yeah, no, not getting deployed to land. It's only going to get from the front end.
 Yeah, but get needs the new disc holder.
 Oh, that means you need to commit it.
[04:44:12]
 After I run the bill, so get to me.
 Dash and which is eating and
 I just want to say it.
 Yeah.
 What? Yeah. Yeah. Yeah.
 You build. Okay. Put a, put a slash, put a slash in front of the quotations because
 you can't have two quotations there. Yeah, put a slash.
[04:44:41]
 Oh, yeah. Other slash.
 The other slash in front of it. It's the The other slash. The other slash. In front of it.
 It's the upside down slash.
 That's a back slash.
 The other's a forward slash.
 No, in front of it.
 In front of it.
[04:44:58]
 Oh, in front of it.
 Not after it.
 No, no, no, both quotes.
 So that one's fine.
 The other one now. Oh, in front, both quotes. So that one's fine. The other one now.
 Oh, in front of both quotes. Yeah, because those are.
 Okay, this way we want to do a good ad before that. No, you need to do a good no, what a bit. Okay. So first I have to build then add then commit and then
[04:45:24]
 boys. Okay. Yeah, that makes sense. That's the order of operating
 Do I have to quote this period?
 Read it aloud. That's a license. Well
 This is really cool.
 I like typing one command and doing all of it at once.
 It's so much faster.
 Mm-hmm.
[04:45:54]
 Of course, it's going to take longer to see the results, but.
 Okay, now it seems to have done everything.
 Did it push?
 Did it push? Did it add? Did it commit?
 I want to verify that.
 It stopped. It didn't show any errors. It gave me some warnings.
 Well, those warnings are from Webpack build.
[04:46:22]
 It didn't give any errors. There were no error messages.
 But I think it might have stopped on the commit or something. There's a
 commit. Let's see there. It doesn't say anything about pushing or did it. I think it did. Yeah, let's check. Let's check GitHub and see if the
 live site says it was updated.
 Go back, go back to pages, get hub pages.
 And then you should be able to see when it was last updated.
 Okay. Okay. So that one.
[04:47:10]
 I went through. Okay. Let's look at GitHub pages.
 I can go in here and check the.
 No.
 It was the view.
 Yeah. The fake choose. the the the
 the
 the
[04:47:33]
 the
 the
 the
 the
 the
 the the >> Yes. >> You might have to press control.
 Shift control R to do a hard refresh.
[04:47:55]
 >> Nope.
 >> Excuse me, error message is in the console.
 >> What is this?
 Okay.
 >> Clores.
 No access control origin header is pressing on the request.
 >> I have to do that.
[04:48:14]
 >> No, Viana, check it.
 Type, put that URL in there up there.
 Okay, so that one says hello from lambda.
 Tape API response.
 But that one's just okay, so that one doesn't.
 Why is it only say.
 Maybe it's the wrong lambda URL because maybe that's my back end lambda.
[04:48:40]
 Let me check.
 But I thought I was pretty careful to look for the front end URL not give you back in.
 I'm in a capstone as opposed to sandbox. Sorry, say onwards.
 I'm looking for land on.
 There's another it's also checking for
 function URL test, right?
 Yeah, yeah, from lambda. That's the right lambda URL.
[04:49:20]
 But put the put the path in the route there too.
 So try that again, but put the route of
 favorite cues, the favorite cues route.
 Uh, there it is.
 Why does it say hello from Lambda also?
 Maybe it's because.
 No idea.
[04:49:44]
 If you do that for your local backend, is that what it says also?
 >> Let me grab that limb done.
 >> No, I mean, your local backend.
 So is your local backend running?
 >> Oh, here.
 >> From VS code. >> With that.
 >> Yeah.
[04:50:06]
 >> Is it ready right now?
 >> It was running earlier.
 You saw it.
 >> Okay.
 I mean, like is it running right now?
 Is it ready to receive requests?
 >> That one looks like a different number page.
[04:50:21]
 >> That is.
 >> Why are the two lambda pages? Once for the sandbox. Wait, let me check. Okay.
 Wait, so which one are you looking? We need the one for the capstone. This is the one for the light. This is for the sandbox. I have the wrong description and I have to fix that but I don't remember where to fix that film.
 From the sandbox. If you want to fix, if you want to change that, that would be
 you would change it from the zone. I don't know what you're doing.
 Yeah, they don't worry about that.
 Yeah. So let's look at the backend again.
[04:51:07]
 So local backend.
 Local backend, the backend that's running locally.
 Local host.
 >> Okay. Put the fake queues API in there.
 I mean, the route.
 Let's see what kind of response it gives you.
 It's working in the past.
[04:51:30]
 OK, so let's see what's working the other day.
 It was literally working the other day.
 So let's check out that route.
 That's why it's broken.
 Yeah, that's why it's in the front end. So Yeah, that's right. - That's the front end.
 So the back end is crashing,
 so we need to find out why it's crashing.
[04:51:50]
 That's why you can't get through to it.
 So we load these back end.
 - Front end.
 - Now it's.
 - Okay, so we're gonna, what you want to do is make a new branch, maybe, or go back to the branch
 if you're going to make changes.
 Unless you-- [ Writing on Board ]
[04:52:36]
 >> I would be naming the band points.
 That back fixes, I think.
 >> Mm-hm.
 >> Okay. And this route, that's right here.
 Okay.
 Just about it's been working too.
 Let's make sure it's in the index.
[04:53:16]
 Index.ts.
 So it's been in the index.
 Okay.
 API response. Okay. API response. Okay.
 So let's put a debugger there and plan down what's going on.
 This is your fairing with it.
 Is running locally.
[04:53:38]
 Let's see.
 see. Now that's fine, I think. You can remove those code blocks and those are just one liners. You can remove the code blocks from the if statements and clean it up a a little bit.
 Oops, something doesn't look right.
 It's fine.
 Now the L statement, put it back down.
 Oh, the L system.
 Line 40.
[04:54:21]
 What if the L system here, I guess I highlighted it a quick too fast.
 Okay.
 Okay.
 Okay.
 It fits.
 Alright.
 Shall we want to debug before we run the, let's run the, let's rerun that. Let's see.
[04:54:41]
 Run the back end. I think the back end wasn't running. Make sure you don't have it running
 in any other terminal. We also have conflicting ports.
 Any terminals is it running? This is a front end terminal.
 That's Webpack. This is Webpack terminal.
 Okay. How about that debugger one? That's a front
 end debugger there. Okay. You don't need a debugger for the front
 end. I think that was for the back end. I mean, we were debugging in
[04:55:20]
 the front end before. Okay. It can probably close that then. I did. I killed it. All right. Okay,
 let's start the back end server. And let's see if we can
 the local host one to the local host. Okay, so that's working. Okay, so let's, we didn't even change anything here.
 Try, try deploying. That one doesn't look right, though.
 Right there.
 So which one?
 No one.
[04:56:31]
 Go back up.
 Yeah, that one doesn't look right there.
 Did you press enter on that URL?
 Because the URL then press enter. Okay, so that's, yeah, that one doesn't look right.
 That one doesn't look right.
 That one doesn't look right.
 That one doesn't look right.
[04:56:52]
 The point is directly to that.
 Didn't get deployed properly.
 I can turn this debugger off now.
 Yeah.
 So.
 Let's just double check the deploy to lambda.
 Oh, where did that head?
[04:57:14]
 It would be at.
 Maybe you can try and deploy to lambda again and look at the messages.
 I mean, like from your VS code,
 try deploying to lambda again.
 I'm trying to find my lambda window that I had open.
 I think I closed it.
 That's okay.
[04:57:35]
 You don't need to look at it right now.
 Let's just try to deploy to lambda.
 You can do it from the server.
 Stop the server.
 Yeah, you can stop that.
 Okay, so it's going to build.
 Look at the messages.
[04:58:02]
 Make sure all the messages look right.
 It's not done yet. Yeah.
 It's still building.
 Says last modified five days ago in AWS so it didn't take the deployment. Does that what it said?
 Where does it say that?
 Where is this?
 Right here.
[04:58:38]
 Okay, so it's deploying to the wrong.
 It's deploying to the wrong URL.
 Ah, bubbly. I probably pasted the wrong URL.
 Yep, it's deploying to the sandbox.
 That's what that's why it's showing the capstone in the sandbox.
 Okay. Okay. That should fix it now] That's why I always validate everything on the whatever third party vendor side there is.
 Like whether it's Git or AWS, I always check there's the,
[04:59:38]
 the C if things got received.
 >> Yeah, basically, yeah, just check all of the possible sources of air.
 You can press space bar and then it skips through all the data down there, I think, or Q or space bar.
 When it allows you, you have to use space bar. It goes to the next page. I see, okay. >> Oh, reload the Lambo. >> Oh, it's good.
 Yeah, you can use a browser.
 You can use a browser.
 >> Why don't you do that?
[05:00:09]
 >> As a deploy.
 Okay.
 Am I refresh over here?
 I forgot to clear the console first.
 There it comes.
 I will refresh this.
 Well there's an error in the recorded day function then. That one's checking the local host. For some reason it's checking the local
[05:00:36]
 host. It does say that it corrected the connection error now here though.
 Here it's floating.
 now here though. Here is is loading.
 Well, let's see. There's a look right when you load up the, uh,
 the lambda URL in one of the browser tabs.
 Open up a browser tab, a new browser tab.
 I just put the left. Okay. And then I just put the melody URL.
[05:01:07]
 Okay. And then I just go to the path.
 If a fuse path, we should get an object.
 Okay. That looks good.
 So I know that's working.
 Now the front end should be contacting that URL.
 Just double check. The front end has the camera in the front end component.
 Okay.
[05:01:26]
 Yeah. Can I I read properties?
 >> Let's look at it.
 Let's look at the code for the front end.
 >> We can change the records.
 >> Maybe we've got to await something.
 >> Possibly. maybe we forgot to await something. Possibly, but it was working before I added the new stuff just now.
 Something in the news is looking at the.
[05:01:55]
 Oh,
 there's a waste here.
 Why do you get your.
 You didn't capture the response there on 52.
 >> Oh, I did not get you to response.
 This is true. [ Pause ]
 >> Okay. I think that'll do it.
[05:02:43]
 But you have to read the poll.
 At least it will be working for me now.
 Actually, you can't deploy because it needs to be merged to main.
 Oh, shoot.
 Hang on.
 Okay.
 Well, it deployed the branch stuff. Yeah.
[05:03:07]
 [
 [
]
 [ six phone queues. This is a good.
 And we're in a room.
 Mm.
 Thanks. [ [] [ [
[05:03:50]
]
 [ [ []
 [ []
 [ [
 [ [ [ [ [ [ [ [ [
 [ [ [ [ [ [ [ [ [
 [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
[05:04:02]
 [
 [ [ [ [ [ [ [ [ [
 [ [
 [ [
 [
 [
 [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ Now you can apply it. [ [ [] [
[05:04:26]
 [
 Clear console, reloved eight.
 And then it probably didn't finish uploading it yet.
 [ [ Yes, it's correct.
 Yeah.
 [ [ [
 [
[05:04:44]
 [ [ >> When I check as soon as I get how pages it tells me when it's deployed.
 >> It's committed to new balloons.
 >> And it's said now. >> Okay, so let me load that.
 Let's see what's the problem.
 >> And I'll read properties of undefined reading data.
 It's the same error I had before.
 Unclot in public type.
[05:05:24]
 >> Press control shift
 R. Do a hard refresh. There we go. That's what it was. Yeah. There's still some funky stuff going on
 down here. Yeah. That's for this backend response assignment that I don't need in my final in my finale anyway.
 Unless it's required to be there, but it's not necessary to have that page that component is.
 Yeah, so you want to remove those because it's causing connection errors so you have to remove that.
 All right, so at least you have that working. And then I can finish the delete one.
 I need to go eat lunch because diabetic people need to eat.
[05:06:12]
 And thank you guys for staying. Yes. You're welcome. I'll see you. I will see you Monday. Bye.

///// FILE: "Level 4/transcripts/May 12, 2025 20-25.txt"

Transcript from May 12, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 Today is week 10 day one. And this week we focus on evaluations.
 So in the first hour we'll take attendance, do announcements, review, and squeeze in some practice, the things
 that I need to finish teaching you, the walkthroughs, second hour, do many evaluations
 and third hour, more many evaluations, but the assignment will be posted.
 I shouldn't say the breakout rooms will be pretty similar for both here,
 except the practice, one of the practices will be posted in the second hour instead of assignment.
[00:01:12]
 Okay, so now it's time to take attendance. If you haven't marked your attendance yet, head on over to your codex account and mark yourself as present.
 And now time for announcements. I'm going to load that up for you.
 Almost there.
 Okay, so announcements.
 All right, there's going to be another student collaboration day on Monday, the 19th. On this day, I'm not going to be available during class
 time. I need to take my, I need to drive my parents and law to the state
 capital so they can become U.S. citizens.
[00:02:28]
 And that's very difficult to reschedule.
 So I have to go with that schedule.
 The plan for remaining days,
 so we finished this week. Perhaps so in finale.
 We're gonna do final evaluations this week.
 Hopefully you can get it all done.
 If not, then you'll have to leak into the presentations week.
[00:03:03]
 Staff was,
 the codec staff is requesting for presentations to be done on a Tuesday.
 So, I'll keep them updated on your status.
 I'll keep them updated on your status and they'll confirm with me if Tuesday is a good day.
 Again, this is the very last day of class, Saturday 24th. All grades should be turned in. So that means I need to be able to
 grade things even before the 24th. I haven't graded everything yet because I saw that
 some of your assignments were behind and if I graded it, the points would be too low. And it would make the constructive
[00:04:08]
 comments, you know, less constructive. It'll be like, where is it's, you have to admit
 their requirements. It's like, you haven't started this, you haven't started that.
 And, yeah, so I saw that a lot of requirements were not met.
 So I'm just delaying the grading for that.
 I'm going to, I should be done by Tuesday,
 whether or not you have a lot of things done.
 You'll either get some useful comments or you won't.
[00:04:46]
 Like you won't get useful comments if you didn't even start on a section.
 Like for example, where is it here?
 Have some finale.
 So if you haven't deployed your site to S3 or Amazon Cloudfront yet, then it can't really give you constructive criticism about that.
 Or maybe this one.
 If you didn't,
 could figure front end to connect to local
[00:05:32]
 and deployed servers,
 and if you haven't started that yet,
 then I can't give you constructive criticism.
 All I can say is, you haven't done this yet.
 Or maybe this one will create a branch for
 creating a user friendly experience in the front end to use the back end AI
 server. If you haven't started this, all I can say to you, all the comments I
[00:05:58]
 can give you is you haven't started this. That's not very useful comments.
 It's better if you start it, and then I can tell you,
 and I can direct you.
 I can guide you and say, OK, this will be better,
 or this is not quite meeting the requirement.
 Do this instead.
 That would be more useful if something is started.
[00:06:23]
 If it's not started, then I'll just say, "Oh, you haven't started this."
 And then when you make corrections, your corrections might fall short because you didn't have enough comments to guide you.
 So if you're going to, you know, if I grade your assignment and you have some things missing in your requirements, when you submit corrections, read the descriptions very carefully.
 And even ask questions.
 Just to clarify because there's only two submissions for assignment and you want to make the second one count.
 If you're missing something, just one little thing.
 You get a zero on it.
[00:07:18]
 So make sure you read the descriptions and ask questions if you're not sure about something.
 So many evaluations are open for week 8. Right.
 Week 8 corrections until okay so Week 8 corrections are open until
 that was changed from Saturday now it's to Tuesday if you need to make corrections for week 8.
 You can do that week 9. It closes Wednesday for on time.
 Because there was a much time last week to do
 evaluation. So it will close Wednesday and you can still get on time points.
[00:08:31]
 But on time until, actually, it will be on time until Tuesday. So tomorrow,
 if you can do your week nine, if you can do your week 9 if you could do your week 9 by tomorrow
 Then you can still get on time credit
 You see if that's specified here
 I think we can take this close. That one's all done.
 But corrections could still be done on Tuesday. Up to Tuesday.
 U.P. is volunteering to start the week nine evaluations today.
[00:09:38]
 Today is week 10.
 There'll be, there's a new evaluation.
 There will be, there's a new evaluation posted here for week 10. This one will finish it up.
 It'll finish all the evaluations when you finish this and you pass this and then you,
 you've done all your, hopefully you completed all the other evaluations.
 This is the many evaluation for week 10.
 Explain and demonstrate transformers.js for the backend
[00:10:21]
 and how your capstone uses it.
 Explain and demonstrate an AI interface.
 Oops, there's a typo here.
 That your capstone front end uses to get an AI response or to get AI responses from the capsule back end.
 Explain and demonstrate persistent and expiring logins in your capsule.
 I've already done walkthroughs for this.
 Explain and demonstrate how accounts are created and edited in your capstone.
[00:11:13]
 So these were parts of capstone finale, all of these. And capsule and phenality.
 Well, it's due on Thursday, but it's been introduced for a while now.
 Ever since we ate. So if we have some of these and so you can get it out of the way, get some points.
 So, so let me know if going to be doing on Thursday in the 15. Hopefully you can do some of your evaluations, maybe you've
 already already have the the CRUD stuff done. The last thing we learned was artificial intelligence, the crud stuff, like,
 where's it?
 So this is AI, this is the last thing we did,
[00:12:54]
 or the last thing we learned, but the persistent
 and expiring accounts that's related to crud.
 I did the walkthroughs for that,
 but CRUD was a much older topic.
 You should be more familiar with this.
 And accounts.
 These will test your front end and back end skills
[00:13:21]
 along with the AI because they include both front end design,
 back end functionality.
 So if any of those assignments close on you,
 the student success team though,
 time is close on you, the student success team though.
 Especially if you need more points on any of the assignments.
 Let's see, practice problems are on the side, help seeker. So don't get stuck for more than 15 minutes.
[00:14:03]
 So let's see if there's anything new until I cohort.
 I haven't had a chance to check it yet.
 And it looks like there's nothing new. I mean, the newest thing that's already answered is about when you have a route handler.
 Okay, Alexander's about to post something.
 When you have a route handler and you want to insert the data type for the
 For the request data that's coming in either the query or the body
 Sometimes they won't let you do it directly
[00:15:00]
 So one way like this this one would I mean you can still do way like this, this one would, I mean, you can still do it like this, but
 TypeScript will just annoy you with a red line. One way to get around that, two
 different ways I posted here. You can use any first right here and then cast or
 assert the exact or the correct data type right there.
 Or you can assert the correct data type here, but put any at the back.
 And that solves that.
 And that solves that. Look, LM, continue to, you know, put your notes and your code and your transcripts in there.
[00:15:55]
 And it will help you find the answers based on lowest tonic class. Transcripts are available up to week 9, day 4.
 So let's see, did I update it for day 5 again?
 Nope, not yet.
 So up to the recordings.
 Basically, they're just walkthroughs.
 So, those are actually optional recordings. things that you already know, or should know, like topics, tech, well, some of the tech
 things were techniques were new, like a mapping object, but you know, creating Redux,
[00:16:57]
 states, using models, those are things that we're talking for. And you can learn those before.
 So there's sort of like a practice,
 nothing, not anything really new.
 The most recent recordings about last week,
 they're all,
 you know, just nothing really new.
 Those practice.
[00:17:27]
 So I'm going to do another practice for the first hour and review,
 but make sure you take notes if I say anything that you missed.
 And turn on your microphone to get ready for the mini evaluations,
 or if you have a question.
 I'm like, Sandra, you want to ask your question here in class instead or you just want to post it on
 on slack.
 I'm going to start the review now.
[00:18:15]
 So this is the review from Saturday.
 We were working on the side of practice. And a lot of it was just getting done with step number three.
 When the sign-up is formed is submitted,
 check if the email is in the database.
 So this one took long because I didn't have a route for that.
 So basically I just coded that from scratch.
 So that was practice.
[00:18:41]
 You got to see how to do it from scratch again.
 Maybe it was a little bit faster, but you should have been familiar.
 And you should already have something like this in your capstone.
 And you might have it in your sandbox if you did this practice.
 So I'm going to continue the steps here.
 I'm going to share my screen first. Okay, so one of the things, one of the new things that I went over, because this was When you're testing, you see here, the front end. [ Pause ]
 Yes, we left off.
[00:20:14]
 There were some tests that we did in the modules here.
 Which one was this?
 it's one of the most it's
 create a account where it says I know I did it just for something
 they answered [inaudible]
 There was a test that we did.
 Activate the click.
[00:21:13]
 I think it was one of these, here it is, handle signup attempt. Handle signup attempt.
 And you see the test here.
 Somehow for this test, it required just configuration.
 This one's up here
 Must install just environment
 Got which one that was exactly
 Sign up attempt
[00:22:02]
 Sign up attempt.
 Let's see handle sign up attempt is going to load
 going to get
 that extracted
 get a response
 Nothing here looks like it needs a, oh,
 and we'll sign up attempt. Nothing here looks like it needs a document. I don't
[00:22:42]
 remember, I don't remember why we had to configure just here.
 Let me see.
 I can cancel this.
 I can block out this or comment this out and I'll find out which one. required it. Before I do that, let's check the package JSON, which will Let's see, npm run test.
 Make sure those pass.
 Actually, they might not pass because it requires some things with a database,
 had to do some manual deleting whenever I created account.
[00:23:55]
 So let me start this server first.
 And can I start? I don't need to start the front end,
 but I do need to start the back end.
 I'll start it anyways.
 Okay, this one's the back end.
 I'm going to start this one.
 this one. It's reminding me to do it with just one command, one terminal one command. Okay so we're on the test from the front end. It'll fail because it requires some
[00:25:07]
 writing new data.
 I need to, I need to load AWS. So let me just do that really quick. [BLANK_AUDIO]
 [BLANK_AUDIO]
 I just need to manually delete this one here.
 To show that the tests are passing, but I have to manually delete that every time.
 Let me just delete it again, but I'll disable this one, maybe.
 It will have to look at when you go. And then we just deleted again, but I'll disable this one. Maybe it will happen, okay?
[00:27:07]
 I don't remember which one that was for. [no audio] Oh, yes, okay, so it needs to check which server to communicate with.
 And the window object is required for that.
 So if you run this test, because this one needs to create a count. [INAUDIBLE] OK, it uses authentication name of US.
 And this is the one that needs the window object.
 The window object is used in this module here. It needs to check which domain it's in. And so just needs So you must install jett- jett- just when allows tests with the window and document objects.
 What you need, you must install just environment, just JS DOM.
 So we want to allow the setup just using this config file, just.config.js.
[00:29:48]
 Where we set the test environment to JS stop, and we want to also
 include this one, just environment JS stop.
 This allows the use of test or this allows testing modules that have window and document objects or
 that use the window and document objects.
 So let's be aware of that. So we're going to continue the practice.
 I mean, let me just review the practice.
 Create a sign-up component with a sign-up button and model.
[00:30:58]
 This is the front end. I'm going to just render it here.
 Has a sign of button there. When you click it, there's a sign of modal.
 Notice that it's not aligned here.
 On your capstone, it should be aligned,
 because this is not a good user experience when it's like this.
 This is just, you know, just for quick fixes,
 getting some concept running, and then,
[00:31:22]
 but for your capstone, it should be aligned,
 and maybe you in center
 or extend it you can extend this all the way
 whichever looks better
 center or extended.
 Let the modal contain a sign-up form that asks for an email in password so that's what you saw there.
 When the sign-up form is submitted, check the email.
[00:31:57]
 Check if it's in the database. That's when we got into coding this part handle signup attempt.
 Basically, just going to get the data.
 This part is checking which server to communicate with.
 And then add the path. checking which server to communicate with.
 And then add the path that's the sign-up path.
 This one's getting the data ready.
 It's disforming an object that contains email and password.
[00:32:44]
 This one sends the data to the server URL. So it might be the local server.
 Well, this one, in this case,
 it's going to be the local server.
 But when it's deployed, it's going to be the Lambda server.
 And then the response to that data
 is going to contain the account information.
 Basically, if there's the account information comes in, that means that we are not able to create an account. So it's going to check if the email is in the database.
[00:33:50]
 Well, we have to do the backend part here, because I didn't create the route yet.
 So this is the path and the route right here the route handler is right here
 there's not going no definition found okay there's a route handler.
 It's going to call the function called create account.
 It's basically what does it do.
 It imports the nice client, gets an account.
 So if the account exists, well that means we can't create it because it's already there.
[00:34:54]
 So we're going to return undefined.
 And when you have a return statement like this, if this line runs, everything beneath it will be skipped because return basically just jumps out of the function wherever this return statement is.
 So that's one way you can avoid running the rest of your code if you put a return statement.
 A conditional return statement. See, this is a condition. This
 return statement will only run on this condition. If this condition is true. This will,
 when this runs, it skips all of this. But if it doesn't run, it keeps on going.
 So this is where the request is made to create the account with the put command.
[00:35:48]
 First one was checking if it's already, if the account was there.
 If it's not there, then we create it with the put command.
 So we checked if the email emails in the database. If it is sent an error message,
 then it has been previously created.
 So let's look at that route.
 So if we contact the signup route here from the front end,
 and it gives me back nothing if it's undefined
[00:36:31]
 The the sign up component right here
 Find up modal right here
 It's supposed to
 The sign up mod right here. It's supposed to,
 the sign up model is supposed to,
 give a message and account with the email already exists.
 So basically this is the one that either gives us an account
[00:37:02]
 or undefined.
 It comes back as undefined if it already exists. And then we run this error message into state variable,
 Redux state variable called signupmodal error message,
 which then gets rendered in here by the sign of content. But
 that's basically just almost just copying, placing because it was almost just like
 the sign in. This copied and pasted and changed some values there.
 So this is where we left off.
[00:37:56]
 Oh, this is where we left off.
 If the email is not in the list, create a new account in the database. So that's what we did.
 It uses the put command on successful sign up,
 login the user by setting the proper Redux state.
 So this is where we left off.
 We didn't quite finish this one.
 So this is what we'll work on now.
[00:38:27]
 So we're going to continue with the practice.
 So we left off on step number six.
 So that's where we will continue.
 Step number six was about if there's a successful signup.
 Log in the user by setting the proper Redux state. So we're going to set the proper Redux state right here. Basically when an account come in
 comes in that tells us that this account was created. So we're going to just set set the Redux state, but we need to also close the modal and reset the inputs.
 So I think what I'm going to do here is I'll make a new variable here called inputs.
[00:39:55]
 It's just going to be this part, just the target.
 Or maybe I can do it the other way and put form reset.
 Yeah, maybe I'll just do that instead.
 So it's less confusing.
 So what I'm going to do is just temporarily rename this.
 So I can change these all into inputs.
 And then I'll change this into a form.
[00:40:25]
 And I'll describe to you what's going on here.
 So event target elements, those are the inputs.
 I had an email input, a password input.
 So those are actual inputs, elements, their elements. If you want to get the value from them, you have to access the value property. So there's the input, the box is the input, but the string that's inside of it would be the value.
 So it makes sense. So out of the inputs, we're going to pick the email and get the value.
 But the form was the target, meaning this whole form right here is the target.
 And I want to reset that form.
[00:41:36]
 Reset the inputs.
 Basically, if there is something typed in there, if you don't reset it, it stays typed
 in there, if you don't reset it, it stays typed in there.
 Okay, so that one should work.
 I'm going to save this here.
 Let the sign-up component select the Meetux state regarding the login status. That's step number seven.
 So this is a sign-up component. I think I was going to say something here.
[00:42:32]
 Oh, yes, this one should be the sign in area.
 I think this one's almost, this one's self-explanatory,
 but I'll already have this done by the sign-in area
 I'm gonna re- I'm gonna update this one
 Let the
 At the sign-in area component. Select the Redux state regarding login status.
 When the Redux state shows the user is logged in,
[00:43:16]
 hide the sign component.
 Okay. Okay, this is fine.
 So, I need something to choose.
 Oops.
 I need to edit the sign-up area.
 Sign-in area, I mean, I need to edit this sign in area.
 Actually, before we even get into that, let's just check if this works as far as we have it.
[00:43:58]
 Here's a sign of the bottle and we have all these break points here. So let's check when the account already exists.
 Let's refresh this if I want to sign up and put in account that already exists.
 It's going to extract the email and then password.
 There it is.
 I'm going to get the closed button there.
 Okay, so that's going to come back with account eventually.
 So let's see what happens.
[00:44:44]
 Okay, let's see what kind of information
 okay it's undefined that means I set this up with the test to return undefined
 if the account already exists. So it's going to run this condition since there's no account that's going to go down here.
 There it is.
 Going to set an error message.
 Right now there's no error message.
 But I'm going to run the code.
[00:45:21]
 Let them error message happen.
 There it is. Okay, so we got that part working. Next, we need
 to get this part, part working. When we create a new email. I'm going to try it now, available email and the password will be also available.
 Try that.
 Let's see if I can sign up with that.
 There's a debugger. Try that. Let's see if I can sign up with that.
 There's a debugger.
[00:46:10]
 So did it come back with it? This part right here,
 it checked if the account was already existing.
 If it wasn't existing,
 it'll return the new account to me.
 So here's the new account.
 So now that we have a new account, we're going to run these steps right here.
 So we saved the account and we're going to save the account. in the state variable there.
[00:46:47]
 Then we need to close and clear these.
 So that one should have closed it.
 There's closed.
 Next one should clear it. So those work. And the the
 sign-up area automatically disappeared. The sign-up and automatically disappeared
 because the sign-in area was already taking care of it right here.
 Let's just double check. Yeah, the sign in area, basically there's two modes when they're
[00:47:48]
 Basically, there's two modes when they're signed in and then there's signed out. So when they are not signed in, that's when it shows the sign in model and the sign
 up model.
 But if they are signed in, it gives us the choice To show the sign out moment
 So it's already taken care of all of these right here already taken care of by the sign in area
 When the read-up state shows the user is logged in hide the sign-up component so yeah, that was
 It's hidden because we're not showing it here
 We're only showing it here. We're only showing it here. and
[00:48:51]
 when the user logs out, set the proper Redux state. So this one's already
 this is already done by the sign out model.
 So let's see. If this works, I should be able to sign out and
 should be able to sign out and and I still see the sign up modal and it's clear. Oh, this one didn't clear though.
 This error message didn't clear so I need to clear that to you.
 Good thing I saw that.
 So I'm going to clear the error message when there's a good sign in.
[00:49:29]
 Or I mean the good sign up.
 So I need to, this is for the, for saving the account information, but I also need to clear
 the error message.
 I'm just going to copy and paste this.
 This is regarding the error message anyways.
 But the new error message will just be cleared empty stream. So let's so I can reuse this action.
 Okay, this part right here is just setting my state variables.
[00:50:20]
 This one here is closing the model and resetting it.
 So let's see how that works.
 I'm going to need to clear this
 in email.
 Okay, so that email is gone. I should be able to sign up with it.
 Sign up.
 So we saw that this works. It's gonna check if I have an account,
[00:50:55]
 or it'll have an account if I was successfully signed up.
 There it is.
 Then it's gonna save the information
 and it's gonna close the model right now it's still open.
 It's gonna close it.
 Now I have the option to sign out.
 I click on sign out.
[00:51:21]
 I get signed out.
 If I click on sign up, I don't see the error message and I don't see any inputs here.
 So everything's working well.
 When the user logs out, set the proper Redux state. When the Redux state shows the user is locked out show the sign up component so that's what's going on here we see the sign up for
 coming when the user is locked out so that one's all done
 now it looks like it's time for a break so I'll just set up the break out timer for the break timer.
 Ten minutes and take a break.
[00:52:28]
 I'll see you guys after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And this time we're going to do many evaluations.
 I'll open the break our rooms, but I'm going to leave this practice posted here.
 This next practice.
 As a reminder of what we're going to do next, Redux the count practice.
 I'll open the break our rooms right now.
 I'll start the mini evaluation for a Yuki.
[01:03:44]
 And the break our rooms will be open for 45 minutes.
 No, we can do the full.
 15 minutes. just setting up the usual breakout rooms here. So, Yuki is going to do the week 9 evaluation today.
 That was from last week, but I'm taking week 9 evaluations today and providing on time points
 until I'm proud. But Yuki, I'll meet you in the break-iron room.
 Let me just double check.
 On time until tomorrow. So today and tomorrow if you can do your week nine,
[01:05:42]
 mini evaluation, you get on time points.
 You may or may not get all the points, but at least you can get the on time points.
 I'm going to head on over to the breakout right nowkay, so it's time for a break.
 We're going to about the break here.
 And I'm going to continue the remaining 10 minutes with Euchie.
 We had about 50 minutes.
 What was it?
[01:55:38]
 50. Anyways, see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And just going to start the break-out rooms and continue. [ Pause ] 42 minutes, the break-arons will be open.
 Actually, since 42 minutes, and then I'll reopen them, because that's actually, I'm going to open them for 15 minutes to signal the end of the
 of the mini evaluation.
 And then I'm going to reopen them afterwards.
 Okay, so I've open the brick items for just 15 minutes because that's a time limit for the for you can use many evaluation.
 So you can now meet you over there, you key. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so UQ's mini evaluation is done.
[02:22:55]
 Any other volunteers?
 I'm going to open up the break-out rooms.
 And it can be open for the remain for 26 minutes.
 Break-out rooms are open for 26 minutes. Anyone else? I'm going to take a look at who's up next for many evaluations.
 We need to get these done.
 Let me see week 8, week 9, actually let me look at both of those. [ Pause ] [] [] [
 [
[02:25:12]
 []
 [ [ [ [
 [ [ [ [ [ [ [ [ [
 [ [ [ [ [ [
 [ [ [
 [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ Writing on Board ]
 >> Okay. So for week 9.
[02:25:47]
 Just refresh this. Okay, so let's see, by order of first-converser. for a serve. [BLANK_AUDIO] Okay, so, okay, so week nine, let me see what's up for week 9. So, week nine, if you have some TDD in your capstone, you can talk about that.
 And if you're familiar with the website, the Hugging Face website, I think those are going
 to be the two easiest ones. If you started adding Redux to your Capstone,
 you can talk about that.
 If you started adding Google App Engine to your Capstone,
 you didn't talk about that.
 So there's 20 minutes left for the breakout rooms.
[02:28:32]
 So Alex Sanders says TDD.
 OK, yeah, that's fine.
 Yeah, so let's go in the breakout room.
 And then because that actually you are the first come first serve,
 you are the next in line.
 So this would be the mini evaluation for week nine. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so the breakout rooms are back.
 Yep, breakout rooms are back.
[02:49:39]
 And in conclusion, actually, we didn't walk through.
 I introduced it. We're going to do this. We finished the walk through of the
 sign-up, but
 We didn't get a chance to do this one. So I'll talk about this tomorrow.
 You have four minutes to mark your attendance if you forgot to do that.
 Other than that, classes dismiss.
 That's today's class on evaluations.
[02:50:15]
 I can stick around and help Alex and her with.
 With her project, but I think it's going to work now.
 I'll stick around for a few minutes. [BLANK_AUDIO] [ Pause ]
 Now it crashed again. But at least it's giving me different errors this time.
 Let me try it again. [ Pause ]
 And make sure you remove the path parameter in all instances.
 It's not required unless you're using a different name of the ENV file.
[02:52:33]
 Because you can use a different name for the ENV file.
 You only need the path if you're going to use a different name. Atticant out of the reuser account.
 Are there any other instances where it's using a path parameter?
 They're not related to this specific function.
 It's in the other functions, but I'm not running that route those routes right now.
 So I don't think it should affect it.
 - It might, because when you import,
[02:53:11]
 when you import from a file,
 it runs things that are not inside of the function.
 And config, nothing,
 the config method will run as soon as the file is imported. - Okay, the key thing method will run as soon as the file is in the blue key.
 Okay, so.
 Okay.
 Okay. [pause]
[02:53:46]
 The debugger keeps taking over while I'm trying to decide.
 Okay.
 Next, we are the fixed read. [Music]
 Are we ready to start going?
 the server.
 All not sharing my screen.
 Right.
[02:54:39]
 Okay, so,
 I'm on that part right there because the, it stopped on the debugger so that's why it's not running it. Okay so it's still it's still crashing I think it's
 still crashing open open up the uh it's not going to the route yet open up the
 other terminals the debugger terminal I >> Open up the other terminals.
 The debugger terminal. I mean click on the debugger terminal in VS code.
 >> It's already open.
 >> No, I mean the terminal.
[02:55:18]
 >> Oh, it re-grashed.
 Let me re-load it.
 >> Yeah, so yeah, well, I want to see.
 You want to see the
 reason for the crash. I know where it crashes. It crashes in the return dynamic client function
 dynamo. Okay, okay,
 not function. Let's put a
[02:55:40]
 debugger in there then. We're at the
 before. There's already a debugger in there.
 I just have to reopen everything because I had to close it.
 OK, so there's no debugger right now.
 There was.
 I'm missing something.
 I had to debug.
[02:56:03]
 There's a debugger right It's right here.
 She's not red. Okay. It's not, it's not activating. So put it in a different spot.
 It was activating when I ran it myself when no one was watching.
 Okay. Let's get it to stop there.
 Well, they crashed.
 I have to go back to the browser window,
 because I have to load the reading.
[02:56:27]
 Oh, it said, uh, address in use.
 It's crashing because--
 well, I think it's crashing because it's trying to reuse a port.
 No, that's an old message.
 Oh, that's an old message. Oh, that's an old message.
 I have to go through it again.
 It wasn't crashing this fast before it was actually running up to a point.
[02:56:54]
 Okay, here we go.
 So,
 Oh, wait, I'll drop that.
 Oh, it crashed.
 Okay, let's find that word crashes.
 Well, before it was crashing, I know exactly where it was crashing before, because I watched
 it 10 times.
[02:57:13]
 Okay, so let's put a debugger right before that.
 There is a debugger there already.
 Okay, well, it's not stopping on it.
 We need to get this. >> Okay. Well, it's not stopping on it.
 >> That's because I have to refresh over here and make sure that I load this page.
 >> No, if it's crashing even before you visit the page, then there's a different problem.
 It's crashing before you even load the page.
[02:57:44]
 >> It wasn't crashing before even load the page.
 So, what's it crashing before I loaded the page before?
 Yeah, when the changes are made to the code, it could affect something else.
 So, let's start from the beginning from the index file.
 It's crashing before it even gets to,
 before it even does a console log. So let's figure out where it crashes in this file.
 But it was never crashing in this file before. Yeah, well, we need to find out. So put
[02:58:20]
 it the bugger on, uh, after the right before the listen on 35.
 So put it debugger on after the right before the listen on 35.
 Let's see if it can even get there. I mean on it, put it on 35.
 There so it won't run that line. They'll just stop at it.
 Let's let's run it. Let's see if it can even get that far.
 Just press play. You can remove that dot. Then get to that line that we wanted to yet. Hasn't gotten there yet.
 Already, it's already in the read function.
[02:59:05]
 It's not even--
 - Yeah, 'cause that's the import.
 Yeah, that's the import.
 When you import something,
 it's running the top codes right there.
 So you can press play.
 It goes crashed. Yeah, so it didn't even start the listener yet.
[02:59:29]
 It got in here.
 So usually the imports are before the config.
 So maybe you want to do that, but the imports right before the config.
 I've had problems with that.
 Oh, I can. Address in use.
 >> Yes.
 >> It's not killing.
[03:00:10]
 >> So it's not killing.
 >> Yeah, it's not killing the poor.
 Try to kill the poor twice before manually you kill the poor.
 >> Let me see if it's open anywhere else.
 >> No, there's an imperative being on this list in here. Just a big blue button and the sharing.
 >> Okay, so manually killed for 9,000 twice.
 Make sure it's really gone.
[03:00:51]
 >> I forgot how to run the command. >> You have to put a run.
 If you're going to put run the script, you have to put run in front of it.
 >> I don't.
 >> It disappeared.
 >> There it is.
 >> Close. >> Go for it. And it's closed for.
 Okay, let's start the server.
[03:01:27]
 Maybe okay, I think it might stay open because it never like it tried to execute, but
 okay, so it says address in use.
 Let's see what else.
 Yeah, this is new.
 Roll scroll it up.
 Let's see what else happened in the error.
 So it does look like it's trying to listen.
[03:01:57]
 It tried to listen.
 And there's an error.
 The debugger, I think you might have to manually put a debugger, like the debugger command.
 Okay, so you're closing all the windows.
 That's, yeah.
 That's good too.
 Okay, let's just start the server on a regular.
[03:02:22]
 You can start it on a regular one for now.
 See if it works.
 OK.
 This is all.
 So let's find out another place where it might be crashing.
 4,9,000 is hard coded there.
 Are you sure this path line needs to be removed?
[03:02:58]
 Yeah, you're not using it.
 I'm not using it down here.
 Where I put it in the get things.
 Nope, you're not using that.
 No, you're not using that path variable anywhere.
 Let's see, can the debugger stop?
 Put a debugger on line 34.
[03:03:20]
 Let's type it there. And then open the debug terminal. No, it's not going to stop on the debugger from there. [ Pause ]
 What is that the front end?
 Are you in the front end?
 That looks like web time.
 >> No.
 I didn't move folders on the debug terminal.
 I did it in the other terminal, but not this one.
[03:04:21]
 Okay, so it's not even didn't even start listening yet. So it's not really, didn't even start listening yet.
 So it's not really, that's just a false error there.
 It crashed, basically, in one of the imports.
 And I think it's in that read account,
 because it was able to get there. Let's put it right after the.env config.
 Like put online 12, put b boger there.
 Let's see if it can get there. Actually, I saw a listening.
[03:05:18]
 I saw a listening. That's odd how they even get there.
 They didn't even run the listener file.
 I mean, listener line.
 Is that the bug or okay?
 So put the bug right before online 14.
 Put another one online 14 there. Let's see if that goes. That works.
 Start from the beginning. Sometimes it could be the imports that's bugging You should be building at the same time.
[03:06:16]
 Yeah, that's right.
 Otherwise the buggers are not going to work.
 That's why it was failing. Okay. So press play. Let's see if it, how far you can get before breaking.
 Okay, press play.
 So it could get to the listener.
 Put one right after.
 Actually the listener.
[03:06:55]
 Why is it stopping on the listener?
 I've never had that problem before. Try changing the port to like just 90 90 or something. the
 the Okay, so yeah, so there's something else going on.
 Try to, what was that?
 Like, try to kill the port multiple times.
 But like, I had that problem before. I kept switching ports and
 it's still like crashing every time but there was no problem in the code.
[03:08:22]
 Yeah.
 Okay, let's try to start it now. Well, it's feeling nine doesn't. Okay, so
 Okay, so.
 Already in use, let's look at the terminal message. Maybe we're missing something in the terminal message.
 I did have this message a very long time ago and it was the kill port thing that fixed it.
 Yeah, it's supposed to fix it.
 And it's we have it building.
[03:09:33]
 Oh, there, unhandled error.
 That's the thing that breaks it. Now it says unhandled error.
 I don't see that.
 And dress already in use.
 Embedded error on server instance. I don't see it on handled error. There's a Let's see. No, it happens.
 I'm going to put this back to 9000 because. Yeah, and you can remove the debuggers that aren't, which are not the problem.
 Not from that screen. [ Writing on Board ]
[03:10:42]
 Read account, re-dozer account.
 So let's see if it could even get into the route.
 Put one in the, yeah, you can remove that one since that's not the problem there. You can try to pull one inside of the function.
 Why did you just put a D there? What's going on?
 Where?
 Oh.
 I'm going to put a D bug in there.
[03:11:33]
 And I realize that can just be thoughts if I want to.
 Okay, so let's put one in the root path.
 Put a debugger in the root path.
 The root path is working fine.
 No, I mean, the root handler.
 Oh, in the index.js, you mean, or in the read account handler.
 Root, right there, root TS.
[03:12:06]
 >> Okay.
 >> Let's put a debugger right there.
 >> This handler doesn't have a problem.
 It's been working the whole day.
 >> Yeah. Well, it's not working right now.
 >> But I didn't change the root TS at all.
 >> Sometimes you just have to do a wider sweep. I didn't change the root Ts at all. I haven't talked to you.
[03:12:25]
 Sometimes you just have to do a wider sweep, even though you know it's working.
 Because we can't even get to this point right now.
 So, yes, we can.
 It loves.
 Okay.
 Let's see.
 Well, the route was loading. It's still waiting.
[03:12:57]
 No, the route was loading.
 It's not going to be--
 The route was loading fine.
 Yeah.
 The route was no route problem. Yeah, so it's not working right now >> Yeah. >> Yeah.
 >> Yeah, so it's not working right now because the server crashed.
 >> Oh, yeah. I didn't reload the server.
[03:13:12]
 That's true.
 I think that's true.
 >> I'm not good.
 >> No. [ Inaudible ]
 Now, that won't work unless a server can listen, which is not, it's not listening because it crashes before it can even listen.
 So let's, let's put a debugger into listener how they're.
 >> Oh, it's crashing crafting little entire old tiny now.
[03:13:48]
 >> Yeah.
 >> I don't know how tiny it is.
 >> Let's copy that and put it into the listener handler.
 >> What? Listen to your handler.
 >> You have a listener index TS.
 >> Yeah, but there's no separate handler for it just the line.
 >> Yeah, the callback, yeah.
[03:14:08]
 That's the hat.
 We already have a debugger on there.
 We have it here.
 >> No, inside of the handler.
 >> Oh.
 We're just going to put it in different places.
 And see how far we can get with the debugger.
[03:14:32]
 Now, try to run it.
 Okay, so those console logs are going to work properly. Let's even put a debugger after the export.
 And we can remove that debugger.
 It's going to do that part properly.
 Before or after the export. After the export.
 I don't like when it opens these read only windows.
 Yeah, there must be some kind of setting that got changed.
[03:15:43]
 It was able to, able to execute the whole file, even the handle listen, and then it breaks. Does it open up a window?
 Only when I build.
 Only when you build, but the build is out of my, okay,
 when you build for the first time.
 Yeah, it doesn't open a window when I run start,
 but it's probably not configured to do that.
 Yeah.
[03:16:04]
 Okay, so I think. I run start, but it's probably not configured to do that. Yeah.
 Okay, so I think let's just close. Let's kill the ports.
 Maybe stop the servers, all the servers, the builders, the servers, all the terminals.
 I want to stop and about the the the
 the
 the
 the
[03:16:35]
 the
 the
 the
 the
 the the defined earlier. Yeah, so the NV file is getting read properly. How about the dot
 configs? The dot configs have those been fixed? Yes, they're all fixed.
 Not one in here. Okay.
[03:17:05]
 And all the things, there wouldn't be one in there.
 I mean, unless there's any in the routes, which they're not to have ever been in the routes,
 it wouldn't be in the routes.
 And I didn't check the front ends because I'm not working on the front ends.
 Yeah.
 This doesn't the front end won't be crashing that.
 Let's see what else.
[03:17:28]
 I would kill the ports here and then close VS code.
 So yeah, kill the port 9000.
 Oh, close port.
 Yeah.
 You have to run and come in. Maybe close it three times and then
 tuck down via code.
 It's possible that one of the processes are still open.
[03:18:09]
 Might even have to log out and log back in
 in which we'll lose our connection, but I'll hang out here if this is,
 let's try it one more time.
 If it doesn't try to start,
 then let's try the reset because we couldn't get the deep
 voters on it.
 Like log out, log back in or restart your computer.
[03:18:40]
 Oh, I thought you meant.
 NPM start.
 Yeah, wait, wait, wait, a reopen other one. So there was a message I think it crashed. It did crash. Okay, so
 it's never crash before on this. I don't understand. Yeah, so I stopped that server and then
 tried maybe logging out and logging back in. Of what? My computer? Yeah, just sign out and sign back in.
 Okay, sign out not sleep to computer, but sign out which will cause you to drop [ [BLANK_AUDIO] [ Pause ] >> Any good back?
 >> Yes.
[03:21:10]
 >> All right. [ Pause ]
 >> Hello, praffing.
 >> So, what am I supposed to do?
 I can't work on anything like this.
 >> Let's try -- let's try -- well, and this one,
 and that server, and that server.
 And let's just comment out all the paths,
[03:21:48]
 except the root path in the index file.
 Comment all the routes.
 >> Except the root.
 >> Oh, wait, you don't even have a root.
 >> I do have a route.
 It's right here.
 Oh, sorry about that.
[03:22:08]
 Yeah.
 I was looking at, I was looking lower.
 Sorry about that.
 Okay.
 Yeah.
 Comment all those out.
 You can select multiple lines and just.
[03:22:18]
 It's too late now.
 I've already done it this way.
 Okay.
 And then comment out the imports at the top.
 No, okay, yeah, you can do that too.
 The imports at the top,
 the ones regarding those pads and those two, yeah.
[03:22:45]
 Okay, so now it's back to bare minimum.
 Theoretically it should run.
 This is just the bare minimum,
 all except for that server list there.
 You can even comment that one out too.
 Okay. You can even comment that one out too. Okay, oh, you have to build it.
 It won't build.
[03:23:27]
 I'm not in the back end folder. Okay, so you should be able to run that then run a refresh here refresh that one. Okay, so we're gonna activate one route at a time
 Must be one of the routes or you can run activate two at a time
 Actually before activating the routes activate those other ones
 That that handler and the those
 right there yeah okay that's run that okay it's something happened there it's
 one of those something there it's because we moved the ENV file out of the
 source folder it was working before that happened
[03:24:54]
 But that's where it belongs. I know, but it was working until it stopped working after we moved the ENV file out of the So let's see a comment out those. No, don't
 It's supposed to be outside of the source folder. Well, it didn't move it anyway
 Okay, no, it's not.
 It's, you moved it out.
 I mean, it's still in the source folder.
 - Oh, it didn't, it didn't refresh my screen properly.
 Okay, let's, um, yeah, comment those out.
[03:25:36]
 Okay, let's run it with that one server serverless app.
 Okay, so it has to do with that line 39, I think.
 But that was working when the ENV file was in the source.
 Put a debugger on the line 40 and see what?
 Activate line 39, put a debugger after that.
 See if we can look at the value there. You need to open the JavaScript, the bug terminal.
 But close this one first. I mean, stop this server. Otherwise, it will conflict.
[03:26:19]
 Yeah, it's fine. I didn't run it over here yet. I opened some. Yeah.
 Okay, is running locally? Let's see the value there.
 Did be true.
 You have two terminals.
 The book.
 One is the belt terminal.
 Yeah.
[03:26:59]
 That's why.
 One is the rental.
 The belt terminal.
 One is the new debug console.
 Is running locally. It's true. Oh, it says true. Okay. So that's true. one is the real terminal. What is the new debug console?
 Is running locally.
 Oh, it says true. Okay. So that's true.
[03:27:10]
 As if it is running locally.
 Oh, that's why you're you have two listeners.
 Where?
 Line 35 and line 42. That's why they're gonna they're gonna conflict each other
 wait it's in the wrong way there okay somehow this got uncommented when it should have been Should it be good this deleted yeah
 Yeah, so when searching for bugs
 You know rule of thumb don't make any assumptions, the bug can be anywhere.
[03:28:17]
 Even if things look like they're working properly, I don't think this is what caused the other error because the other error had not to do with us.
 Yeah, so, but it did stop us from even fixing the other error, so, but we fixed it. So, you can activate my 39 to 41 now. - Yeah, I think what happened was that
 when I controlled the to get rid of the past stuff,
 I uncommented the extra listener.
 - Yeah.
 So, yeah, to uncomit line 39 to 41.
 - I did, I was trying to,
[03:28:43]
 but I got stuck in the unedited window. Okay. All right. So, okay. So it's running now.
 Can
 Maybe activate those one at it. Well, I guess that's this is trying to activate a mall. Let's see.
 You get all there was not a problem before.
 Oh, me. Yeah. I'm gonna get a little-- - There was not a problem before.
 - Let me just add it to you.
 - Yeah, let's see here.
[03:29:10]
 Back end and off.
 - I don't need that.
 - And the DB.
 - Yeah.
 - You're gonna comment those out.
 - Those are the ones that got archived.
 Why is your problem here? This doesn't need that.
[03:29:28]
 Module not found. That's that's archive as well. Yeah, three
 archive. Okay. Okay. So now this is working. You can. Okay. So it
 looks like it's working. All rightuckles) All right, so there, that's progress.
 Now you can visit the route that you think is breaking
 or that that was breaking.
 So, that's good. Maybe just press play.
 Let's see what happens.
[03:30:15]
 Does it crash?
 Oh, not keep on going.
 Oh, yeah.
 It doesn't crash yet.
 It's going to crash.
 It'll crash soon.
 No, it didn't crash this time.
[03:30:27]
 Okay.
 Okay, no, I'm only going to crash right now.
 At this time, it's actually.
 It didn't crash because the dot in V is in the correct spot now.
 Yeah, that's probably what was causing it to crash.
 Okay.
 So I think you could.
[03:30:44]
 I'm not a response. So that should fix no problem.
 And now I can continue with the front end stuff.
 But yeah, we're now already 10, 15 here.
 All right.
 So at least we got made some progress and you could keep on moving.
 But I lost four hours now where I wasn't able to work on the stuff today.
 Yeah.
[03:31:08]
 Yeah, sometimes that happens.
 So it's good to be with early every day that I lose four hours on something.
 Yeah, so it's good to take a systematic approach and make sure like every code change works before moving on.
 Because if you make a lot of code changes and you forget what you, what you did before, then it's hard to undo.
 I'm literally haven't made any code changes today because I couldn't get the route to load.
 I've literally spent six hours today trying to get this one route to load.
 Yeah, so I at least found the issue here.
[03:31:58]
 You can take a break and continue whenever you get a chance. But my problem is, this was the route for capstone back in the counts.
 That means I have four more time in and they all have to be done by 630 on Thursday.
 There is no possible way.
 I'm not going to have any issues or bugs in the next four things that I have to finish. So I'm not going to be done by 630 on Thursday. It's not possible.
 Because I have to plan for the fact that I'm going to spend 16 hours on each

///// FILE: "Level 4/transcripts/May 13, 2025 20-0.txt"

Transcript from May 13, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 This is week 10 day two.
 And the focus of this week is evaluations.
 So today's agenda will take attendance, do announcements,
 review. It should be a short review.
 And then we'll practice read-ups accounts.
 And then second hour, do MIDI evaluations, but the practice will be posted and the breakout
[00:00:38]
 rooms will be opened.
 Third hour, many evaluations, but the upcoming assignment will be posted and the break
 arrows will be opened.
 Before we get started, make sure you take attendance, head on over to your code X account
 and mark yourself present. Now time for announcements.
 I'm just going to get that loaded up. Okay, so the announcements.
 Next next week on Monday.
[00:01:37]
 May 19.
 They'll be a student collaboration day. and less than two weeks until the end of class.
 So no time to rest.
 If your goal is to graduate this class.
 This is this week right here.
 Until the 17th. Last week is in the until the 24th.
 You need to have your assignments turned in so I have enough time to grade them by the 24th.
[00:02:20]
 Any evaluations remember there's a 60 minute time limit and
 um, I did post it here week 10.
 Week 10 mini evaluations. Do the 13th before class today,
 to the gotten reminder,
 let's see here.
 Let's see here. Week 9.
 You can still do your week 9 and get on time credit.
[00:03:36]
 Last day for on time credit for week 9. And then,
 so you can get your on time credit for week 9 up to today.
 And then tomorrow before class, make another submission so that you can do corrections for week 9.
 Assignments so the finale is due on Thursday.
 Leave credit for App Engine closes on Thursday.
 Remember, contact the student success team if you need some more points on any of the closed assignments. But we're just reviewing them from the ones up here.
 There's only one more practice problem to review.
[00:04:59]
 And we're going to do that today and maybe we'll finish with it.
 Maybe we won't.
 We might not because I'm coding it from scratch.
 I don't have all the the the the CRUD operations in the sandbox.
 Let's see help seeker. Remember to post your questions in July cohort.
 If you get stuck, don't stay stuck for long.
 Only just be stuck for 15 minutes and then.
[00:05:37]
 And then post.
 Because if you're spending hours and hours just getting stuck, then that's a waste of time.
 You could be spending those hours and hours progressing, but instead,
 if you spend those hours and hours being stuck, that's not very productive.
 Okay, so is there a new question here?
 Oh, no, this is a fix.
 Alexander was just posting a fix.
[00:06:15]
 And there was a question about notebook LM.
 Notebook LM in the chat.
 It takes questions.
 It's similar to our,
 it's true, it takes, so Chris is saying it might take time
 to get a response on Slack.
 That's true, but at least just post a problem.
[00:06:40]
 You can still, you can get stuck for 15 minutes.
 And then, when you realize, okay,
 I haven't found the problem, the answer yet,
 post it on July cohort.
 Maybe you'll find the answer before someone responds
 on July cohort, or maybe someone might respond
 on July cohort before you find the answer.
[00:07:08]
 So yeah, posting is a good idea
 because it just covers the situation in which you anyone to get stuck for that long.
 And if you keep thinking, "Oh, no, I can do it, I can do it," but then one hour
 has passed already, two hours has passed already, and you still stuck in the things
 spot.
 Yeah, that's not a good situation to be in.
 We would have been better if you just posted 15 minutes ago and then maybe someone could have helped you out of that problem within, you know, 30 minutes.
[00:07:53]
 At least you have a backup plan. If you post in July cohort.
 Okay, so this one's about notebook LM you can't you can't include all your code inside of the question.
 That's because it's similar to our question answering AI that we made.
 And the question answering AI that we made, we ask a question about a context.
 So we provide the context.
 And then we ask the AI, okay, what does this context say about this?
 Or where's AI, what is the capital of California? And it's going to be inside of the context,
[00:08:39]
 like a document that you provide. So make sure you use notebook
 and land the way it was designed. It's supposed to answer questions based on the documents
 that you provide. So if you want your code, if you want your code to be analyzed,
 If you want your code to be analyzed, you can put it in the context or in the source section.
 So let me see if I can try it out here.
 Okay, so if you can ask a question in here, but you can't put that much.
 This is where you put your sources.
[00:09:29]
 So if you have a, you have some code, you can add it and then you can just paste in some
 copied text.
 So if I have some code, I can paste it in here and then it'll become part of the context
 or part of the source.
 So you put your long context in here, and you put your short question in here. That's
 how this works. And yes, you can put your code.
 But if you're going to put your code, you have to turn them into text files or just,
[00:10:21]
 yeah, make a copy of your code or paste it in.
 Yep. Well, you're going to end up pasting a lot of code in.
 If you have sample code, but it doesn't take the code
 when it has a dot dot t s or dot j s extension,
 you could make a copy of it with a txt extension.
 Then it'll take your then it'll take your code.
 Then it will take your code. It will take your class notes the way it is. It can take.md.
[00:10:54]
 Fast transcript. It will take that one as is also.
 You can also copy and paste the transcripts.
 So I haven't posted any new transcripts, but I'll post them today.
 Mark your day's green.
 And then let's focus, gonna do the review.
 And maybe you haven't finished the sign-up practice,
 or if you haven't even implemented sign-up in your capstone.
[00:11:40]
 Pay attention, because we're gonna review the last parts of it.
 And then if you
 haven't implemented accounts in your capstone, that's what we're going to do
 today. We're going to do the walkthrough for that. You can have your microphone
 ready and you know ask your questions audibly or you can just type them,
 but have your microphone ready for the mini evaluations.
 Now time for the review.
[00:12:24]
 So we finished up Redux sign of practice. Now time for the review.
 So we finished up Redux sign of practice.
 Let me load that for you guys. review. Here it is, Redux, sign up practice. And then we continue from one of these steps over here on these steps. And we love the front end.
 [NOISE]
 So where did we leave off?
 So I continued from here. And then the rest were finished pretty quickly.
 So I'm going to load the part where we continued from.
[00:13:45]
 That was from the signed up model.
 Here's the sign up model.
 To make sure it works, I'm just going to start the servers. [] [no audio]
 [no audio]
 [no audio]
 [no audio]
 [no audio]
[00:14:24]
 [no audio] So, the side of the model is where we left off.
 When the sign up is formatted, check if the email is in the database.
 If it is, send an error message.
 Then it has been previously created.
 So the way we check that is here. I'll put a pick an email that's in the database.
 I want to sign up with it, so it doesn't matter what the password is.
 Here's a debugger.
[00:15:44]
 And so it's going to check the email in the password.
 If the account, if it creates an account, we will get in account.
 But if it doesn't create an account, this will be empty.
 So the account is.
 Undefined.
 It's undefined. Therefore, it's going to jump over here. There it is. So it's going to end up writing an error message.
 First it's going to put it as a Redux state variable and dispatch it and then it gets rendered into here.
[00:16:35]
 That was this part right here.
 And if the email is not in the list create a new account in the database. I need to make sure that it's not already created. So I'm just
 going to log into DynamoDB and delete the test account.
 Let me show you this one here.
 One was this for testing.
 Check out the table items.
 Okay, so I need to delete this one here.
[00:17:54]
 Okay, so now I can create a new email available.
 Now I'll try to sign up.
 So what we're trying to do is this, if the email is
 logged into the list create a new account in the database.
 Click on sign up.
 Here it is.
 So I was going to send that email and password.
[00:18:27]
 If it creates an account, I'll get into account back.
 Let's see if I got into account back, yes, I did.
 So it's going to go into these steps down there.
 I'm going to save the account in the state variable.
 So my components have access to it.
 And it's going to remove the error message.
 Right there, it's going to remove it.
[00:18:57]
 It's going to close the model.
 And reset the inputs.
 Because the model, now I have the opportunity to sign up.
 On successful sign up automatically login with the user. Login the user by setting the proper Redux state. So that's what
 happened. Those were saved. Let the signed it, area component, select Redux state regarding
 login status. So the sign-up areas here. This one was pretty much automatic.
 which automatic is already set up.
[00:19:54]
 Here, this one is selecting the login state. Basically, if there's someone logged in,
 there's going to be account information here.
 So, the sign-in area is selecting the account.
 If there's an account.
 Here, if there's an account, it's going to show the. Sign out model. So that's what we see right here. And if there is it, it'll show
 the sign in model. And the way it chooses it is by can cancel out that mapping.
 And we get more cancel out that mapping.
[00:20:57]
 But just like this. And so when it says sign in modal, it's going to also display
 So when it says sign in model, it's going to also display the sign up model. Like this.
 And when the button is supposed to show the signout model, I'm supposed to show this.
 I don't have the accounts yet.
 So this is good.
 This is how it selects.
 So let me just continue this debugger here.
[00:21:40]
 It could be...
 to be, uh, okay, so it didn't fully, it didn't save the, uh, the sign in.
 Let's see, the sign up.
 They didn't save the sign in.
 So, uh, so there's a bug when I sign up, it doesn't save it in persistent login. So, let's fix that. To fix that, I'm going to look at how we did it here.
 I think I should refactor the code, but until then, I'm just going to duplicate the code.
 So if there's a sign in, it does all this, but it also does this part right here.
[00:22:56]
 I think I'll turn this into, I'll eventually turn this into a function.
 But for now, I'm just going to copy that and put it in the sign-up model.
 So when they sign up, it'll also save their information here.
 Making it persistent.
 So I'll try that again, but I need to delete. Okay, so it's deleted. I should be able to sign up.
 Okay, so it should get into right there.
 Then it's going to save the persistent login right there.
[00:24:17]
 Then it's going to close the model.
 If all works fine, I should be able to refresh this and it'll stay logged in.
 Yep, it's still logged in.
 And let's see if I could sign out.
 Okay, so that looks good.
 Let me refresh.
 Yep, looks good.
[00:24:41]
 Let's see if I can sign in with that same sign up with that same email.
 There's a debugger. Let's see if it lets me sign up. Account is undefined. So it's not going to let
 me sign up. I'm going to go in here, put that error message.
 And that's what we see right there.
 So everything's working good.
 It has persistent login, whether I signed up, whether I click on sign in or sign up,
 the persistent login gets applied.
[00:25:27]
 Since I've just basically duplicated the code,
 I can refactor this into a function.
 And I'll factor it into, I'll refactor it into a function called
 let's see if I can even, if I can go like this.
 Refactor into a new file.
 What happened?
 Refactor to a new file.
[00:26:03]
 They won't do it.
 And there's no message.
 Okay, that's okay.
 We're going to create a module here.
 We're going to be called Save Persistent Login.
 Save Persistent Login. going to be called save persistent login. Save persistent login.
 I'm going to cut this out.
[00:26:44]
 I'm going to cut this out. Place it right here.
 Save persistent login.
 Okay, so it needs some information.
 It needs an account.
 And it needs this data type.
 So let me get that data type.
 So it just needs an account.
[00:27:12]
 So I need to cut it out from here.
 Now I can import it.
 Save persistent login, and I need to give it an account.
 There, that should work now.
 Let me just clear this part again.
 I'm going to test the refactor if it works.
 I'm going to sign up here.
[00:28:24]
 Yeah, it works. I'm still assigned in.
 Yep, the refactor works.
 I'll do that also for, um,
 I'm going to remove some stuff that I'm not easy anymore. more. Okay.
 Oh yeah, because this is sign up,
 okay.
 Sign in, modal.
[00:29:17]
 And now I can now change this.
 It's been refactored.
 Save, persist, and log in, and just give it the account. Okay, sign out.
 Let's see if I could sign in.
 Available. available.
 Email.com.
 Okay, so it looks like it's going to be persistent.
[00:30:15]
 Yep, so when you do things like that, when you refactor your code, make sure you test
 it, make sure that the refactor didn't break anything.
 OK, so it's working well.
 So that's enough for this. So when the Redux state shows the user is logged in,
 we hide the signup.
 When the user logs out, the proper Redux state is saved.
 And then when the user is logged out, show the sign of component.
[00:30:54]
 So that's what it's doing.
 So everything looks good there.
 Okay. Now time for the practice.
 So we're going to practice Redux accounts.
 We're going to do the Redux account practice.
 This is where we use Redux to toggle access to the account page
 where users can edit their information.
[00:31:33]
 In your capstone, when you make an account page,
 make it look like an account page.
 Don't make it look like some demo page
 where you have multiple forms where you're testing
 out create, read, update, and delete.
 No, I could look like an example page, make it look like an actual account page that
 you would see on a actual like a actual, how you say like a website that people use and buy things from.
[00:32:12]
 So I'm just going to copy this here.
 Then I'll paste have all the credit operations in the sandbox,
 but you might have them already in your capstone.
 Since they were part of the assignment.
 Okay, so let's look at some keywords here. Account component.
 There we go.
 And a model. Account component right here.
[00:33:32]
 Delete component.
 Need a password. [ Pause ]
 >> There's an account component again.
 [ Pause ]
 >> The account component select the Redux state
 about the login status.
 Probably the sign in -- the sign in area will take care of this.
[00:34:12]
 You could make it self-managing though.
 Instead of having a sign in area, you can make these components self-managing though. Instead of having a sign in area, you can make these components
 self-managing, just let them tap into the Redux state.
 Instead of the sign in area managing it you can
 You can set up the component to hide itself
 But I'll do it for this one. I'll let this one hide itself
 Instead of the sign in area hiding it.
[00:35:31]
 Okay, so first step is to create an account component within account button and a model.
 So, going to go over here, source, views, and create an account component.
 Export function account.
 Import react.
 It's going to be similar to the sign-up or sign-ins, so I'm just it to account model, since everything is called model. [ Pause ] Okay, so I'm just going to delete some things and I'm not using yet. I just want to render it.
 Then we fix these.
 We name it to account modal. We name this one to account modal.
[00:37:32]
 This one says sign in modal button.
 Gonna change that.
 To account modal button.
 You can change these to account modal. with the button saying it's not going to say sign in it's going to say account
 the motor will say account So it's going to, this one instead of sign in content, it's going to have account content
 which are't made yet
 and we'll submit a haven't made that either. So just to get these errors out of the way
[00:39:07]
 It's going to get an event here. Yeah, it's going to be inside.
 Let me put it outside for now.
 And then when we discover that we need things inside of the component we'll move it inside
 But for now, I'll put it outside and then account content
 Account content
 CSX [ Writing on Board ]
 It's going to return a form similar to signed in content.
[00:39:59]
 So I'm just going to copy that for now.
 Copy that for now.
 And then we have to now, we're going to need an air message.
 And you have to put one here as a placeholder. and import this. Now, supposed to render it.
 Actually, it's good. I don't need it.
 Let's see.
 Signing area is going to render it automatically.
[00:41:38]
 I guess I will be, uh, I just let the sign an area of manage that then.
 And there was, I'll have to refract through this a lot.
 To do, um, So this is the easiest way since there's already a sign in area.
 I'm just going to utilize that.
 I'll use insert it there.
 So I see it right there.
 I need to put some space here.
[00:42:49]
 Similar to this.
 I'll make it for the sign-out mobile. Sign out model SES. So I just paste it in here.
 It should look fine.
 Okay, so I didn't put an ID there.
 My side-out model doesn't have an ID yet. one here. Sign out. I have to import it now. I need to do a style import. SES.
 It's a I'm still not showing sign out the whole sign out the whole button out there it is, there's a gap there.
 Last time I had a gap here too.
[00:44:59]
 Sign up a little.
 We're heading for the signup?
 Let's see.
 Oh yeah, I have a gap here for the signup so let me see how I put that. [wind] [wind] [wind] [wind]
 [wind]
 [wind]
 [wind]
[00:45:40]
 [wind]
 [wind]
 [wind] And this is style here.
 Oh, that's signed in. Okay, that's fine. That's the sign in. That sign in has a
 styles on both sides. The sign-up doesn't have any styles.
 So, let me just sign in here.
 So, I should put it on the account.
[00:47:07]
 Account model. SCS is going to be the moment button. The count, and then import the style. Okay, so I'm going to remove this style from here.
 The gap is through big now. And just going to do that.
 And since I know the music this year, I think that ID.
 I forgot the smaller. If I click on the account model.
 There's the other female password.
 I need one for the name and phone number. [no audio] Account content is the one that's going to contain the name and the only number.
 To make these accessible, I'll put these here, accessible by element name. These are not going to be required, but they might be read only. So I'm going to make the email read only for now.
[00:50:08]
 And I'll make the password read only for now. Being they're not gonna be changed.
 And the value, these should have a default value in them.
 This should have a default value in them.
 That value is going to come from the account. So this one is going to have account.name.
 It's going to get the account, I'm going to use the selector. Select the global account.
 Check that you might have some information now.
 So I put in this information here.
[00:51:27]
 This one should have a default value, or an axis, so just have a
 text value.
 When you put value, the difference between value and default value,
 default value can be changed. So this one's going to be account.email.
 This one's going to be account.password.
 So it's already here. I need to make a new state variable for the error.
 This error will happen just in case I don't know. maybe error updating the account.
[00:52:27]
 And it puts some gaps between these.
 Quick and easy gaps.
 You should be using,
 you should be using
 the grid systems and put gaps in and to align these.
 But this one's just a quick and easy way to do it.
 See, it's good.
[00:53:03]
 It's getting close to like production level. This is what you expect to see when someone
 Once added their account so yeah, I can I can change these but it won't let me change these
 I'm taking it, but it's not letting me change it because I'm just gonna set it up for now to not make these
 changeable
 It's easier that way.
 So let's see how far we got with this.
 Let the model contain an editableable form except for email when the account's information.
[00:53:50]
 So that's what we did so far.
 When the account form is submitted, update the database.
 Okay, so the first hour is done.
 We're going gonna take a break
 and I'm gonna have to spread out this practice
 throughout this week.
 So let's take a break. [BLANK_AUDIO] Hey, I'll see you after the break.
[00:55:15]
 [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break and it's the second hour.
 I'm just going to post, I'm going to leave the practice posted up here for the second
 hour, but I'll open up the breakout rooms for many evaluations and for working on your assignments. So as usual, there's a collaboration room, the silence room and room for many evaluations.
 These will be open or 30, 42 minutes until the next break.
 Okay, so I'm going to do a week nine, many, many evaluation with Chris.
 I'll meet you in the breakout room Chris. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're going to continue. So we're going to get into a break for the second, the third hour.
 I'll start the break for that and then continue the
[01:48:34]
 mini evaluation with Chris after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the rank third hour of class.
 So I'm just going to post the upcoming assignment.
 That's two.
 And I'll open the breakout rooms again.
 But for this first part, it's just going to be open for 20 minutes because that's the remaining time
 For the mini evaluation and then I'll reopen it after the 20 minutes
 Okay, break out rooms are open
[01:59:44]
 I'll see you in there Chris. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 Okay, so, alright, so time's up for that first round of the mini evaluation. So I can use that for helping you guys with
 whatever you're working on. I'm going to reset the brain rooms.
 So I'm gonna reset the break rooms.
 For 30 minutes, okay, Chris, you have a question.
 - Yeah, do I have to, do I have to send a more key vowel or how do I?
 - Yeah, so let me have to finish up the notes here in the whatever we didn't finish.
[02:20:50]
 Let's see here and we were in the middle of talking about Redux. So talking about actions. [ Writing on Board ]
 Since I didn't turn this in on time, so I didn't turn this on on time.
 Okay. Okay. So I don't have to get to it.
 So then we probably have enough even if
 Even if we went over an hour, I would probably at least we could probably still get through two more points before the hours over with
 Okay.
 Okay. You can make a, so I submitted the, breakout rooms are open.
[02:22:16]
 So David, Alexandra, how are you?
 Are you guys doing?
 How's your coding going
 David are you all caught up
 Where are you at in the assignments?
 And Alexandra okay Chris you have a question?
 - Yeah, sorry. I'm, I'm, I gotta leave it 9.30,
[02:22:48]
 so I'm not gonna be able to do this today,
 but can we do this tomorrow?
 I can submit it now, we can do it tomorrow or something.
 - Yeah, that's fine.
 It doesn't have a,
 - Oh, wait, you should be able to
 so that you don't see an option to submit it. Yeah.
[02:23:10]
 And let me double check. [no audio]
 I'm going to go ahead and
 fill the 14th and let me
 just double check the
 settings here.
 [no audio] Okay, wrong date. Okay, um, alright, should be able to submit it now. Got it.
 Okay, thanks. Okay, perfect. Thank you. Are there David?
[02:24:33]
 Haven't heard from you in the while.
 Any status updates? How about you, Alexandra? Okay.
 How about you Alexandra?
 Okay.
 So since we're here, Chris, what are you going to work on right now and are you finding
 any difficulties with anything? Okay, so I guess you step away.
 I'm just going to be here for the remainder of the class.
[02:25:59]
 If anyone has any questions.
 Or something else that might be more useful.
 I can watch your code while you're working on your projects.
 It's called Para Programming, where you can have two sets of
 eyes. One person will be coding, the other one, which will be me.
 I mean, you'll be coding and I'll be just helping you, you know,
 giving you tips on your coding or helping you catch typos and bugs.
[02:26:39]
 A little bit faster than if you did it by yourself. And if you did the coding by
 yourself,
 error programming.
 Just let me know. I'll be here. I'll stand by. Bye. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so the breakout rooms are back and in conclusion, we started the walkthrough for
 Redux account practice.
 And we did many evaluations and you had a chance to work on catching up.
 Now, if you forgot to take attendance, now's a good time to do it.
[02:51:13]
 You have three minutes to do that.
 Other than that, class is dismissed.
 That's today's class focused on evaluations.
 Ask the ground for a few minutes just in case anyone has questions. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/May 14, 2025 20-56.txt"

Transcript from May 14, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 It's week 10, day three, and the focus of this week is evaluations.
 So today's agenda.
 We'll do announcements. I mean, we'll take attendance, do announcements, review.
 I'll give you a quick tip.
 Then continue with the practice.
 On a second hour, many evaluations, but I will post the practice while
[00:00:36]
 opening the breakout rooms.
 Third hour, also many evaluations, but I'll post the assignment.
 Follow the opening breakout rooms.
 So you can take attendance. If you haven't marked your attendance yet, make sure you head on over to your codecs account and mark yourself present.
 Now time the announcements.
 Again, student collaboration day is Monday, May 19.
 Last day of class is less than two weeks away.
[00:01:52]
 It's crunch time, no time to rest.
 Last day of class is the 24th.
 But you should actually try to be ready and presentable because they're hoping that
 we can present on Tuesday of next week.
 Present what you have, even if it may or may not be graded, even if you haven't done
 all of your evaluations present what you have if they
 if they want to go through and continue with Tuesday
[00:02:33]
 and I'll see what I can do now pushing it until Thursday Okay, so time limit for linear evaluations is 60 minutes.
 So it's good if you can have your notes all together.
 You can put notes in your comments.
 When you do your linear evaluations that will faster.
 You know, have all the information in need.
 Okay, so no more corrections for week 8.
 eight corrections for week nine have closed and what I can still I can still continue to do evaluations I mean submissions for week nine
[00:03:45]
 have both, but I can still continue to do the corrections
 for week nine.
 But this is week 10.
 I still haven't written it here.
 Week 10.
 In the evaluations.
 This is the final evaluation. This is this is it when she gets this done rather than with evaluations. Hopefully you have all the points
[00:04:16]
 you need for all the evaluations. So this one for on time submission. She submitted it by yesterday.
 But she can submit it for late credit
 interactions until May 20.
 This is the final evaluation.
 And basically it's about transformers JS
 and how your capstone uses it.
 AI interface, so this is for your front end,
[00:04:59]
 your capstone front end,
 should have a AI interface, and it should, it should use the response from the
 AI in the backend.
 I mean, this is, this is easy to do if you just take what I showed you in the sandbox
 and just pop it into your capstone.
 That'll put this requirement, but the capstone finale though, capsstone finale over here,
 requires it for it to look nice and to be practical integrated into your website somehow.
[00:05:36]
 Not like some example page or anything like that that looks unpolished.
 No, we should look polished inside of your capstone canal.
 But for the evaluation, we just need it to be set up.
 It doesn't need to be polished for the evaluation.
 We just need to be able to talk about it
 and make it work in the capstone.
 Persistent and expiring logins.
[00:06:03]
 I showed you how to do that.
 I showed you how to do those last week just in case you needed a boost in applying that.
 And then the last one is editable accounts. Okay.
 Let's see here.
 So the assignments are still in the process of being graded.
 You'll receive extensions.
 Let's see, we have some close assignments.
[00:06:44]
 App engine. We have some close assignments, half engine, close this for Lake Credit on Thursday.
 Capital finale is due on Thursday.
 Remember, capital finale here. And here,
 May 15th before class.
 So that's tomorrow.
 They credit until a little week after.
 So we should basically have all the capstone assignments integrated. And this is just a quick list of those. your front end should connect to local and deployed servers when it's appropriate.
[00:07:53]
 And then this one properly structure and design the front end to provide an overall good
 user experience.
 So this one will help your presentations to show how follows your website looks like
 and how practical it is instead of just showing examples it's showing an actual
 thing that you can have customers visit and sell things
 on a service.
 services. For be a very good project, it'll be a very good project when you have a job interview. And it's just a basically a polished website that's ready to go and customers can start using it. Or at least your friends and family can start using it.
[00:08:46]
 And it doesn't look like an example website.
 All of these are,
 other things that we learned previous weeks
 like artificial intelligence,
 persistent login, editable accounts, using the post method,
 use the post method for security.
 So I need to start switching over to the post method
[00:09:23]
 if you're not already doing that.
 So, you don't have enough points in some of these assignments contact the student's success team.
 So, they can, you know, open up some of your close assignments.
 If you're working on, if some of these assignments close on you,
 which you've made it all the way to the finale,
 it's most likely that you do meet the requirements released
 and easily get the points for it.
[00:10:02]
 easy to get the points for it.
 Let's see. Don't get stuck for more than 15 minutes. Post into like, "Ho, ho, ho."
 And hopefully someone answers your question there and/or hopefully you find the solution before someone answers.
 As long as, at least if you post, then you have an opportunity,
 I mean, like you have a backup just in case,
 it might have been a situation where you could have been stepped for four hours,
 but because you posted it in July cohort,
[00:10:38]
 you were only stepped for 30 minutes.
 So you never know.
 Tonight cohort is a posting into my cohort is a way to just have a back-to-plant. And I see there's a new post here, you can see what this is all about. It looks like Alexander fixing here.
 Up and on.
 Skip that.
 And then.
 Alexander mock it.
[00:11:21]
 Okay, so. So in this case, you can mock it by just providing the location.
 You can set the value, I think, maybe not.
 I'm not sure.
 I haven't tried it, but it hasn't been necessary in any of the tests.
 So this one, Windows had to find.
 Show them the class.
 You need to install just environment.
[00:11:54]
 JSTOM.
 And you need to put it in the adjust config file.
 So this is for front and testing front end expects window location things will not refine. But if you're using just you can search through the transcripts,
 right top of that.
 Getting a 404 in AWS Lambda.
 Change post methods. So, as you get, cannot get.
 All these easy, I get the best instead of closer class. post here, but it should be axial should be using post. So I can also ask him if you are going to contact your AWS
[00:13:14]
 name with server manually, you can use postman and use the post method of postman.
 And so we get method.
 postman and said we get met it
 let's see both methods and explain locally.
 And then,
 and if it's saying "cannot" again, that means he's most likely using axiels.get instead of axiels.co.
 that again instead of X-E of black posts.
[00:14:09]
 But he's saying it's working on locally.
 So possibly we got to rebuild. I extended the So, yeah, for this one, I would say, go check your front end, make sure it's easy, axial is dot close.
 No book, LM.
 So no book LM.
 You can give your fast notes, your code and
 fast transcripts. Something I figured out, no book LM also accepts the URL of [BLANK_AUDIO] Okay, so here's a GitHub repository.
 Here's one of the files I have.
[00:15:56]
 I'll just take the redirect.
 If you try to give this link to the file, I mean to notebook LM.
 It's not doing a work.
 So I think redirect.js.
 It's not going to work. There should be an error here. [inaudible]
 [inaudible]
 [inaudible] Yeah, that one doesn't look accurate. to get something that'll work. You need to click on "off". Then when you see it look like the time here.
[00:17:56]
 yeah this one looks here
 so the tip here, go cook lm also except some URL of raw code from GitHub. So when you go to GitHub and you want to pick a file,
 one of your files from there, click on raw,
 or click on the file first, click on raw,
 and it looks like this.
 That's what you can give to know from them and add it to the sources.
 I actually, I think I added transcript to the game one.
[00:18:40]
 Now, this transcript up to week 10 day one.
 And now we're going to review. So get ready to, you know, just absorb or take notes if I say anything new.
 And now the microphone's ready just in case we have any questions for
 later we're going to do a media evaluation.
 Okay, so now time for the review.
 So with read-up read-ups account practice,
 we started
[00:19:25]
 to use Redux to toggle access to the account page,
 where users can edit their information.
 We were able to do this create an account component,
 let the model contain an editable form,
 except for email.
 And I also didn't want to change the password. At least
 not yet. That's gonna make things a little bit more difficult. When the
[00:19:54]
 account is submitted, update the database. So I didn't get a chance to be that
 yet. So let's just see how this looks first.
 A little pile. [BLANK_AUDIO] [BLANK_AUDIO]
 [BLANK_AUDIO] start. I say he changes, he changes route to post. This one could stay on yet. So he should be changing that
 back to get
 all right so with this render
 the front end (mumbling) [BLANK_AUDIO] I did install something. I didn't stop sleeping. I don't know if that helps. Anyways, I'm excited for you.
[00:23:29]
 I'm excited.
 Being easy.
 Okay, so we, we'll be signed in.
 So you met within the account page right here.
 And we had some information.
 So for the practice, we got to this part with the
 modal contained in the whole form with the
[00:24:18]
 counts information. So that's how far we got.
 I'm gonna continue with that.
 So I'm gonna switch to the next slide here.
 Actually, before I continue,
 then you guys, let me give you guys a chip.
 So what you could do is combine code
 into one text file or notebook L.F.
[00:24:59]
 So remember how notebook L.F. won't accept your code
 as a JavaScript file. Well, what you could do is just combine all your code into
 what text file. Now we, you don't need to do any converting, I mean, you don't
 need to manually convert your code into text files. And you say, "Space by just
 dumping all your code into one file." So I'm gonna show you guys how to do this. That way
 you can easily include your code in notebook L.M.
 I'm going to put this in the tip section. So these are all command lines right here. You can just fix them.
[00:26:16]
 You shouldn't get space there.
 Another command line.
 And I'll describe what each thing does here. Each flag, each option.
 Okay, let's follow the steps. Right here.
 We're going to combine our code into one text file and then we'll put the Lm.
 So let's install in the dead dependencies,
 attacking called content.cli.
[00:27:16]
 Next, the admin is listening.
 I guess I'm going to put that on the front end.
 And here I can install, save that, come cat, see how it might look like that.
 Come cat means like concatenate or combine things together and see a live command line, but it's also a
 function. So who want to use the command line for a it's command, well, NPX, let's you run one of the node modules.
 So here's node module, and takes that you run the node module in the terminal.
 Files, this flag here or this option, let's use specify which files to concatenate
[00:28:25]
 or to put it to merge together.
 I need to fix something here.
 Some things, there's too many spaces.
 There should not be spaces here.
 So not these spaces here.
 There you can see it. here. Again files specifies which files you want to merge together and this is This means right here go into the source folder and all sub folders in the source folder. If and I have many folders inside of it.
 And once you actually, I just have one file inside of it,
[00:29:55]
 directly inside of the source folder.
 So, we want to merge all the files inside of there including the ones in the subholders so
 that's what the two wild cards here meet. The asterisk means get all the sub
 folders and this one right here wild card for file names so any file name and
 then the dot and then ends with any extension.
 So this basically means any folder, any file in those folders.
 Here's the output flag.
[00:30:44]
 It tells us which file you want to combine them into. And so I want to combine it all into cool not text.
 So I'm just going to copy this code here.
 Run it on the front and command line.
 And then a root folder.
 Because the root folder has access to the source folder.
 because the holder has access to the resource holder.
 If this works, I should have a file called code.txt.
[00:31:20]
 So I'm here around here and it should contain all the code from front end. and looks like it finished.
 Let's look at the, let's look at the results here.
 Here's code now text.
 And here's all the code from the form. And just keeps unglowing and going.
 This is all the files merged together.
 Next one is this one for including the files in the current folder.
 So NPX, that's this a node package in the terminal.
[00:32:07]
 Here's a node package we want to write and we want to specify the files.
 So in the current folder we want to include JavaScript files,
 TypeScript files, NCL files and JSON files.
 And then we want to output it to the file called config.txt.
 So this one will get us things in the root folder.
 Because right now, right now these things over here, these over here I just coat from the source folder.
 I don't have anything from the config or the root folder.
[00:32:50]
 See, I have these files right here, but none of these are, you know,
 merged together like this.
 I'm going to merge them together with that code right there.
 To the JavaScript files in the root folder, time to go to HTML and JSON files.
 And then I'll put it to config.txt.
 So basically, I'm going to config.txt.
 OK, so I ran the command.
[00:33:22]
 I see config.txt.
 So it has things from my, my Babel.
 This one has redirect.js.
 This declaration file.
 This one's the Webpack file.
 Okay.
 Okay, so I got those.
[00:33:43]
 Now I can add code text and config.text to notebook L.F. [no audio]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible]
 [inaudible] So what should I ask you? How do I set of read-ups?
[00:34:30]
 So it doesn't have the notes about read-ups, but it has my read-ups code.
 So let's see if it says anything interesting about that. You have two of the kit, we have three dots, and it's mentioning that two packages
 we need right here.
 Yep, that's right.
 Store and selectors.
 So we save them in the store folder. State selectors.
 It looks good.
[00:35:17]
 Yeah, it looks good. So you won't see this kind of strategy if you search for it on
 the internet. I'm teaching you search for it on the internet.
 I'm teaching you the easy way to use Redux.
 When you search on the internet it's more complicated.
 So this looks good.
 So that's the tip there.
 You can combine your files into one.
[00:35:50]
 We'll contact that CLI and then
 bring it over. You can do the same thing with your notes,
 which are notes into one file.
 And then bring it over to notebook L.M.
 It will answer your questions. We'll go to the next one. We'll go to the next one. We'll go to the next one. We'll go to the next one. We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
[00:36:07]
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
[00:36:14]
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
[00:36:21]
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one.
 We'll go to the next one. We'll go to the next one. We'll go to the next one. We'll go to the next one. the account form is submitted update the database.
 So I'm going to share my screen again.
 So here's the account model. Here's the form.
 And we'll submit. So under that is, to do is I'm going to sign up this similar.
[00:37:07]
 So I'm going to go into the sign up here.
 I'm just going to sign up.
 I'm going to sign up.
 I'm going to model it.
 So before I just sent the event object to the head alert,
 with this time I'm doing all the immense stuff here. So that's okay.
 I can continue with this since I haven't.
[00:37:49]
 But it's better you can re-factuate outside.
 So this part looks cleaner and so that this component just focuses on rendering things things and setting up read-ups where it is. on the same here.
 And puts them in a dark corner back in this.
 [BLANK_AUDIO] You can be on the password, no, I'm not going to get the votes.
 I don't want those.
 I like, I'm gonna get the name and the phone number.
 [BLANK_AUDIO] and the phone will rip.
[00:39:11]
 I'm gonna get the name and the phone number.
 And this will make a new thing to close the button.
 I should make this in sync so that this await from the handle.
 I'm going to use a different button called I can't repeat.
 You're acting as colorful, okay?
 So, actually, no, I'll let it update the name and the owner.
 I'm not going to make a TDD for this,
[00:40:14]
 because just to hit this down on the caster,
 we already have a TDD for the sign of localize.
 It's very similar.
 So if it updates, if it updates,
 then I want to receive the account information.
 But if it doesn't update, I want it to be in blank.
 So if it does update, if I want it to view,
[00:40:56]
 I want it to update the account object.
 update the account object and also I want to clear up any errors here there are messages I don't need to do anything with persistent login. If you want to include the form, and we set everything,
 and if there's an error, set account, and we will error message.
 There was an error.
 Okay, so to do this, to get rid of these errors, I can do this. Use dispatch.
 I need to bring this in.
 I need to bring this, I don't have access to this batch because it's outside of the
[00:42:52]
 component, so I'm going to bring all of this in.
 I'm going to be with here on the bottom.
 So it doesn't apply right to the top.
 I want the top to be clean.
 I want to focus on the rendering. When I'm looking at the component, from top to the clean. I want to focus on the rendering.
 When I'm looking at the component,
 from top to bottom, I just want to look at the things
[00:43:10]
 that involve the rendering.
 And then if I need to look at the headlifts in,
 I'll just go down and look at the panel.
 OK, so I need to set object.
 Okay, so I need to set object. I don't have anything for the counter-modal error message.
 So I'm going to set that up. [no audio] Just like that first.
 Make sure I have a select record.
[00:44:26]
 Just copy this down and hit "4". I can't move over every message.
 I need to select that.
 It looks like that.
 It's selected.
 Unless the name is variable, then I create it in state.
 Variable file. the name is variable, then I create it in state variable style.
 So I actually need to select it from here.
[00:45:01]
 But I do, I do need to select it, but not from here. It's gonna be used in the contents right here
 the error message
 so now I can select use select
 select account I need to put a few that work for me. And this one I haven't made this, I haven't made this
 function yet.
 That's okay, then just quickly make that function here and if you want and do account update.us and it's going to make an I think it takes ending your name and playing with the strings. which are more streams.
 And this is going to return a promise which results in the account
[00:46:56]
 for undefined.
 And that's the function signature.
 As I want, I wanted to either return in account if it was successful
 or nothing if it was not successful.
 Let's see if it rendered anything there.
 I don't see the placeholder, so that's good.
 If I refresh this, yeah, so we can see that the error message is blank.
[00:47:40]
 That's good I can change it here
 just like this
 just like this is the electric working
 property the placeholder right there
 that's a thing and then we'll select the other side.
 And then we'll select the other side.
 And then we'll select the other side.
[00:48:19]
 And then we'll select the other side. Now all that's left to do is set up this handler.
 Put a front there.
 Put a little one in the tab.
 You can go first.
 So this is the handler.
 I'm just going to copy the sign of the tent here.
 I'll see what else I'll need to change.
[00:48:54]
 Actually, this is not going to work.
 That's sign in the tent. and the same rectangle. Right here.
 And you guys should have something similar to this. Like this is the part that chooses which you are an L.
 It's a bit either the local or the deploy.
 So basically it's been trying to connect to the lambda server,
 but if it doesn't, it's going to connect to the local server.
 So here.
[00:49:41]
 This one is going to send some data,
 which is going to be this one for me.
 We will get this mixed up here. and the corner.
 and the corner.
 and the corner.
 And I'm not going to send it to the sub-assign of route. I want to send it to the update route.
 I haven't created it yet, but I already have an idea that I wanted to go to a route called
[00:50:36]
 update.
 And then all this looks fine right here.
 So now I have to rip off the back end.
 But we're running out of time.
 So I have to continue on the back end,
 tomorrow.
 But this wind should compete
[00:51:00]
 in front end.
 So let me just put a,
 you look it right here here because this is a hardware
 little crate because there's no vacuum to accept this.
 I mean there's no rot to accept that.
 So let's just get that far. So if I'm going to change this here, instead of handy it will be Arnold.
 Instead of sighted, I need to change that. I'm just fixing that first.
[00:51:52]
 I'm going to save.
 And then you see.
 And so it says "safe" right there. Change its Arnold.
 It's safe.
 And so if you handle a couple of things,
 you can't handle it.
 And if you can't handle it.
[00:52:22]
 And if you can't handle it that. Try it again. and for it.
 Alright again.
 Okay so this is the part where it's going to go to my local host URL.
 Which is not working right now because I haven't set up the big route. It's supposed to send the data. So this is the part where it's going to break.
 I'll just press 'Pray' and it breaks.
 And I'll continue with this tomorrow. some more.
 Now we're going to guys after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break.
[01:03:55]
 For the second hour of class, I'm just going to post a practice just in case you want to work on it.
 And I'm also going to open the breakout rooms. [no audio]
 [no audio]
 [no audio] Okay, so the break-, I'm going to look at the lineup.
 Unless anyone wants to volunteer for either corrections or many evaluation. We need to get these many evaluations out of the way.
 Oh.
 - Kiss.
[01:05:44]
 - I saw it to finish week nine, but so this is my second attempt. If I don't what happens if I can
 If I don't explain these well enough to
 Do you think you're ready?
 Now I need to look more at this
 App engine and Okay, well, okay, so you want to do so that's correct Now, I need to look more at this app engine.
 Okay, well, okay, so you want to do, so that's corrections for week nine, right?
 Yeah. So, I'm taking corrections for week nine all this week.
[01:06:18]
 Okay.
 So, if you're not ready for that, and it's going to be your second submission, you want
 to make an account.
 Right.
 But there are some things for week 10 that you probably can get out of the way.
 Let me look at it, see if I, yeah, I just saw that I have something from, let me see, let's just, it's from,
 two, an assignment that,
[01:06:59]
 oh, an evaluation for week two.
 What happened?
 I added a 64 on an assignment from week two.
 Having a good.
 Okay, so yeah, that's something you have to contact.
 I'll contact you.
 I'll contact you.
[01:07:17]
 Success team.
 Yeah.
 And if you need to get that reopened up.
 Okay, I'll message them.
 Let's see, with 10.
 Yeah, I can, I can maybe do this, the third and fourth one.
 Questions?
[01:07:44]
 Okay. All right, so let's head on over to the
 mini evaluation room and I'll use to get those out of the way. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Oops.
 Okay, so we're going to'll see you guys after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break and into the third alvera class where I'll just post the assignment and open the breakout rooms.
 And then we get those open first.
 Let's see here. 40 minutes for the remainder of Chris's MIDI evaluation, and then I'll reopen the breakout
 rooms.
 Okay, Chris, I'll see you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] >> Is there a pass?
[02:25:26]
 >> Evaluation rules are.
 >> That was 16 minutes when I did my evaluations and when I was a student, there are only 30 minutes.
 So I had to stay focused and not ask any questions but just do all the talking according to what the notes I had prepared.
 So I see. Yeah, at least you got some points and I gave you that point on the persistent.
 Oh, cool. Thanks. Oh, actually, no, I can't give you because you didn't talk about the expiring,
 but we're going to continue with the expiring there. Oh yeah, I didn't do the expiring, it's right. But yeah, we'll continue that. Once you have everything, I'm sure
 you'll just breeze through the rest of the topics there. Yeah, the AI stuff I'm not.
[02:26:23]
 Yeah, the AI stuff I'm not. Yeah.
 Yeah.
 So I'll just remember the evaluations are 60 minutes time
 limit.
 So it's good to stay on topic.
 And you know.
 OK.
[02:26:45]
 Let's see. So the rest of this time, I can use for another mini evaluation or corrections, or I can
 just answer questions that anyone has, or if you want me to take a look at your code
 and get my opinion on it, I can do that too.
 Otherwise, I'll let you opinion on it. I can do that too.
 Otherwise, I'll let you work on things. I'm gonna open the breakout rooms.
 Chris, you have a question.
 Thank you.
[02:27:17]
 - Can you just quickly show me how to do the time out?
 - Yeah.
 A time out while we're testing for the expiring.
 Oh, okay.
 Is it just adding like a...
 - Okay, so let's see here.
 I'm gonna pull up this sandbox.
[02:27:43]
 Let's see here. I'm going to pull up this sandbox.
 But the breakout rooms are open for 20 minutes just in case anyone wants to
 breakout will just open and I got popped into it. Was that not supposed to happen?
 I'm going to do this in the main room. Okay.
 I'm still in the main room, but I can hear you in the main room. I'm just sharing my screen in the main room. Oops. I'm going to run the
 thing there. Okay, so there was a practice we had on expiring persistence.
 Right here.
[02:28:41]
 Persistent login practice instructions. When the sign in area amounts get the
 let's see where do you want me to start. I just need to see like where this
 current timestamp and date just how it's used. Okay so the first occurrence is
 here at the beginning. When the user's authenticate,
 I'm going to get the first timestamp.
 You were using on the AWS. Is it okay if I use my read?
 Yeah.
[02:29:15]
 Okay.
 Because they're going to basically do the same thing.
 Yeah.
 And that's what I, yeah.
 I just reused my code that already did that.
 Okay.
 Cool.
[02:29:27]
 But if you, if you basically duplicated your code so that your, so that all your
 credit stuff is not in the same section.
 Yeah.
 And that's fine too.
 Oh, yeah, I'm going to switch the front end.
 I'm going to go to the part where we sign in.
 Then close everything here.
[02:29:50]
 So we can stay focused on the sign in.
 Sign in area or actually sign in model.
 There's a sign in modal when we get signed in.
 So it's going to handle the sign in right here.
 If it gets signed in successfully, I'm going to get an account, which contains their
 email, their password, their name, and their phone number.
 So if there is an account, I'm going to do these things right here.
[02:30:29]
 I'll save the account information and Redux,
 which makes that account information available to all the components.
 Then I'm going to save the persistent login.
 I refactored it out into another function.
 Because I'm going to use the same function when I create an account.
 So basically I'm going to reuse my code instead of typing it twice. Okay, why is it not going? There it is. All right, so let's
 see what the instructions say. Just going to go here. In the front end, when the users authenticate, get the current timestamp and date.
[02:31:26]
 OK, so they just authenticated.
 Wait, did I not?
 Oh, here it is.
 OK.
 I'm going to get the current timestamp with date.now.
 This is going to give me the number of milliseconds that have passed since
 1970. I'm going to save this object and just save that string of find object in the credentials key.
[02:32:10]
 Think of this as like one of the state variables in Redux and this is the value of that state variable. So, I have to string a find object because I can't store objects directly in local storage,
 local storage only stores strings.
 So, I string a find this object and save it in local storage right here with set item.
 So, the timestamp. So, your question was at that time stamp.
 So date.now, that provides this timestamp of when they logged in.
 Store the user's email password and timestamp in an object.
 So that's where it happens here.
[02:33:14]
 Use persistent login practice instructions to store login info.
 With local storage. So that's what happened here.
 During the file the object and then store that object. I know what you Chris I know that what you're doing is just saving each individual email and password and.
 In the individual key.
 That's fine too that way you don't need to stringify anything.
 that's fine too that way you don't need to stringify anything. But it would be actually better to pass the whole object because it keeps the time stamp with account like otherwise they're kind of something.
 And if they're all really if it's related you do want to keep them together in this kind of object format. - Yeah. - Because if they're separated out,
[02:34:05]
 and sometimes those can get to mixed up.
 So that's, I mean, it's more straightforward
 to just store individual items like that.
 It's easy, 'cause you don't have to stringify anything.
 But just one little step like this,
 then you keep them all together.
 - So when you do the, if it's streamifying the whole object, how is it, how are you able to
[02:34:35]
 subtract the current time from the, or the time sample the current time. I have to parse it.
 So it's stored as a string, but then when I get that string out, so let me get to that part.
 Okay.
 So when the sign in area mounts,
 get the current time time stamp with date dot now.
 So I want to check the basically.
 That's one the user, you know, opens the computer and they,
[02:35:10]
 let's say they log into the website. So let me see what happened here. Oh, this is,
 this is when I try to go to the other path. So like right now, I'm still signed in,
 path. So like right now, I'm still signed in. Still signed in. I tried to go to the update path, which is haven't created yet. So that's why I crashed. I'm still signed in and
 then let's say I'm a user and I just shut down my computer, shut down my computer that
 represents showing down my computer and then I log back in and open my browser.
 I'm still signed in.
 So when I open my browser, that's the that's the mount.
[02:35:52]
 It just got it just remounted the sign in area.
 So that's why this one says when the sign in area melts.
 Get the timestamp.
 That just basically means that the user
 just opened up their computer again.
 - Here you go.
 What do I did now?
[02:36:17]
 - So where is it sign in area?
 - Okay.
 - So here's the component did map. Yeah.
 Okay, and there's component here's the sign in area. So when it mounts,
 I know that the user just logged in or opened it.
 They opened the browser and I want to check what's if they
 said still stayed long, the logged in or not.
[02:36:48]
 So, so I have a separate function called get persistent login, which is over here.
 The reason why I wanted to take it out to a separate function is because I need a sync.
 to a separate function is because I need async.
 - async.
 - Yeah, because I'm gonna,
 I'm going to use a wait right here.
 You can't use async inside of component in mount.
[02:37:22]
 I mean, you can't use a wait in component in mount.
 Because if you put async in front of here, your cause component did mount. Because if you put a sink in front of here,
 you cause component did mount to load return to promise.
 You cause component did mount to return to promise, which is not something you want to do, because uh, but what do you need to, what do you need a sink? Can it just
 But what do you need to what do you need a sink? Can it just can't you just because
 All right, time because I
 Because I need to
[02:37:54]
 Possibly log out the user. I mean
 Reload, I mean, I need to log in the user
 because when they when they open their browser again
 They're not gonna be logged in Their information will be saved in local storage, but they won't be logged in. It's also
 possible that their password changed because they might have been logged
 in somewhere else. So there's something as I need to verify with the back end
 before I can log them in basically. I need to verify with the backend before I can log them in basically.
[02:38:27]
 I need to verify things with the backend.
 So you're talking about like if you're talking about automatically logging them in for certain amount, you may say log.
 Blog out somehow.
 No, yeah, yeah, that's right.
 When they log out like they have maybe they have a browser open and one computer,
 and then they have another browser, just like that,
 in another computer.
[02:38:56]
 So they could log out of this computer.
 If they log out of this computer,
 they should also log out of this computer, they should also log out of this computer.
 Right. So if I log out here,
 whoops, what happened? Why did it say that?
 Well, isn't local storage just set on the brow? Isn't that part of the DOM?
 So that's just local, I mean, so that's just a persistent lot for that one browser.
[02:39:26]
 And let me fix this part.
 Why does this thing break now?
 Can't even sign out.
 Oh, okay.
 So I got signed out.
 That's why it didn't let me.
 Okay.
[02:39:41]
 So let me just sign in here.
 What was your question again?
 - So persistent logins is only good for that browser
 because if look that local storage is just saved
 on that dom or that browser or is it?
 - Yeah.
 Oh, actually, yeah, it's only, let me see.
[02:40:04]
 Yeah, if they are, it's gonna be local storage on,
 you know, this is edge, the local storage on
 Chrome is different because there are different browsers.
 You're not really logged into the,
 you're just logged into that browser basically.
 You persist at all.
 Yeah, logged into the browser. Actually.
[02:40:26]
 But ideally, you wanted to be able to log into both,
 but that might not-- that's not a requirement right now.
 So let's say I have another browser right here. If I sign out of this browser, I should also,
 "Oh, I'm not signed into this browser."
 So there's no verification.
 Right now there's no verification if I'm signed in or out of another browser.
 >> And is it possible to sign in automatically
[02:41:05]
 on another browser if you're signed into,
 because when you have to go to the process of sign.
 - Well, what, is it possible?
 No, it's not possible unless the email was saved already.
 So yeah, like in all other production ready websites,
 if you're going onto a different browser, you have to sign in
 and basically that will cause the sign in to be saved in that browser.
[02:41:34]
 What about just like a different device?
 Yeah, even that too. A different device is local storage are, you know, local storage are local storage on chrome is different than the local storage and edge.
 Okay, so if I say my local storage here in chrome edge doesn't know about it because it has its own local storage.
 Could you do like a
 So the next step, well, let me just focus on one browser. Sorry.
 So it doesn't get confusing.
 Yeah.
[02:42:12]
 Let me just, that gets more complicated when you're thinking of cross-browser synchronization.
 Yeah.
 So when the sign-in area mounts get the current time stamp and date.
 So this is where I'm doing here. I'm gonna
 okay, so I'm gonna get the first I need to get the saved login. Right there, you're going to get the saved login. So if there is a login, it's kind of coming as a string.
 I mean, it's going to come in as a string, but I need to parse it and turn it back into an object.
 And this object, I'm going to just destructure it, but I can get some values.
[02:43:10]
 Here's the timestamp that I'm getting. So this is
 the timestamp of when the browser is reloaded.
 They just came back, they stepped away from their desk, and now
 they're back, maybe they're back one day later, or maybe they're back one hour
 later. We don't know, that's what this one checks. How long has it been since
 they've reloaded? Or since they've logged in. So here, this is where we check their laps time.
 How long has it been?
[02:43:48]
 We subtract the current.
 We subtract the, this is a timestamp when they logged in.
 This is a timestamp when the page was reloaded.
 So we're gonna get the time to lapsed.
 And I'm gonna create a Boolean variable here.
 This one tells me if it's expired.
 In this case, if the time elapsed is greater than one day,
[02:44:12]
 that's 86,400,000 milliseconds, you can ask AI.
 Like, how many milliseconds is in a day?
 I did have to talk it. it like they were like right away.
 Yeah. So if it is expired, I'm going to just clear the,
 clear that key in the local storage.
 That way there's no more login.
 Yeah. But if it's not expired,
[02:44:46]
 if it's not expired, I'm gonna read log them in.
 How do I read log them in?
 I don't have their full account information.
 I only have their email in password.
 For security purposes, I'm just keeping the bare minimum.
 Okay.
 So technically, if you do save their full account information in
[02:45:09]
 your in your local storage, then maybe you don't have to re-authenticate. But in
 this case, I am re-authenticating because it's possible that they did change their
 password through a different browser.
 So what's it, why are you, since you're defining what an expired amount of time is,
 and you're saying if it has expired, we'll just reload it.
 And why not just extend the expired time?
 What's that?
[02:45:48]
 Well, if you could do that, if you want, I want to set it to a fixed amount of time.
 But if you want to extend the expiration,
 you can do that too.
 So it looks like if it's expired,
 you're logging them in automatically.
 So if it's expired, I'm clearing the credentials.
 - Oh, if it's not expired, you're resetting the day.
[02:46:11]
 - If it is, yeah, if it's expired,
 I clear the local storage, which says that
 there's nothing saved.
 - Yeah.
 And then I'll--. And then other one.
 In recent time out for that.
 Because if they, basically, if they, if they reload the browser,
[02:46:39]
 they are not logged in because before I had, before I had persistent log in if you just
 refresh the browser it logs me out right yeah so it returns back to that
 state so when the browser is reloaded it just clears the local storage and
 they're already logged out because that's the default behavior when you
 reload a a browser the person gets logged out automatically that's the default behavior when you reload a browser, the person gets logged out automatically.
 That's the default behavior where we're overriding that with persistent login.
 But so if it's not expired, that's when I reauthenticate them just to make sure their email
[02:47:17]
 and their password match because it's possible that they could have changed these in a different
 browser.
 is possible that they could have changed these in a different browser.
 - Well, what happens if they did?
 - If they did change us in a different browser,
 then they will get logged out right here.
 - Oh, yeah, okay.
[02:47:43]
 - Okay.
 You know, for security purposes, what if they change their password in another browser,
 but in this original browser it didn't change,
 that becomes a security risk because someone else can start using this browser.
 You know how on Facebook you can say,
 log me out of all of my devices and all the browsers.
 So it's a similar feature. It's like that. Okay, basically logs them out of all. If the password
[02:48:14]
 changed, it logs them out of all all instances, all browsers. So yeah, so this checks it.
 So, yeah, so this checks it. So if it's still authenticates, then it's going to, you know, save the account and they're logged in.
 This is basically, if I save the account, it's going to trigger the login.
 But if it doesn't reauthenticate, it goes to here, which clears the credentials. That saved in local storage.
 And no login ever happens.
 Okay.
 That was good.
[02:48:54]
 Good demo.
 Thank you.
 So, basically, just follow the steps in here
 and they should get you going.
 We got to this part.
 This is expiration.
 If it's more than a day, sorry, empty string.
[02:49:14]
 And the empty string basically indicates the expired
 login.
 So once you get to that part, the empty string,
 then you're basically done.
 But I have here, if there's an account, that's
 how I'm going to set the buttons here, the me visible or invisible.
 OK, that makes sense.
[02:49:42]
 OK, so the breakout rooms are back.
 Okay, so the breakout rooms are back. And then,
 gonna conclude the class.
 So in conclusion, we did some of the
 Redux account practice.
 We didn't get that much in.
 I think we only got one mind. Actually, we didn't finish that line because we have to get the back end going.
[02:50:08]
 We just worked on the front end.
 So there's three minutes to mark your attendance.
 If you have any questions, I'm going to stick around.
 Otherwise, class is dismissed.
 around otherwise classes dismissed. That's that's today on evaluations. [BLANK_AUDIO] >> I'll extend your, do you need help on anything? Want me to help you with any code?
 >> Yeah.
 So I need some help troubleshooting this network issue.
[02:52:04]
 >> Okay. >> It's crashing my back end again.
 Okay.
 It's kind of sad because I've done create and read now update is the one that's, I mean,
 it's, you fit. And I don't have any trouble with update. Any, any, any, a reportable trouble.
 What is the other two?
 Okay, so what's going on here?
 Okay, so excuse me, this network error.
[02:52:34]
 So from, for now, I've just dumped all these on one page.
 The register review and update.
 So I enter all my update info and I hit submit and it crashed the back end server
 It's refusing the connection from the put command here on this part
 Okay, you put put It's a bit supposed to use a post method or the get method
 Whichever you
 But I haven't gotten to the post part in the Oh, there should be.
[02:53:05]
 Yes.
 You should be using axiels that get in order to make the update.
 Yeah, so think of it like a channel.
 Where's your axiels?
 I'm looking for a hang on.
 There's too many things open right now.
 This is front air
[02:53:27]
 All right now we're using axios
 Access communicating on two channels. There's a public channel, which is get and then the secret channel, which is post
 Those are the only channels I talked to you about
 Public channel is get and that's the one you're using your setup for right now,
 I think. You're not using post yet, right? I'm not using post, but I put put in my index.ts.
 Oh,
 It works.
[02:54:02]
 >> It works. >> Okay.
 >> Well, hang on.
 >> Yeah.
 >> Well, we should be using both the standard one.
 >> I know post is standard, but I haven't got there in the assignments yet.
 >> But you're using put, which is a, you're using put, which is something I haven't
 taught you, but it's almost the same thing as, it's pretty much the same thing as post.
[02:54:26]
 - Can you use post in Axios?
 - Yeah.
 - Okay, what I did understand is, to me,
 the word, the keyword get sounds like you're returning something.
 So if I put, get here, is it actually gonna send my updates
 or is it gonna freak out and not doing it?
 Yeah, well, you have to think of that as a CTP methods.
[02:54:54]
 So they're not action words.
 They're not action words.
 They're not action words.
 They're just channels.
 They're channels.
 That makes more sense.
 So this is get is the get is the public channel and post is the think of post as the private channel.
[02:55:14]
 The private. Yeah, is the public. The private is private.
 Okay. Okay. And so you're using a walkie talking and you're just you were just using two channels for simplicity.
 That makes more sense.
 You could use posts if you're set up for it.
 If you're not, then you just use get.
 Okay, let me see.
 I think.
[02:55:39]
 But if you're already, let me see what you did for your back end.
 Your back end. But if you're already, let me see what you did for your backend. My back is work.
 I don't want to touch the back end anymore.
 It's taking me hours to make it function.
 And it might not work because you just changed the axios to get.
 So let's double check your index file for the backend.
 So let's double check your index file for the back end. My index file is get it has gat in the foot.
[02:56:12]
 Yeah, right now it's not set up for the put.
 So you have to change it to get if that's the easiest fix that you can do now.
 I think it's common these out because I don't need them.
 The gats are already there. I didn't take them away. Oh, can just comment these out because I don't need them. The
 gets are already there. I didn't take them away. Oh, okay. Oh, they're doubled up. I see.
 Okay. Right. Cause I didn't want to remove stuff that I need. Yeah. Because some things
 we're using get and other things we're using good. Yeah. I would change those to, um, to post
[02:56:41]
 until you're ready. But I don't want to. I don't want to do that yet because I'm not ready to do post.
 Yeah, I mean, you can keep it commented out, but use posts instead of put.
 Oh, I see what you're saying.
 [pause]
 [pause]
 Your control D. Not working. You're controlled.
 You're not working.
[02:57:07]
 No, I'm just not used to doing it.
 I'm not used to doing it this is faster for me.
 Especially when they're all next to each other.
 If they were like all over the place.
 Okay.
 So.
 It should work like this.
[02:57:27]
 Okay, but it doesn't work.
 And I tried to see what happens.
 Let's see what happens.
 We're going to have to follow one of the routes. So that's what part of the front end is not working when this happened.
 When it wasn't working was the update.
 Okay.
 So the front.
[02:57:54]
 But the create has put in it. So now I have to update all of the stuff on the front. Okay, just, yeah, just the axial, that's a quick fix there.
 Yeah, it's not set up for the put or the post command, but you should be using those because that's the requirement in the. I know, but it's not in this particular assignment that i'm trying to finish. So, yeah, that's why I didn't do.
 Yeah, that's fine.
 Where's my page.
 Okay.
 Console.
 We let it page.
[02:58:31]
 So the part is not working is down here. Well, now I have to retest all of these.
 You have multiple errors there.
 Those are IDs are identical.
 Identical IDs.
 Back in the in the those are errors there. No, I thought they were warnings because they're yellow.
 >> Okay. Well, you should be using unique IDs for each one.
 >> Well, the problem is there are all different components.
[02:58:59]
 And normally all of these components are not going to be loaded at the same time.
 So,
 but they are loaded at the same time. - Right now, yeah.
 So let me comment these two out.
 - Okay.
 - Okay, so that's all that.
 - Dispert development, okay.
[02:59:21]
 Just refresh that.
 So that takes away all those, okay.
 So that takes away all those. Okay.
 Okay, there's some still identical things here.
 You might have copied and pasted some IDs.
 Oh, wait, no, that's a different one.
 Did have autocomplete attributes current password.
[02:59:44]
 Okay, so let's look at, let's see if we can fix that really quick.
 Well, let me see how you made that form.
 Kind of small like.
 That is not the right form anyway.
 Kind of small. I could barely see it on.
 Okay, there. that's better. Because when it's streaming on,
 when it's streaming, it's someone that pixels someone, no, some of the pixels get very.
[03:00:15]
 Oh, that's you. It like it makes it like a square and things like that. So, um,
 like that. So let me see here, it was saying something placeholder, class name, acquired,
 what's the message here? Input elements see, your input says ID.
 That's on account words.
 Quite that.
 What is that?
 See that.
[03:00:54]
 Can I see that?
 OK. type is password placeholder.
 It's not password.
 Okay, I don't not sure what that is.
 But yeah, that's the full room where the answer the password.
 It's shouting about.
 This it doesn't like
[03:01:26]
 something in this div. Yeah, I'm not sure why everything there looks fine. And I
 just found a site builder. I have this user label for user password.
 for user password.
 Yeah, that looks fine.
 I'm not sure. We can continue.
 So you should be able to send something.
 Right, send that to the backend.
[03:01:58]
 Is this for adding?
 Yeah, for adding an account.
 - Yeah, let's make a video of this. - Okay, let's see what happens when you try to.
 Okay.
 For testing purposes, do you want to have it with prepopulated values?
 Or you just wanted the placeholders there.
 I just wanted to placeholders.
[03:02:29]
 Okay. Because they go a lot of populates and from the browser window, once I am
 manually checking it, I don't like this button, this button has to go. So it has a created
 vehicle with the gas. Yeah, so that works. Yeah, that worked. That worked. Would they get method or think of it like the get channel.
 This one is good. Let me try the read one again.
 Oh, I can't you.
 >> I can't you. >> Yeah. Those were commented together.
 So you have to uncomment them together.
[03:03:09]
 >> I did the model together.
 Oops.
 >> Oops.
 >> There's a div all the way at the end.
 You have to bring it down.
 Where did it have to get thrown?
 That's that, dude.
[03:03:30]
 This is moving, Stephanie.
 Stop that.
 I had to fix this.
 I don't remember how to fix it.
 So I left it alone for now. OK, so it's working. You got to fix this. I don't remember how to fix it, so I left it alone for now.
 >> Okay. So it's working.
 You got to response back.
[03:03:49]
 >> I mean, it works.
 >> Yeah. It works.
 I'll fix it later, cosmetically speaking.
 >> Yeah.
 >> Consider it is not supposed to be on page anyway.
 I didn't care right now.
 Stop it. supposed to be page anyway, I didn't care right now. So maybe the update is not
[03:04:09]
 working because three things were running at the same time. I don't want to see the password.
 >> No.
 >> Also because your put method was not set up properly. Or the put channel.
 You just change them back to get.
 I think that's what fixed it.
 And you're also using them one at a time.
 >> Yeah, it's not running because I haven't hit submit with everything completed yet.
[03:04:44]
 >> Yeah, so let's try it.
 Let's see what happens.
 I'm trying to find the password field.
 Why where's my password field?
 What do you want to do?
 You're going to, are we going to disable that?
 Oh, this is what I want to update.
[03:05:03]
 Yeah, I don't want them to update their password here.
 >> So what you could do is just --
 >> I'm trying to make it not required, there we are.
 >> That's what I want.
 >> You could disable, put disabled.
 >> I don't want to do that.
 >> Or you could just put value value if they have a value.
[03:05:30]
 No, it updated now. Oh, but it says the bad. It's showing you that message
 because it's not into a password. Yeah, you need to put a password. Yeah. Yeah. I wanted to see it with, okay, now it freaked out.
 Network error, okay. So we can follow that. So let's go from the handler where you submit the form.
 And we'll just follow it from there.
 Well, the backend crashed.
 Back in crash. So eventually, you have to restart that.
 The logic in the back end must be something must be wrong with the logic in the back end.
[03:06:18]
 So we let's follow the front end. Let's go from your handler.
 The front end update form.
 So let's update form.
 Where does it handle the.
 The submission right there.
 Okay.
 So what is it doing?
[03:06:54]
 It's the same logic I have in the create form.
 It's grabbing all the data right here. It's grabbing all the data from the form.
 And then it's setting up an object to send to DynamoDB over here,
 using the data that it grabbed in the form.
 - Wait, I'll get.
 I'll get.
 There might be a cleaner way to write this.
[03:07:27]
 Oh, what's all that about?
 That's a, that's a, that's a big data type there.
 Basically target is event.target.
 You don't need that data type where you put as everything after as,
 you don't need that. Just comment that whole from 24 to 30. No, I mean comment,
 no, put that. Okay, you can do that too. I don't do it things until I know they're gone. Okay, so target that event.
 And then, okay, so this one, yeah, this one is that you need target. No, it needs to
[03:08:21]
 be target thatevent.elements.
 We're here.
 Otherwise, there was going to go through as undefined.
 Yeah, so let's do like this.
 24, line 24, let that be formed.
 Form equals event.target.
 Then inputs, let's put that in the chat.
[03:08:47]
 You chose that, I didn't do that.
 Press Ctrl C. Okay, and then make.
 Form and then make a new variable called inputs right at under that.
 >> Have that somewhere. >> No, actually just call it target.
 So make a new variable right underneath there.
 We don't need to use inputs.
 We'll use target.
[03:09:20]
 It's so hard.
 >> So I'm going to use it.
 >> Yeah.
 >> We'll use it. Yeah. When you start it, it's fine. Because we can change it later.
 So, Kant's target.
 I logic disappeared.
 I had a whole bunch of inputs things.
[03:09:37]
 And in one of these functions.
 And then now it's going.
 We probably moved it out into a different function.
 Okay. We probably moved it out into a different function.
 Okay, wait, you have the same data type there. You have the same huge data type.
 So I had all that and it disappeared somewhere today.
 I was living during this.
[03:09:59]
 Yes, which I don't know.
 Okay. I don't know. Maybe you switch branches. Yeah, this is update. This is update account. So,
 maybe I'm trying to find where the logic is so that I can copy and paste it instead of manually
 typing it all because no, it's okay. Just just, um, that's just.
 Because it's not like what you've already made.
 And I have to go to.
 Yeah.
[03:10:31]
 Yeah.
 It's all we're going to do is just going to change one line.
 You don't need to copy and paste anything.
 Just do.
 Fox target.
 Equals. I need form.element. Sorry. Form.element.
 There. And then for the data type of form, change the data type of form.
[03:11:07]
 Yeah, and I know. Oops.
 Oh my God.
 Press control Z.
 Form that element.
 Elements was spelled incorrectly,
 so I had to retype it.
 Okay, so I can.
[03:11:19]
 Yeah, it doesn't like itself for form.
 We're gonna change the data type to that, any.
 Make that, any, make that one, any.
 - There we go. - Okay.
 - There, now the value should be fine.
 The values were coming in undefined before,
 the way you had it.
[03:11:41]
 So email was gonna be undefined, password was gonna be
 undefined, everything, going to be undefined everything
 because you were not extracting values properly.
 Were these correct down here?
 Now it's correct, yeah it's correct now. But before I was before,
 the way you had it before it was not correct.
 So you could rename target there to inputs because it might make more sense.
[03:12:11]
 But you should do a right click.
 Otherwise, you're going to have to do that. >> Hopefully.
 >> We store our next to each other so I don't want to go searching for them.
 >> Okay. There. So that makes more sense.
 So the form, you have a form and then that form has inputs.
 So that's what the naming convention is doing there.
 You're copying and pasting, but you have different names. what the naming convention is doing there.
[03:12:48]
 You're copying and pasting, but you have different names, so you're going to get
 errors.
 They're not ever going to be all on the same page at the same time.
 No, I mean, you're variable names.
 Your variable names are different. That's why you're getting errors there at the bottom.
 So, whoops. Yeah, I do think still yet.
 No, no, the variable names will not conflict.
[03:13:22]
 It's the ID names that will conflict.
 So you can leave it as inputs.
 The ID, the element ID like in the HTML,
 where there's ID, those will conflict,
 but variable names will be--
 - What kind of thing are you gonna do right click?
 Find all references.
[03:13:41]
 - No, it's too late for that now.
 You can change that to target can change that to Target. No, no, no.
 Other one.
 Okay, change input to Target or Target.
 Then you can right-click it and then rename it rename symbol.
 I was here rename symbol here.
 It's almost that.
[03:14:14]
 Higher.
 Higher.
 Then.
 Input.
 For the.
 Oh, cool.
 I like that. Yeah, it has an S. - Oh, cool. - I like that. - There.
[03:14:25]
 - It has an S.
 - Yep.
 That works.
 Why is there something you're telling me to fit in here?
 - It's, we can see it in the sidebar.
 Now you can, let's fix it.
 Which one was it?
[03:14:40]
 You can see it in the sidebar.
 It's in the sidebar.
 - I'm not saying anything.. There's a G over here.
 There it is.
 It's fixed.
 All right, so we're working on update account.
 And I think it's going to work fine now.
[03:14:55]
 Let's just try to do it from the website.
 Because what I saw was it was coming.
 Everything was coming in undefined.
 That's the problem Jordan and I were having in our session today that we were trying to fix.
 Okay, so it's still broken. Okay, let's network.
 Okay, let's go back and
 read the back end. Back end is broken. The back end is probably not running. Yeah.
[03:15:33]
 No, I just crashed. It was, well, let's try it again then. Let's
 re-submit the floor. I'm already dry by side so we can see if it crashes.
 Okay. Well, we see that is running right now.
 So let's re-submit the form.
 Okay. So it's crashed.
 All right. So we're going to follow it from the front end.
 So let's put a debugger somewhere. Do you have it running on VS code debugger?
[03:16:14]
 No, or no.
 I mean, I did, but I couldn't get into work earlier. We could use depth tools. It's okay. So you're going to have it running. It just doesn't it just doesn't work. Okay. Yeah. So we'll just use
 depth tools for the debugger. That's put where's your XCO's call and that
 update account.tcsx. Why is it an X YCD bugger in this branch?
 Why is the debugger in this branch?
 >> Dolly's flame light wasn't working on it.
 >> Oh, is it? This is front end.
[03:16:53]
 It should be fine.
 >> No, it's not over-ended.
 >> I have a branch.
 >> You didn't make the, you're making changes.
 You're making changes. But I'm not supposed to be in this branch on this screen.
 I'm in a different branch.
 You're in the update branch, right?
[03:17:19]
 Front end.
 Upstate.
 You're in the update branch.
 I can't see.
 Yeah, you are.
 At the bottom corner, which grants you on.
 >> Oh, good.
[03:17:32]
 >> Bottom left.
 >> But the debugger is in this branch.
 >> No.
 >> I'm going to tell you the terminal because I need to deploy that.
 >> Yeah.
 It's just not refreshed. It's just not refreshed. That's that's a
 old terminal from earlier today. Okay. Well, let's put a debugger right before the axios just type the word debugger.
[03:18:07]
 Wait, what is that one for? Is that?
 That's what it is.
 Yeah, no, no, for the front end,
 you don't need a debugger.
 Is this for the back end?
 You're going to load a debugger?
 No, this is the front end.
[03:18:23]
 Okay, so do you have the server for the front end running right now?
 No, I was about to start it.
 Okay, you don't need, it has its own debugger.
 You don't need to open it on a debug terminal.
 Oh, yeah, you can watch, you can try it.
 So you can be only needs a debug terminal for no J for the backend.
 So that's that's that looked like the server for the, uh, which one's which now you have.
[03:18:56]
 This is the backend. It has a debug. Okay. I see. Okay. Yeah. That's good.
 That's a backend crash, which you should, yeah, restart that.
 And then the other one is the front end.
 (indistinct)
 Okay, that's good.
 Okay, that's good.
 It will, they don't debug it.
[03:19:13]
 If you just type in the bugger somewhere,
 right before the axial's call.
 (indistinct)
 - I'm typing in debugger.
 I just wanna hit red buttons.
 - Yeah, that might not work here. Put the bugger
 put the bugger in front of a axios call or right before an axios call. There's no axios call,
[03:19:36]
 axios call, there's an update user, yeah, right before update user.
 Okay, so will it stop there if you put a red button? There is no red button. It's making dots.
 It disappeared. Okay. No, it's right there. You can put it on the console. Try to put one on the console log.
 I don't like, I don't like doing it in the console. No, I mean the online 37 put one on 37 a dot on
 937. Okay, there I was I was hoping you would do it there. I was hoping you would do it there.
 Oh, I was hoping this council. Sorry, I didn't understand when use a console. If you're logged, I just started console.
 Okay, so let's see.
[03:20:29]
 It's possible. So if you're going to use a dev tools,
 they're not a good problem.
 It has a loaded before me.
 Yeah, so okay, so let's just clarify some.
 If you're going to use the depth tools debugger
 You have to write the word debugger
 Okay, if you're gonna use the VS code debugger
[03:20:53]
 You can just use the dots. You don't have to type the word be bugger
 But you do
 So that's kind of inefficient
 basically could run both fibers, although that's kind of inefficient. But yeah.
 >> Yes. If you're using the VS code debugger, it will also activate the browser debugger.
 >> I prefer the VS code debugger.
 I just couldn't get it to load for the front end this morning.
[03:21:21]
 >> You're going to get to work.
 Okay. So let's just use the browser debugger for now,
 but remove that line 18 debugger
 and move it to in front of the create
 or whatever that function was.
 Update account, yeah, put it right before that.
 Okay, let's see what happens here.
[03:21:53]
 So what we're gonna check for is
 if we're getting the right values coming in.
 Okay, so okay, it's on debugger.
 Let's see if we got the right values coming in.
 We've formed a object there.
 So what are the values in that object?
 That's not the object we're looking for.
[03:22:22]
 The object we're looking for is called update user account.
 Now it should be in the first layer.
 Now, go back up to the first closure.
 The first closure. The first closure. I wasn't there. I didn't see any
 conferences form. There we go. There it is. All right. So that looks all right.
 Okay. So let's watch it. Now let's go into the update user account function.
 No, gotta restart. You crashed the back end again.
[03:23:06]
 We have to make sure everything is coming in.
 Proper going through from the front end.
 Why don't we have enough break points to do that.
 Is the only debugger you don't have for anyone.
 Yeah, that's fine. I can get the work with it. Yeah, you don't have 41. Yeah, that's fine.
 I can connect with the work with it.
 Yeah, you can step through it,
[03:23:29]
 or you can put breakpoints in the browser.
 Okay, let's step into Update User Account. You want to go into there.
 Go step into it.
 Oops.
 Step into, okay, you can put some break points here.
 Let's see.
 Right on, on line 18,
[03:24:17]
 put a break point on 18.
 That's what the axial's call.
 Okay, you can press play now.
 Press play and then this should get there. the next few years. So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
[03:24:31]
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
[03:24:41]
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second.
 So, we're going to do a second. So, we're going to do a second. So, we're going to do a second. So, we're going to do a second. So, we're going to do a second. going on. The back end. Or is this the one where I just, I hate testing forms because you had to fill out everything every time.
 Yeah, so over and again.
 Which is.
 Yeah, that's why I was asking you do one prepopulated data.
[03:24:57]
 So that you don't have to type it over and over.
 The problem is when I, when people prepopulate those,
 then they push things to QA without taking their hard-coded data out.
 >> Yeah, well, let's do that.
 >> I would totally forget.
 No, I would leave it there and forget.
 I would push it and you would be trying to grade it that way.
[03:25:21]
 >> Okay.
 >> I'll freeze it.
 >> I will forget.
 So, you are all showing it showing is undefined. Well, it's
 didn't run that line yet. So that's why it's showing is undefined. So let's run that line.
 And press, no, it didn't run yet because it's still on that line. Oh, no, generated it. Okay, let me see. Wait, now it's gone.
 It went to some XHR or whatever that should.
[03:25:49]
 Okay, I didn't.
 Okay, press the up, press the up one step, step out.
 Okay, I should see URL here.
 URL is that look right?
 9,000 has email.
 Yes, it's correct. Password. your L is that look right? 9000 has email password.
 I don't know what's correct.
[03:26:09]
 I mean, it's missing some things here.
 What is it missing?
 Well, this is supposed to be an update.
 So are you going to update the name or?
 The other fields.
 I didn't put them in the function. That could explain why it's not working.
 But it's supposed to do updated user account and updated user account this year.
[03:26:38]
 You say it's going to the function.
 Oh, but it's supposed to put all these in the URL. Hang on. I mean,
 you're wrong. Right, right click on update user account. Or okay, you can do that too.
 And go to definition. No, uh, just definition. Oh, man. I do.
 What if they're no?
 Well, you know, you'll have to put conditions for those. And
 Yeah.
[03:27:19]
 As we're in it's easier to do it.
 It's easier with
 easier with the post command, but you're not there yet, or the post method.
 I could put a question mark somewhere. No, you can't.
 No, don't put that. There's an error there. You can see that already.
 Don't use it if you don't know what it does.
 Why is it wanting to put a question right?
[03:27:59]
 No.
 It just means it's not required.
 Yeah, so if it's not required, then it wouldn't require it.
 Okay, email.
 But you're requiring it for the update because you want to see if it's something that you want to update me. >> Add word. Use your name. Name.
 Phone.
 That should do it.
[03:28:28]
 >> Okay.
 >> Here, Adequally.
 That would be widespread.
 >> Yeah, so that means your backend is not handling undefined values.
 >> Oh, it's not handling undefined values.
 - Oh, it's not handling mode here because that's a lot of time that I haven't had to spend.
 I just want basic things to work first.
[03:28:56]
 - Yeah, that's called the Happy Path.
 The Happy Path.
 - Happy Path.
 - All the variables and values are there,
 which you need to set up your TDD to handle the non-happy paths.
 Okay, let's see if the URL gets formed properly.
 Okay, there it is.
[03:29:18]
 Does it look right?
 Okay, let's see the whole damn thing. If you mass over it, you can see.
 Yep, that looks good.
 Okay, let's see what happens when the back end takes it.
 This press play.
 Back end will take it.
 It'll either break. Okay, so we got a response. That's a valid
[03:29:50]
 response. That's in the thing. So I have to display it.
 >> I want to display it.
 This is the updated stuff.
 That will go in the view.
 They can view their username and the view thing, but not in the update thing.
 They're not changing it in here. That's it. They're not.
 Yes.
[03:30:27]
 Okay.
 Yeah.
 Okay.
 You're not up there.
 And.
 Okay.
 So it's working.
[03:30:38]
 You're just missing some values in your.
 Your.
 Yeah.
 I have to go back to the. So you know that. You're just missing some values in your URL.
 >> Yeah, yeah. I have to go back to the.
 >> So you know that your backend is crashing when it gets some undefined values.
 So let your TDD help you find those.
[03:31:04]
 >> Which TDD for this?
 >> For the backend, the TDD for the backend should help you find,
 you should be testing those undefined values and not crashing.
 >> Well, if the non-existing email address,
 it throws an error if the password is incorrect,
 if it throws an error, if they try to update the username,
 which we already saw, it throws an error,
[03:31:32]
 if the email format is invalid.
 Those are the things that I have currently tested.
 - Yeah, and one thing you might wanna do
 is undefined, undefined username undefined,
 stuff, yeah, undefined basically,
 because that's that's one is correct.
 - Well, I have a choice here.
[03:31:53]
 I can keep writing more tests for this,
 or I can work on the Redux assignment
 and the app engine and the finale assignment.
 But I can't do all of that by six thirty tomorrow
 Not possible. So I have to use what I'm gonna prioritize tomorrow
 Yeah, and yeah, so it's good. I'm kind of gonna call this today, but it's not down again
 Okay
[03:32:20]
 Yeah, so at least we got that fixed just just yeah, remember that
 Yeah, so at least we got that fixed. Just remember that
 Just remember that when you get undefined values coming in it's gonna crash your back in
 But so far I don't know how to submit this then should I just make a page for everything
 Yeah, or just rename that
 Okay, just rename it. Okay, just rename it for now.
 I could rename the IDs.
[03:32:49]
 Yeah, I'll already have seven pages up here.
 I don't want anymore.
 Yeah, so go ahead and post all those components at the same time,
 but just rename the IDs, make them unique.
 Okay, that way, though, I'll be on one page.
 My other thing is that I they'll be on one page.
 My other thing is that I don't ever want an end user to be able to sign into their account Okay. So how do I handle that on here?
[03:33:28]
 Just post it as deleteable now and then change it later.
 I think, I think,
 I think you should just let them delete for now until you figure out how to just disable it.
 Because that's going to take more logic.
 So what you want, what you want to do is you want to just give them ability to delete
 or it looks like they delete, but it's actually going to still stay in the database, right?
 Yeah.
[03:34:02]
 Actually, I would like it is a radio button thing that says, like,
 not for create, but like view account, view update or delete radio buttons.
 And then based on what radio button they select, it would load the right component. Yeah, it's cleaner.
 Showing all of the components. That's what I put that.
 Yeah, well, do you know how to do that?
 I don't remember exactly somewhere in here in this account.
 Yeah, so you're ready.
[03:34:41]
 So, so I would do buttons.
 The easiest, the happy path there would just be like, that would be like
 a to do, but you can't, if you do like that, it's going to show up on the web page,
 you will see that. Yeah, I did the wrong type of comment structure. Yeah. I forgot how to do this.
 There you go.
 No, the happy and easy path would just be to activate all those
 all at the same time on the same page.
[03:35:58]
 Add radio buttons. So users and select action and account action. So the happy path would just be to activate those again, but just change their IDs. Oops, now that you don't want to do it one at one line at a time.
 Okay, I just change their IDs to be unique.
 Like create or email that create or.
 They are unique IDs that.
 They're not unique when they're all.
 Render together.
 Yeah. This one says register account.
[03:36:28]
 No, how about the email?
 The the elements.
 The element.
 They're saying like that has to be created email.
 Like I can just add creates to the end of it.
 No.
 - Yeah, yeah, yeah.
[03:36:50]
 That's right. - Sorry, just don't get it.
 Well, no, it would have to be every place that it's used.
 - Mm-hmm.
 You have to make it unique.
 So, like a pen creates somewhere.
 - Yeah.
 - What a pain.
[03:37:03]
 - Yeah, the labels should match to.
 But be very careful. You don't miss anything.
 I won't miss anything. If I do it tomorrow, if I do it now, I will.
 That's why I'm doing one.
 And then the matching, yeah.
 I also have to go check how password is spelled on every page because there's a typo. [BLANK_AUDIO]
 Okay, so those are unique.
[03:38:07]
 Just do it from, yeah.
 Do you, okay, instead of read. Yes, because view is what?
 View is what normal people look at.
 They don't know what read means.
 They don't know database terms.
 You missed something.
 Where?
[03:38:42]
 Password.
 Oh, yeah, password.
 See, it's spelled wrong with me.
 >> No, not just that, but as view there.
 And maybe not copy the--
 >> I must have copied the location.
 >> Because it's not.
[03:39:00]
 >> Yeah.
 >> Okay, I got that one.
 >> So that's it.
 >> I didn't do this one yet.
 Yeah, it's better to do it now because I might forget tomorrow.
 You missed. Okay, there it is.
 I fixed that password.
[03:39:43]
 It's the incorrect placeholder also.
 For whatever reason, I had the international placeholder.
 I don't know why. I'm just thinking about things in those terms.
 Because that's how you're supposed to think about things globally.
 Not just about how we will do that.
 Okay, let's see how it renders on your on the browser if there's any ID conflicts.
 Oh, let me take you back.
[03:40:17]
 There's a way.
 Just should just be where I think.
 It's going to be near the function call.
 That's in the wrong function.
 No, it's in the it's in the component.
 We're doing the component, but I didn't see it.
 It's close to the function call.
[03:40:41]
 Oh, it was down here.
 That's right.
 It moved.
 Yeah.
 Okay. That should be and then you. Yeah. OK, that should be.
 And then you just have to take the dots away
 from the browser.
[03:40:51]
 Just press play and then order refresh and then
 the--
 You can--
 That refresh?
 That's--
 No, refresh is--
 That's the--
[03:40:59]
 Or it's--
 Or it's--
 That's a different one.
 OK, the break one is away.
 OK. All right. So console. Okay, so console, click on console and let's see if you get any errors.
 No, just that weirdo about the.
 Okay.
[03:41:19]
 Input elements should have autocomplete attributes.
 Yeah, I don't know why it wants autocomplete.
 It's a browser error.
 That's about Google saying that we just use a Google message.
 And the browser.
 Yeah.
 Yeah.
[03:41:42]
 Okay. Okay.
 Okay, so we got at least we got your, your front end. Oh, look, I don't know why I want this, but it's a browser error.
 Do I need to fix that?
 I don't care. No, no. That's how you fix it. There's an autocomplete attribute for HTML
 apparently. I've never heard of it before, but okay. Other people probably have.
 Must be related to the update. They want to enforce. - The company want to think it's proud.
 I've seen that for a while, but I've ignored it
[03:42:28]
 'cause it was because it looked like it came from Chrome
 and it was yellow.
 I was like, "Yeah, I'm okay."
 - So, I see.
 Yeah, I use edge and I don't see those things.
 So.
 - Oh, that's why you don't want to see those.
[03:42:42]
 Yeah, I've chrome bells and these stuff.
 I'm like, "Hmm, okay, someday, maybe. Alright, so I just need to do the one, and then I'll be
 done with this. Yeah, so the key there is just making sure the data is going
 through from the front end to the back end properly and that'll help you solve
 any bugs. The happy Path. The Happy Path
 provides a lot of data. >> I mean, that was the thing. It worked fine on register/create
 and view. It was only update that freaked out. The other two were just fine. >> Yeah.
[03:43:19]
 It freaked out because it was getting undefined because you just copied and pasted the URL which was incomplete.
 - Yeah, so it was the incomplete URL
 that caused the crash, not the other things.
 Okay.
 - Yeah, that completely URL caused undefined values.
 All right.
 So there's going to be--
[03:43:41]
 - I'm giving you the--
 - There's going to be the delete.
 You're gonna--
 - Yeah.
 So that means the, it's not gonna take just gonna work on the delete. You're gonna. Yeah. So that means the, it's not going to take me long to do the delete. The delete's probably one, the delete's gonna be as easy as the
 it's going to take a lot less time than read even or maybe about the same
 as to read because because all I'm going to do for the delete is do the same
[03:44:02]
 thing where where they just entered the username and the password. And then, and it'll delete it based on
 that. I really want to, okay, I have a question for now, just, we had it for
 now, just let them, for now, just let them delete. And then when you figure out
 how to just like keep going, I'm not worried about that. I'm just what I'm saying
 is when they're going to delete stuff,
 I'm not making them fill out their entire account information.
 I'm just making them fill out the username
[03:44:31]
 and password to delete just the way I looked at you.
 Okay, I don't know what to do about animation
 'cause part of the original assignment
 from way back when was we have animation.
 And so I have this animation button and I think think it makes it makes me miserable because it looks terrible.
 I don't like it.
 Well, you can change you can change the angle.
[03:44:53]
 I mean, this is too much of an angle. You want it.
 You want it less of an angle or not.
 I just don't like animation on buttons. So I don't know where to put animation.
 I could animate my name up here in the corner instead
 of the button where my name is up here.
 - Okay, so do you know how to do that?
 - Yeah, I just would take the class that I put here
[03:45:17]
 and put it on my name instead.
 - Yeah, yeah, you can do that.
 - Yeah, I'll just do that.
 'Cause this is distracting to to it. Yes. I don't like it. It's not a good usability feature. I just needed a place. I just needed a place to animate and I didn't know where to put it.
 Also, this tab is really squished together.
 What if you can put it on your image.
 On the image map? Oh no.
[03:45:50]
 Oh no.
 Your image and your picture.
 Am I about page?
 This.
 You can tilt your picture.
 Why are there borders shown right there?
 That way it's more.
[03:46:03]
 That's why it will make it more prominent.
 If there's borders, then you just have to deactivate.
 Yeah, but I thought I went deactivated all the borders, but there's one stuck around the picture that I just go,
 Oh, you know, I couldn't ever see it because I was like zoomed tiny and then I never saw the lines until this now.
 I never saw the lines until this now.
 Oh, another thing I'll have to do is,
 I have to add handling for the stupid API for the quotes 'cause if the quote API is ever offline,
[03:46:39]
 there should be a message in the card that says,
 no quotes are available. - So you saw a message in the card that says no quotes are available.
 No.
 Or just have a preset quote.
 That copy that quote and then the.
 Yeah.
 I find a quote that I like and I'll do a preset quote.
[03:47:01]
 So I would need it.
 And if statement for that.
 - Yeah, if it ever comes in as an error or nothing
 we place it with a preset. - I wanna put it in the back end.
 - Oh, in the back end, yeah, you can do that.
 Yeah, that's right in the back end.
 You can put that in the to do, what that's not required right now. So
[03:47:28]
 I'm just going to make a comment in here so that I know in here because
 something happened earlier in the fabric fabric use thing was was refusing to connect. I realized
 belated Lee it was because the server had crashed but if then at then at that point, I said, hey, oh, what if it actually goes offline.
 Yeah.
 And then you can put the idea is to load a preset. that pretty safe quote,
 "The safe and the variable." >> No, we're actually coded right now. >> I made it a note.
 >> So I started it.
[03:48:41]
 >> I see.
 >> I see.
 >> I would know what I wanted to do. >> Okay. >> That's a feature thing. >> All right, see. I see. I will know what I want to do. Okay. That's a feature thing.
 All right, cool.
 So when I face the delete thing, then I will go poke at the Redux. Um, but let me
 Okay.
 Deploy this now. I'm loving this. Oh, I'm loving this deploy command. You gave me.
[03:49:05]
 Oops. I forgot Ron again. I shared loving this deploy command you gave me. Oops, I forgot run again.
 I shared it with Chris because Chris started complaining about how many times he had to write all the get messages.
 Same thing I said at the other night.
 And I was like here, have this deploy script.
 It helps so much.
 I don't know why it's popping a commit but number here or the. It helps so much.
 I don't know why it's popping a commit, but no, you're here, though.
[03:49:32]
 That's what that's about. Yeah.
 That's the backend update.
 That's also probably an extension that you installed.
 It's automatically generating a commit message.
 Yeah, to get, no, it just loads the last commit message that I used in that box. It just defaults to it.
 That was a good request from when I created this branch.
 >> Did you just, okay, you're deploying from your branch? >> Yes. Should I not deploy from my branch? I should deploy from me.
[03:50:18]
 >> You should be deployed.
 >> Yeah, you should be deploying from me. Yeah.
 Push merge everything to main and then deploy from main. If you're deploying
 from this branch it's actually deploying from main. It's an optical illusion. It looks like
 you're deploying from here. It's funny. I did not know that. Because the command is get, get push origin main.
 That's the command it's running.
 So it's actually just deploying the main branch.
[03:50:56]
 Not the update branch. So if I go, if I merge the branch, but I'm in the back end, when I do it, is it going
 to merge the front end stuff?
 I guess it merged everything.
 Yeah, it merged. So you want to merge twice. You just have to merge the front end stuff? I guess it merged everything. - Yeah, it merges.
 - Yeah, it merges.
 So you want it to merge twice.
 You just have to merge the one time.
[03:51:29]
 - Metal.
 - Yeah.
 That's right.
 - And then should you be in the point.
 - No, you didn't deploy it.
 - It didn't, do you need to be in the root
 or it doesn't matter?
[03:51:41]
 - You need to be in the folder where that has the script.
 I don't know if that, that one doesn't have a deploy script.
 That caps on the before.
 Folder doesn't have a deploy script.
 Okay, so then I have to deploy.
 So I have to deploy from both.
 Oh, yeah, it depends on.
[03:52:03]
 Yeah, it depends because there are points in different places.
 Yeah wait no. So I think this is the same thing as the same command though.
 My script is not the same the backend script is going to
 and there is a zip file to the lambda.
 Okay yeah that's a different one.
 Where is Taehue?
 - The front and--
[03:52:32]
 - From the front and though,
 if you're deploying from the front end,
 I think that's pushing everything to get.
 - It is right now.
 - Including the back end stuff.
 It pushes that to you.
 - I think so, yeah.
[03:52:54]
 And you should verify it just to make sure, like, after you.
 I always go.
 Yeah.
 I verify the folders.
 And like, I do a cursory test of the folders and I look to see that it message stuff and then I'll go actually go in here and look for.
 What I changed.
 >> Is it not take my change with my comments? They're not here.
[03:53:31]
 >> Is this the main branch?
 Yeah, you're in the main branch.
 Those your main branch have, well,
 maybe it didn't apply to changes yet. Four minutes ago it was
 in four minutes yet. >> It's not here. It didn't take it.
 >> Oh, there's an area here. Change the United States for commit.
 >> Oh, yeah, that's right.
[03:54:27]
 Well, I thought the merge automatically.
 Okay, so I didn't, yeah, I see there.
 I see it there.
 The fin queues were not committed. And now you can do the
 one of the the the the
 the
 the
[03:54:51]
 the
 the
 the
 the
 the
 the
 the
[03:54:58]
 the
 the
 the
 the
 the
 the
 the the changes in the back end.
[03:55:09]
 And the five few things.
 The comments are here. Okay, so.
 Those were in me.
 I see. Okay.
 I see because.
 I would.
 I would.
[03:55:23]
 And main when I committed those last two, which is fine. I'm not.
 That's not a big deal because they're really.
 It's a bit slow.
 That's open up your open up the depth tools inspect and make sure there's no simple errors going on there.
 I don't know.
 Yeah.
 Just the weird things.
[03:55:59]
 Who.
 What's that other error then what's that one's a one, one error there at the top.
 No, I don't see any error.
 No, there's a red flag at the top right.
 Where?
 If you click on the right flag at the top right. Yeah.
 Click on that one.
[03:56:27]
 Oh, it's it's here.
 I encourage the use of the label.
 Mm hmm.
 Which one is that?
 That's yelling about the autocomplete.
 It's again.
 No, this one's.
[03:56:41]
 That's the only one.
 That's different.
 That's new. Let me see
 It has to be one of the new forms
 HTML4
 HTML4
 HTML4 HTML4 HTML4
[03:57:01]
 HTML4
 I've seen this error. It's in all of my forms.
 Every time I have an HTML4.
 - Let's look at the area a little bit more closely
 than this read it.
 Labels for azuremases and match any element ID.
 So we have to find that there's Okay, so let's click on it. And the dev tools and find out which one is it's complaining about.
[03:57:27]
 >> Good luck.
 >> Yeah.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
[03:57:34]
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
[03:57:41]
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see.
 >> It's hard to see. >> It's hard to see. >> It's hard to see. >> It's hard to see. >> It's hard to see. Okay, so let's click on it and in the dev tools and find out which one is it's complaining about
 Yeah, it's hard it's hard to find it that way so just click on it here. Maybe I'll tell us which one
 It is
 violating known
[03:57:58]
 It's not going the yeah, yeah, yeah, click on that. Does that do anything? It doesn't do it. It's not a valid link
 Okay, like it won't even write a lot.
 It's learned more button works and it tells me how to use the label.
 It's not an issue. Okay, I can try loading up your page on
 Can you can you put the link here in the chat?
 Can you put the link here in the chat?
 I'll load up your page on on my browser and see what comes up.
[03:58:35]
 I have a edge open also, because I'm running the classroom from it.
 Because I was accidentally closing the classroom a couple times.
 And it was thin, chrome.
 Okay, let me refresh this.
 The arrow was popping up in the form page.
 So which one is that account?
 Oh, in the edge, I'm getting a 404 error on the about page. So which one is that account? In Adam getting a 404 error on the about page.
[03:59:08]
 I just refresh it and then it should disappear.
 Okay, I don't see that error in mine.
 I don't see that error.
 It's Chrome.
 It's Chrome. Chrome is here.
 >> You're not so glad you're.
 >> I'll show you my screen.
[03:59:34]
 >> Yeah.
 So weird.
 >> This is Chrome.
 This is your website.
 There's email update.
 Let me shrink this down right now.
 That's the size of it.
[03:59:53]
 I'm going to pull this up here.
 This will-- there's an error here,
 but it'll disappear when I refresh.
 OK, it's gone. How are you getting those cute stars in the required fields?
 >> This is an extension I installed.
 >> It will put in passwords automatically for me.
 I don't see that in those errors here.
[04:00:24]
 >> It disappeared on mine.
 It's not showing it anymore.
 But now it's showing us two other areas.
 It's going to be fine.
 Oh, they're so far.
 Oh, they're so far.
 I don't see that.
[04:00:43]
 I don't see that.
 Yeah, the back end. Yeah, the back end.
 Um, no, the back end.
 Just refresh it.
 Just refresh it.
 And then refresh and that should disappear.
 Oh, we've.
[04:01:02]
 Okay, so are we all set for tonight?
 I think so.
 I think this for for can you come back?
 No, it's gone.
 Okay, I think so.
 Yeah, sometimes it's just a first look.
 The floor element thing came back.
[04:01:18]
 It has to be on this page.
 It has to be on this page. It has to be so on. I'm on mine.
 Oh, wait, let me try doing a hard reset.
 You're fresh.
 I mean, yeah, no error here on my side.
 I'll fix it somewhere.
 I'm going to try.
[04:01:37]
 I'm going to try it on edge.
 Maybe my Chrome is out of date. >> Possibly.
 >> Where's the update thing?
 >> It's just the first.
 >> It's updating Chrome.
 I opened the Help page.
 >> Okay. I'm happy to grow as soon as I open the health page.
[04:02:05]
 Okay.
 All right. So yeah, it looks fine to me.
 There's no errors, at least not on the account page.
 No, yeah, it's fine.
 Correct.
 As we're all set here.
 Okay.
[04:02:24]
 Good night. It's the entire area is going. >> Correct. >> I hope so.
 >> I hope so.
 Class your finger.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
[04:02:34]
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
[04:02:41]
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.
 >> Thank you.

///// FILE: "Level 4/transcripts/May 3, 2025 10-36.txt"

Transcript from May 3, 2025

[00:00:00]
 Good morning class. Welcome to Codex Academy level four.
 It's week eight, day five, and the theme of this week is AI or artificial intelligence.
 Today's agenda in the first hour will take attendance, do announcements, review, and talk about some new AI topics. We're going to try to
 finish off our topic from Thursday, second hour, time to practice or catch up,
 third hour, many evaluations or corrections and time to work on assignments.
 Mark your attendance head on over to your code X account.
 If you hear right now mark yourself present. Now time for announcements.
[00:01:07]
 Then we get those loaded up. Okay.
 For the class schedule, there will be a student collaboration day on Thursday, May 8.
 That will be just basically a full day of collaborating.
 But there is still not a day off.
 We're on regular class schedule. The class schedule has been updated with capstone
 finale final evaluations and presentations. So here it is it's it's clearer
 now. So the capstone finale is from May 5 to May 10. Let me just put up a calendar here.
[00:02:25]
 May 25 calendar. Oops.
 Okay, so next week from Monday to Saturday, that is, you know, we'll focus on the capstone finale.
 You know, we'll focus on the Capstone finale.
 I might tell you a few tips
 on how to complete your Capstone, but it will not be required to be in your Capstone.
 This optional, you'll not be tested on it,
 wherever I teach here on this week
[00:03:22]
 and the following weeks, there'll be optional,
 but that will help you to
 they might help your capstone project, you know, look a little bit better or function a little bit better or
 the code may look a little bit, you know, more, more sleek. So I'll teach a few things here, but it's all optional for your capstone.
 Same thing for the other, other weeks. I'll just teach a few tips here and there.
 But the focus is helping you to get your capstones finished.
 Answering your questions.
[00:04:02]
 I'll also do some walkthroughs.
 I'll also do some walkthroughs for this capsule and finale week. Walkthrough of the practices.
 Just to make sure that you understand the practices.
 The practices have been posted here.
 The latest ones.
 Redux sign in practice,
 Redox sign up practice. And there will be a new one today to help you with your
[00:04:33]
 capstone. But I'll walk through these practices.
 Maybe the, I'll start with this one persist and login practice maybe next
 yeah next week I'll walk through this one
 and this one and sign up practice and also the practice that I'll introduce today
 because those will all help you with your capstone.
 And so capstone finale may five to may 10 and final
 evaluations 12 to the 17th.
[00:05:23]
 12 to the 17th final evaluations.
 We're going to focus on getting all your evaluations done.
 Also corrections this week.
 Then presentations 19 to the 24th. So you'll present your capstones to codex staff and students throughout that week.
 And the survey still here in the July cohort.
 If you haven't had a chance to fill it in yet, it's waiting for you.
 The survey right there. Million evaluations, remember it's 60 minutes per submission.
[00:06:32]
 So get your notes online so that you can answer the
 questions in the million evaluations.
 Or I can just say, you know, talk about this, and then you just go from your notes.
 Let your notes guide you.
 Remember to add your mini evaluations so it can be placed in the waiting list and also
 get your on time point. This week, we're still doing the mini evaluations for week 7.
 Today's the last day for that.
[00:07:11]
 I mean, that's the corrections for it.
 Or if it's coming in late.
 That's the last day for that.
 And mini evaluations for this week will close next week on Tuesday.
 Okay, so Chris says he wants to do week seven corrections.
 So we'll these are closed. The one for app engine closes next week on Thursday.
 And the finale is due on Thursday. I'll attack the student success team. if any of the assignments closed on you.
[00:08:08]
 Just let them know which assignment to reopen and what caused you to fall behind.
 Practice problems are posted here. So the ones from this week are these two.
 This one was about converting your sign-in,
 your website converted to Redux.
 This one is adding a feature to sign up.
 Then later today, we're going to talk about adding a
 feature to edit user accounts.
[00:08:56]
 Okay, so permanent is available for mentor meetings. just contact him directly.
 It should show his slack.
 You can even send him a message and say, "Something your calendar currently doesn't look like
 it's working properly."
 So don't stay stuck for a long time.
 If you're stuck for 15 minutes or more more like you can't get your program to run or maybe it's not updating when you deploy the live site it doesn't seem like it's updating.
 Don't be stuck for more than 15 minutes posted in July cohort.
[00:09:41]
 If you find the answer, that's good. Just post the answer in the
 "like" cohort also. But if you don't find the answer, hopefully someone will
 answer you here and make you unstuck or help you to get unstuck. Because it's
 not productive to be stuck. It's more productive to just keep going and going with things that work.
 Notebook LM, let notebook LM AI provide answers based on your class notes, your code and class transcripts.
 And transcripts are available up to week seven, day five. So up to here.
 I just need to post the new transcripts for this week, but being graded, you'll receive an extension.
[00:11:00]
 You'll receive an extension to submit corrections.
 So any of these assignments that haven't been graded yet for you,
 don't worry, you'll receive an extension to submit corrections.
 Okay, so now we're gonna review.
 Okay, so now we're going to review. During the review session, you should already have the notes for it, but if I mentioned
 anything new, make sure you take notes on that.
 And have your microphones ready for many evaluations or any questions you might have.
[00:11:52]
 Okay, now time for review of what we talked about on Thursday.
 Okay, so we had a poll on Thursday and asked, what do you think of the remaining three weeks schedule and there's the week nine, like I just talked about where we focus on
 the capstone finale week 10 final evaluations and week 11 presentations and some of these
 might overlap.
 It's not gonna be purely for like capstone finale
 and this one might not be purely for final evaluations,
 but some of them might, there might be some overlap
[00:12:35]
 how we saw like how some topics I talk about like
 a like, you know, Google, Google Cloud on week seven,
 like, you know, Google, Google Cloud on week seven,
 but some of it, or maybe it was that week six.
 week six, yeah. Week six is a Google Cloud as a theme,
 but then some of it goes into weeks, week seven.
 So there's some overlap.
[00:13:03]
 So there might be some overlap with, you know,
 these things here. Absolutely. Finally, final evaluations and presentations. So I ask
 you guys what do you guys think of that schedule and most of you said it's just right. One said it's not enough time.
 And then what do you think of shortening it to two weeks and just get it over with?
 That would have been finishing by the 17th final evaluations and then presentations.
 And then all of you said that's definitely not enough time too short.
 So I showed that to the code X staff and they said okay,
[00:13:57]
 stick with the three weeks schedule.
 So we're going to do the one where we go up to week 11.
 Okay, so what we talked about was how to convert the AI route.
 Use the post method to securely send unaltered data through an AI route.
 Because when you use the post method,
 let me just,
 so using the post method,
[00:14:37]
 you're able to send data and it's hidden or obstructed.
 So that's what this means.
 But when you send, when you use the get method,
 let me try to type it here.
 When you use the get method, you can see each one clearly.
 You can see-- you will see the--
 like, if they have an email, you'll see their email or you can see their password.
[00:15:08]
 It'll appear inside the, it'll appear inside of the year.
 In the query parameters.
 So we don't, we don't want to use a get method for things that we don't want to expose.
 So we're going to use the post method and obstruct everything with that.
 And the way we did that, let me load it up here, the sandbox.
 I almost loaded. I will slow it.
 Okay, here it is.
[00:16:45]
 In the index TS file, we have an AI route right here that we use to connect to our artificial intelligence, question answering, AI model, change it to post.
 It used to be get just like these, but change it to post
 so that the data can be hidden.
 And the data can remain unaltered
 Because when we send it through to get method
 Remember it gets some like parenthesis
 percent 20's or plus signs that that can interfere
[00:17:22]
 Where is that here
 Here it is. So we update it to the post method and then we use request.body instead of the query.
 So it used to be request.query.
 That's query parameters. three parameters, but request.body, it's supposed to get data from the post method.
 And we tested it with postman and we were able to get data there. Here, I'm going to add this.
 Get the data from the URL encoded. Get URL encoded.
 This one here, URL and here.
[00:18:56]
 URL encoded. So if I sent, oh, my backend is not, the backend server is not running yet.
 So let me just run that really quick.
 And again, run start.
 And I'm going to, I'm going to look at the comments here or the log and it says, run the start to
 command. It used to be renamed build, but since it's connected to the previous
 one, I just renamed it to start to npm run start to. and we can see that the We're going to open or start the server from the job as good debug terminal.
 If you want to be able to stop on break points. So I'm going to send a post request with some URL encoded parameters
[00:20:30]
 here. And then it should stop on the handler. There it is. It stopped there. And we should
 get the data from request body. Here we're restructuring it. and we see the question and the context. If I press [inaudible]
 Oh, there. It's right there. Here.
 John is the answer. So let's see if it works with the longer, as we remember, I tried to send a long one
 with about California and it didn't work.
 So let's see if it works better without all the percent 20s and things like that.
 So let's see if it works with just the first paragraph here.
[00:21:59]
 Gonna put that here.
 There's the first paragraph and the question is what is California? Send it.
 It goes to the back end server.
 The question we can see here is California.
 The context is that one paragraph.
 Let's get the response here. A state in the
 Western United States says to answer, where that was the response. I'm going to try to put in the thing here, so you can figure it out.
[00:23:13]
 Okay, put in the hole for just that the whole section about California, the first section. All right.
 So we see the question again.
 What is California and the context?
 Okay, this one. That's not everything.
 Okay, why is it it look right?
 It's a claw way to the side.
 Doesn't look like it's enough.
[00:23:41]
 It looks like it shouldn't be more.
 It looks like it should be more. Let's see what let me see it from here.
 Maybe it doesn't send it with doesn't look complete. Okay, so it's not it's just not it's just not displaying the whole
 thing. Let's see, let's see if we can get the answer. Yeah, it's the same thing. It
 did get the answer this time. A state in the Western United States.
 Let me remove this so we can compare and see.
 Let me just remove the context.
[00:24:38]
 I'll put a different context.
 My name is Roll Azar, but I'm going to ask it what is California.
 So we can see a difference here.
 I'll stop this debugger so it can just flow in.
 Oops.
 What happened to you?
 Okay, I'm going to send this.
[00:25:16]
 The question was what is California and then it answered role is our, okay. I'm going to put in the whole context here. Copy this. It contains the context
 to one that has the answer, put the whole context, send it, and it properly answers it. Okay, so when we, when we try to use a get method and we put all the context inside here,
 it didn't work.
 When we try to put it all through the query parameters, it didn't work.
 It just said California was 20.
 But when we send the data using the post method,
 we didn't need to include any query parameters here.
[00:26:14]
 Instead, it sent it through URL and coded parameters,
 which were hidden.
 And because the data is unaltered,
 it was able to answer the question properly.
 It was in the get method right here.
 When you include data in the URL parameters,
 it puts percent 20 and plus signs,
[00:26:40]
 it messes up the data.
 So the post use the post method to send data securely
 and to send it an altered.
 Okay, so we press that body
 is where we get the new data from not the query parameters,
 not request.query.
 Okay, so front and AI interface. So we were able to get started on the front end,
[00:27:28]
 coding the interface.
 Let me load that.
 We were coding the interface where we contact the AI from the front end from the website.
 We didn't quite finish, but this is the point where we got. I'm going to load this here.
 So it doesn't have to be these input elements.
 We just basically created a form and use whatever input elements that makes sense to you.
 I wanted to use different input elements. One for a single line.
[00:28:45]
 One for a multi-line.
 That's what these are.
 Input is usually for single-line text.
 And then text areas for multi-line.
 We created a React component called AI.
 That's this one here.
 And there's where we return the XML.
[00:29:14]
 I mean, the JSX or TSX.
 Basically the HTML looking stuff here.
 Basically, the HTML looking stuff here. And it's going to render a form that takes a question in a context, but use the name
 attribute, like this one here.
 Use the name attribute that will give access to the values through the form elements.
 So here's that question input. We set the name as question and here's the
 one for the context. And the way that it looks is right here.
[00:30:09]
 It takes a question and has a context.
 This one is multi-line.
 The text area is multi-line.
 You can put multiple lines.
 But usually when you do this and you press enter, it sends it.
 So that's a difference, right?
 This one is the input element.
[00:30:37]
 If you press enter, it usually sends it.
 But here, if you press enter, it goes to the new line.
 Multiline input. goes to the new line. Multi-line input.
 This is the text box.
 I mean text area.
 Okay, so the next one, this is where we got into the form elements.
 So the form, usually we mark the target,
[00:31:20]
 event that target as the form. But we saw that the elements, if we get to the elements, it contains the things that we're looking for.
 So, if we store elements into form,
 We have direct access to the question and the context from the form. See, here's the form.
 There's the form and then directly we go and get the question.
 Actually the value of the question.
 If we just go up to question here, we get the element, which is the input element.
 But that's not what we want. We want the value that's stored in it.
[00:32:11]
 That's the actual question or the string.
 Same thing with context. If we just go up to here, dot notation up to there.
 We get the text area element.
 But we don't want that. The thing we're looking for is the value that's contained inside. That's a multi-line string.
 So we're going to store that in the context and the question. We're going to get the strings store them in there.
 The way that looks in the code.
 that looks in the code. It's like this.
[00:32:55]
 So there's a form.
 We handle submit.
 We handle the submit event.
 So when the submit button is pressed, it runs this function.
 It's a callback. Notice there's no parentheses.
 We give it a callback.
 So the form will run the function when it wants you.
[00:33:14]
 If we put parentheses here, then it will run the function right away.
 We don't want to do that.
 We want to let the form run the function.
 So we give the form the function and it runs it when the submit button is pressed.
 And it also gives it the event parameter or object.
 And here we extract the form up to the elements so that we can access it by name. So this is by name here. We access them by name.
 Form.question form.context. Form.question form.context.
[00:34:08]
 Form.questionform.context. It's easier to find in that way.
 Instead of having to search through their index
 for their position in the form.
 See, if we try to get their position in the form. If we try to get their position in the form,
 it's a little bit tougher to get their position.
 So let's try it.
 So there's the event, the event came in.
[00:34:47]
 Let's look at the form here for event.
 There's the event.
 The target is here.
 Actually, we're not going to see it.
 It's not going to appear here. Maybe, we're not going to see it. It's not going to appear here.
 Maybe, right, let's see.
 There's target.
[00:35:09]
 And now it has the index or different positions.
 I have a question here.
 There's that break input is on position two.
 And then the text area is on position six.
 So instead of having to access them by their position,
 we just access them by name,
 if you include their name here.
[00:35:33]
 A lot easier.
 We just did it the other way so that you get familiar with,
 you know, arrays and accessing them.
 You get your practice.
 Okay, so that's it for that one.
 And the question in context to the module.
 I'll get answer and then save the response in the local variable.
[00:36:09]
 So that's what we did here.
 How, sending the question in the context to get answer and then we save the response in a variable. Then we did some TDD.
 But and TDD where we started to design the get answer module. So let me show you that.
 So here's the test file where we started to design it.
 And here are some things that it should do.
 So to get answer module, we're going to describe the
 get answer module and it should return for it returns a response when given a
[00:37:12]
 question in the context. It returns a correct answer when the given when it's
 given a question in context. And it returns a response when the answer is unknown.
 We were just in the middle of coding this.
 And here it is.
 We started coding it.
 There's a get answer module.
 Takes in a user question and a user context.
[00:37:44]
 Using different variable names to show you
 that it doesn't have to match what you give it, right?
 Here, we're giving it a question in the context.
 We don't have to match exactly what's coming in.
 Let me import this now.
 Just going to import this.
 Okay, so if I mouse over here, it says user question and user context, right?
[00:38:15]
 Well, we don't need to match those names. That's just, that's just to help us understand what it's asking for.
 But we can use any variable name we want. We can. Because all it wants is the value that's coming in.
 So this question is going to be a string.
 Yeah, it says question.
 Yeah, that's a variable, but it's actually just the string that's going to go through.
 Not the name question and not the name context.
 Those are not going through.
[00:38:42]
 It's actual string that's going through and it's going to come through here. So the string is going to get stored in this parameter now.
 It comes in as the name question comes out as a name user question.
 Okay, so just think of it like aliases.
 So, just think of it like aliases. You're free to use it, whatever variable names you want.
 So, don't get confused.
 That's why I purposely use different variable names here.
 The thing that we want to do is, we want to form some data.
[00:39:19]
 As an object.
 The here's data is an object.
 It has two properties. It has a question and a context. As an object, the data is an object.
 It has two properties.
 It has a question in the context.
 The question is stored in this variable
 and the context is stored in this variable.
[00:39:39]
 And they both those variables came through here.
 And then the way to send it is use axios post method instead of the get method.
 Here, you give it the URL.
 In this case, we're going to send into our AI in the backend server.
 And then we're going to send the data as a second parameter.
 Here's the data. Then this is where we stopped.
 So now time for artificial intelligence, the new stuff. Actually, let me just go here.
[00:40:36]
 So this is where we stopped and we saw it didn't receive the data.
 Like we would send this, then we put a debugger here,
 debugger here, let's watch it get to this point, and I'll put a debugger in
 the backend route right here, and watch it go all the way through.
 Okay, so here it is. We're going to go in, extract the question and the context.
 The question is, what's my name? The context is, my name is Rolesar, gonna send it to get answer.
 Here it is, it's generating the URL to visit. That's the AI route, generating the data to send.
[00:41:35]
 That's an object.
 Then it's gonna send it with Axios.
 Here it is, it's sent in with Axios, and now it has come into the handler.
 And let's see what happens when we try to get the data from request.body.
 The question shows undefined and the context shows undefined.
 So that's the output we sent.
 We sent a question and we sent in context, but for some reason it didn't receive it.
[00:42:10]
 So we're gonna we're gonna fix that.
 This is how to fix it.
 JSON parameters.
 So axios accepts data as an object, right? That was the second parameter
 of Axios. And it uses the post method to send data as a JSON string. So Express needs to be configured to receive JSON parameters.
 Let's copy this and paste it. I'm going to share my screen now.
 This is going to go into the AI notes. But you can also save it and express.
[00:43:27]
 I'm going to see, I'm going to add a note here.
 And I'm going to copy this to express any output of code right here.
 I'm going to copy this for now.
 Place it into the code sample.
 And I'm going to just put some highlights here.
 Okay, so that looks good.
 I'll also copy this into Express, because they're related.
[00:45:00]
 Okay, that's enough for Express, I'll close that back. I just pasted it into Express. The Express notes.
 express notes.
 Okay, so we use a data to confirm that data is not being transmitted from front end to back end. So that we did that already.
 Now to the back end index.ts file, let's open that up.
 Back end index.s file right here.
 Add app dot use JSON.
 So I'm going to add it right here. App dot use.
[00:45:41]
 And JSON.
 Let's give it a pop up of what to import.
 You want the one from Express.
 And you see there's a TypeScript error if you don't put the parentheses.
 You need to activate it from inside there.
 So what this will do is allows data to be received from Axios to JSON parameters. Okay, that's the only change we made.
 We just added this.
[00:46:35]
 So if this works, we should receive data from the front end.
 Now let me finish this part here. How did this reset?
 Okay.
 It still didn't receive its data.
 It's not going to receive anything.
 That was from the previous run through.
 Now we're going to use the debugger to confirm that JSON parameters are being received.
[00:47:07]
 Okay, so let's try that again.
 Submit this.
 Okay, so the submit event came in.
 We're going to extract the question in context.
 There's a question, what's my name?
 The context is my name is Rolozar.
 We're going to pass it into get answer right here.
[00:47:35]
 And we're going to pass the data right there.
 Remember, this is data is an object, but objects cannot be sent as objects when you're transmitting it to the internet, through the internet, or from server to server, or from browser to backend server.
 So even though you see an object here,
 actually else is going to send it as a JSON string.
 It's going to make this look like a string
 and then send it as a string to the backend server.
 That's why it's called a JSON string.
[00:48:30]
 So that's why this one says here,
 XCL six steps data as an object.
 Right, it's a data as an object right here.
 And it uses the post method to send data as a JSON string.
 and uses the post method to send data as a JSON string.
 So it's going to basically it's going to convert this, this kind of stringify this object,
 turn it into a string,
[00:48:55]
 and then send it through the internet
 because it cannot send it directly as an object.
 It has to send it as a string.
 Okay, so I'll press play.
 Backend receives it. This is the back end handler.
 If everything works fine.
 This back end handler is automatically taking that JSON string
[00:49:18]
 and turning it into an object.
 It does the work for us.
 We don't have to do any converting.
 So let's see.
 Okay, so the question did come in this time.
 What's my name and in the context?
 My name is Roll Azar.
[00:49:36]
 Okay, so it all went through this time.
 The JSON string part is like, it's all invisible to you.
 You don't know that it's being,
 you don't directly know that it's being turned into a JSON string.
 It just looks like you're sending data as an object here.
 It looks like you're receiving data as an object here.
 But in between, there's a JSON string conversion happening. That's
[00:50:07]
 why it's called, that's why it's that run through here.
 Where is it?
 Here.
 Gonna generate the answer. The answer we can see it here.
 Answer is roll is our.
 Gonna send it.
 Then you put it here.
[00:50:43]
 There's a debugger there anyways.
 Actually, what we want to do is look at it from get an answer.
 As Play, it should receive this response.
 We see the response now.
 Response.data. So response is an object. It has these
 properties. The data property has the answer that we want. So I'm going to
 collect this. So response.data, that's the one that has the answer that we want. So I'm going to basically just sort of alias it right here.
[00:51:29]
 The answer is response.data.
 So that's what we want to return.
 We want to return the answer from here.
 I don't need this debugger anymore.
 I can put this debugger right there instead.
 Okay, so we're gonna, that's what we observed.
 Can you see what the next slide looks like?
[00:52:02]
 We observed that the data came through. And let's see here data came through.
 And we're going to try to send that answer back. So let's do that really quick.
 To admit this,
 okay, so it comes in here.
 It's going to send the data to the back end here, back end receives it, generates the
 answer, and then it's going to send it back to the front end receives the answer right here through the get answer module and here it is back in the component. We're back in the component is to render this answer.
 But before we render that answer,
[00:53:28]
 let's just fix this TypeScript error here.
 So it looks like we're returning a string.
 Let's make sure it's a string coming in here.
 'Cause I said any.
 If I go like this and I mouse over it,
 answer is gonna be at any data type.
 We could be more specific and just say,
[00:53:51]
 okay, we know it's gonna come in as a string.
 And so we see a data type error here.
 It says "type string" is not a valid async function return type, and
 ES5 because it does not refer to a promise compatible constructor value.
 What does that mean?
 It means whenever you make a function async, it causes the function to return a promise.
 If it's returning a promise and we're
[00:54:30]
 trying to say, hey, it's returning a string,
 then there's a conflict.
 We should say that it's returning a promise
 and that promise contains a string.
 And that that fixes the error.
 The TypeScript error. It still runs, but TypeScript would just say, "Hey, something doesn't
 look right." So we have all these tests. They're not going to run. I mean, they're
[00:55:11]
 So we have all these tests. They're not going to run. I mean, they're not going to pass yet because we didn't fix everything.
 Let me run the tests.
 I'll stop the debugger to. So I can receive the responses without stopping.
 I'm going to run the test here in the front end.
 NPM test.
 I already have it set up to run just this one function.
 Let's see if it passed.
[00:55:48]
 It says it.Only.
 So it will just run that a test.
 I mean, that one passed.
 Let's try to run all three of them.
 See what happens.
 Two past one failed.
 We can get this to work.
[00:56:13]
 But we'll take a break and then let's see if you can get it to work.
 So the one that failed is the one that says Okay, so what happened here?
 So this context is supposed to be what's my name.
 And then the context is he is an instructor at Codex Academy.
 So I'll let you guys try to fix this during the break. We'll take a break right now.
 Basically, we wanted to say, sorry, I don't know.
 I'm going to share my screen for the break timer. And I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break and we're going to continue our discussion on artificial intelligence.
[01:08:08]
 So, we were at that point where one of the tests was failing and we saw that it depends
 on whether the context contains the answer or not.
 So that brings us to the next slide.
 Answer probability score.
 The AI model provides the probability that the answer is correct.
 So probability is a score from 0 to 1 in which one means the AI is searching of the answer. And zero means, you know, the opposite, which is it doesn't know the answer at all.
 And then there's, you know, everything in between.
[01:08:57]
 So copy this into the notes.
 I paste it into the notes now and I'll show other slide.
 Let me just double check.
 I don't know.
 This was the previous one. Ai probability score.
 And there's some sample code there.
 So, we're going to de-structure the answer and score from the response.
[01:10:07]
 And then we'll check if the score is high enough to send the answer.
 Okay, so this is how we're going to do this.
 Okay, let me finish this code sample. is how we're going to do this.
 Okay, let me finish this code sample.
 So that we're going to get a response from the AI.
 And that one, that response object,
 we can destructure it into answer and the score. But we should also declare these
[01:10:51]
 better builds right there. Remember coding goes from right to left. From the
 response, there's one response object. We're going to destructure it into two values, the score
 and the answer.
 That's how you have to look at it.
 If you try to read it the other way, you might get confused.
 You need to read it from right to left.
 Okay, so that's how that one looks.
[01:11:27]
 And then we can go to the code here.
 The AI response happens in the backend.
 I mean, that's where that's the first part. We get the actual answer in the backend right here through get answer.
 Right, is this which workspaces this.
 In this.
 Yeah, that's the correct one.
 Okay, and we are correctly data typing it right here. Asserting the data type.
[01:12:23]
 So this response is an object.
 It should have a property called answer,
 but it should also have a property called score
 that we can destructure out of it.
 And we even see it when it-- when I start typing,
 it pops up here.
 It already knows that it should have a score.
[01:12:43]
 But only if you put this, the correct
 data type, and this data type, you can see it from here. This AI model, it returns.
 That's what this blue arrow means. I might know. Oh, yeah. Yeah. That's what it just
 means right here. It returns a promise.
 That's why we use a wait.
 And that promise contains a question answering output.
 Or in a array, but in this case,
[01:13:18]
 it's just we're just getting one.
 So we're just gonna use this one here.
 We're just getting one answer, not multiple answers.
 Okay, so we're going to pause the debugger to stop there.
 We're going to use the tests to get there. In the front end,
 right here, the front end, it was just this one that was failing.
 Returns response when the answer is unknown.
[01:13:51]
 Okay, so I wanted to say, sorry, I don't know.
 I don't want to have like a empty response.
 So it's up to you how you want to design it, but I'm designing it like this.
 I want to just get a, get the string already that I want to have.
 Like if someone asks a question here and it doesn't know the answer, I don't want it
 to just like be blank.
 I want to have some kind of feedback.
[01:14:18]
 So I'm in the front end right here in the front end.
 I'm saying, okay, just when I when they ask a question and it's not the answer is not there.
 Okay, provide some feedback already.
 Don't just say nothing.
 Provide the feedback.
 So I'm just going to run this one test. So it stopped in the backend, it went from the front end to the backend where it's getting And here there's the response object.
 And the response object has an answer and it has a probability score of 0.3.
[01:15:18]
 So the closer to it is to zero, the less certain it is.
 The closer it is to one, the more certain it is. So this one is pretty, a pretty low score.
 So we de-structured the answer in the score from the response.
 Check if the score is high enough.
 I should add here, use a condition.
 Use a condition to customize the response. Use a condition to customize. Okay, so the score is going to be, it's going to destructure it out.
 Right now it hasn't destructured yet.
[01:16:18]
 I'm going to destructure it now.
 Okay, so destructure the answer and the structure the score remember the question is
 The question is
 What's my name and the context is he is an instructor at Codex Academy?
 So this AI says okay, I'm gonna give the answer a score of point three
 So that's a pretty low score.
 So we can now use a condition.
[01:16:52]
 We don't need to always send the answer because in this case, the answer is not correct.
 And we didn't have tests here.
 We didn't finish the test.
 So this is going to finish the test now.
 So this is the backend test.
 Actually, it's going to tie into the backend test also.
 So let's do that too.
[01:17:27]
 Let's see which one is that.
 Doesn't respond with an answer if it's not in the context.
 So this is the case right here. So if the answer is not in the context, we want it to return undefined.
 Well, this is how I'm designing it right here. So it will either return to answer, string,
 or it's going to return undefined. This is the back end test that I'm looking at.
 We didn't finish these because I left these up to you, but this is going to answer it now.
 I'm going to start finishing these backend tests.
[01:18:16]
 So how do we get it to return undefined if the answer is not here. Basically just use a score. If the score is less than, I'll just say,
 0.5. So 50%, correct, or 50% wrong. So if it's less than 50% certain, I'm just going to just return undefined.
 Or I can do this.
 I can put let here and then.
 Then I'm going to change the "answer" to undefined. Then at the end it returns the "answer".
 So this one just modifies the "answer" if the score is low. We can, so I'm going to start switching to the back end test.
 Let me just let the front end finish here. Let the front end finish this part.
[01:19:39]
 Okay, finish, I think. Yeah, it finished. It took too long.
 Okay, I'm switching to the back end and I'm gonna run the test from there.
 Because this back end has a test
 for the context.
 If the answer is in the context.
 So it doesn't respond with an answer if it's not in the context. So it doesn't respond with an answer if it's not in the context.
 Okay, so I'm going to run this test now from the back end.
[01:20:21]
 With a debugger and PM test.
 Let's see, is it running the get answer test?
 Yeah.
 Okay, so this one's testing that what happens when the context doesn't contain the answer.
 So let's see what happens.
 The answer it says here is Amazon rainforest
 and it thinks it has this probability score of 0.12
[01:20:57]
 that the answer is correct.
 So it's low.
 So the score is less than 0.5.
 So it should set the answer to undefined,
 because right now it is Amazon Rainforest.
 If you want to see what the question was,
 which name is also used to describe the Amazon Rainforest
[01:21:17]
 in English.
 The context is, the Amazon Rainforest
 is the most tropical rainforest. So it's basically describing the Amazon Rainforest is the most tropical rainforest.
 So it's basically describing the Amazon rainforest,
 but this question is asking what's another name for that Amazon rainforest.
 So the answer is not in the context.
 The AI says, "Okay, I'm only 12% certain that this is the correct score.
[01:21:47]
 I mean, this is the correct answer.
 So we're going to, instead of using this answer, Amazon Rainforest,
 we're going to use an empty answer.
 The answer is now undefined.
 And it's going to go into the test and it's going to we expect the
 response to be undefined, which is correct.
 It failed because it took too long. So I'm going to rerun that test.
[01:22:30]
 Okay, it's going to run through it. And now the test passes.
 We can check that test from the front end now. So here's the front end test. Another context. So the question is what's my name?
 And here's the context. He is an instructor. So when the answer is not in the context,
 we wanted to reply with, sorry, I don't know.
 So we're gonna run that test and see how it comes in.
 How the answer comes in.
 So this is the backend. It received the, it went from the front end to the backend.
[01:23:25]
 It received, it went from the front end to the backend.
 The question was, what's my name?
 And there's the context which didn't contain the answer. Answer is instructor at Codex Academy.
 AI is giving it a score of 0.3.
 Core is too low.
 So we're going to change the answer to undefined.
 Basically, return nothing.
[01:24:04]
 Then going back to the front end, it timed out.
 Took too long.
 That's okay.
 We just want to see the, we wanted to get to get answer.
 So let's get in there put a
 debugger here let's see what the response we get from we should get a
 response now so I'll let it stop there let's try that again try that test
[01:24:39]
 again NPM test and PM test.
 Okay, so it didn't stop on this part right here.
 So I'll just put a debugger.
 So let's try that again.
 NPM test. I'm in the front end.
 Testing in the debugger here.
 You wanted to stop on the debugger, you need to run it from the JavaScript debugger terminal
[01:26:07]
 npm test. Okay, so here we asked the backend server for a response. The contain the answer. The answer is empty. So, in this case, if it doesn't have an answer, we wanted to say, I don't know, instead
 of having just being an empty answer. So, how do we check that?
 If not answer, basically.
 So if this means if there's no answer,
 change the answer to sorry, I don't know.
 And since we're going to change the value, there we go, just like that.
 We can watch it happen again.
[01:27:07]
 Okay. Let's refresh this or no, let's play through it.
 Run the test.
 Okay. So we're going to get a response from the back end server, extract the answer
 from it. We see that the answer is nothing. So that means if there's no answer, change
 the answer to, I don't know. And then we're going to go and return that answer.
 I'll put a debugger here.
 So let's see if it comes back the way we want it. We're going to remove these
[01:28:07]
 debuggers. Now running one more time. Okay, so we're gonna now call the get answer module.
 We're giving it a question.
 What's my name and the context is he is an instructor.
 So the answer is not in here.
 The answer that we get back is, sorry, I don't know.
 So we expect that to be the answer right here.
 It shouldn't pass now. We won't pass because
[01:28:49]
 they got timed out. So if I remove these, then it should be fine.
 So, what happened? Oh.
 Okay.
 So, it was expected with a period, but it got one with a comma.
 So, I just have to decide which one that I wanted to be.
 The one with a period.
 We're going to go with what's written in the test.
[01:29:24]
 Or maybe, now I'll change the test to a comma that we
 it's fine. It's better with a comma there.
 Okay, so it should pass now.
 Okay, so, please front end tests. They're all passing now.
 You'll see. NPM test. Okay, they're all passing now.
 We're getting the answers that we want. Now we can start
 rendering it. But we use the answer. We use the probability score to modify our
[01:30:35]
 answer.
 Okay, the next one, this, did I put the, okay, yeah, there's already the code sample there. Final one is rendering it.
 We need to render that answer.
 And so I'm going to show you how to do that with Redux.
 And there's a code sample there.
 So we're going to, so with Redux, we have to edit three files.
 The state variables file.
[01:31:19]
 Let me change this here. We need to edit three files, the state variables file, state selectors and state I'm going to also copy this and Redux. There's going to be a code sample. So, state variables dot TS going
 to highlight that. Stateselectors dot TS. Stateset.ts, because these are all key words.
 There's these, there are these hooks you select and use dispatch.
 There's action.
 Okay.
 Let's see what was that code sample.
 I guess I'm going to copy it here.
[01:32:56]
 But I'm going to put this in Redux too. [ Pause ]
 It's useful, maybe it's not, but at least it's a practical demonstration.
 I'll put here a note like,
 see,
 AI got MD or details.
 This is a text I want to show.
 I'll put square brackets around it and then in parentheses, I'll put a link to the file.
[01:33:56]
 So this Redux will have a link to the AI file if I want to see the context a little
 bit in more detail.
 Okay, so this is the front end code.
 We're done with it all the tests. We got, we have three tests and they're passing.
 And since they pass, we're going to say we're done with get answers.ts.
 Now we can focus on rendering the answer right here.
 right here.
[01:34:50]
 Okay, so if I submit this, tops on the debugger,
 we have an answer here.
 We just need to render it.
 So we're going to do that with Redux.
 So we're going to do that with Redux. So in state variables.ts add a categorized state variable for the answer.
 So I guess I'll just call it answer.
 Date variables.
[01:35:38]
 Let's see, where do I want to put this?
 Click put it in the home page, or make it available all throughout the
 website.
 I think I want it to be available all throughout the website.
 So global answer starts with nothing.
 Starts as the empty string.
 So that's what I'm going to do.
[01:36:15]
 So I put it in the global section, just by name, and the real name of the state variable is answer.
 Now we're going to code the selector and setter.
 So let's code the selector first.
 Okay, so there's already one here.
 I'm just going to copy that.
 Paste it. paste it, select global answer is what we want to do.
 And we're going to go into the structure, the global answer from the state variables, and
[01:37:00]
 then return that.
 Okay, so that's what this is doing.
 Notice it's a pattern here.
 Whenever it's a pattern like this,
 you can program it to automatically do this for you.
 Instead of manually copying and pasting,
 you can program JavaScript to do this for you
[01:37:21]
 or a TypeScript.
 But I'll let you try, that something that's for you to figure out.
 Basically, you will have a function, you create a function to create these functions.
 So that's something you can figure out when, after you've graduated level four,
 whenever you see patterns like this,
 you can take a creative function that takes in some,
 basically take a creative function that takes in
[01:37:52]
 your state variables and then it outputs
 all of these selectors for you.
 You can do that.
 I'll probably, I'll show you maybe that you can do that,
 but I don't want to confuse you with the code,
 but maybe in the coming days, I'll show you that you can't do that.
 Let's see what's next.
[01:38:26]
 State centers.
 So we did, we already finished the selector.
 Now we're going to finish the selector for it.
 I don't have anything for GoBools.
 I'm going to make a new section for the global. So we want to set,
 so this is our group of setters. I just copied and pasted. We want to set
 global answer.
[01:39:04]
 Okay, so it's not a Boolean. It's a string. So I'm going to change this one to
 Spring. I didn't make it yet. So this action is, this data type is going to say that
 the action will contain a payload, which is a string. We expect that payload to
 contain a string. I'm just gonna copy and paste this one. Instead of Boolean,
 this will be action string and that payload will be a string. And that fixes that data type. Okay, so again, we can see here
 action string is an object that has a payload, which is a string. And it also has
 a type, which is a string. This type is always a string.
[01:40:07]
 I can put a debugger here so we can watch it all happen.
 So I set those. Now add, use, I would need to add use selector.
 And then you remove this using that. You select there, then give it the selector, which is select, global
 answer. We're going to use that function. We have to give it the callback or the
 function, it will run it. And then that's going to be the answer. So we can watch that happen.
 What a debugger there.
 I think we can start with that.
[01:41:33]
 Refresh this.
 Okay, so the website is reloading now.
 It's blank.
 Here it's creating the state variables.
 We see that there's no global answer right now.
 It's going to try to select the answer from state variables.
 Here it is.
[01:41:57]
 It's going to select it by de-structuring the state object.
 The state object has all these properties. We just want this one, the global answer.
 That global answer right now is empty string.
 So it's going to return that.
 And, uh,
 gonna return it. And then we capture it here.
 There it is, the empty string.
[01:42:31]
 So we properly selected it.
 And here it is trying to select it again.
 That's because the state variable, the states are getting updated. So this one is checking if anything changed.
 Remember, the state object has hon hounded mount and message.
 So it got changed.
 It changed some things here.
 So AI is checking, okay,
[01:43:14]
 did you change the selector?
 It's checking it a few times.
 Just make sure that the selector then.
 I mean, does it change the answer?
 Making sure that the answer was unchanged that's why we saw that it just kept on selecting it a few
 times. I'll let you see that one more time here we're creating a state
 variables which includes these other state variables. We're gonna select the
[01:43:39]
 answer here it is it's selecting but then I'll press play it's here again
 that's because it's checking again if the answer changed because did not
 also change and the message also changed okay so it saw that nothing happened
 and it's something else changed so it's gonna check
 okay I want to make sure the answer didn't change so here it's gonna see that
 the answer has not changed so there's nothing to render nothing new to render
 okay so we got it selected we got the answer selected right now.
[01:44:26]
 So this part's done. Now we want to change that answer with use dispatch. Use dispatch.
 That's going to give us access to the dispatcher.
 access to the dispatcher. We need to declare this. So now there's our access to the dispatcher. [ Pause ]
 Dispatch in action to set the value of the state variable. [ Pause ]
 Okay, so we need to dispatch an action from here.
 Because we get the answer that we want.
 So we need to dispatch an action from here. Because we get the answer that we want.
[01:45:27]
 We need to dispatch an action.
 So let's create an action.
 How do you create an action?
 You get it from the set object.
 Set object is automatically created for us.
 It's automatically created for us, depending on what we put in these files. We just said at these files and then the set object will be created for us.
 And we choose which one do we want to set. We want to set global answer. It's not going to pop up here in the list.
[01:46:07]
 It shows the selector here, but we don't want the selector.
 That's the wrong thing.
 We don't want the selector.
 We want to select the global answer.
 State variable.
 This doesn't pop up there.
 And then we put in here the value that we want to set it to.
[01:46:31]
 That gives us an action.
 That returns the action.
 And then we can dispatch that action.
 Oops, not dispatch event.
 What happened here? Oh, I put this handler outside of the component.
 It needs access to the dispatch here, so I need to bring it in. I'm going to cut this out, now I'll bring it in.
 Before everything was working outside of the component, but now we need access to something
[01:47:19]
 inside of the component, so I'm just going to put it right here.
 Okay, so this will bring bring us the things that we need to need to see.
 Let me take this debugger off. And I'll take this debugger off.
 Take this one off. Actually, I'll keep the one for the answer
 so we can see it come in.
 So right now the answer is empty string, which is fine.
 Website loads.
[01:48:02]
 I'm going to submit this.
 Actually, I think I'll put a debugger here.
 Right here.
 Okay, so I'm going to submit this question and context.
 Okay, so here it gets intercepted by the handler, handle submit.
 We're going to get the answer.
 We have an answer.
[01:48:38]
 The answer is roll is our.
 We're going to create an action.
 Think of an action like a like an invoice, or like an order,
 like a command, like a request that we're going to send.
 So it forms an action object, and then we're going to give it, hey, this batch here, take
 this and make it happen. Take this action object, or take this piece of paper, take this and make it happen. Take this action object or take this piece of paper
 take this invoice, make it happen. So this this factor is going to run, take it to the
[01:49:12]
 reducer, to change the action. So here the reducer, the reducer gets it or state setters. The new value is right here, the new value.
 So it's going to set it right here, it's going to state.
 And now the AI component is made aware and now extracted the answer.
 We just need to render it.
 I'll render it right here.
 Put the answer in here.
 Press play.
[01:50:03]
 OK, so it started over.
 OK, I'm going to try it again.
 Submit this.
 Okay, we're going to receive an answer.
 Create the invoice.
 That's the action object.
 We're going to give it to this batcher and tell him, "Okay, make this happen."
[01:50:28]
 This batcher gives it to the reducer or state setters where they do the actual work
 and changing the value.
 So the new value is roll-as-art or the answer or the global answer. The component gets the
 answer here and it's going to render it down here. But we don't see the answer
 yet down there. I'll press play and now we see it, if I scroll down, right down there.
 And that should do it.
 That one, we render the answer.
[01:51:16]
 We did everything.
 So for the sample code, I'm going to put this right here where we get the action and dispatch it.
 And I'll copy that to Redux to it.
 It looks like that.
 Wrong one.
 Okay.
 So that's what we got the, we got Redux to render the answer.
[01:52:12]
 Let's try it one more time without the debuggers.
 Um, actually what I'm going to do is let me just
 enter my screen again.
 We're going to put a default answer so that I don't have to scroll down every time.
 So I'm going to go back to state variables here instead of empty answer output the answer will appear here. We don't remove these de-builders now.
 Okay, so now I can scroll down and it says the answer will appear here.
 If I suppress the mid.
[01:53:18]
 Oops, there's a de-bodyber again.
 I can equal these.
 There it says, "roll those are." If I change it to John,
 there it is, the answer is John.
 And then if I put something that doesn't contain the answer
 like the sky is blue
 it says sorry I don't know." Everything is working well.
[01:54:15]
 So if you've gotten up to this point, congratulations.
 You've integrated a full stack AI front and interface
 with back end server and you can make it look fancy use bootstrap to style
 the AI interface actually let me go back here and just copy this into the
 notes interface. Actually let me go back here and just copy this into the notes.
 Just to just to have it there. Okay, there it is in the notes.
 All right, so you can do something like this, just using bootstrap.
[01:55:41]
 This is interface where you can someone can type in a question and then they click on
 "Ask" and then the answer will appear down here.
 Here's the, this is a bootstrap icon of a robot and this is the answer.
 So the question was, what's this website about?
 The answer is a place to buy the coolest stuff
 The context is hidden inside this button if you click this button it'll pop up the context
 So
[01:56:16]
 Here are some bootstrap components you can use you can use the grid system
 You can use the grid system to align everything.
 You can use the collapse.
 That's what I use for this context here.
 Collapse, if you click on it, it'll show the context.
 And if you click on it, again, it will hide the context.
 Icon.
[01:56:44]
 This is a bootstrap icon. Remember when you want to use icons, you need
 to add the CDN to the index.html file.
 Spacing this is the spacing pattern for margin, for this one, M3,
 set the margin all around to 3.
 Or MT means set the top margin to 3.
 MB means set the bottom margin.
 MY means set the top and the bottom margin to 3.
[01:57:24]
 And then these are the ones for the padding, similar pattern.
 Borders, you can set a border,
 but you have to use the border class.
 And then you can change the color of the border,
 like this border primary or whatever. These are just
 examples, right? You can use primary, secondary, black, white,
 just check the colors. You can make them around it. So these are around it
[01:57:57]
 instead of square borders. And you also see the borders, right? You see,
 if you don't put border, then you will not see a border.
 Colors.
 So BG is like the background.
 You can change the background right here.
 It's BG info, but you can also do BG primary or whatever.
 It makes sense.
[01:58:22]
 You can change the color of the text. So
 this one here is white. So this would be text light or text white. This one,
 this icon counts as text. This one here is text warning for yellow. You can set the size of things. So Fs, that's font size 3. So the
 icons count as font. So you can change the font size of an icon to increase the size
 of the icon. You can change the width. So there's a there's a width class. You can put 50%
 75% 100%. So that's what this one means 50% of the screen. Or 50% of the box that it's in.
 or 50% of the box that it's in.
[01:59:28]
 Yeah, this one is 50% of the box that it's in. This one, VW, 50% of the total viewport
 or total browser box size or display.
 50% of the total display, but if you're,
 you could have a display, but then you could have a small box.
 This one, W50, will be 50% of that box.
 So I'm not going to demonstrate those today. I just want to, like, a quick, I just wanted to show you a quick,
 cheat sheet of things that you can use to design the interface.
[02:00:11]
 Part of the fun is just experimenting with these.
 But this is the actual interface I used with just these bootstrap concepts.
 And you know know HTML. Next week, I can show you how to do this.
 So I'm going to copy this into the notes. [ Pause ]
 Then you just replace these loaded points. Okay, so this looks good.
 Let me see how this looks.
 These are all codes.
[02:01:19]
 So I'm gonna just highlight everything individually.
 See if it looks right.
 Yep, that looks good.
 These are all examples.
 You don't need to use like primary here.
 You can put secondary or info or success.
 And these numbers are also just examples.
[02:02:15]
 You can look these up in the bootstrap website.
 So the only new ones here are collapse. I think
 everything else you might have known about already. You should know about everything. Maybe you might not have used these before, but
 you can. Just use any class, but don't spend too long designing. You should
 spend most of your time meeting the requirements of your assignments.
 After you've met the requirements of your assignments, then you can spend more time designing or on the visuals like this.
 Okay, so we're going to use the remaining amount of time just for the practice here for the second hour. Redux account practice.
[02:03:15]
 So use Redux to toggle access to the account page where users can edit their information.
 So let's say a user logs in.
 Now you can have a account page for them
 where they see all their information and they can edit it.
 So create an account component within account button and a modal.
 So this is following the pattern that we had before where everything's in the navbar.
 If you click on the sign in, it pops up a modal.
[02:03:52]
 Well, if you see the account button, if you click on account, it'll pop up a modal with
 their account information.
 Let the modal contain an editable form, except for email.
 Don't let the email be editable.
 You can look that up how to make something not editable in React.
 Do that with the account information.
 Actually,
[02:04:33]
 let's see here.
 Well, yeah, I just get something working.
 It's fine. Because you might also have to check if they're password,
 if they, if they enter their password properly.
 their password if they if they enter their password properly.
 Next, when the account form is submitted, update the database. So you should already know how to do that, how to update a database when their information has been submitted.
 has been submitted. This was part of one of the assignments, the credit assignments, and then, you're going to add something to that account component, account component. So add a delete component with a delete button and a modal. So not only will
[02:05:31]
 you give them the option to edit their information or update their information. You also
 give them an option to delete their account. So you can have a button for that and another model pop up for that.
 So let that model confirm with a password that the account should be deleted. So if they click on the delete button, it should set up a should show a model saying,
 "Are you sure you wanted to delete?" And if so, enter your password.
 Are you sure you want to delete? And if so, enter your password.
 So if it's confirmed, delete the account and automatically log out the user.
 So hopefully, you'll put some like a check saying,
[02:06:28]
 it's going to check if they entered the password properly. So if it's a correct password, then it's going to go ahead and delete the account and log out the user.
 But if they put the wrong password, it's going to say, sorry, that's the wrong password.
 We're going to do that check within this line here, within this line number six.
 So if the account was deleted, you need to set the proper Redux state to show when the user is not logged in.
 So basically, you're going to just set the Redux state.
 After they deleted account, you just say, okay, they're not logged in. Maybe you have a state in Redux saying, is logged in, you'll just said it's a false or something.
 And it's just going to go from there.
[02:07:13]
 So let the account component select the Redux state.
 So in that account component, you're going to use the selector.
 The view if the person is logged in or not.
 So when the redirect state shows the user is logged in,
 so the account component.
 And when the redirect state shows the user is logged out,
 either account component.
[02:07:44]
 Actually, I think I might change this.
 This would be in the sign in area.
 Let the sign in area check the lock-in status.
 And then the sign in area will decide to show the account component or not.
 So this is what that's about. Just let me know if you have any questions.
 And I'm going to use the remainder of the second hour to look over this practice or to
 answer any questions that you might have. So I'll just leave the breakout rooms open for
[02:08:23]
 15 minutes. The remainder of this hour.
 Oh wait, actually.
 Or did I go over?
 The go over. We're going to after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break. And now you have time to work on anything,
 but here's the assignment.
 The one that's due on Thursday, the capstone finale.
 I know that number one here is properly designed and programmed the
[02:19:44]
 front end to the provide an overall good user experience. I know that number one here is properly designed program the
 front end to the provide an overall good user experience.
 I know it's on number one, but I think you should work on this
 last because like if you're especially if you're working on design
 sometimes it can you can get stuff designing things for a long time, like get it perfectly positioned and doing research on how I could, how can I make it this color or position regards to styling, it might take a while
 to figure that out.
 So what I would do is focus on the other requirements,
[02:20:33]
 like the programming requirements,
 like converting the routes to the post method,
 adding artificial intelligence to the back end server, creating the front end interface for the AI and assign a feature, add account feature, persistent login, persistent expiration,
 the programming stuff, focus on those as fast as you can, get those done as fast as you can,
 so that you can spend more time designing later on.
 Because when your program is working functionally, all you have to do is worry about the design.
 Okay, so we're going to start the breakout rooms now. Again, prioritize your tasks,
[02:21:47]
 Prioritize your tasks, focus on the programming requirements. Don't get stuck on designing or trying to add new things, just stick to the requirements.
 Because the requirements are what will get you points. And you need those points to complete this level.
 So Chris said he wanted to do corrections for the mini evaluations. The breakout rooms will be open for, let's see here, 28 minutes.
 Chris, I'll meet you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. So the, um, all right. So the break items are back.
 And in conclusion, we learned about JSON parameters, you know, using axios sending data through axios, the hidden data.
 hidden data using JSON parameters. We also set up the Express backend server
 to accept the JSON parameters.
[02:51:11]
 And then we use Redux for the question answering AI.
 We created an action, we dispatched it,
 we rendered the answer.
 We also set up state setters, state variables and state selectors for it.
 And then Redux account practice was introduced.
 If you haven't taken attendance, make sure you head on over to your codecs account and
 properly mark your attendance. You have one minute to do that.
[02:51:47]
 Now, doesn't that pass as dismissed. That's today's lesson on AI. I'll continue. I'll open the Many evaluations for Chris.
 Okay, the breakout rooms are open. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ]
 And I see some of you still here, any questions or anyone want to do corrections evaluations. [ Pause ]
 Okay, well you guys have a good weekend.
 [ Pause ] But feel free to stick around. >> Okay, good weekend. But feel free to stick around here. If you want to ask, I mean,
 if anyone else is here, you can ask questions or work together. It's up to you. Have a good weekend.

///// FILE: "Level 4/transcripts/May 5, 2025 20-22.txt"

Transcript from May 5, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 This is week nine day one. And the theme of this week is the capstone finale where we won't be
 learning anything new, but we will be going over through things that we learned in the past. Maybe practicing things, practicing ways to apply them,
 especially to the capstone.
 And I can also answer questions about your capstone,
 so it can start making it presentable.
 So today's agenda.
[00:00:47]
 Take attendance to announce
 minutes review and practice second
 hour. I think maybe the practice will go into the second hour and also have a chance to answer questions.
 And on third hour, I can do corrections for
 many evaluations week eight.
 And also time to work for work on
 capstone assignments.
[00:01:23]
 And pass assignments.
 So now is the time to take attendance.
 You can head on over to your code X account and mark your attendance accordingly. And now time for announcements.
 Let me just load that up for you guys. [no audio]
 Okay, so this Thursday is student collaboration day.
 So you'll have a whole task time to work together and work on your capstone and whatever other assignments you have. As usual, the class schedule in the class schedule, the dates are posted here.
 Capstone finale is this week, next week, final evaluations, the last week focused on presentations.
[00:03:01]
 Possibly, you know, some of the evaluations are not done yet, they'll fall into this category also.
 The Codex staff, they are expecting presentations. ready for your presentations by Tuesday of this week.
 Shouldn't be that hard view.
 In your presentation, you talk about your website.
 What it does, like the features it has, you should also talk about the technologies that you're using, like React, HTML, CSS,
 and all those things.
 You should all know those by heart by now, any, all of that stuff.
[00:03:54]
 You should know by heart.
 I guess the hardest part is if the students have any questions and it's regarding your code,
 you should be able to explain your code.
 Or if the instructor's have any questions and I don't know, maybe they'll try to ask you a question.
 Okay, what, what, what is Redux? How do you use it? And you might need to show your code
 because maybe that concept of Redux might interest them.
 because maybe that concept of Redux might interest them.
[00:04:29]
 Or maybe your AI might interest them. What are you using for your AI and how did you do that?
 I might get interested and ask you how you coded it.
 That would be the hardest part, I think. but everything else, you should note my heart.
 And you can, we'll take the opportunity that last week, or presentation week, we can practice
 with each other. And then you can practice. Well, hopefully everyone will be all caught up and finished by presentation week.
 So you'll be, you know, fully comfortable presenting to Codex staff.
 But Monday, for sure, we'll get a chance to practice presenting to each other so that when you go and present to other people, it'll be easier. At least you had a tougher audience than, you know, codec staff or other codec students.
[00:05:48]
 Because we know the code and,
 and we know you well, so we might try to stump you.
 But other people, like,
 when you pronounce other people, they'll probably be nicer than we are.
 So the survey, survey is still available.
 And one, get a chance to fill in that survey from Lillian.
 If not, then you know, just take a few minutes and do that.
[00:06:22]
 We need evaluations. Remember there's a 16 minute time limit for many evaluations.
 I don't have the many evaluation ready for this week yet.
 So when I posted, I posted by tonight, basically I'll let you guys know tomorrow with that many evaluation week 9 is and then LPD1 Wednesday.
 But as usual, you need to, when you see that many evaluation, because that's the mid button to be placed on the waiting list and to qualify for the on time point.
 The assignments and all the assignments will be graded this week.
 Okay, so we can go into the mini evaluation, the final evaluations week like fully prepared.
 But you'll still receive extensions and might not be. fully prepared.
[00:07:31]
 You'll still receive extensions. It might not be as long as before,
 because we're in crunch side, but we'll see how that goes. But you'll receive an extension when your assignment is created.
 Let's see, App Engine. So that this capstone app engine closes Thursday before class for late credit.
 Capstone finale is due Thursday.
 This Thursday before class.
 As usual contact the student success team.
 They want to help you succeed.
[00:08:07]
 So any of these are closed,
 which are ready to take them and get points on them, let them know.
 And we'll see what they can do for you.
 Practice problems are all posted here.
 Some of these practice problems you'll need to know for your capstone finality.
 I've updated the descriptions and this capstone finality to point you towards practice
 problems that will help you.
[00:08:44]
 Like for this one here, properly
 create a branch in, basically this one's about creating a user friendly
 experience of signing up. So see Redux sign up practice for ideas so we'd have sign up practices this one here that's posted
 on the sign also sign up practice
 But in regards to using readups to sign in and sign out, you can get ideas from readups to sign in practice.
 But what I just talked about is sign up practice.
 That's about new people creating new accounts.
[00:09:51]
 This one right here, create a user-friendly experience of editing account
 information. So you can get ideas from readouts to account practice.
 That's this one here.
 Also posted here by user friendly.
 I mean like a some kind of interface.
 Some kind of interface that they can use to edit their account information.
 That's front end stuff. So front end stuff using bootstrap,
[00:10:35]
 HTML, CSS, event handlers, like handle submit. Those are we learned those from like up to
 level 3. So that that user friendly part. You learn that the front end stuff up to
 level 3. You knew everything you knew you had to know to create the interface by the end of level 3.
 Same thing here, user friendly experience.
 We're signing up, user friendly experience for anything that are count.
 Basically, these are, there's our ideas for using a button and a model to pop up that page.
 When you can do it in another way, like you have a full page
[00:11:31]
 dedicated for signing up, or maybe a full page instead of a
 model for editing account information.
 So to you how you want to do that. Whatever fits the design of your website.
 I think it's more interesting if you could make it a modal.
 Like the ideas here.
 And another one for adding persistent login.
 That's listed here in this practice persistent login practice which is
[00:12:08]
 also here week six
 how to make the login how to keep someone logged in even if they reload their
 page or refresh their page that's what this is about. And we should be somewhat
 familiar with using local storage and JSON. We use this before. We use
 local storage in level three for redirecting. At least I showed you that the tools that you used
 may depend it on local storage.
 Expiring login. So you can get ideas from expiring persistence practice.
[00:13:05]
 You have this practice called "Prist" This is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is with expiring persistent practices here.
 Right there.
 So I need to update that link.
 Okay, so that's what I how I've updated these capstone requirements, basically provided good links to the practices,
 but I will be walking through these practices when they at a time.
 Hopefully, you can push forward and get ahead of me when I start doing the walkthrough
 from these practices. Today I'm going to do the walkthrough for this one here, Redux sign-in practice.
[00:14:09]
 You guys should have implemented this already, but if you haven't, can you show
 me how to do that? I'm going to walk through it today. And that's the capstone.
 And practice problems.
 And so again, the Hermit is available for mentor meetings.
 Actually I'll be more available for mental meetings this week too.
 So you can also contact me.
 Don't be stuck for more than 15 minutes.
[00:14:58]
 Don't look at this and say to yourself, "How am I going to do do this I don't even know where to start
 don't be stuck on that for 15 minutes get help like how do I even get started on this
 I can get stuck on how to add persistent login and you're just blank
 use cool blank while then just close and select cohort and cohort and get some ideas on how to get started.
 Let's see if there's anything new there. Okay, so you can ask on what this is for.
 This was about changing the Redox variable names.
 Yeah, you can name it anywhere you want.
[00:16:01]
 So basically you're categorizing your B-lux variables by
 name and you wanted to put it on this floor that time. You can even
 categorize them my object property. Instead of a name, I think my name would be
 the easiest, like put the category right, and then put the name of the
 state variable right there.
 But it's also possible to make it an object or home.didmount.
 It's just harder to do that.
[00:16:37]
 If you have an understanding of, if you have a good understanding of objects, you can do that. You can categorize with an object.
 Instead of my name.
 But this is the easiest way.
 So I recommend just doing it my name first.
 Once you have what you feel,
 fulfill all the requirements of your capsule project,
 or like by name like this, with underscore, what you fill the requirements of your
[00:17:13]
 capsule project, then you can start experimenting with other things.
 But right now just focus on the requirements and getting the points.
 Because you don't get extra points for creating them in the object
 notation. You just have to categorize them somehow. It becomes more complicated if you try to do the object way.
 But right now, the way it is with this plate, you don't have to change store.gs in this style.
 But if you do the object way, object notation,
 like if you did the home dot did not,
[00:18:04]
 you'd have to change the store. TS and I won't code to it.
 And I made a new announcement here about the plan for this week.
 So, if you're asking, can you change it to TSX?
 If you do that, if you store empty tags, that means you're trying to say that you want
 to store react elements in your state variables.
 And if you store react elements in your state variables, you're going to get an error.
 So I don't recommend changing it to TSX file, because if you do that, that means you're
[00:18:54]
 going to start using HTML tags.
 And if you start doing that, you're going to get errors.
 And you're not going to get, I mean, you're going to get, you're going to
 miss some points because you'll have some errors in your code.
 So I'm just going to, what I would reply to this is keep them serializable. Serializable non-serialized means things like
 you know like
 these female components, react components. Those are non-serializable.
[00:19:38]
 Things that are serializable, I mean things that are non-serializable,
 reactable complaint and so are never.
 I mean, redots will complain and so are never if it's non serializable.
 Meaning, so serializable means that it can be stringified.
 You can put JSON dot stringify and give it an object and it'll, it'll give you the proper stringify, you know, notation of that. But if you give JSON about stringify and object that cannot
 be stringified, there's, it'll tell you like, this cannot be stringified because there's
 infinite, it's referred, an object is referring to itself. So if it tries to string a client, it's going to be like an infinite string.
[00:20:27]
 That's non-cerealizable. And react components, j-s-x, that's non-cerealizable.
 So you don't want those, because they're going to throw an error.
 So a short answer is, I don't recommend it, because if you go that route, you'll you'll get errors and if you get errors you won't get all the points.
 What I would do is instead of storing JFX in the state variable store place holder a string or an object.
 a string or an object like if you want the story image, maybe you want to store an image tag in a state variable in a Redux state variable. Well, in sort of storing the image tag just store the source, SRC, and then when you see that converted to an image tag in the component.
 So that basically the source would be the placeholder. This is a string.
 When you hold a value from read-out store, convert that string to an actual image tag.
[00:21:44]
 I don't remember which day I discussed how to use placeholders, but I didn't talk about
 it.
 Use a placeholder instead of storing actual JSX. Okay, so it's okay to use notebook lm.
 So help you find things in your class notes, your code and transcripts.
 The transcripts are available up to week 8 day 4.
 So right now is week 9.
 We don't have any recordings for this yet.
[00:22:31]
 But I have everything up to day 4 here.
 Transcered up to day 4 right there.
 I'll try to add this to date. I'll just process it right now.
 And make sure to go through these days in order so that one day is not confusing because
 they're built on each other.
 If you skip the day, you get confused.
 And let's see here.
[00:23:17]
 What else?
 Okay.
 So we're going to review those taught on Saturday, basically we've finished up the concepts, AI concepts
 on Saturday.
 So that's what we'll review.
 But if I think of anything new, make sure you take notes on that.
 Also, I'll give my comments ready.
[00:23:41]
 Just in case you have questions or if you have some really evaluation
 corrections to do.
 Now it's time for review. So we've learned about JSON parameters. So JSON parameters, that's what it says here.
 JSON, axios accepts data as an object and uses the post method to send data as a JSON string.
 Let me pull up the sandbox here to clarify. Okay, so I'm gonna go over my screen now. and where's that park to backstand.
 It's looking a little scary.
 I'm a son of a cat.
[00:25:35]
 I'm a cat.
 I'm a cat. [BLANK_AUDIO]
 So Axios.post started using this method to send data securely.
 And we basically give it a URL to send the data to.
 And we provided the data.
 In this case, the data is an object.
 The objects don't get transmitted to the Internet.
[00:26:14]
 Strings do.
 So this needs to get stringified.
 When an object gets stringified, that's called JSON.
 JavaScript Object Notation. When an object gets unified, that's called JSON.
 JavaScript Object Location. [BLANK_AUDIO] We also see a reference of it and then note right before it.
 And so this will dislike.
 This is the note right before it.
[00:27:15]
 It sends axials.post.
 sends data as a JSON string.
 But, Express needs to be configured to receive JSON drivers. I mean it
 sends it as JSON parameters. It sends the data as JSON parameters so we had to
 add use JSON to the backend so that our server can receive the data. And so let me move back in here.
 Here's the back end and here's the here's the here's Express and here's where we added
 Here's Express and here's where we added app.use.json. So our server can receive JSON parameters.
[00:28:09]
 The way this JSON parameter is sent to the XOs Post-Matic.
 I also have comment here.
 It allows data to be received from XELs, the JSON parameters.
 And when we do that, the data is visible to response request done body.
 So I didn't.
 So we're here.
 So you can go ahead and say something rather than being received.
[00:28:57]
 I should also add here.
 Request done body.
 The same as the other one, where we added this one so we can receive requests from postman.
 And that was also visible if you request that body.
 Right here, request that body.
 You can, um, de-structure this one object into two variables.
 And remember it goes from right to left.
[00:29:45]
 The whole goes from right to left. You do this first. And then in the Okay, so answer probability score.
 So in this slide, we've learned that the AI model provides the probability that the answer is correct.
 So score of 0.
 The score goes from 0 to 1.
 Right there, 0 to 1.
 And 0 is lowest point as the highest.
 0 means absolutely not certain about the answer.
[00:30:41]
 1 means 100% certain about the answer, one means 100% certain about the answer.
 So, 0.5, which is right in the middle,
 that means 50% sure that it's a correct answer.
 And basically, when we get a response from the AI,
 we can structure that and get the answer and the score.
 Here's get answer.
 On line 15 here, we gave the AI model the question and the context.
[00:31:30]
 And game was its response, which is an object.
 You don't see the structure of the object.
 You just see here, oh, here's here's the structure of the object.
 It's an object with one, 2, 3, 4 properties.
 The ones with the question mark are optional properties,
 which may or may not appear.
 May or may not be available for it to be undefined.
[00:31:55]
 Because they're optional.
 So if they're here, then, if they're available,
 they'd be numbers.
 But if they were not available, they'd be numbers. But if they were not available, they'd be undefined.
 But those response should have a score property, which
 is a number.
 And this should have an answer property that's in the street.
[00:32:16]
 So we structured those out right here.
 And then in the city of sleep, right where we have for it. Oops, we're not going to share my screen.
 This is a response object. Here's the AI model.
 We give it the question and the context.
 We get a response from it.
 That response is an object.
 It's right here.
[00:33:00]
 And it's going to be an object that has a score.
 And an answer, but it may or may not have a start or an end.
 That's why there's a question mark here. So we know that we'll receive a score and an answer so we need structure those out.
 And then you check on that score.
 And in this case, we're saying if the score is less than 0.5,
 or basically this means 50% 50% wrong 50% right
 because of the AI is saying the things that the answer that is providing it's 50/50, it's either right or wrong
[00:33:58]
 50% right or 50% wrong
 but in this case we're saying, OK, AI is less than 50%
 certain than--
 don't give the enhancer at all.
 That way, I know that, hey, this is probably
 the longest answer.
 I don't even want to see it.
[00:34:20]
 And then we return the answer.
 So, when we call this function, we can answer function and we give it a, see that this is the handler, right?
 This is the dot handler. And we need structure the question and context
 the request by body or with JSON parameters.
 I'm gonna add your get URL and code and data.
 Or JSON parameters.
 And then we'll move on to the next one. And Jason from this.
[00:35:10]
 And Jason from this.
 And Jason from this.
 And Jason from this.
 And Jason from this.
 And Jason from this. And Jason from this. And Jason from this. is you get them both from request on body from the constructor, the question and context
 out, you can pass these in and you'll either get a correct answer or no answer at
 all and then that's what this hand will be sent to answer. I just remembered it is this one right here.
[00:35:47]
 So we have a student of week.
 Congratulations to you again.
 I'm here today.
 Second time from getting this.
 Good job.
 It feels like it's going to be very easy.
 Before we go.
[00:36:16]
 Yes, good job.
 Everyone's back to this. And so we can look at the next slide.
 And this next slide, this is where we started talking about using Redux.
 In the front end, or rendering the answer.
 Instead of using newState, we're using the Redux system.
 We're creating an actual end dispatch that action.
 The way that looks, right here,
[00:37:18]
 and spin the front end.
 And have a AI component.
 Here, AI.
 Select.
 You'll stay very open using this view selector hook.
 And the selector function that gives us the state variable called answer, which we
 save in the global category. So let's look at the state variables first. So in
[00:37:57]
 the state variables, so this is basically our object containing all our state variables. And we see a category here at the global category.
 This may be about this answer to me available globally.
 Or we want the AI to be available all throughout the website on every page.
 So that's why I put it in the Global category, Global section, and I did it by name.
 Not by object, but it's by name. Stay variable is called answer. I'm going to list and start.
 If I render it, you should expect this.
 The answer will appear here.
[00:38:58]
 You should expect that. So let's see how that works.
 So that's where it is.
 I'm going to try to do it right there.
 So how did you get that to happen.
 So we have to prepare our variable. And this will value here.
 And then in this AI page,
 we use the selector function to pick it out of the state variable.
[00:39:45]
 Select your function here.
 Right there.
 You have to code it.
 The selector function receives a whole state.
 The whole state, almost a very bold.
 And then we just tell it to eternally the variable that you want, which is in case, in this case, in the answer, which is in the global category.
 And then we use just to name the category.
[00:40:30]
 Just like if you have files you're working with files and you want to just know by the file name that they're all from which here those files were created, you can just
 begin each file with the name of 2025 meaning those files were created in 2025.
 So basically you're category those files,
 categorizing those files by name,
 you just put in 2025 in the front,
 and then you put the actual name in the file after that.
 So same thing here, put the category of the front,
[00:41:02]
 then put the name in the very front.
 put the category in the front, then put the name in the variable. So this is the selected function. It picks the variable we want.
 I mean the destructures that out on this 8 object of our list of state variables.
 It picks the little one and then you turn it, and then it returns it,
 but gets stored right here.
 Store it right there.
 So we have an answer,
[00:41:34]
 and then we write that answer right here.
 That's why you see it right here.
 And then answer a little bit here.
 And next up step after that is to submit the form.
 Divide a question and then you can submit the form.
 So you're going to get this working property.
 I need to start the back end. So we're going to have it now.
[00:42:32]
 So what's going to happen here is when I submit the form, it has a question in the context. Right, this form has a question here in the context.
 I'm going to pull the question in the context out using the
 the elements property.
 So there's a question input.
 I don't want the input element. I want the value that's in it or the stream that's
 the same thing with the context. I want the value and the screen that's in it.
 I just want the screen not the actual element. This is the element, this is the value that's contained in it.
[00:43:15]
 Like this box here is the element. I don't want the box, I want the value that's contained inside of it.
 That's the screen.
 So I'm going to submit that answer to the back end.
 I'm going to submit the question and the context of the back end is going to give me an answer.
 And then, I'd have to carry it sort of like an invoice
 or a work order.
 In this case, it's called an action. So this one here basically creates a work order
[00:43:53]
 and then we give that work order to leave a dispatch
 and it goes in, it goes in at least
 so you need to get it done.
 Okay, so this right here is where our setters come from.
 We have state setters.
 Actually, we have a computer.
 Set to another one.
[00:44:21]
 This one is automatically created for us. It has, it knows global answer from our variables here.
 We will go to answer.
 This object here, the set object is automatically created for here, create slice.
 And it creates a business-owned thing, and basically just formats the data in a way that it likes to see it.
 So it provides the actions for us, which we stored as a set variable.
 Set is an object, right?
 Set is an object because we see not notation. Set is an object that has a property called global answer.
[00:45:27]
 The answer is a function.
 But since it's attached to an object,
 global answer is a method.
 We also see parentheses here activating the method.
 So the slice gives us this set object,
 it's weighted for us, which basically we just provide the name of the state
 variable and the value that we want to save in it. That creates a sort of border that Redux calls it an action. And we give
[00:46:10]
 that action to dispatch, which will then give it to state centers. The correct one. So it's
 this one. This is the same same one same name. It's going to give it to this one. this is the same one, same name, it's gonna give it to this one.
 This is where the new value is extracted from the payload,
 and then saved into the state variables.
 And you're actually going from this direction, but if you value against
 storage into a global answer property of the state object,
 this is here.
[00:46:55]
 Relax comes in and gives us a copy of all the states.
 You can see it gives us a copy of all the states.
 State variables. And then we choose which one you want to change.
 By the end of that, we should have a form that we could send and get a response.
 We could submit and get a response because the main thing that's happening here is in the front end.
 We get a question and a context. We send it to a module called "Get Answer."
 The communicator with the back end server is calculated to answer and give the back to us.
[00:47:55]
 We use Redux right here in two lines.
 Just go with that answer and it's debatable.
 And then it comes back in here and sees the update, sees the new
 answer and then it renders it right here right below the form which is rendered right below the So after that, we've successfully integrated a full stack of AI front end interface back-ends. And this part, I can go over this next week, but this one is just to give
 it an idea how you can make sort of a nicer looking interface for the AI. Just using
 bootstrap. And you can put this anywhere on a page on all your pages.
 You can put at the bottom corner of the page.
[00:49:14]
 But these are the components.
 I used to create this.
 I used to create this. And some spacing that you can customize these are margins, these are paddies.
 To create a border like this, a black border around each element.
 You need to use the border class and pick the color.
 In this case, this border black instead of border primary.
 These are wrapping borders right here in that square.
[00:49:52]
 So that's where this one comes in.
 Roundly.
 Others.
 You can change the colors.
 So this one's actually this one's ultim primary.
 This one right here is BG info. So I don't have your ultim primary but they all add that. So you can notice in the colors I'm going to add here a button in the primary.
 So if you don't assign a button color, it's going to be basically almost invisible.
[00:50:39]
 It will be almost invisible.
 This is basically a pump size this one is for this one is for the viewpoint width.
 It looks like the amplitude took up the first hour, so in the second hour, I'm going to do the walkthrough
 or the sign impact.
 Now we're going to take a break and we're just going to make sure we're going to take a break.
 Next slide.
 Next slide, we're going to do the compass.
[00:51:31]
 Now we're going to take a break. [BLANK_AUDIO]
 Okay, I'll see you after the break.
 If you have any questions, feel free to post it to the chat.
 I can use it in half of the break. If you have any questions, feel free to post it in the tab.
 I can use it in half of the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, so we're back from the break.
 And for this second hour, I'm going to go through this practice here.
 Redox sign-in practice.
[01:02:19]
 I'm going to walk through the solution for this.
 Hopefully you guys had a chance to do this already.
 Basically just converting your sign in to Redux. So use Redux to login and log out the user.
 Then let me just save a copy of this so I can access this from the screen share. Actually, I can access it in the redox notes.
 I have a lot of other things that I have on the right side.
 I'll save this practice in the redox notes. I'm going to read that snopes.
 I have one for practice here.
[01:03:33]
 Okay, I guess I'll save if you're in the practice page. the marks on keywords here in area.
 Sign in.
 Sign in.
 So you buy.
 Sign out. Let's see here without sign out action. Here's this batch of all of the keywords.
 The exact word that we use.
 Set keyword. Wait, why is this same thing but different context?
[01:05:11]
 Okay, so we have the practice here.
 Let's see, do we have any sign in for the front end?
 So we have little sign in right now and we don't have a, and this menu is not even
 Redux, I mean it's not even bootstrap right now.
 That's okay, I'm just, what I'm going to do is I'm going to copy
 my site in and sign out from
 sandbox level 3.
[01:05:55]
 I'm going to go and get that. and then we'll find the first.
 Here's the sandbox level 3.
 And we just make sure I have it here. I'm going to shut down the front end first.
 This one is level 3.
 I don't think we had scripts yet.
 We didn't have scripts. We didn't serve Webpack steps over yet.
 So this one's going to be the Npx Webpack. and see how it looks like it's smooth pack.
[01:07:07]
 And see how it looks like that one is getting going.
 Long forward. [inaaudible ] >> Well done. That's not in sandbox, the material is in the react sandbox.
 [ Inaudible ] [no audio]
 [inaudible]
 Here, and the X1 pack will start.
 We'll start our things back then and the X1 package
 and the X1 package. and I think it really just gives my server
[01:08:47]
 so I think it gives my server
 so I think it gives my server
 so I think we use black server.
 So I have a sign-in and sign-out button there.
 So it's confirmed.
 It looks like it's working.
 I'm just going to copy and paste it from there.
[01:09:36]
 I need a flower to the...
...in the glitz in here. Sign in area.
 Sign in contents and the models sign up for it.
 And you're called copy all of this. [BLANK_AUDIO]
 [BLANK_AUDIO] And here, I'm gonna rename it.
 Thanks, Brooke.
 [BLANK_AUDIO] So the point what I want to do is just get it to render on the nav bar first. And then we'll be outside in here.
[01:11:08]
 And the nav bar.
 Let's go to the start right here. And then we'll start with the front end.
 And some of the corners.
 And then we'll start with the front end. and then you can't use wall handle side in the time.
 Again, we'll get that one. [ Inaudible ] and these AWS authentication on this instance thing here.
 So I'm going to add that to.
 And it's this type here instead of default values.
[01:12:41]
 You can put the type now.
 We can put the type now.
 And it's either an authentication AWS. Yeah, this one will be in here.
 Once I got in these, these are very filled out marking.
 So I need this one,
 I'll have the execution page on the rest,
 and the module is filled there.
[01:13:16]
 I'll do that.
 And you see, clear.
 We made it to text it. I guess I'm missing this, I'm missing this package. I'm working in the sandbox right now.
 So, missing a lot of stuff.
 So, we know how to install those in QM. I'll put that package and I also need the second package here.
 I'm not going to put save depth because I'm directly importing these. What time do you put in the salt?
 So these areas should put up some angle over that. And we are using, I'm using the New York using the Martinburg with mouse a lot of these credentials [no audio]
[01:15:09]
 so I'm going to install that and then install that in the key
 and then you can click on the process that I noticed is from the front end. I'm not going to actually call this.
 In front end is not going to actually do this.
 I don't need this in the front end.
 Again, it's all not buttoned, it's all.
 This is the front end. The front end doesn't actually do the calling of DynamoDB.
 The back end does. I just need to tell the back end of the week. And I'm going to un-assault the end of the week.
[01:16:27]
 And it's called that, you know.
 So it's not going to be called authentication AWS.
 I can rename it, but I know I don't need a key.
 I don't need this client.
 I don't need this request.
 My back end takes care of this.
 The back end here will take a pair of walrus.
[01:17:09]
 So I'm gonna leave this empty. [BLANK_AUDIO] [inaaudible ]
 So I'm expecting a Boolean.
 Is authenticated.
 So I'm expecting a Boolean from authentication AWS.
 So I'm just going to put here in the function signature that I'm expecting a Boolean.
 Even to our calls, I expect it to return a Boolean.
 We're now into the default.
[01:18:43]
 So I figure out.
 I can be a promise. It's going to take a while because it's
 facing here.
 So I need to make it a promise, which
 resolves to infinity like that.
 So there's normal arrows here.
 For now.
[01:19:04]
 arrows here. For now.
 And so I'm going to need to update this. I'm going to move some of these things out. Like there's not like this. and
 and [ Inaudible ] everything I need from the accurate space.
 And we start this movement.
 And then start. So the first part is just, you know, getting that sign in, sign up, what's in.
 So it's, uh, as is without read-ups. that lead up.
 Okay, so I see a sign and what's it? The motor works.
[01:20:58]
 And it looks what is gonna happen.
 I can hold it, I can hold it this time.
 It's relaxing, it's relaxing space.
 So it's going to go from the sign in area.
 sign in area. Actually, so this one,
 it wants instead of quotations with wants, wants,
 numbers to be escaped.
[01:22:01]
 Like that.
 Remember the curly braces escape into JavaScript.
 So all this here is like HTML.
 This curly braces like a window into JavaScript.
 And then like the negative one here is actually JavaScript.
 It looks like a hand-to-sewing it right here.
 And with the piece of the,
[01:22:28]
 it's like looking through a wall of HTML
 and looking through a hole
 and in that hole you see JavaScript.
 So that's how you can use curly braces
 to escape into JavaScript.
 And message. into the atmosphere.
 And this is the very cool.
[01:22:55]
 Well, this is where
 so it's going to go into here.
 And the lines is going to be a lot of and you can utilize it in the raw data type.
 And the side of the tap is supposed to give you an error message.
 It's going to go here.
 Handles side of the tent. It's going to pull out. I'm going to put a name here. That's going to be the other one.
 So I'm going to put a name here.
[01:23:50]
 That's going to be the other one.
 So I'm going to put a name here.
 That's going to be the other one.
 So I'm going to put a name here.
 That's going to put a name here. That's the email I want. And then
 name of this is password. That way I can access it by name from here.
 So I don't need to get inputs anymore.
[01:24:30]
 Then you just
 copy it on this app,
 then update
 class form equals event target and the the
 the
 the
 the
[01:24:58]
 the
 the the directly. You get it from the form that email. It's connected to this right here.
 Email from that email. That's value. Because I don't want the element. Right. I don't
 want this box. I don't want this box. I want the thing that's tagged inside of the box.
 And you can want this not the box. I want the value that's inside of it. So that's where I get that.
 And here, the password, I know I get that. That's from the form, the password.
 Right here, by adding a name to it, I can access it by name.
[01:25:59]
 Password, but I don't want the box. I want the password. That's, I want the string that's inside of it.
 So I put value here. He's going to give me the string that's inside of it. So I put value here.
 It's going to give me the string that's inside of it.
 These are just TypeScript areas.
 It's all in more than for now.
 And then it's going to try to authenticate using authentication in the US.
 So I can add that for me quick.
[01:26:40]
 Basically what it needs to do is contact my back-end server and I need to know the URL of it.
 It's 8CTP.
 the data that I want to send to it is an object that contains email which will be the email that's here. I'll rename this to user email actually. So it's not confusing. So it doesn't look like email email.
 And then this user password. So the data will contain an email and the password. Those will get the values
 to user. And then I need to send those through axios. The post method because I want to hide the data. If I use the get method, it'll expose
 the data in the URL up here. I don't want to expose that. So I want to use the post
 method. Using the post method, I give it the URL and I give it the data to send. I
[01:28:27]
 giving the post method, I give it the URL, and I give it the data to send. I need to await it to is the location route. I don't have that.
 And I have to make that too.
 Authentication.
 Or I can do a mean. I would work this way too.
 And lifting the half of the post.
 And then we'll be wrapped.
 Finding a re-candy or cut out.
[01:29:40]
 And you can start to practice yet.
 I'm just doing set up.
 And just realizing that I'm missing a lot of stuff before you can get started.
 So I'm going to create the route here called green.
 And copy it.
 When one of my other routes just to be quickly and then just change the
 wrapping here and it's not going to do this but it will, it's supposed to get the, it's supposed to get the
[01:30:31]
 email and password.
 We're not going to get that from the request.body.
 That's where S-R-X-Os will send the data to.
 And I'm going be structured out.
 I can set that to the,
 should have another three.
 Oh, working in the long server, it in the other back end server.
[01:31:07]
 Not the Google Cloud server, but the Google Cloud server is for that one is for the AI. [speaking in foreign language] [no audio]
 And I'm going to get the other, back the other server.
 You can see the back end server, put all our cards up. See how you need?
 I have some demos here. So this one is one of my favorite.
 Something called account.
 Get paid for the account.
 And maybe read account this one or one.
[01:32:38]
 And it looks like it.
 Yeah, that's it. The count, I should have the count for it.
 And I should have the wrap for it.
 There it is, the re-wrap, it means a green account.
 Okay, looks good.
 At least I have it back in, done.
 And then start.
[01:33:24]
 I guess I didn't rename the script here. It's the fog in here, but I'm going to.
 I'm going to call you to build on the entire, start to.
 built on the entire start to change. It's going to change slightly.
 Then we've got the little edit this index and the end one
 is like two.
 So it's still showing the old stock, so I'm going to reset this. Okay, so it's showing the old stock. [BLANK_AUDIO]
 After one start, two first, and four.
[01:34:30]
 Take the side, then, you need to stop.
 [BLANK_AUDIO]
 Looks like we didn't catch it. [BLANK_AUDIO]
 [BLANK_AUDIO]
 >> Yep, since the end run starts.
 I think it's gonna work.
 I can just test it.
[01:35:07]
 See what works.
 You can see the work that I want when you see what happens.
 You can open the mail-in password and then match.
 You can watch it when it does when you Watch it. Watch it.
 Oh yeah. It's a little bit rough.
 And that rock is not easy.
 So I'm going to update that.
[01:35:44]
 It was a little rough and then change the team to post.
 Now it's going to send it data a little bit differently.
 So instead of it coming from query,
 it's going to come from body.
 Here I'm now constricting it. It's going to come from body.
 Here, I'm not restructuring it.
 Extracting it one at a time. That's fine to you.
[01:36:17]
 So I think that should be it.
 You can see it from this.
 Also, you can have the air and then this back track and see where you're involved. And you can go here.
 It's going to get into here so I can get in here there.
 See if it gets that far.
 The authentication.
 So, get started.
[01:36:59]
 Go to the URL.
 Data. the URL, data,
 same coming straight.
 Oh, I'm always between false, but I will see
 what kind of response we get.
 (mumbling)
 Except we're not gonna do the response. The whole post-ad
[01:37:27]
 1000 ring.
 Let's see if it even gets into the back in.
 So the problem is to get to the back end.
 Maybe might not find a very good one.
 Then let's start this in volume light. Okay, so we're going to go down and hit some gap.
 Here's the front end.
 It's going to send the request to the back end.
[01:38:49]
 There's the back end of the c-zip.
 Oh, that's the end of the here.
 See what happens.
 It's going to be easier. [inaudible] just on parameters.
 Because it was trying to, this is the part where it crashed right here.
 Since there is no request on body,
 body was undefined, so undefined, this would have a property called email.
[01:39:44]
 When you try to do that, it crashes.
 It's so it crashes on this first line right here,
 because it didn't receive the data.
 Because the back end server is not set up to receive
 JSON parameters yet.
 That's app.use.
 JSON.
[01:40:01]
 And you can see the entire server the same as something wrong there and it's
 color yellow. Basically just this activated. It will basically this function It returns a value that happens.
 I probably won't.
 To make it clear, I probably wouldn't write it like this.
 I would write it like, like, a little bit.
 It gets complicated. It's called middleware and it's a function and it's going to get in turn here.
 Just leave it like this.
[01:40:54]
 This is what you'll see in a documentation.
 I think it'll work now.
 Let me see here.
 See if I can get the values.
 There's the point that I'm sending it.
 But back end, let's see if I can get the values out now.
 I got the email out and I got the password out. Let's see if we can read the account information.
[01:41:26]
 [BLANK_AUDIO]
 [BLANK_AUDIO]
 And I think the client crashes,
 that's why I'm here.
 Instead of continuing, I think the client crashes, that's why I'm here. Instead of continuing, I think the client crashes
 because it won't be in shows.
 Oh, yes, I don't have an E and E file.
[01:41:51]
 I don't think it will be like,
 should have a quality and E file here.
 Okay, it works.
 So, there it is.
 Name password. Okay, so there it is. Then password. So that's good. I have to look at the information coming back.
 So I have a look at the information.
 You're going to get it here. I mean, it's going to send it to the front end right here.
[01:42:19]
 Front end receives it.
 But I'm not using it. So response is a object.
 And it's-- well, we can't see the value of it,
 because I didn't want it.
 But response.data is where that account information will be.
 And then we turn that account. Instead of returning a Boolean here,
 you can return the account.
[01:42:58]
 I don't have that account.
 Data type yet. So I'm going to copy into the modules.
 See, we have a low-count data type in the back end.
 You can use account.ts or copy that. So this is what AWS authenticates AWS and return and return and account.
 If it'll either return an account or undefined. We'll start this one.
 Try it again.
 This is what I call the happy path, where you know where, if you're putting in the correct
[01:44:26]
 values, everything should run fine.
 We're not checking for errors yet.
 We're just checking if everything runs fine, but you put the correct values.
 That's the Happy Path.
 So I put the correct email and the correct password.
 So this is the frontend I'm gonna get a response.
 That response is an object that has a data property
[01:45:00]
 or data object which has email, name, password, and phone.
 So I'm just gonna say that, basically, I'm going to say that data into this account variable.
 So here, we see the account is an object that has an email
 made in password and company.
 That's going to be returned.
 So at least I know everything's working fine
 with that point.
[01:45:27]
 And it was a sine of the tent.
 This one is actually gonna get the finger count.
 Let me see what happens if I put in a long pass rate.
 And just make sure it's coming in as one time.
 Okay, so the gallery response is going to send the email and long passwork.
 It hits a response and the count information I get is at oh it's
 empty stream. It's not account. So that means look at the account, the undefined. In this case, uh,
[01:47:10]
 um,
 that's the ones. Yeah, that's one. So, my account's got to come in, it can't be it, it can't be it, it has an empty string. So that means basically if there's no account, it can't be as empty
 string, I'm just going to change it to undefined.
 So that I can return in the account and unify. Okay.
 And then handle sign in.
 Yeah.
 So this one is going to either, it's going either receive an account. So it should be an account.
[01:48:07]
 You will be a account or be undefined.
 So if there is an account, if there is an account, then I want to close the button, reset
 the inference.
 I don't have a button that's in time.
 I actually want this to be done.
 And it's siding over right here. and then we'll see what we can do.
 So I want to have a side and a tenth
[01:48:52]
 to either return an account
 or return nothing.
 So we'll return and account for undefined.
 Since its basic is going to return the Thomas that contains an account for undefined.
 So in this place, if we want to return this, I don't want to return this.
 I don't want to return this. Yeah. Return account.
 So I'm just going to, this one is going to either return in the count or undefined.
[01:50:07]
 You can see here, the count will be defined next to the promise there.
 So it's not going to return in the error message.
 It's going to return in the count. So if there's an account, I wanted to do something.
 Otherwise, I wanted to set an error message.
 And then this is the thing that I want to do it.
 The error message. I'm not getting this from anywhere. I'm gonna get it from here.
 This goes to the error message.
[01:51:27]
 It's something that there is even over here in here. Let's see how it feels.
 I still haven't even looked on the practice yet.
 I have to make sure everything's running properly before I can start the conversion.
 It's actually bit in the couch. And you'll see it'll get in it.
 Looks like we're back to your weight.
 So, as grown, there should be a sink here.
 And we're in this one.
[01:52:15]
 The reason how I know I need to do that is because I see here a count is a promise.
 Because that's supposed to be a promise. I expect an actual account to come here that's why I need to wait back.
 Try that again. Next, we'll be back in. This is the process. The process in the previous information.
 We've seen the per count comes in as a date.
 That bit of information here.
 The amount of count.
 So it's going to be on-signing.
[01:53:01]
 What is on-signing right here is basically converts
 and there's this right there and converts it to the sign up, but it
 also closes. It's a close
 the model. So these are the things I forgot to do. I need to click on the toes butt tip and I need to reset the inputs.
 It does an account. I guess I can do that for you.
 I can do that for you.
 So I don't have to worry about it.
[01:53:58]
 Or I can move it from here.
 I'm going to come here so it's here. I'm going to pop in this.
 So it needs a close button and input.
 So I need to extract that out of your things.
 Actually, since I'm doing all the extraction
 in the event from this file,
 I'm going to use what we're doing there.
[01:54:30]
 I'm going to use the file.
 Since I'm extracting that, you can do the event.
 So I'm going to need a... [no audio]
 [inaudible]
 I'm putting the air in this using the front.
 The front is either side and the side and the model
 so I can delete that in here.
[01:55:07]
 What I do want to pose, and we step the things here.
 So, where's that pose button coming from? and you can put it straight and easy way to fix that.
 Now you can put it from the effect for the name.
 I should have direct access to it.
 So close button is going to be for that close button.
 I'm not close. I've formed that button for that same name.
 Put here.
[01:56:13]
 I could have put a button.
 I don't want the value because I want the actual button.
 Right, I want this actual button right here.
 So I can click on it.
 I want it to not click inputs.
 Input is the form.
 So actually, I have the left hand.
[01:56:47]
 So, it's a good place.
 You can see here, it depends on that target.
 There, now all our variables are defined.
 This one's from the OK. This is an x-ray curve.
 So at least before we go to the break, let's make sure this is working.
 So it's going to be authentication.
 I think you learn that this pipeline.
[01:57:33]
 So we'll get the app account information.
 I think it already closed.
 I think it already closed. I think it already closed.
 I think it already closed.
 Okay, it closed everything now. It closed everything.
 So let's see that again.
 Going back to handle the sign and it should get into this part.
[01:58:04]
 Oh, I think it's a signup.
 Then you'll be requested.
 Okay, so it has an account.
 It found an account.
 So if you found an account, it found an account.
 So if we found an account, if it's true fee, it's going to go into here.
 And it does, so it's going to click on the close button.
[01:58:34]
 And it's going to reset the inputs.
 We're not going to see that right away.
 I can only see the effect of the right away.
 If there's a catlifer patient that's going to run the on-side inflection that
 was passed to it, we're going to change this. We don't want to do that anymore.
 We're just mentioning with Redux, we're just going to store
 this account information into Redux, and then all the components have access to it.
[01:59:14]
 So let's be able to sign it.
 Then we'll start over here and now put a wrong password.
 We should get an error message instead.
 And then put the error message in the password. So it took a whole time to fix our sign in.
 So basically you saw me integrate the sign in from level 3 into the sandbox.
 Basically you can do the same thing with your capstone.
 We're going to take a break here.
[02:00:16]
 And then even get a chance to touch this practice yet.
 Trying to get it working.
 Just go sign in as is. try to get it working as is.
 Without the new desktop.
 So it looks like it's already.
 It's going to be a sign in part.
 We're going to take a break now.
[02:00:37]
 Once you have after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay. Okay, so we're back from the break.
 And so during this third hour of class, you have an opportunity to work on your latest
 assignment, which is the capstone finale.
 You already know about this.
 Since I didn't get a chance to finish the walkthrough,
 I can go through it right now and finish it up.
 Or I can just take this opportunity
[02:11:37]
 to answer any questions you might have about your capstone.
 your capstone. Any questions or should I just continue with the walkthrough here? You have a question? You posted it on July cohort. Yeah Okay
 Gonna share my screen here
 Says you're trying to use a class for
 Non-serial serialized states instead of a component
 But you keep getting this error. Yeah, if you're using a class,
 those classes are non serializable also.
[02:12:37]
 So let me see what you're trying to save.
 Yeah, there's a class there.
 You're making an object from the class
 So what and are you trying to save this class into a state?
 So what you're doing into a Redux state variable this pass object. Yeah
 classes that I keep getting a error
 You get an error.
[02:13:09]
 Yeah, classes and objects. This one stores an object.
 Objects are not JSX.
 I mean, JSX looks like, you know, like tags like this.
 So you can render strings. And you can render JSX looks like, you know, like tags like this. You can render strings and you can render JSX like these tags, but
 you can't render objects unless this is supposed to be a string right
 here.
 Description.
[02:13:39]
 No, those are properties of an object, the link card content object.
 Yeah, and there's these are properties,
 but they also contain values.
 Oh, yeah, the description.
 Yeah, suppose to be strings.
 So this one should render link card content.
 Okay, so this is the, this is the class.
[02:14:06]
 Yeah, and the link content is there.
 Okay. Yeah, and I see here that you're,
 yeah, you're going to re render or you want this class
 to store JSX in the property called current content.
 store JSX in the property called card content.
 No, I want the class to render depending on what position I put in the parameter.
 Render, it'll change.
[02:14:35]
 Oh, yeah, right here.
 Yeah.
 It'll actually have.
 OK, yeah, it'll render it'll render something.
 It's basically what
 your story is, is J-S-X into the card content property, right here, right? This
 dot card content, so this is what this is, right, your card content. You're gonna
[02:14:59]
 store this into here, depending on what the position is given to the when you create a link card
 here you're choosing position 0 you can render the link card link card dot card content. So in your code, you should be rendering card
 content, then card one dot card content. You should be able to render that in
 your return statement of your componenthome link card then replacing it with that. Yeah, yeah, so this is I see what you're doing. So
 you're storing home link card one as your placeholder. Yeah. Wait, okay, so this is your
 state variable then. This is your state variable. And then you're gonna
 replace, since it's the placeholder, you're gonna be facing what the
[02:16:33]
 actual value that you want. It's gonna be that. And then if you want to render
 something, it's gonna be link card one card content. That's the be that and then if you want to render something it's gonna be link card one card content
 That's the one that's containing the JSS
 What I need to change the state variable to link card one card content as well that
 No
 No, you can just leave it as hard one.
 The reason why you don't want to, your state variable becomes harder to manage when it
[02:17:15]
 has like, dot notation in it.
 So it's good. Just have this placeholder here.
 And then what you could do,
 what you could do is,
 let me see here. next time. I get a new air right now.
 This is how this is another way you can do it.
 And you do it from here, potentially.
[02:17:55]
 I have a very few modules. modules J-cell [no audio] It looks like this. Actually, we're meeting with the JES.
 I just got the mark.
 Okay, so it looks like this.
 I would change it to...
 something like
 the
 car
[02:19:20]
 car car one equals to the power of the object.
 Now we have to work here.
 Now you don't need to put any documentation there.
 Let me see what I'm doing here. This is where I store the object, but then this is where
 I store the actual content that can be rendered. So you can't be not getting, so you need to start a debugger.
 If you can't read this property here, maybe something is happening.
 Maybe something is happening in a code where, where, uh, card content is not being saved. So put a debugger on this line right here.
[02:20:32]
 See if the card content is actually getting saved into there. You could also put a debugger on this line right there.
 So we'll actually this line.
 So you can see with the kind of
 link card object to get that.
 And see with values exploring.
 Okay.
 Any other questions? Okay, and the other question.
[02:21:07]
 Yeah, you see the debugger?
 Make sure you're getting your values are coming in properly.
 So I'm going to just continue with the practice here.
 But feel free to interrupt me if you have a different question.
 Just raise your hand and I'll hear it otherwise I'm just going to
 if I don't hear anything I might just keep going anymore. But I'm going to continue with
 this. Redux, assign and practice. I mean I think you guys already had the sign in on your
[02:21:58]
 capstone, but you saw how I was able to integrate the sign in into the sandbox. At least it's you know practice for you guys to see how
 you've integrated things from scratch. Not completely from scratch because we had the components and So now, I have the side in area.
 I wonder if the sign out works properly.
 Let's see what happens if I click on sign out.
 I know this part works properly.
 It's properly signed up right there.
 Let me just fix this because it's only one night of code for this if statement.
[02:22:56]
 So I don't need to coat block from this either.
 It will not be able to coat blocks.
 I'm going to start over because I'm going made change.
 Can't see if I can sign out. I'm sure you want to sign up.
 OK.
 Looks like the sign out is working properly.
 So, can I see if I can sign back in,
[02:23:47]
 yeah, I can sign in and sign out.
 All right, now that convert this to redox, the notes,
 so you should have this a working sign in already in your caps,
 and you probably don't have to go from where I just want to.
 Getting it working from scratch almost.
 So for the redox store, create a state variable,
 selector and set it for the login status.
[02:24:27]
 That's the front end. [inaudible] workspace here. It was everything I needed. So the Redux, how do I add a new state variable?
 That's with the save variable file. I'm going to save it in the account. And I'll say that account globally. Since that's what a... that's the information I'm getting back.
 I'm getting some account... some kind of account.
 And the initial value will be undefined.
 And this value will be undefined. You let them view and have it account for the beat undefined.
 I created a state variable. Now I need to create a selector for it.
 That's going to be in the selected file.
[02:25:56]
 I see here select golden to the quantity, select global answer. I'm just going to copy this one and change it for the global account.
 And I need to get the global account out of the state. Next, I need to add a setter. So the login set is basically, I'm not storing
 the two or halls, I'm just basically storing the account. If I have the login status, basically, I'm not storing a tool or false. I'm just basically storing the account.
 Because if I have the account information,
 I know that they're logged in.
 If I don't have the account information,
 I know that nobody's logged in.
[02:26:57]
 So basically, I'm going to store the account.
 You can have a different approach in this corridor, you can use this way in this
 corridor.
 You can also answer, so this is the center.
 Just going to copy that and change it for the account.
 The payload here is gonna be different. I'm not, the payload is not going to be a string.
 It's gonna be an account. I need to make a new, um, you actually
[02:28:02]
 So the action account is going to be an object that has a payload which is an account or it's going to be in the bind.
 So I need to fix this. One volt account.
 There.
 I'm set.
 I created the Steam variable.
 Global account.
 Basically, the category is global.
[02:28:39]
 The state variable is called account.
 Initial value is in the client.
 The way it's selected from the state objects,
 in this case the state object.
 And this is the whole thing.
 The way it is selected is the selector.
 Basically pull it out on the state object
[02:29:03]
 and then return it.
 basically pull it out on the state object and then return it.
 And then the state center.
 It gets the whole state object and it gets the action.
 The payload of the action contains the mean value, which is supposed to be on the in account for the fine.
 And then we're going to say that move value in the state variable.
 So I hit this part next one. Let'll let the side and area before it. Select the redox state
[02:29:47]
 regarding the login status. Sign in area now. I'm done with this. So here I was using a I'm going to be there for now.
 So the account, what is the size inside from the right side of the design.
 Here is the selected.
 I want to get the account information.
 You select there. And I want to select the new local account.
 Then what that will be available on our pages.
 I might say when I'm younger, in which case I have two remaining options.
[02:31:13]
 So, I'm going to get the account, state variable, and the story here, but I need to be better. I'm not going to change the value, so I'm going to
 repair it as a constant. So, if there's an account, I know there's fine here. I can change this now. I'm not going to use this anymore as the condition.
 I would use that I can listen now using account.
 I guess I'll start from the top here. I can use this anymore. Let's comment that out. I'm going to update. It's not going to monitor that anymore.
 I'm going to come on into that anymore. It's going to monitor our count now.
 If there's an account that means I'm signed in,
 if there is no account, it means I'm not signed in.
[02:32:47]
 Let me say anything. [no audio]
 And so, the thing that controls this condition is the account. If there's, that means basically they're signed in. If there's an account, there's that means they're signed in.
 So if they're signed in, I wanted to show the sign out that what's in the sign out.
 But if there is, if they're not signed it,
 or if there is no capital information, I want to show the sign in model.
 Same thing here.
 Just going to update that. and then we'll see anything here.
[02:33:27]
 Just going to update that.
 Add a little sign in.
 So this one actually is supposed to, I need to be creating a
 action.
 I want to store the account into Redux.
 I'll put it in your bug repair.
 So you will know when I'm going to run.
[02:34:01]
 Let's hide it there.
 Come home and select the new.txt and got any logins on it.
 So that's fine.
 When the relux.txt shows, the user is logged out.
 Show the sign in component.
 OK, I did that already.
 Thank you.
[02:34:20]
 So if the user is logged out, that's
 going to show the sign in component, right there.
 Also the same thing here.
 If the user is logged out, the show is the sign in component.
 When the relux stage show is the user are logged in, then the button I will show is this sine And then sign in. This is I'm going to show you a sign out mode.
 So that's what this is.
 Actually, what the redox state shows the users
[02:35:18]
 gone in, hide the sign in component.
 So this is what it will actually, it hides it.
 It hides the sign in the corner.
 By replacing it, when we sign out component.
 So this is the bottom.
 It's just rendering home thing.
 This component is just rendering one thing, which is what's going to show.
[02:35:41]
 And so this is basically talking about either what or the other will show up
 either the sign-out button or the sign-in button will show that the same time you could
 and the redox state shows the user's log in. So the sign-out component,
 the rest of the system, the user's logged in.
 So the sign-out component.
 The user's log-out, hide the sign-out component.
 So this one is log-out. The way to hide the sign out component. So this one is logged out. Well,
[02:36:26]
 the way to hide the sign out component is just going to face it when the sign in component.
 So we're going to do this pretty quick, the practice,
 in the sign in component, when the user logs in,
 dispatch in action
 so the sign in component I slowly to fix these things here
 and the side in component. That's the assignment mode in here.
 Actually, it's a single called sign in mode.
[02:37:18]
 When we use a log in, dispatch an action.
 Okay, so here they are.
 If they're logged in, dispatch an action.
 So I'll keep this one out.
 And so here, here, I'm just going on.
 And I guess, hopefully, we'll go over here.
 You get there for now. I want to dispatch an actual
[02:37:45]
 so set
 let the action set the proper V.State.
 So I need to use the set
 object.
 Here it contains what do I want to set?
 The global account.
 What do I want it to be?
[02:38:15]
 I want it to contain the account.
 Information.
 This is going to return the work order.
 It's going to run this and it's going to create a work order, which we call the action.
 Then we need to discharge that action you need to use at the hook?
 Right here.
 You just need that use the selected.
[02:39:07]
 This one doesn't even care.
 I'm not going to let it manage itself, but it's fine like this. Okay, I think that's all I need to do here.
 So in the second component, when the user logs in, he's got some action.
 Let the action set the property in the next state.
 Okay, so let's just get that from time.
 Okay, so it's signed in. I got an account from the back end.
 So if there's an account, I want to create an action.
[02:40:14]
 There's the action called a look order.
 It contains all the information that this batch reads.
 This batch is going to eventually go into state settings so I'm gonna open that up
 I mean this batch is gonna hand the action to the state settings It's going to handle two of the mandates here. This account.
 There, I read it.
 This batch here gives the action for the work order to be
 paid federal and the user.
[02:41:00]
 The pay load.
 The pay load is actually the account right here.
 You see it.
 So the new value here is the account that's going to go from the previous value, which was undefined.
 Now it's going to have an account inside of it. And side in area is going to see that in the press place.
 And I'm going to press play to the side in here. Okay, so this part actually we don't need
 this anymore. So it is signed in, I don't need that anymore.
[02:41:47]
 I've actually just commented out, I don't need that anymore. This will have to
 information, it's all I need.
 It's going to crash if that happens. So that means I don't need this, but either.
 I don't need those because this account
 contains everything I need.
 It takes everything I need to display.
 Correct information.
[02:42:25]
 And now I don't need this,
 because the site and model just took care of it myself.
 It doesn't need a callback anymore.
 It doesn't need this callback.
 I can leave it like that from now,
 but it just basically leave it more.
 I can feel the air effect, I'm coming at this now, trying to run it.
[02:42:54]
 So let's try it again. [BLANK_AUDIO]
 Okay, so it's good to pass on the bind right here.
 [BLANK_AUDIO]
 And see what happens.
 You can pass on theide to the signing mode.
 And see what happens.
 And the signing is not the time.
[02:43:45]
 When breaks, it's right there. It's like, there. It's not the time. It's not the time. It's not the time. It's not the time. It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's not the time.
 It's not the time.
 It's the time.
[02:43:53]
 It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's the time.
[02:44:00]
 It's the time.
 It's the time.
 It's the time.
 It's the time.
 It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. It's the time. And since it's not taking any props, I can even see parking is coming down. Sign up for you.
 Well, this is the signing part, so let's just get the sign in more to you.
 This is working with the gucks right now.
[02:44:42]
 It's not using the other stuff anymore. So here goes their
 account and it's going to dispatch an action and here it's going to store
 the account in the state variables. Now it sees it selects the account from
 the state variables.
 and the same as the very holes.
 Now, this is the Captain Information.
 And I see here a sign out.
[02:45:24]
 Next, it's going to go and, if I click on the sign out, the mode is going to, it's going to break.
 That breaks, because on sign out is not a function.
 Here's the sign out mode.
 On sign out is not a function.
 So I'm just going to comment that out.
 There's nothing more. the function. So I'm just going to comment that out because I'm not using anymore.
 So I'm going to put this in here. And you'll need to put the paper in.
[02:46:08]
 It takes this one, tab index.
 And there's a mod,
 rotations and logs to actually remember.
 So you have to escape the JavaScript.
 And I think that's it.
 And I think that's it.
 I have to dispatch an action here.
[02:46:38]
 So what we did was discard and assign When the sign component, when the user logs in,
 dispatch an action, that the action set
 will pop in the next state.
 Then the sign out component,
 when the user logs out, this batch in action.
 So the sign out component is right here.
 component is right here. These are logs out.
[02:47:09]
 Just batch in action.
 So we need to dispatch an action.
 What do we get?
 This batch from, we get it from
 use this batch. Use dispatch.
 Use dispatch as a hook. That will return the function on the dispatch.
 Here is the function.
[02:47:43]
 We're activating it. We're supposed to give it an action.
 Where do we get that action from?
 We get that action from the set object.
 We want to set the global account.
 So here's a sign-out model.
 If they want to sign out, we need to
 clear the account. We're gonna set it to undefined. [inaudible]
[02:48:27]
 [inaudible]
 So that should be it.
 It did all the steps here in the practice so that the action set the proper meet-ux state for logging out.
 I should edit this and get the coming edit this in one bit.
 Vdux state for logging out the relux date for logging in is store that account.
 So, let's watch it happen again. So, I've reached the website so the account is undefined right now. Nothing. Nobody's logged in.
 I signed it here.
[02:50:05]
 It goes and checks their back end for an account. It gets it. Now it's going to take a very in account. If there's an account, create a work order or an action, which is supposed to, which says,
 save this account information.
 And then just that action or look order. the report, the reducer or the state center gets it,
 same's at new value, same's in the state variable.
 Then we have access to the account, which was just saved
 into the state variable.
 Now that we have the account here, it knows with what's in this way. So if there is an account, then I will just go in the sound side-up model.
[02:50:59]
 In this case, it goes in the account, Sign up mode because you're conforming, updating.
 And then we'll take questions in there.
 So it's showing us sign up.
 Once in mode.
 Now I'm going to try to sign out.
 Now I'm going to try to sign out. Here's the back-click on sign out so now it's handling that.
 What's in here, I just click.
[02:51:34]
 It's going to click on the close button to close that mobile.
 Now it's going to clear you the work order.
 We simply store nothing. Figure out that account. And we find that.
 Figure it out. That's what the size of the border. This
 matter is going to execute that order. Or give it to the person who's
 been an execute that work order. And that is the user right here. Save that new value into the state object.
 And now we should see that the account is undefined.
[02:52:16]
 Sign area sees that the account is undefined.
 If the account is undefined, if the calp is undefined it's going to be the side in middle
 right there. I'm going to use this big sign in middle. I mean it's going to set the
 I mean it's going to set the button to the side of the wheel. It's going to run right there.
 And so we see it there.
 We can watch it happy to see it now.
 I'm going to remove all the envelopes. [BLANK_AUDIO] and the important one is the other in the sine mouth.
[02:53:43]
 So it's which to the sine, can't click on this, can't ask if I'm on a sign
 out, now it's switched to the sign and button.
 Okay.
 All right, so one of the tasks was to convert everything to Redux and not use any local local state variables. See, this is a local state variable. These are local state variables.
 Okay, is this is classical?
 Big class is done. Yeah.
 I guess next time I can discuss how to start converting everything in these individual state variables into Redux, but maybe not this little scene. We didn't have any break down.
[02:55:07]
 We didn't have any break down.
 We didn't have any break down.
 We didn't have any break down.
 We didn't have any break down. practice. So we saw how we can use Redux to sign in and sign up.
 Maybe tomorrow I'll clean up the code and remove all the internal internal state period. And just leave the read-up state period.
 Well, yes, class is dismissed.
 And that's today's review for the capsule and finale.
[02:55:55]
 You can start using that.
 Or, you know, just start adapting it to your capsule project.
 But I'll stick around for any questions that you have.
 You were able to get your cart to render.
 Yeah, I got it to render.
 Okay.
 Very good.
[02:56:20]
 Let's go around for any further questions that you might have.
 Let's thank for the comments. That's the ground for any further question that you might have. I'll speak for a few minutes. [wind blowing] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ]
 >> Could I have a handler function inside of a class?
 >> Yeah.
 How would you use it, though?
 Usually you want to be able to test out your handler functions,
 but if you can, it's harder to test things when they're inside of a pass,
[03:02:53]
 but it's possible that you can test it when it's inside of a pass.
 Well, I wanted the class.
 It's a, it's a, it's a trivia card class.
 I made a trivia card class. I made a trivia card class.
 And once it goes on to the, once it mounts,
 I wanted the, on click to work.
 - Okay.
[03:03:19]
 - But I was thinking whether I should put the,
 the on-click function
 or the handler for that on the did-mountator.
 >> Yeah.
 So, yeah, you're going to,
 yeah, you're going to have to put the handler in the class
 if you're going to put the J-S-X in the class.
[03:03:55]
 Your class has the J-S-X, and it needs to be on click or on submit. It needs to call back the handler.
 So you have both choice but to put the handler in the class.
 Yeah, both choice but to put the handler in the class. Yeah.
 So that handler in that case would be, you know, you could put it,
 you could actually put it outside of the class unless it needs values that's inside of the class. >> This is actually needs to,
 it needs, it's over here in home,
 right here, when I was using it,
[03:04:35]
 not as a, when I was using it before.
 It's actually, it's for this handle click API event.
 Okay.
 So you're going to replace.
 I was wondering if I should just put this one in instead.
 That's it's, but I need the event from the on point.
 Yeah, you need the event to come in.
[03:05:03]
 But you're rendering. You are rendering that, right?
 >> Yeah, I want to render this.
 >> Yeah.
 So you need the event from on-click.
 So what values do you need from the class?
 Was that in the previous page that you showed?
 Let me see.
[03:05:24]
 I think all you need? Let me see.
 I think all you need is the event variable. Yeah, all I need is the event.
 Yeah, you're going to get the event.
 You don't need anything inside of the class.
 Okay.
 You're going to get the event when it gets called.
 The event.
[03:05:40]
 The event.
 Because you didn't create the function.
 because you didn't create the function. Okay, so I'll put the function inside the class or.
 You can put it outside because it doesn't need anything inside of the class.
 So basically put the functions outside and then when you realize,
 put the functions outside and then when you realize, put the functions outside. And then when you realize you need--
 Wait, oh, oh, I see, you need the handle click API.
[03:06:12]
 Yeah, where is that coming from?
 Is that--
 It's coming from a module?
 A module?
 A controller.
 Okay, you could import that module there.
 And then that's to take care of it. You don't need that one anymore
[03:06:31]
 unless, yeah, you don't need that anymore. You just replaced it with your class. I was doing.
 There's a... There's that bug right there on line 58.
 So you replace that too, basically.
 You replace all that?
 Oh yeah, I'm gonna replace this with the class with
 Dawn serialized... Or like a non-serialized state.
 Okay.
[03:07:08]
 It was a true idea.
 Work.
 Okay. [BLANK_AUDIO] [ Pause ] I'm not connected with this. [ Pause ]
 Nope.
 It'll attribute a cart. [typing]
 It's just when that works in.
 [typing] [BLANK_AUDIO] [
[03:11:06]
 Make sure why that's not work [ Writing on Board ] [] [] [
 [ [
 [
 [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ I don't know why it's not working.
 Okay, let me check.
 I'm just working on something here. Okay, so I wasn't looking at
 something. What happened?
[03:12:14]
 Um, it just it loads like this. Oh, it says trivia card. Okay. And I inspect it. Card content.
 So the section is already there.
 I think there's a typo.
 Or trivia card.
 Yeah, it says there trivia card object.
 Oh, yeah, I changed this one to trivia card object.
 So you should change the site.
[03:13:01]
 OK, and this slide should change line 50 to trivia card object.
 Oh, I see.
 I see. This is
 (mumbles)
 [ Pause ]
 >> Okay, there. Yeah, I'm probably going to move these, this one, and this one.
 I was just wanting to get it working before I moved it.
[03:13:59]
 Okay.
 All right, that's all for my questions. Okay. All right. That's all for my questions.
 Okay. All right. People took a good work. Congrats again on the week.
 I didn't even know you could get it twice.
 Yeah.
 I've seen some students get in twice.
 Thank you.
[03:14:31]
 Especially in smaller classes.
 Yeah, I didn't.
 I didn't know I got it until I got Chris said congrats to me.
 And I was wondering, like, what is the reason for this congrats
 Okay, yeah, it looks like you understand the concepts and you're even using classes
 Yeah, I had a very that's very good because a lot of
 Programming tutorials if you're gonna start learning new stuff on your own That's very good because a lot of programming tutorials,
[03:15:05]
 if you're going to start learning new stuff on your own,
 they use classes too.
 So it's functions and classes, you need to know them both.
 Yeah, I was looking at the Redux notes,
 but there's nothing about the classes in there.
 And I was using classes classes before from like this one.
 I mean this one doesn't work anymore. That's fixed it but I was thinking maybe I can
[03:15:35]
 that I'm using a function for everything and maybe I can switch it up and try to use a class.
 which it up in tried to use a class.
 Yeah, classes are good.
 I wasn't just the left there. Not just know that they're not serializable classes or
 objects made from classes and not serializable.
 So you can't store them in a Redux state.
 Yeah, you can't even stringify them.
[03:16:13]
 Let's see what else functions.
 If you use a function to return an object,
 then that one is serializable.
 So if you have a function, and it returns the object for you, like a
 trivial card object, that one is serializable, and it might be able to, or as long as it
 doesn't have any JSX in it.
 If a function returns an object.
[03:16:55]
 - Then it might be serializable, you said? - Yeah, just as long as it doesn't have any JSX in it.
 - Okay. - But your objects have JSX in them.
 So it's already, if you're storing JSX in your objects,
 then it's already non-sterilizable.
 Yeah, a lot of my use states from before use return.
 >> Yes, XO.
 >> That's why you could cause Redux to
[03:17:37]
 restore non serializable stuff,
 but then the Redux dev tools, that Chrome dev tools interface where you can pass the
 states change.
 That one will work properly if you're storing non-surilizable values in Redux.
 Well, it may or may not work properly as long as it just depends on what values are changing.
 So, yeah, that's why I recommend just, you know, store placeholder values like a string,
 or maybe an object, a regular object, and then just convert it to the JSX that you need.
[03:18:26]
 So that's what you're doing.
 You are staring a string and then converting it
 into some JSX later on with a class.
 - Yeah, this, this originally just works like this.
 Like this part that I had commented out, it works,
 but it was just taking up a lot of space,
 especially three of them back to back, so I wanted to make them into a class.
[03:19:00]
 And it's kind of, I mean, I don't know how to load a page with it all scrunched up like this.
 So every time I load it, again, it'll just be all spread out and be hard to read, go in through, get overwhelmed, so I wanted to make it as--
 You could have a function, you could have a function that just returns the thing that you need.
 And just put all those if statements. Maybe. Yeah, I'll do a function
 for I mean the function one could work for the trivia card sense is only one type of it,
 but I didn't want to make three different functions for each of these cards that have the inside is the same. It's just the...
 So let me see those statements again. If statements again, where are the
[03:19:56]
 statements? Oh yeah, right here. So you're storing things in trivia cards,
 history, link.
 Yeah, and these I actually renamed my rename to these ones right here.
 This part's the same, but so it's much easier to understand what instead of having it all as
 link card one, link card two, link card three. It's not that descriptive. Yeah, now it's more descriptive. Yeah. So I don't even need these anymore because one of the link card 3, it's not that descriptive. Yeah, now it's more descriptive. Yeah. So I don't even
 need these anymore because one of the link card was there, I was confused a little bit which
 order I put them in earlier. Yeah, but now it's anymore.
[03:20:50]
 And yeah, so the position 0 for about 1 for location and history, but I'm probably not going to use
 location and history, but I just made it in any ways, but what I'm not going to use it, I was just commenting through that over here.
 - Okay, so going back there to your if statements.
 So about link card right there,
 about link card on line 34.
 Is that a, that's also,
 you're using, where's that declared that variable 35 on that 35.
[03:21:30]
 No, I'm 35. Yeah, where's that declared?
 This about link card is the same as here and it's right here.
 Okay. Yeah, so what you could do is you can turn that if they
 minute to basically just one line with a function.
 Like it will be called get about link card.
 Oh, change this whole part into a function.
 Okay, let me, let me screen. Let me copy that and then I'll show you what I, what I mean.
[03:22:14]
 Okay.
 I'm going to share my screen.
 I'm gonna share my screen.
 Oh, I closed my VS code, let me reopen it.
 - Well, I think I see what you were saying.
 - So let me,
 let me just open a temporary file here. Okay, so, So I can turn this into one function, how would I want that function?
[03:23:26]
 So I would basically, I wanted to give me the JFX.
 Okay, now I'm going to start from the function, get a link card.
 What I would give it is about link card.
 I will give it the about link card.
 And then it will either return the JSX or it will return nothing. Because that's what you want to do, right? Either return either render
 or some JSX or render nothing. Yeah. So instead of doing this, this line, this one line will take care of it. And then just put the if statement into a
 link.
[03:24:32]
 Yeah.
 I know, let it, so get about
 link card.
 If you created a function, I'll get about
 link card.
 It's going to take in a card,
 we'll just say a card here, and whatever the data type is,
[03:24:57]
 maybe it's link card.
 And the return value is going to be the JSX.
 I think it's called JS.
 I think the data type is JSX.
 I think it was React.
 React.
 You can import the JSX directly
[03:25:27]
 instead of putting React.jsx.
 Instead of putting that,
 you can just put JSX.
 So it will return either JSX or undefined,
 or maybe empty string.
 I don't know which one there.
 Going to return, but then you put that if statement here.
[03:25:56]
 And you would return.
 You would return the JSX, which is this. Actually, I would start it as undefined.
 Or, or I can just.
 Or an empty string.
 It can be undefined or empty string
 That would take care originally starts as empty string in the
 Or end the year
[03:26:41]
 Yeah, okay. Oh, yeah, that's right. Okay. Yeah, this one should take care of it. Something like that.
 But at least one, it's only one line of code here. Like, habit.
 Good. Get, uh, get link card instead of a get about and have all three link cards in there.
 Yeah, you can do that too. At least it cuts it down. Yeah, you can change the parameter.
 So you can put all those statements in here if you,
 but you're going to be returning different JSX. I don't know.
 I might end up being about the same size.
[03:27:22]
 I don't know. I might end up being about the same size.
 Yeah, but at least it's not at the, at least it's not at the top of your component.
 It's going to be at, only this will be at the top of your component.
 This one can be all outside of your component.
 Yeah.
 And then you just look at this only if you need to.
 You can basically scroll down to look at this if you need to.
[03:27:52]
 Most of the time, if everything appears working fine, you don't even need to look down here. I'll put that for the front end with like a get function like that be a handler or module.
 Yeah, it could be a module.
 Yeah, it's a module.
 You can put it as a module or you can leave it in as a helper function at the bottom of your component or outside
 but at the bottom of the component. Below the component, yeah, I see. You can just
 leave it in the same file or you can make a separate file out of it whichever
 you prefer. I'll put it in the bottom so it's easier to remember where it is.
[03:28:52]
 Yeah.
 Okay, we take a screenshot of that so I have a reference.
 All right, thank you.
 You're welcome. So, yeah, just basically replace those if statements with just one
 liners like this, cleans up your code, the top, it will clean up the top of your component.
 Put all the mess at the bottom underneath your component.
 And only look at the mess.
[03:29:35]
 If the top part doesn't work properly.
 - Okay. I got it.
 Okay. Anything else?
 No. I have a lot to work on right now.
 Yeah. I have a lot to work out on, but I'm sure there'll be more questions coming up as I work on it.
 Okay, no problem.
 All right.
[03:30:12]
 Well, you have a good light.
 I'm going to start recording now.
 All right.
 Have a good night.

///// FILE: "Level 4/transcripts/May 6, 2025 21-4.txt"

Transcript from May 6, 2025

[00:00:00]
 Welcome to Codex Academy Level 4.
 Good evening class.
 And this is week 9, day 2 of Capstone finale week.
 This week we don't really learn anything new.
 We apply things that we've already learned, maybe in different or new ways.
 But we're not really learning anything, any new content,
 just practicing what we already know.
[00:00:31]
 So today, I'll go over another practice.
 I'll walk through that practice, which is part of the capstone.
 So if you haven it implemented yet,
 then you will see how to implement it
 at least in the sand rocks
 and you can apply it to the capstone.
 So in the first hour, we'll take attendance,
[00:00:59]
 do announcements, review what was done yesterday.
 If there's time, start on the practice, that can our continue the practice third hour mini evaluations, which is
 corrections from last week, or continue working on the assignment, which is the capstone finale.
 So make sure to take your attendance and on over to the codex account.
 If you're here right now, you can mark yourself as present.
 And now time for announcements.
 And now time for announcements. I'm going to share my screen here.
[00:01:58]
 Okay, so as a reminder, student collaboration day on Thursday may eight.
 That's where you spend the whole day just collaborating or just focusing on coding.
 I won't be doing any walkthrough through or anything. This is this class is just totally
 Basically in your hands I'm just basically the the point is to just code for the full three hours and get help from each other
 You can share your screen
 I'm not available on this day to teach
 new material or actually I'm not going
[00:02:47]
 to teach new material but I won't be available to do any walk through this day. I'm
 bringing my son to a doctor's appointment which is out of town and I won't be able to get back on time. Let's see what else. So the schedule, well, this is the schedule here. We've
 nine capstone finale. Next week, the valuations week after that, presentations.
 And don't worry too much about, you don't have to be nervous about presentations.
 Because you know your web, your capstone project, you should know it well enough.
 You can describe at least the front end. And the technologies you've been using
 it should just be like you should know it by heart.
[00:03:53]
 The hardest part will be if anyone asked you
 about the code.
 Maybe they will, maybe they won't,
 but that would be the hardest part.
 they won't but that would need a hardest part.
 Let's see what else.
 Thoroughly is still available in the July cohort.
[00:04:29]
 Right up here hopefully all of you guys have had a chance to fill it in. If not, please fill it in.
 We had a lot of questions today.
 I think we got them all answered. So it is possible for your deployed front end to connect to the
 deployed backend, such as NAMDA or Google App Engine.
 You need to get the URLs right.
 You need to get the route handlers right.
 You need to use the same post
[00:05:07]
 methods in the front end and then back end. A lot of things need to match so
 there's a lot of possibility for bugs. But this one's all solved. This one
 was basically an accidentally installed package. We'd cause the back end server to crash.
 Thus, this is refuse connections and it may seem like a course error.
 This one right here, secrets. So if you have, if you're, if one of your old API keys are stuck inside of an old commit,
 just let GitHub accept it,
 but then delete that exposed key,
[00:05:56]
 and just use the new key from moving forward.
 There should not be any keys, no access keys in GitHub.
 There should not be any keys, no access keys in GitHub. If it is, then it should only be the expired or deleted keys.
 And then right here asking about how do you get that values from the handler.
 And let me see if I can have a sample of that in the sandbox.
 Looks like we are doing.
 Let me see here.
[00:06:47]
 I can load up the front end. screen. Okay, it's all in the sharing.
 And the folder is handle sign in the template.
 Okay, so that's that's one.
 Let's also look at handles in the
 which one is this one is in. Let's also look at handles in the next one.
 It's fine all references.
 I guess nothing is using this. This one is just a test.
[00:07:49]
 Like this one, definitely need to use.
 And sign in the middle.
 So this form has a handler, and will submit when it gets called.
 It calls a handler, which is in a separate file.
 But this handler returns a value that can be used by the component or the outer function.
 But it can't be used directly. It needs to be saved in a
 Redux state variable.
[00:08:37]
 And then the component has access to it.
 Actually, not this component. the component has access to it.
 Actually, not this component. The other component will get access to that component is signed in here.
 Right here.
 So this is not even a hour function.
 It's more like an hour function.
 It's like a function that's not even connected to the handler.
[00:09:08]
 So that's a benefit of using Redux. You can you can share your state variables with functions that are not even posted to the handler, like distant from this handle right here. This handle is trapped inside of here and the
 value is trapped inside of here, but with Redux, we can make it available to
 other things like this component right here. So that's that was the answer for this one. How do you pass an object forever out of it in your handler function for the outer function?
 And the answer is that the handler, which is in a separate module file. So this one right here is in a separate module file.
 We did return the value that the outer function means.
 So it's returning the value that the outer function needs.
 So it's returning the value that the outer function needs. And then store the value and the read-up state variable.
[00:10:33]
 And here.
 And we'll take this one. So the outer function can access it with a selector.
 So this one over here, this other component, which is distant from the handler, has access to the account.
 With a selector.
 Going back to the next one here.
 Remember, many evaluations are 60 minutes.
 For submission, get your notes ready.
[00:11:18]
 Select your MIDI evaluations done quickly.
 The mini evaluation for week 9 is posted due tomorrow. You should already know these things.
 The hardest part may be just getting your notes in order so you know what's about.
 There's no detail description here, but maybe you can, you know,
 explain it properly, explain and demonstrate TDD and how your capsule uses it.
 And so the TDD that you used for the sandbox might be very similar for which you
 did, which you did, I mean, which you implemented in your capsule.
[00:12:11]
 It might be a little bit different, but we've been working on TDD for a while now,
 and it should be in the capsule, and TDD was also required in some capsule units.
 So I'm just talking about some of those.
 Including the principles of TDD.
 Properly explained and demonstrated read-ups and how your capstone uses it.
 I think that's self-explanatory, how your files you're using, your state variables,
 are your components accessing the state variables.
[00:13:05]
 I think lastly, you were describing it, describing the
 meetups in your sandbox, but this time your
 capstone should be using readups.
 Maybe you're in the middle of converting all state
 variables to meetups.
 That's okay, I just want to see that
 you're using meetups in your capsule successfully.
[00:13:34]
 Besides, meetups is on requirement and this is a side of your corner.
 This is a sign that will come here.
 That's since 26.
 Hopefully expand and demonstrate who will go up engine and how your cast them is.
 So that was the previous assignment here from week 7, half this mini evaluation, it doesn't have to have AI ready.
 If you don't have AI installed in your Google App Engine yet, that's fine.
 I just want to see that you get a response.
[00:14:40]
 One Google App Engine underneath.
 One of the next reasons. So sign-up properly in the capsule.
 And then this one is about AI, but not about programming AI.
 It's about AI tasks and AI models on the HUC-based side.
 And how to choose them for use with transformers.js.
 This is to see if you're, you know, when you're done with this course and you've graduated,
 you should take a look at the other AI tasks and models and see how you can use them.
[00:15:20]
 How you can add them to your capsule or it doesn't even have to be your capsule,
 just like a separate project, or you do whatever you want to do with it,
 after this course.
 At least I want to know that you can at least you know about re-itask and models and choose them.
 We are tasking models and choosing.
 If you have any ideas that you have to implement, the documentation that you need to look at,
 we'll have a good stuff. We'll just be comfortable with things. And it.
[00:16:20]
 So many values in week nine is due tomorrow and for class.
 Valuations, many valuations for week 8 is closed, but still open for corrections until Sunday.
 And we decided to close.
 App engine closes one Thursday.
 The assignments will be graded this week, all the assignments are now behind. And all the assignments will be graded this week.
 And we'll see the extensions to submit the correction.
 to submit the correction.
[00:17:10]
 And contact the student success team to get points that you missed.
 Awesome, too.
 If they can reopen some of these
 and tell them what's going on.
 Practice problems right here on the side.
 We're gonna pack this a little bit more today.
 And we talked about help seeker permit is available for
[00:17:32]
 mental meetings.
 We can also send me a message.
 Since I'm not teaching much new content, I have more time.
 So if you're unable to get into the mentors, just send me a message. And if you
 really get stuck, I can, I can even possibly need the new on a short notice basis.
 So, you know, I'll be available different times of the day, sometimes mornings, sometimes
 afternoon, sometimes evening. So it just depends. So in the message, and I may or may
[00:18:14]
 not be available that very minute. So I haven't been posting, I haven't been updating the references here.
 Reference level 4, but I did put all the transcripts in up to week 9, day 1.
 All the transcripts should be here. If you push or if you provide at least
 transcripts and all your notes to note with LM, you will know where some
 topics where the topics are in the videos. Because L.M. We'll tell you something like all of that topic about
 using Redux for the sign-in. That was it's going to refer to you. It's going to refer to the
 file here and then you'll see here it's from May 5 And that tells you that you can go to the May 5 reporting.
[00:19:31]
 Notebookella will tell you which paragraph here
 was it talked about.
 So you can see the timestamp.
 This means three minutes, 54 seconds into the video. this one's three minutes 54 seconds into the video
 This one's 14 minutes, so you can use this
 Maybe there was silence there
 Actually what I'm using for this transcript generator is actually the lowest model, the smallest AI model.
[00:20:15]
 If I use a bigger AI model, it into using a more intelligent AI model.
 Now, that's going to be after those things.
 Maybe, maybe I have extra time I can upgrade the model. I'm upgrading the model might be changing the code and you know doing a lot of
 research on how to use that new model.
 I'm on it so we'll see how that goes.
 I have time.
 But yes, you've notebook LMs.
[00:21:00]
 So it's two-year notes. Your code and the transcripts are helping find topics.
 There's transcripts up to week nine, day one.
 Go through the recordings in order.
 Catch up as soon as you can in the through behind the recordings.
 Now we're going to review. Take notes if I say anything new during the review.
 And actually I'll be reviewing the practice too. So you might want to take notes on that,
 as much as possible.
[00:21:53]
 So we're going to continue now.
 So we're going to go to the review section here and this is pretty much it. Yesterday was focused on converting the sign and of the capstone project to use Redux instead of
 the regular state variables instead of regular React
 The longest part or the thing that's at the longest was just
 The longest part, or the thing that took the longest was just the sign and it was not part of the sandbox. So I had to copy it from level 3 and adapt it to the sandbox and adapt it to the back end server. But then I eventually got to these steps here which went pretty quick. [BLANK_AUDIO] I'm going to copy it into here. Here.
 And so there's a practice.
 And the fire up here.
[00:24:25]
 And the left side here. I'm not gonna have a sign for you.
 And then get started.
 That's how we get the back end going.
 And we do that.
 At least the data base part. database.
 When you start the NPM script, except for the start script and the test script.
 So for the Redux door page, stay in variable, select there and set it for the login practice.
[00:25:56]
 So that one is pretty easy.
 And from here, it's almost like copy and paste in this change of value. These things are very good.
 So I categorize these variables by name.
 So I just put category in front.
 And then the name of the state variable.
 This is when I started.
 Or this practice.
[00:26:33]
 You started values undefined.
 Basically it's going to store an account after somebody longs it.
 And select her. after somebody lives in a selector.
 Selector is basically copy one of the selectors and then chains of values by extracting
 the state variable that you want and then returning it.
 they variable that you want and then returning it.
 In the next one is for a setter.
[00:27:15]
 I've been placed one of these and then added the values. So this is one of the values you can change.
 It specifies that the action will take in an account variable or account object or undefined.
 So this new value will be either an account object or undefined.
 I'm going to come from the store it in the state area.
 Then let the sine in area component.
 Select the read-up state regarding log-in status.
 So the sine in area. And there, you can also do this, you'm going to look really clean this.
[00:28:30]
 With everything's working fine, it's your scene.
 So the second area is selecting that account stays variable from Redux
 and we're just storing it here in account variable.
 and we're just storing it here in the account variable.
 And we're using it here for the update phase.
 You could just delete this part right there and this is going to update,
 it'll run this update phase whenever anything changes,
[00:29:05]
 then we component.
 But if you go like this, it's more efficient
 because basically we only wanted to keep track
 of the account anyways.
 If we see here this update phase is only,
 it's only dealing with account.
 So it's not really necessary to view what the question is here or it did not.
[00:29:32]
 Even though we see the map here, you might have to have the map changed.
 We still don't need to call component update because we're not actually doing anything.
 We're not changing the value of the amount anywhere we're just using it to get into the update phase
 property basically we run this code only after the component of mount over here
 we don't want to be running at the time, because they will run at the same time
 if you don't put a condition.
 When the Redox States shows the user is locked out. Show the sign in component.
[00:30:30]
 So with the redox state right here, so basically if there's no account, show the sign
 in component. So if there's an account, I'm going to show this, but if there's no account,
 I want to show the sign in model. Same thing here but if there's no account, I want to show you the sign and model. Same thing here, if there's no account, I want to show the sign and model.
 And notice that there are no conditions here. This is the render section, right? There's
 no conditions. I only want to render the little button. The conditions are here.
 This is what decides which button to render. So it makes the render section
 in the inner. And then just basically you can call you on and do it. When you're looking at this,
[00:31:24]
 you can just say you can easily see that you just want
 to render a button.
 And then since we can easily read if if if if if else statements, we keep these outside of the revenue statement.
 So when the relux state shows the user is logged in, the hide_design component. So the user is logged in.
 Basically it goes into account.
 It's got to show a different component,
 not the sign-in component.
[00:32:06]
 It's going to show the sign-out component.
 So effectively hides this by replacing it with this one there.
 So the Redux, whether Redux shows the user is logged in,
 show the sign-out component.
 So that's what this is.
 If the user is logged in, show the sign-up component. So that's what this includes. If the user is logged in,
 basically, if it's account information, show the sign-up mode.
[00:32:34]
 And then if they're logged out, show a different mode. Not the sign-up mode.
 When one of the user logs in, this patch is the action.
 So this one is going to happen in the side of mode. [BLANK_AUDIO]
 And deciding what I can do is to bring that up.
 [BLANK_AUDIO]
 And actually, I don't need any props.
 [BLANK_AUDIO]
[00:33:16]
 Yeah, I'll just move.
 Remember, we had, we used to have a callback here.
 [BLANK_AUDIO] We have callbacks here, right? On sign out or
 on sign in, callback, on sign out. So we don't need those anymore. We only needed
 them because we didn't have Redux. We now we don't have any callbacks here.
 We're totally eliminated because we have Redux
 and we have access to the state where it was that we needed.
[00:33:54]
 This parent component can communicate with these child component
 through Redux instead.
 With the report, this scented area, it was giving its
 town components like a walkie town can be considered the callback to this.
 Instead of the scented area, I'm giving these guys the walkie talkie.
 Basically, all of them have access to like the internet.
 You think of Redux as the internet, so they all have access to it.
[00:34:29]
 They don't need to walk you talk anymore.
 Or a special line to each other.
 There's access to internet and they form Redux and then they see everything there.
 So no more back, necessary.
 Read-ups to communicate with your student parent and child's components.
 So, I'm going to delete that thought right there.
 So, we'll use our signs in.
[00:35:05]
 This is a form here.
 When they submit the form, or they only submit their email and password,
 the event will contain their email and password right, that contains the form. So this one basically
 gets the information from the form, which is an e-mail and password, sends it to
 the back end server for authentication, if it authenticates, it returns the
 account. If it doesn't authenticate, then we get nothing.
 So if we have an account that means it authenticated.
[00:35:51]
 So we save that account in the state variable right here.
 But this one just creates the invoice when we're ordered.
 And the dispatch here takes that order
 gives it to you in the center.
 We left the we set the action set, let the action set the proper delete of state command.
 We have to use that set object here.
 It gives us basically we want to set the global account.
[00:36:41]
 It's almost like the naming convention that we used to use for use state.
 Set more naming.
 I mean, it starts with set, but this time we're using an object.
 And instead of combining with this together, we're using an object and putting the variable name right there, but instead of it being a variable name it's actually a function that takes the new value.
 And that's something that the slice did for us. We didn't have to do this manually. The slice did that for us.
 And then the slice provided us with that set up. basically it's a set of actions right here and we just pull the one of those actions out
 right here
[00:37:58]
 this is where we pull one of those actions out
 and create a little blender.
 And then in the side-out component, when the user logs out, this has the action.
 For the side-out component,
 I'm going to try here.
 It's not taking property boards like anything like that.
 And I can do this to connect the code.
[00:38:33]
 So here's a sign-up component of someone's signs out.
 Like click, click, "I guess."
 The main thing that we're doing here is creating a work order to clear the account and
 have you dispatch that action.
 So this is what that means.
 That the action sent the proper re-lux date.
 We're log in. And proper u.d.x. state for logging out is, in my case,
[00:39:11]
 here in the account.
 You might use a booty.
 And that u is a booty.
 That's fine.
 You can be true.
 Like, it's logged in.
 True.
[00:39:20]
 And it was logged in.
 False.
 You can do that.
 I have to sort can do that.
 I have to sort of put the account information down the front.
 So when it's ready,
 it's fine.
[00:39:47]
 Just going to load up here. and then we'll just go in the loop here and show you
 since all my back end servers are ready.
 And put this
 in here on here.
 And now I can, it's signed in.
 Now I have the opportunity to sign up.
 We're asking every single other sign out.
[00:40:11]
 And we're having a map, and we're having a map.
 And we're having a map.
 And we'll see the artificial intelligence.
 And this one, I guess the one, I need to start that server.
 I only started the one with the database,
 not the one with the data.
 The one that's about what this practice is about anyways
[00:40:39]
 is this about signing in and signing up.
 about signing in and signing up.
 So that's, you could implement something like that into your capstone.
 Now we can start the walker of the next practice,
 which is persistent login. It's right now when we log in, if we refresh or reload the website, we get logged out
 again. We don't want that to happen, especially if we have a real website.
 It's the users.
[00:41:33]
 And you don't want them to go in.
 You want them to have a good user experience.
 And if they refresh your website and it's not looking like they expect.
 I don't like it.
 Some of the shares are free.
 It's going to copy this into the end. and then the practice notes.
 Let's see what are the keywords here.
[00:42:19]
 I'm just emailing past the keywords. That's going through the names of some variables.
 This is also keyword.
 And there was a space here.
 So I remember in this one, in this question,
 about not being able to not be able to not be able to not be able to get cool
 to get cool found running.
 And it was just a typo.
[00:43:01]
 That space, that space in the name, like this.
 If you try to run JSON.stringify it, but this space there, it's not going to work.
 So I'm going to look at what is type of one little character.
 Actually, it's like an invisible character.
 It's a space. It's an invisible character.
 It'll crash your program
 so you need to find bugs like that when you find bugs like that it's uh
[00:43:35]
 try to run your disk folder locally
 right if you can run your this folder locally.
 Just run that command node.
 The little command that you run the JavaScript file. And your JavaScript files are inside of this folder.
 So you can run the node command and you can give it the file name to run.
 This file name has one space in this file name.
 You can put a space in the command to the bolt run, because it takes again a morning limit
[00:44:27]
 with the cloud.
 So we're going back to the practice here.
 If this way is a key way, we're actually going to see if it's not sent.
 This is going to be this is going to be
 this is going to be
 this is going to be
 actually this is going to be So we have a few months for that.
[00:45:07]
 And we're going to sign it here and now it's getting longer.
 We're going to drop the depth.
 We're going to use this before.
 So just on that parse, we need that before and we need this level. or in previous levels.
 Pressing them in your ear from the plants or on
 APIs.
 Email password. [no audio] [no audio]
[00:45:54]
 [no audio]
 At least this is the set of 4D for the practice and you can set up the practice file
 or set up the key right. So, right here is a good spot to take a break
 and then you can actually get started on the practice
 acting the break.
 And then you get a great screen going here.
 Hey, I'll see you after the break.
[00:46:46]
 [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break. And for the second hour, we're going to continue with the practice,
 which is persistent login practice, where we will keep the login status
 persistent so it stays, even on the pages refreshed. fresh.
 Okay, so
 the login is right here. If I'm signed in.
 And see, it shows that I'm signed in, because I can sign out now.
 If I press refresh, it's gone.
[00:57:54]
 I should, for a good user experience,
 I should be able to stay signed in.
 So the first step in the front end when users authenticate for their email and password in an object.
 Okay, well, I'm already doing that.
 That's in the, that's in the account page.
 I mean the account object.
 I'm actually storing their whole information.
[00:58:32]
 Maybe that's not a good idea.
 So I'm going to do a, I'm going to create a different state object
 just for the, just for the persistent login. I think I could use this account,
 but just imagine, like, if there account had a lot of information. You don't want to just, you don't want to store all of that.
 We just want, you know, the credentials.
 So I'm going to create a new one, a new state variable.
 You don't have to, you can, you can stick with just account if that works for you, but I'm just going to create a new one.
[00:59:32]
 And I will call it, you know, it's just going to be the email and password, so it's credentials.
 And it start off as undefined. and then the next one is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one that is the one access to it.
 I'm just going to copy this one and make a new one for credentials.
 And global credentials is what I'm going to.
 This is the selector.
 And then show okay there it is.
 So that's the select there that's all done. Now the center.
[01:00:42]
 Just gonna change this one.
 So this is a function, right?
 The gllo, there's function, is just a different way to write it, because it's inside of an
 object.
 The count will be credentials.
 Actually, this is not going to be an action account.
 It's going to be action credentials.
[01:01:16]
 Because the account is slightly different than the credentials.
 The account has-- let's see.
 So I have it here. The account has email password name and phone and
 however whatever else I want to include with the account.
 I want to make a separate one.
 One for just the credentials.
 So what would this look like? So to pay load, would either be the credentials or undefined.
[01:01:55]
 I didn't make the credentials yet.
 I didn't make the credentials type.
 And the type is always a string. So I'm going to make this credentials type
 and put it right next to this account type.
 Export type credentials. So what is it going to be?
 It's going to be an object that has an email and a password.
 Both of them are strings.
[01:02:47]
 So this is a custom type, right?
 I'm defining a custom type or a custom object.
 This is not just any object as a special kind of object.
 For the braces here.
 Special kind of object which only has an email in the password in it
 and both are strings. Now I can go back here and import it.
 And this one's all set. So this payload is supposed to be credentials.
[01:03:27]
 The credentials object which just has the email in password or it's going to come in undefined. So there it is right there.
 credentials.
 So we got the state selectors, the state variables. Okay, so let's look good.
 Let's see if we finish this in the front end
 when users authenticate, store their email and password
 in an object.
 So that's right here when they authenticate,
[01:04:03]
 that's in here.
 So that's right here when they authenticate, that's in here. So their email and password is going to be in here.
 I'm going to make a new one here, new section right here.
 So when they sign in, this is when they sign in, right?
 Otherwise, this part is when they don't sign in.
 Instructions say here when they sign in.
 Or the email and password in an object.
[01:04:34]
 So I'll call that credentials.
 The data type is going to be credentials.
 The data type is going to be credentials. That's going to be an object.
 And it's going to tell me what kind of object I need.
 An object that has an email and a password.
 So what is this email going to be?
 It's going to come from this account.
[01:05:05]
 Because that's this account has all the information I need.
 And what's the password going to be?
 It's going to come from that account because the account has everything I need,
 but I only need these two from the account.
 So I did the, I did this part. I created and I saw the email and password in an object,
 right?
 I created an object here.
[01:05:37]
 I even put the data type.
 Here's the object with two properties.
 And getting those properties from the account that came in.
 Use JSON string and find a convert the object to a string.
 So I'm going to convert into a string, which I call it here.
 I can call it credentials string.
 So you saw in that string of I this object. Why do I want to string
[01:06:30]
 of I it because you can't store objects in local storage. We can store
 strings in local storage. So we can store strings in local storage.set a with local storage.set
 so local storage.set I am so this will be set item.
 So I'll fix that type over there. Okay, I should do it.
 And it's a function, so you have to know how to use it.
 I have to use mass over it and it accepts the key and the value.
 So the key that it's going to get stored under is credentials.
[01:07:56]
 The value that it's going to store is this one here.
 The conventional string.
 So think of it like this is like the database column and this is the value. So key and value pair or think of it like a the property of an object and then
 the value that we will store in that property. Like this, this is the key, this is the value. This is the key,
 this is the value, this is how we're going to pull the value out with this key.
 Here, I use login here. I'll just change this thing.
 Login string.
[01:08:58]
 To match the practice.
 I'll change this to the log in string. So that's a very cool.
 Yeah.
 Next, the, I don't have to.
 I'm going to call it credentials to show that it doesn't happen.
 It's basically just credentials that I'm getting.
 It's great because this login string will contain an email in password.
[01:09:34]
 When the user logs out.
 So we're an empty string.
 All right, it's to go to the log out part right here.
 This is a sign out model.
 If they log out, it's going to run this handler.
 So I'm just going to add to it at the bottom.
 When the user's log out store an empty string,
[01:10:16]
 with no local store, it's not set item.
 And the same key.
 So local storage. Not set item. The key was credentials.
 Value is empty string. I think I wonder if I do undefined because that's what I've been
 because that's the data type that I use here. Credentials is going to be either undefined or
 or a credentials object. So let's try this undefined.
 Instead of an empty string,
[01:11:18]
 to match the data type. I think if we try to do JSON stream with my great book, let's see.
 Okay so one of those sign in area mounts. So let's look for the sign in area right here.
 So what it mounts, this is component in mount.
 This is the mount right here.
 When the sign in area mounts, get a log in,
 the local source about getItem and the same key. I'll put it underneath for now. Actually, we have a long to do that. I want to put it here because this is where
 we can get an account. So local storage, not get item, which we have to give it a key. So where which key are we storing the account?
[01:12:48]
 We're storing it in the credentials key.
 Then we have to capture that value.
 It's going to return the value.
 So we need to capture it here.
 It's going to come in as a string.
 If it does come in, if it has any credentials, it's going to come in as a string. And let's see.
 Get a login.
[01:13:40]
 So we got the login.
 With the same key.
 So if a login was saved, convert it to a login
 object.
 So if login,
 You're not going to do this start off with a -- and undefined's object. Starting off as undefined.
 So that I can populate it.
[01:14:44]
 If there's a login. So if there's a login then I can start filling in this object.
 So if there's a login what does it say we use do? and work the login object, convert it to an object.
 So json.parse, that's going to convert the login object.
 That's what we want to see in credentials.
 It's going to be this is this login is supposed to contain an object.
 Well, stringified object that has an email and a string password.
 So it's going to turn it from a string to an actual object or it into there.
[01:15:47]
 And we have this one line.
 Use the email and password from the login object to authenticate.
 Signing to authenticate and fortunately, I have a function for that.
 Right, the sign in model, yeah, the sign in button or modal is using that actually not this function
 here. This one. I should get rid of these TypeScript pairs. Let's put any right here.
 Put any right here also.
 Actually that's not what you see if I can just go like this, make this one any. It's kind of ugly like that though.
[01:17:27]
 Other way you can do it.
 This one's a little bit hacky but it's going to work.
 Form equals form dot elements.
 Oh, I can't.
 It's like, oh, I'm just.
 Yeah.
 I've got rid of it, but you know there's a sacrifice there.
[01:18:10]
 Sacrifice we added another line and it's not really clear what's going on here.
 That's how you get rid of it. Another way to get rid of the TypeScript errors. Because TypeScript is saying that this event variable doesn't have a
 elements, doesn't have an elements property.
 And I'm not sure which one has an elements property,
 which event type has an elements property.
 Another way to do it, go like this and then
 add elements to each one of these.
[01:19:19]
 Little bit cleaner, but this part is missing. So, in different ways.
 But the main point is, I have a function here that takes an email in the password and gives
 me an account.
 So let's do that.
 When we focus on here, if the login was saved, convert it to a login object.
 And, Jase on that part, use the email and password.
 Use the email and password from the login object to authenticate
[01:20:12]
 Right here
 So it's a sink already
 Right no, that's not
 Sign in area
 Remember you can't do a sink from it directly from a component in mount. You could call a another function.
 So what I'm going to do is going to create another function here, an inner function,
 all, let's see, that's a good name for this. I'm going to call it persistent login.
[01:21:09]
 Get persistent login.
 So, Chris is asking, can you do a cred and
 FEST and compare the result to the inputs as a weighted and authenticate?
 Yeah, that's what the, that's what this module is doing.
 Or not that one. This one. This is
 one, this is the one that does it.
 It's going to basically call the back end server, back end server does the comparing for us.
[01:21:57]
 We don't do that directly.
 We don't call the database from the front end.
 We call the back end server which connects to the database because
 the back end server can hide the API keys. The front end had the API keys, but the back end
 server can. So the back end server is the one talking to DynamoDB and just giving us the results, giving the front end the results.
 So get persistent login, just going to go like that.
 It's an async function because what do I want to do?
[01:22:48]
 Want to do this stuff right? Actually, let me just finish this and then I'll show you
 why I need to be back to it.
 So the construction here is using the email and password
 from the Loggett object to authenticate.
 So that function I wanted to use is called authentication AWS.
 Authentication.
 That one takes an email.
[01:23:19]
 It says there are user email, right?
 Well, you don't have to match this variable name.
 It just describes what kind of value we want to get in here.
 So, think of it like an alias.
 You don't have to match this variable name.
 The email that I want to send in is credentials.email.
 That's where it is.
[01:23:51]
 I could also, I could also try to,
 actually, I have to, if there's a log in, I need to do these together.
 I need to do these together because I don't want it to try to authenticate.
 If there's no log in information,
 this log in the credentials might be empty because it just depends on if we saved some credentials or not.
 So at least in this part, we know the credentials will not be empty because we pulled out
 the login, which was stored in local storage. So authentication AWS, it takes an email, which is right there.
[01:24:47]
 I mean, I could go like this so that I can go like this and pull the email and the password out of the credentials.
 By destructuring, which will make this look cleaner.
 But I need to await the results because authentication AWS is supposed to return to account.
 I can't do await inside of component did mount. So what I need to do is just pull all this out and put it into a different function that
 can have a sink and a weight. This one is going to return what I need.
 I'm going to change this code. The account, I think I'm going to return the account.
 Yeah, I'm going to return the account instead. And I can just do this confidential, so that's what we expect.
[01:26:39]
 But in this part, I expect I'm going to like end goal is to get an account for not.
 And I want to return that account.
 So account starts off as undefined.
 We're going to pull the credentials data from local storage.
 If there is some credentials in there, we're going to get it.
 And we're going to authenticate it, which gives us an account.
 And then we return that account.
[01:27:31]
 Other scenario is, account is undefined.
 We look in the local storage.
 We don't see an account.
 So it's just going to skip this and return undefined.
 So this function returns a progress and it's going to either return an account or undefined.
 And I'm going to call it from here. I just cut this whole section out.
 this whole section out. Get persistent login.
[01:28:15]
 Actually, I don't want to store, I need to dispatch the action.
 Because if the gradient shows authenticate, I need to log in the user.
 So that was the next step.
 So use the email and password from the login object to authenticate.
 So that's what I did here.
 If the credentials authenticate, login the user.
 And how do we login the user? Login the user
[01:29:08]
 By dispatching an action
 So that's actually there won't be a return value here This one is going to be, I need to use the set object.
 And that's going to set the global count.
 And the value of that is going to be account.
 The count will either be undefined, or it's going to have some authentication.
 It's going to come back being authenticated.
 This one's going to return us a board order or an action which we need to dispatch. Okay, so this part right here logs in the user. The rest will be automatic. Actually, I want to do, I don't want
[01:30:48]
 if, if I keep going on this route here, it's going to, it's going to, you know, it's not,
 we don't see a weight right here, right? So it's just going to go from this line
 right to this one right there. Because one says async so what it's gonna
 get skipped and it's gonna render this even though we didn't finish getting the
 credentials right here I can show you so there's to be a better logic to pull this off.
 Okay, so we come up component just mounted.
 We don't see the sign in the sign out yet.
[01:31:37]
 It's going to get the persistent login.
 So it's going to try to try to run here whatever it can.
 Okay, it's a crash type.
 [BLANK_AUDIO] [no audio] So we've got to log in, wait, it's going to be undefined, I think.
 Or in this case, it's null.
 So it's going to skip that.
 Oh, yeah, it should be undefined.
[01:32:39]
 It doesn't come, it didn't come in properly.
 So I'm going to...
 Okay, now let's find, let's find. didn't come in properly so I'm gonna
 Okay, no that's fine account is gonna come in on time That's good. I was thinking log in was gonna get started here, but it's not log in is is null it's gonna get skipped
 Whoops
 Oops, I didn't have a blue here. There it is.
 I'm gonna create an action.
[01:33:14]
 Wait, did that work properly?
 Whoops, not select.
 That's wrong.
 Well, we'll account.
 Okay, so this once you worked out, I had the wrong property here.
 So it's going to create an action for us or reporter.
 Basically set the global account to undefined because there was nothing saved just that's that action and everything loaded here.
[01:33:57]
 So what I need to do, I'm going to put some break points here.
 As you'll see that this one, these could get loaded.
 These could get rendered before this one even finishes.
 Because that won't take time to finish, right?
 This won't take time to finish.
 So these might actually get rendered before this one even finishes.
 And you see what's going to actually happen here.
[01:34:37]
 Okay, this one is the proper order. This is the proper order because it doesn't even go through this await.
 So it's a proper order, but then it's going to be different if we have a login to save. So let's try it with the login now.
 If the credentials authenticate login the user, okay, so we have something set up like that.
 user. Okay, so we have something set up like that. This is it. If the credentials
 authenticate login the user, this is how you log them in by putting the account.
 Actually, you can just you can actually just put all this in that way doesn't even have to dispatch anything
 that one makes in your sense if there is no login it doesn't dispatch anything [ Pause ]
[01:35:50]
 >> This goes with default value.
 And then if the credentials don't authenticate,
 store an empty string log in with local storage.
 string log in with local storage. So you need to do this if it doesn't authenticate,
 because it's possible that password may have changed
 when the user was in a different browser.
 So this whatever credentials that we saved in local storage, it may or may not be valid
[01:36:27]
 anymore because we're having, we're going to set up a persistent login and the user
 can log in with a browser over here and a browser over here.
 If they log in here and they change their account information like their password,
 this one right here should not be able to have a persistent login because the password just changed.
 So that's what we need to take care of here. So if is the case if it does authenticate login the user.
 And if it doesn't authenticate store an empty string login with local storage. So instead of empty string we're just going to put
 the undefined. But you have to select the key first. The key is credentials
[01:37:39]
 and the value is undefined.
 the value is undefined. I don't need to put a code block there because it's only one line of code.
 If the user changes the password, update the login string in local storage.
 So this one is actually, we can't, we don't have any feature for updating the password yet.
 So we have to come back to this.
 Right.
 We don't have any, all we've done, we feature that we have is to log in and log out.
[01:38:20]
 We don't have any feature to update the password.
 So we're going to have to come back to this. But for now, we're setting have any feature to update the password. So we're gonna have to come back to this,
 but for now we're setting up a persistent login.
 This is the only step that you need.
 If you add that account editing feature,
 right now we don't have that feature.
 So where did this stop?
[01:38:47]
 So what did this stop? Okay, so that should be it. We basically followed all the steps, so let's see if this works.
 I want to see what happens here, though. How does the timing work.
 Okay, so we're starting over it. I'm gonna try to sign in.
 Just followed all those instructions.
 So if anything works, if those instructions were fine, then there should be persistent
 login now. Okay, so if I reset this, I'll refresh the page, there should be persistent login.
 Okay, so it's going to check for persistent login.
[01:40:12]
 and it sees that something was saved there. So it's going to turn that string.
 It's going to turn this string.
 It's a string right there's quotations on the outside.
 It's going to turn that string into an object. Here it is right here.
 The credentials object. Going to use de-structuring to get the email and password out.
 So we got the email and the password out. Going to authenticate email and password or I'm going to check if they match.
 If they match, we will get in account. If they don't match, it will be undefined.
[01:40:56]
 But there's an await here. There's an await.
 So what I think it's going to do is going to jump over here instead of jumping to this
 if statement.
 Yeah, so it's going to render these and it's going to render the sign in, it's going
 to render the sign in model right now.
 Okay, we see here there's sine it, but we actually have a persistent login right now.
 We're still in the middle of checking the persistent login.
[01:41:36]
 So this one is going to like flash sine it and then it's going to switch the sine out.
 We don't want it to do that. We wanted to render the correct button in the first time.
 Right now, it should not be signed in because we're still
 in the process of checking the persistent login.
 It shouldn't be rendering nothing right now.
 So let's see. Did we get into account back?
 Yes, we did.
[01:42:08]
 We got into account back.
 So, it's going to go in here and log in that account by dispatching, you know, saving
 that account into state variables and this, this batching the action.
 Should say sign out now.
 I forgot to put a
 debugger here so we can watch it.
 So it quickly shows the sign in model. And then it shows sign out because we're already
[01:42:49]
 signed in.
 So what I want to do is actually I don't want to display this process right here.
 When it finishes that process, then we can do this.
 Actually, it needs account information. So right there.
 Right, because this is if there's an account, then.
 Excellent. See here.
 Oh, no, we can put the account at the bottom. Yeah, we can put the account at the bottom because we're setting the value there.
[01:43:49]
 It starts off as undefined, but if there's a login, it gets an actual object, so we can take this out.
 Basically at the end of these conditions, we either have an account or we don't.
 So we can use that account to determine if we are going to--
 so this component or this component.
 All right, so I'll restart this here. so it has it mounted yet there's no
 button there but we expect this to go through the whole login process
 after it goes through the login process that's when we want to render the button.
[01:44:47]
 We don't want to render it before.
 Otherwise, it'll see it flash.
 The wrong button that's going to flash the correct button.
 So here, it's going to, it's just got an account. Going to dispatch an action, but we still have an account, right?
 We have this account object,
 which this one has access to,
 because we have it declared up here.
[01:45:15]
 So they're in the same scope,
 right there, this one can still access it from here.
 Okay, so now it from here. So now I've finished this batching.
 And since we have an account, we can choose the correct button to render.
 We don't see any button yet, but now we know which ones to render.
 We want to render this sign up.
 We see it right there. We didn't flash the sign in first, right?
[01:45:57]
 It went straight to the correct button.
 That's what we want.
 And it's-- here's the update phase, it's just double checking,
 which is much since you render, and since we have an account,
 it's gonna render this again, but it's already that
 the moment anyways.
 So we have a persistent login.
[01:46:27]
 So let's clear this and watch it happen.
 These are all concept that you already know.
 You know how to create a function, and if you need to use async and await while you're
 in the component did not, you need to take it out into a different function. That's where in that function you can use async and await.
 You know math data types here, you can cast the data
 around, you can assert a data type, you know about local storage,
 how to get an item from the local storage.
[01:47:22]
 You know how to turn a string into an object with
 parse. You should know how to do structure. You should already have a
 function that does this. This is a NIF condition. This is, um,
 Redux have to save values into Redux variable.
 So you know all this stuff.
 You just need to know how to put the pieces together.
 If you don't know how to put the pieces together, you're going to have a hard time programming.
[01:48:07]
 So see, I'm refreshed it, I'm still signed in.
 I can sign out.
 Right here.
 I already did the steps I needed to do for signing out in the local storage. When I signed up, it's supposed to store an empty
 string. I did that already. We got up to the step and completed everything up to that step.
 So if I refresh, it's just still, so there's a bug somewhere here undefined.
 We have to find out.
[01:48:47]
 Oh, the string undefined.
 So undefined got stored as a string.
 So I can't store undefined in local storage.
 So I'll sign out and sign up and that's where we store undefined, but it gets stored as a
 string.
 So, that's why we need to store an empty value here instead of undefined.
 I mean an empty string.
[01:49:20]
 It only stores strings.
 If you put undefined here, you're going to get the error that I got where it's an undefined as a string.
 We'll contain something relevant.
 So, we'll just put it empty string there and it's basically mean it's undefined.
 Or, the other choice you have is clear in the local scoring.
 That's a different method, not the set item method.
 And then it will really be undefined.
[01:49:54]
 So the point.
 Here else, I'll just say, "The end of this"
 and then it's kind of down.
 Oh, in the component of the mouth.
 So I will put the count as starting off.
 Oh no, right there.
 Let's go on to find the local storage and it's the undefined string.
[01:51:07]
 See, the fine string, it's stuck in there.
 And then every time I try to parse it, it breaks.
 So I'm going to just manually clear this. [BLANK_AUDIO]
 >> [INAUDIBLE]
 >> Our set item.
 [BLANK_AUDIO]
 >> The mention is,
[01:51:38]
 we're gonna hear it properly,
 instead of sorting on the file.
 And store the empty string. So it should work now.
 I just basically intercepted it and changed the value. I'm going to refresh this.
 So we should see that this credentials key stores the empty string.
 that this credential is key stores that empty string and it is an empty string so this is this is gonna check is there a login no empty string is Okay, it's just jumping all around because of the pink right there.
 I think I can just skip all these.
[01:52:34]
 It's gonna work.
 I think it's gonna work now.
 And so you press this. I can sign it.
 Okay, so sign out.
 Let's see if I can sign out properly.
 Yes, I can sign out properly.
 I can see if I can sign back in.
[01:53:01]
 I sign back in.
 By refreshing, do I stay signed in?
 Yes, I do.
 So we have persistent login now.
 But this login will stay forever until the cookies are cleared.
 We're going to change that tomorrow when I walk through an exploration persistence exploration practice.
 So now we're going to go into the break. [BLANK_AUDIO]
[01:53:50]
 Start that over.
 I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break and now it's the third hour of class. So in this hour, you have time to work on the assignment
 or your past assignments.
 That's the capstone finale,
 which is at artificial intelligence and finishing touches to your CAFZone project.
 I can also do many evaluations, corrections,
 answer any questions you do have if you got stuck on anything.
[02:04:36]
 I'm going to start the breakout rooms.
 And as usual, one room for collaboration, one room for silence, and then one for many evaluations. Going to be open for 30, 45 minutes.
 46 minutes.
 I'm going to be here. Just raise your hand if you have any questions.
 But since the many evaluation for this week is not due yet.
 I won't be calling any names, but you guys can volunteer for corrections.
 Or ask any questions in the chat and then raise your hand.
[02:05:58]
 Let me know if you're stuck on anything. [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Music ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ [ [ [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [ [ Writing on Board ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [ Pause ] [BLANK_AUDIO] [BLANK_AUDIO] >> Yes. >> Yes. >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
[02:23:34]
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes.
[02:23:41]
 >> Yes.
 >> Yes.
 >> Yes.
 >> Yes. >> Yes. >> Yes. >> Yes. >> Yes. Chris, you have a question? Yeah, I'm just wondering, did Raylon leave the class?
 Yeah, she's decided that she's going to redo this level.
 Oh, okay, gotcha. Okay, thanks. >> Question.
 I like Sandra.
[02:24:14]
 >> Yeah, I'm having a weird branching issue.
 I've tried poll push fetch everything and this branch will not get updated files that are in
 Maine.
 And the previous six branches were
 fine, so I just have this one stubborn branch or no grant or even. Okay, so
 as you share the screen.
 Is it visible or do I need to make it bigger? I can make it look little bit. - I see it. So you're in the branch called front read.
[02:24:48]
 - Oh my god, this thing.
 Front read comp.
 And so in Maine, there's a whole new folder
 under views that contains the new views for this.
 And it doesn't want them.
 It's, I've tried people trying to pull, you know,
 but I need, I want you need to merge main and do get merge main.
[02:25:15]
 I have tried it.
 There, do you see him now?
 >> There. Do you see him now?
 >> Yes.
 Okay.
 I think I've used various different things because some of the branches were stubborn.
 But yeah, I don't want to get confused about what I've already done.
[02:25:35]
 So every new branch I'm just pulling back, emerging, I'm pulling back into the, because
 I created all the branches first this time, which I don't like to do, but
 Yeah, you said, you shouldn't, you shouldn't do that. You should only create a branch. If you're ready to work, because
 I needed to see how it was all going to get organized in this particular case. So it's not been too bad. I haven't made too many mistakes.
 Yeah, because the problem with creating your branches ahead of time is just like what you did now. You just merged it in.
 You merged it in and it's not my preferred way to do it, but it was the only way I could keep track of this front end stuff and not lose what I was doing.
 Yeah. So then I would have forgotten. lose what I was doing. Yeah, so what if we forgot.
[02:26:35]
 Yeah, because, well, basically, she just be working on one branch at a time, like, you know, like a checklist
 without creating the branches in advance.
 I know. That's not what I normally do.
 Normally I create one branch at a time and I go through them, but I'm in a rush to catch them up. So I thought this way might be faster.
 Okay, so I'm getting close finished with these capstone front ends. Well, I am drafting capstone front end stuff. I wouldn't call it finished, but if you're gonna draft things
 that may be drafted on paper or separate,
 but not with your branches.
[02:27:14]
 - Noah, I'm writing the code.
 That's when I say draft, these are code drafts.
 - Yeah.
 - Okay.
 - Because it's only--
 - Well, you see, we got-- - Yes. - Or I will be with Raylon and have to retake the level. It's the only way I can finish
 Okay, so at least you got your files into that branch
[02:27:36]
 Yeah, I'll answer your question
 Yep, thank you. I don't know why I didn't had to merge it. I didn't have to merge the other ones. It was weird.
 Yeah, you don't have to, it was behind. The branch didn't have the files that you needed. So we needed to get those files into there.
 Usually, yeah, but I was able to pull, I was able to pull or fetch on the other branches. I didn't have to merge.
 That was the weird part.
 Yeah, well, usually you just merge it.
 But when you create a branch, you should create a branch
[02:28:15]
 when you're ready to work on it.
 And that way, it will have all the files you need.
 Because when you branch off, that's--
 it'll have all the files that were,
 you know, from that when you enter the branch command.
 So, okay, well, you at least have your files and you can.
 - I have my files, thanks to the concerns. [BLANK_AUDIO] >> Hey, hey Chris. Hey, Rose are in the capstone finale assignment. There's a.
[02:29:30]
 These are little section that says create a branch for updating the front and back into his post method.
 Is that just for like.
 Yeah, yeah.
 Is is is that just for like API calls that are using, that we've been using
 get for, or is there some other deeper thing where I'm so.
 Okay, I think there's a description. So let me use a HTTP the agency repotemathet post securely transmit that of the unit and I have direct access to.
 So yeah, so things like when you're trying to get a pass or authenticate, basically all your database stuff. That's right. Yeah, but you could have a get method for like just your
[02:30:27]
 Yeah, but you could have a get method for like just your back end page. Like just to check if it's working.
 Okay.
 Okay.
 Like the home like the home, like the route path, basically, you can have a,
 you can have a hello world on the route path.
 And that would be the get method.
 So you can just see it pop up on the browser really quick. You can do that but everything else you see you can use post.
[02:30:49]
 Even even um, crowd read. Yeah. Okay. Because because on your read,
 you want to use the body right now. Yeah, because when you read, you're going to pass some, you know, you're
 going to pass your email, you're going to pass the email. And that, that email will become
 exposed in the URL. And you might even pass a password to the URL when you use that read.
 So you want to hide those. Okay. And it's going to see if there's anything else on here that any dash do.
 Okay.
 I need to convert all these crud forms into a sign up.
[02:31:41]
 And until that persistent login. And then I guess we'll go through the timeout thing for the
 expiring login tomorrow. Aye, response, so that I figure out something to do with this Okay.
 I was thinking about feeding like my whole entire site into a language processing AI
 and have it like try to come up with my description of it and then use that as the data
 set for the context for somebody could ask questions about how the site was made or something.
 Yeah, that'll work, but I don't know.
 We can't answer all the questions you might want to edit it and as
[02:32:36]
 it might miss.
 Yeah, I'll make sure I don't really
 make any environment variables.
 Yeah, it might give giveaway to environment variables.
 Like what is, what is the API keys for this site?
 >> Yeah, I like in level three with Robert, I accidentally was like using chatGBT and I
 accidentally pasted my environment variables and it like bringing lambast in me.
[02:33:07]
 It was so, it was a mode angry I've seen, it's a chat to me too.
 That's interesting.
 Yeah, it was just like, do not ever.
 I've never seen it.
 Use like exclamation points like that.
 I've never, ever do this.
 Never.
[02:33:21]
 I'm so low.
 Okay.
 Those responses. Some of those responses come from like what people have said to each other.
 - Yeah, it felt like it. It was like the most human one I'd come across.
 - Anything else I got here? I don't think so.
 - Okay. Okay. Thank you.
 - Okay.
[02:33:42]
 - Okay.
 - Okay.
 - Okay. Okay, okay, thank you. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] The break-out rooms are back.
 In conclusion, we did the walk-through for persistent login practice. If you haven't taken your attendance yet,
 make sure you head on over to the Codex account.
 And mark it accordingly.
 You have two minutes to do that.
[02:52:16]
 Other than that, class is dismissed.
 That's today's class on
 capstone finale.
 I'll stick around for a few minutes just in case anyone has some questions

///// FILE: "Level 4/transcripts/May 7, 2025 20-4.txt"

Transcript from May 7, 2025

[00:00:00]
 Good evening class. Welcome to Codex Academy level four.
 This is week nine, day three. And the theme of this week is Capstone finale where we focus on working on our capstone and
 polishing it.
 Getting ready for, you know, then with the level.
 And today's agenda will take attendance to announcements,
 review what we did yesterday,
 which was about adding persistent logins.
[00:00:39]
 Then we're going to start the new practice,
 which is about adding an expiration to the
 persistent login.
 Second, our continue with the practice, if necessary, or answer any questions you might
 have.
 Third, our will do many evaluations and
 You also have more time to work on your projects
[00:01:12]
 So now's a good time to take attendance had on over to your code X account and mark your attendance
 Now time for announcements.
 Let me know that for you. >> Tomorrow will be a student collaboration day.
 I need to bring my son to a doctor's appointment, but I'll be out of town and I will be able to get back on time for the class.
 So you can spend the whole day collaborating,
 but then I'll catch up with whatever else I need to teach,
 you know, the days following.
[00:02:19]
 Or any, like, any walkthroughs and things like that.
 And so these are gonna be the final weeks of class,
 capsule and finale, evaluations and presentations.
 Survey is still available in the July
 cohort.
 Did everyone finish that?
 Anyone did not do that yet? So David and you key did it.
[00:03:08]
 Okay, so yeah, if you haven't done it yet, make sure you fill it in.
 Many evaluations, remember there's 60 minutes each.
 So just put your notes in order.
 We can see the evaluation, the mini evaluation for this week.
 This one is based on past assignments like it's pretty old now.
 Like TDD, that's pretty old by now. Redux, that's pretty old. We TDD that's pretty old by now Redux that's pretty old
 we talked about that we talked about Redux in week six right now it's week nine
[00:03:58]
 Google App Engine so it doesn't at this point it doesn't for this mini evaluation, it doesn't have to have the AI yet,
 it just needs to be connected.
 Google Cloud, that's one.
 Google Cloud and App Engine.
 So just the App Engine.
 We talked about that on week six.
 But we talked about AI.
[00:04:40]
 But this one is not about--
 this part right here is not about programming the AI.
 It's just about the website.
 So week seven is when we talked about AI.
 Actually, we talked about, we talked about it for two weeks.
 So a week eight was more about the programming.
 Week seven was more about concepts and setting up.
[00:05:11]
 So this one is so this one right here is more about more about concepts from week seven.
 So these are all topics. So you should be familiar with it. As long as,
 you know, there are two weeks back. So you should be familiar with it.
 Two weeks or more back.
 Remember to add us and your mini evaluations to mission.
 We could get on the waiting list and get the on time point.
 I can do corrections for week eight until Saturday.
[00:05:59]
 And then I can do the mini evaluations for this week. And the on time point, you would have needed to submit
 this, clicked on that, add submission button before a class. Okay, next, these are the assignments.
 This week, they're going to all get graded.
 So, I hope you're getting further along here.
 Each assignment here was like one week,
 one, two, three, four, five, six, seven, eight. and this one right here was really easy, the app engine one.
 Okay, so if anything closed on you contact the student success team let them know what's going on and ask them if you can submit some points.
[00:07:10]
 Get more points on these.
 Practice problems if you didn't get a copy of them. They're all here on the on the side.
 Let's see. I think I saw something pop up in the July cohort, or maybe not. Oh, here.
 Okay, so, you could, it was took a different approach there.
 Or passing a value from a handler.
 And notebook LM, oh, no, help seeker. So Herman is available for mentor meetings again.
 But if you need help, send me a message and, you know, I'll probably
[00:08:29]
 do a better job than these mentors because I know the material better. I can save
 you time. I'm supposed to, you know, help you pass this class and I have more time, you
 know, the following week.
 So I just send the message and I might even be available short notice.
 Today I, you know, Alexandra sent me a message and then,
 20 minutes later, we were in the online classroom and I was helping her out with some TDD.
 Yes, we, driven development.
[00:09:06]
 So, yeah, I'll send me a message
 and I might be available short notice.
 But don't get stuck for more than 15 minutes,
 otherwise you're just wasting your time.
 If you get stuck for 15 minutes or more,
 post your problem or question in July cohort. Next is notebook LM. Use it to your
 advantage so you can find your notes and your code. And we're in the, we're in in what day and what time I said something in class by giving notebook
[00:09:47]
 Lm the transcripts. So transcripts are available up to day one. I can add day two today.
 Maybe during the break, I'll add day two transcript.
 I'll add the to transcript.
 Okay, so as usual, go through the recordings in order.
 And, but remember, these recordings are only based on the sandbox.
 Okay, and this week, we are working on the capstone.
 So don't get, I mean, use the recordings, but you have to know that you need to be applying the principles to your capstone.
[00:10:42]
 Okay, so now we're going to review. If I say anything new, make sure you put it in your notes.
 Or if you, if I say anything that you might have missed, put it in your notes, I'm going to review the walkthrough from yesterday.
 Also have your microphones ready. Just in case you have questions or I'll be calling names for the mini evaluation today for the third hour.
 Okay, so now time for the review.
 Persistent login practice.
 So this is what I showed you yesterday.
 So let me get that loaded up here.
[00:11:56]
 Let me see if we can get the sand box loaded. And it's worked that we did in the front end. and but it needed help from the DynamoDB backend because there's logins necessary for that
 and DynamoDB contains our logins.
 Okay so I'm loaded up here.
 Okay so the front end persisted login practice where we
 Were able to keep the login status persistent so it stays even when the page is refreshed
 Going to start the front end server
 And we can start
[00:13:17]
 Start the back end server. For the back end server there's two starts and then start two.
 One is the server and then one is the builder.
 This one serves on local hosts.
 This one updates the code whenever we make changes. So in the front end when users authenticate store their email and password in an object.
 Okay, let's look at the files that we need.
 Front end where did they authenticate so that we could look at the
 sign in area. Sign in area renders the sign out model or-in model. The one where they authenticate is the sign-in model.
[00:14:27]
 So if they click on sign-in, they provide the email and password, it's going to go to
 handle sign-in attempts. If everything works out fine and they sign in, we're going to get their account information.
 Okay, so the instructions here says if the front end, when the user's authenticates, or their email and password. So that means if we get their account information,
 that means we also have their email and password.
 password. This is the store their email and password in an object. So here's it, here we're creating an object, storing their email and their password. I made a new data type here just for credentials only, email and
 password. credentials file is just the data type is in modules right here.
 Right there, this is the describes. This is just the data type.
[00:15:51]
 data type. Actually, data types, if you're just going to have files that store data types like these, they're usually stored in a folder called models. Like this.
 like this. Use it called models.
 So, this is new.
 You don't have to do this, but this is, I want to, just, you know, I usually, I usually
 do this.
 I usually put it in the models folder.
 But it's optional for you guys.
[00:16:22]
 So account is a data type file. I'm going to put that in the models
 folder. And also credentials is a data type file. I'm going to put that in the models
 folder.
 It's called models because it's just like modeling the shape of an object.
 It's just what it's called.
 Maybe it's just to
 in some databases, some databases. A data type is called a model.
[00:17:07]
 So that's why it's called models.
 I mean, for us, it makes more sense to just call it the types folder.
 But if you want to, you know, just follow the convention. And if you want to, if you're going to look at other code,
 you won't be like too confused when you see the models folder.
 Because that's what you might start doing. You might be helping other people with their code or
 working for a company. You're going to see the models folder. And at least this is just a heads up where you can have
 data types in there.
[00:17:50]
 Data types and also classes.
 So classes are also data types, right?
 They're custom data types.
 With the custom data type, I like to use
 the keyword type.
 Especially because this one. It helps create a serializable object, which is compatible with
 Redux.
[00:18:21]
 But if you use a class.
 You can use a class to make a custom data type. But if you
 use that, then Redux won't be able to store it. It classes, objects made from classes,
 are non-serializable. Well, they are serializable if you don't have any methods in them.
 Basically, if you just make your class look like this without any methods,
 I think they can be serializable.
 Let's see what else.
[00:19:07]
 the models folder. When you're having any other classes.
 There's a car class right here.
 It moves like data types.
 Yeah, it would make sense to move these into the models folder.
 I think that's it for now.
 Okay, going back to this, we created an object to store an email in password.
 Right here.
[00:19:53]
 And then the next step.
 Use JSON stringify to convert the object to a string.
 Here it is. We're using JSON stringify.
 Here it is. We're using JSON's stringify, taking that object right here, which contains an email
 and password, turning it into a string, taking it into that variable.
 We're going to store the string with local storage.setItem.
 So here's localsORI and it's not set item.
[00:20:27]
 You provide the key, I think of it like a variable name.
 So in this variable name, we are going to store the login string.
 So this is a variable name, right?
 But the local SORI doesn't know that. This is a variable name, right? But it--
 the local storage doesn't know that. So you have to provide a variable for--
 this is also known as a key for this value inside of a key.
 Just like this, this is like a key,
[00:21:00]
 and then this is like a value.
 So it's going to look like that in the in the browser. This is local storage is this
 storage inside of a browser. The browser will sort of have like a
 key and then it will have a property for a value.
 And then next step.
 And then next step. When users log out, store an empty string.
 So the part where users log out, that happens in the sign out
[00:21:36]
 model.
 Here's the sign out model.
 If they want to sign out, it's going to get to the handle submit.
 So this is the sign out part, because I'll click on the sign out button.
 So actually let me, let me love the website. This is, which I'm signed in already, signed up.
 The persistent login was still working.
 All right, signed in, if I give it a email and password, I'm going to be signed in.
[00:22:23]
 Okay, that was all handled with the handler.
 The sign in the handler right here, handles the mid.
 But now for the sign out, it pops this up and I need to click on sign out.
 So when I do that, it activates this handler.
 And so this is the sign out phase.
 When the user's logout stored empty string with local storage set item.
 Local storage set item. So we're going to set this key.
[00:23:03]
 Or get set the value of this key to an empty string.
 Basically we're clearing out the value of this key.
 Okay, so now we want to check.
 I'm going to sign out here.
 So when the page reloads, like, or when it loads for the first time, we wanted to check
 if someone is signed in or not.
 Right now, nobody is signed in.
[00:23:47]
 But if someone were signed in, we wanted to check if they were signed in.
 But you don't want to render this button yet.
 You want to check if they're signed in before you render that button. So,
 when the sign in area mounts,
 so this is actually the sign in area,
 it think of the sign in areas like a blank box,
 and then the sign in area will decide which button to render.
[00:24:24]
 But in this case, we don't render anything right away in the Mount phase.
 First, we just get the persistent login.
 We check if it's there anywhere.
 We had to bring this out to a separate function because we wanted to use a sync.
 Because you can't use a sync on component-in-mount.
 The reason is because if you're going to use component-in-mount,
 it expects, if you're going to return something, it expects for it to be a function, which will be the
[00:25:07]
 component in Unmount function. But if you put a sync in front of here, it's going to
 think you're returning a promise, which is not compatible with component did not melt. So we're going out to a different function
 so that we can use async.
 We're going to check on the login.
 This is an inner function because we need access
 to set button here.
 This button gets rendered right there.
[00:25:53]
 Okay, so,
 when decided area mounts,
 get a login with local stories that get item.
 So here it is. When the component mounts, we're going to go here and check if there's a login. See what value is here in the credentials key. If there's a value, we're going to store it in here in this login.
 So right now there is no login information.
 Right, I just signed out of my login.
 So it's going to skip this code block.
[00:26:39]
 So this only works if there's a login.
 I'm going to skip that code block.
 And then it's going to go here the account.
 Well since it's started off as undefined,
 it's going to also skip this because there's no account.
 Therefore it's going to set the button to sign in model.
 Sign in model.
[00:27:05]
 Sign in model gets, will get rendered right here,
 which you see right there.
 I'm going to put during the mouth face.
 It's something that it stopped. And then stop. And stop on the debugger.
 We refresh that.
 There it is.
 Okay, so there's the mount phase.
[00:27:56]
 I just refresh the page.
 You don't see the sign in.
 Before it displays the sign in,
 it's going to check for a persistent login.
 Here it is.
 So we're starting the account variable as undefined, because we don't have an account yet.
 It's going to check if there's anything saved in the local storage.
[00:28:27]
 And there should be a string.
 There it is.
 This is a JSON string.
 It looks like an object, but it's just a string.
 You see quotations on both ends. So there's a login.
 Going to convert that login with JSON.parse right there.
 So if a login was saved, convert it to a login object with JSON.parse.
[00:28:59]
 And we're going to convert that string to an object.
 So now it is this object here.
 Actual object within email and password.
 Instead of a string here, see they look different.
 This one's just like on one line.
 This one here shows the properties on separate lines and you also see object right there.
 on separate lines. And you also see object right there.
[00:29:34]
 And we're going to use the email and password from the login object to authenticate.
 So we have a login object here. We're going to extract the email and password from it.
 So it's extracted.
 I'm going to try to authenticate.
 And we don't see the button rendered yet.
 So is there an account? Yes, there is.
 We see an account that came in.
[00:30:09]
 We have an authentication works.
 Because if it authenticates, we get an account.
 If it doesn't authenticate, meaning
 if the email and password, they don't correspond.
 We will get undefined here.
 But since we have an account, it's going to go into here.
 Basically, it's going to save that account information with Redux.
[00:30:41]
 And then it's going to see that there's an account, and then it's going to put the sign-out
 model.
 And so we see here the sign-out model.
 So if the login, if the credentials authenticate, login the user.
 So that's what happened here.
 So we checked if it authenticated.
 We got an account that means it authenticated.
[00:31:13]
 So the way we login is basically just tell Redux that somebody logged in and we provide the account information.
 account information. If the credentials don't authenticate store an empty string login with local storage. So this is the part where if it authenticates
 do this, but if it doesn't authenticate, do this. So this is where we're starting that empty string just making sure it's
 cleared.
 Now, wait, we're not storing any login information.
 If the user changes their password, we haven't done this yet because we didn't activate the feature and add account editing yet.
 Okay, so we only got up to step nine. And now everything works.
[00:32:20]
 I'll press play here. Okay, it already ready started.
 So I'm signed in because you see a sign out button there.
 Now I can refresh.
 Oops, the debugger is on.
 Okay.
 Press play here. Okay.
 Press play here. I refresh the page and I'm still signed in. Refresh and I'm still signed in. I can go to a different page.
[00:32:57]
 Refresh. I'm still signed in.
 So that's a persistent login. That's what users expect.
 When they're signed into a logout,
 I mean, when they're signed into a web page,
 they don't expect to be logged out,
 if they refresh their page,
 or switch to different page.
[00:33:18]
 Okay, so now that's it for the review.
 Would cons once be moved as well?
 Let's see, what's that question?
 U.K., I missed that. with question we're asking
 if you can use the microphone
 if it takes you long the time to a movie custom export funds and models folder.
 That's not a data type. If it's a constant, it's an actual object.
[00:34:28]
 That's more of a module.
 Unless somehow it is a data type.
 But usually those of the modules. So, usually classes and data types go in the models folder.
 Again, this is optional, but I just be aware that this is a widely adopted convention to put data types in the models folder.
 Okay, so that's it for the review session.
 Okay, there's another question.
 Do classes that are filled out?
[00:35:22]
 and do classes that are filled out.
 No, those will go in your modules if you make pre,
 if you use your models to, like you have classes here, so you have a link card class.
 Those will go in here, but then your modules, you would have your actual instances.
 But it's up to you. If you want to put your your instances in there,
 I guess you can put it there, but it's more like a data kind of thing.
 So there, you might want to put a, if you want to sort it out, you might have like a data folder.
[00:36:25]
 With technically all those things can be put inside of the modules folder, but if you want to spread it out and put it into a data folder, folder, you can do that.
 The, technically, those instantiated classes, like pre instantiated, there was our, uh, you can think of them as data.
 Otherwise, just keep them in the modules folder.
 is keep them in the modules folder. Let's see, okay, yeah, I was in sharing my screen there. Sorry.
 Okay, now time for the practice.
 And this one is about expiring the persistence.
 Expiring the persistent login.
[00:37:47]
 So I'm just copying this page. I'm going to put it in the notes. In the practice section here, let's see which ones are the keywords and I'll look for the the type of is here. Okay, so here are the keywords date.now.
 It's a function or method.
 Email. email password these are keywords these are properties for an object
 this is the name of the practice
 I'm just going to not that one. It's like that.
 Let's see here current timestamp. I think I'm going to put here, make it one word. understandable and it doesn't conflict with this timestamp.
 Okay, so that's getting get long and info. This one is a log n will save convert.
[00:39:32]
 So log n object.
 So that one sort of comes from login practice.
 So track the current timestamp.
 So I'll go over these.
 Let me just.
 And the timestamp from the login object.
 Check if the difference is greater than.
[00:40:07]
 This is a number that's milliseconds.
 Empty string.
 Empty string indicates an expired login. And we'll require users to reauthenticate. Okay, so we're good.
 Now let's walk through this practice here.
 Expiring persistence practice, after a set about a time,
 expiry persistent login,
 so users must re-enter their credentials.
[00:40:42]
 So this one only,
 this one will only expire their login when they reload the page.
 If they just stayed logged in to your website and they don't reload anything, they will
 stay logged in.
 And this is a simple mechanism that works
 when the page mounts on a reload or a refresh.
 So now what we want to do in the front end,
[00:41:22]
 when users authenticate, get a timestamp.
 And he put a
 when you highlight that there.
 So when they authenticate.
 So which part do they authenticate?
 They authenticate somewhere here in here.
 Okay, so this is where
[00:42:01]
 sign in mode.
 There's an account
 Get us if they authenticate get a timestamp so let's see which parts that I put it
 Gonna do it after this this this batch
 So the timestamp is going to be date dot now. That's when they logged in.
 Okay, that's how you get the timestamp.
 Let's see what that looks like.
[00:42:43]
 Put a debugger right here.
 So what does that timestamp look like? It's a big number.
 It's a big number.
 So that's basically milliseconds right there.
 Miloseconds from, I think, I forgot what, like from how long ago.
 Like 20 years ago, I think.
 Starting from 20 years ago, that's how many milliseconds have lapsed.
[00:43:30]
 Something like that. No, more. I think in the 19, like 30 years ago.
 Anyways, that's how many milliseconds have elapsed maybe 30 years ago starting from 30 years ago.
 And then the next step is store the user's email, password, and the timestamp in the password. I want to store that timestamp.
 That's going to be the timestamp here.
 I'm going to just rename this so it doesn't get confused with
 The property right there
 So credentials I need to update it. That's why we see this underlined there. It says
[00:44:40]
 Let me refresh this says
 I mean refresh this says type step does not exist in credentials. Because credentials suppose it only only it's supposed to only have email and password.
 I'm going to edit that and add a timestamp.
 That's a number.
 Okay, so I added the credentials data type, added the timestamp.
 So this basically says all credentials objects should have an email password and a timestamp.
 And the email should be a string. The password should be a string. And the email should be a string, the password should be a string, and the time stamp should be a number.
[00:45:33]
 Okay, and here we set the data type.
 That data type, it helps because if we try to create that object and we're missing some properties.
 Like I'm creating an object, it's telling me I'm missing something. There's a red line there.
 Telling me I'm missing email password and timestamp. So I need to put those in. You can only do that if you put the data type there.
 You need to put the colon and the data type.
 To help, to let TypeScript help you create objects.
 Now we need the store.
[00:46:25]
 So persistent login practice, we just finished that.
 We need to use those instructions to store the login info with local storage.
 So that's basically this right here.
 Take this object, right there, stringify it, save the string right there.
 And then in local storage, we'll use the set item method. Basically it sets this credentials item or key. This credentials key or item will have the value right here, which will be a string.
 So let's take a look at what value this would be.
 We love here. Sign in.
[00:47:36]
 Okay, so this log in string, the value of that is this string right there.
 Okay, so that's what we're going to store in the credentials key.
 I think a bit like a variable in local storage.
 Okay, so that's what's stored in local storage now.
 Let's see here. When the sign in area mouse,
 I have an area right here, one at mouse, so that happens here in component in mount. Get the current timestamp with date.now. I think I want to change this one here with current time stamp to
 avoid confusion when saving it to an object.
[00:49:11]
 So when the sign in area mounts, get the current timestamp. The date path now.
 So here's the sign in area.
 I mean, here's when the component mounts, get the current timestamp. Actually, I could do it out here, but since this
 wouldn't stay concierge of everything, we're gonna do it in there. So where should I
 put it? Well, let's just put it at the top here now the current timestamp.
 So we have the current timestamp, or we will get it.
 Now, use the persistent login practice instructions to get login info from log local storage.
[00:50:08]
 Okay, so it's already doing that.
 This is getting login info from local storage.
 So you can get item.
 It's checking what's stored in the credentials key or I think it's a is variable. This should have, this should return us this string.
 stopping right there.
 Here it is.
 Okay, so it should be giving us a string.
[00:51:09]
 Now log it as a string right now with an email password and time stamp. It's this a string.
 We need to convert it back to an object here.
 When spent by the time, convert it to an object.
 This one extracts the email an password.
 Okay, so we did we're doing this right now. We converted to a login object in JSON.parse.
 Okay, right there.
 Convert it to Enloggin object.
[00:51:50]
 I call it a credential right there.
 Subdracked the current timestamp
 and the timestamp from the login object. Okay, so it wants to do it. Okay, so I should
 be doing it after this. After I actually get the values here, so I'm going to get the
 time stamp from this credentials object. Because I need a comparison.
 So I'm going to move this one down
 to when I need it.
[00:52:31]
 I'll need it down here when I'm going to compare it.
 I'm going to move it down there. Subtract the current timestamp and the timestamp from the log which is coming from the So this one is, so this is elapsed.
 So that is current time stamp minus time stamp. Because I extracted the time stamp, which was saved inside of local storage.
 The current time stamp is now, but whatever was, whatever is in the local storage, that was
 back when I logged in. So we're going to get a elapsed time from there. I'm gonna save this and try this again.
 And I'm gonna get the current time stamp.
 Let's see what the elapsed time is.
[00:54:07]
 Lapse time is...
 Is...
 Is it on you?
 It's not showing one that's your questions.
 Okay, this is how the 400 seconds, basically, 400 to 11 seconds.
 That's the laps time. Basically 400 seconds since I logged in.
 I think I can finish this and then we're going to take a break after I'll finish this.
[00:54:56]
 It's almost done.
 Check if the difference is greater than 86, 86,400,000.
 So I'm going to do it right here. If
 it's expired, I'm going to use a Boolean variable there if it is expired. So what
 does this expire with me? That means that the elapsed time is greater than 86 and maybe $86,400,000.
 $86,000,000.
 $86,400,000.
[00:55:57]
 So if it's expired, what do I want to do?
 If the difference is more than one day
 store an empty string or the login in local storage.
 That means I don't want to have an account right there.
 So I don't want to authenticate if it's expired.
 So if it is expired, local, we're going to put an empty string in local storage.
 We're going to use set item, change the credentials,
[00:56:53]
 and empty string.
 But if it's not expired, then I want to go on with this stuff right here. If it's expired, then there's no point in trying to log in, right?
 So that's why this part is in the L-state.
 I just moved it into there.
 And if it's expired, I want to just figure out the local storage.
 Basically, the empty string indicates an expired login, and will require users to reauthenticate.
 So that's basically it.
[00:57:59]
 Let me just try this.
 All right, so we're going to put this right there. We're going to check, is it expired? The answer is, this is not showing you the value of false. It's not expired. If it's not expired,
 it's going to go ahead and go through here. I'm going to change this number to make
 it a lot smaller so we can watch it expire.
 And I just turn it into one minute. That's
 160 seconds.
 Or 60,000 milliseconds.
[00:59:05]
 Oh, maybe this is going to be 30.
 Actually, it is already expired, because it's 400 seconds
 have been lapsed already.
 So it's going to-- I've just reset it.
 I'm still logged in.
 Now it's going to check if it's expired.
 And it should be because I've been logged in for 30
[00:59:35]
 logged in for
 710 seconds. This one says it will expire my login after 30 seconds.
 Okay, so it should be expired.
 Yeah, so if it's expired, it's going to clear the local storage.
 And then it's going to choose the correct button here. So do we have an account? No, we don't.
 So it's going to put the sign in mode instead. That's what we see, the sign in
 mobile. I'm not signed in anymore. You've got expired. This only checks, it only gets checked during the mount phase.
[01:00:25]
 When the page reloads or refreshes.
 If they never reload or refresh, then they'll stay logged in.
 So we can watch this happen.
 I guess we'll watch it happen after the break.
 Just stick and break. [BLANK_AUDIO]
 See, I'll see you after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] Okay, so we're back from the break.
 And just to finish off the practice, we're going to see if it works.
[01:11:30]
 Expiring persistence practice. So we're going to see if it expires my login after 30 seconds.
 I'm going to remove these debuggers here. My login has been expired by now.
 Okay, press refresh. I'm not signed in. I'm going to sign in right now.
 And then I'll sign in.
 I'm going to keep refreshing it.
 So I'm still signed in.
 It'll only expire the login after 30 seconds, because that's what I've said the expiration
[01:12:30]
 for.
 I'm just pressing the refresh to see if I get signed out after 30 seconds.
 It'll sign in.
 Okay, now I'm signed out.
 My login has expired.
 I have no choice but to sign in again.
 Let's see if it still works.
[01:13:01]
 Can I refresh?
 Yep, I can refresh.
 I should be able to sign out and then sign back in
 and that expiration timer should start over.
 I should not continue where it left off.
 So let's see, let's make sure it doesn't cut off my, my persistent login.
 It looks like it's, it looks like it's going for 30 seconds. So, still signed in.
[01:13:56]
 So, it's using the full, it's using the full,
 it's using the full persistence.
 Has it been 30 seconds yet?
 I think it passed already.
 There might be a bug here.
 already there might be a bug here did not step the time out
 think it past 30 seconds so there is a bug somewhere
[01:14:40]
 forgetting something
 for getting something.
 Yep, there has to be a bug. It should have been signed out by now.
 So let's see what the expiration is.
 Let's watch it go through this process here. Okay, so there should be a login.
 Oh, it's empty.
 The login is empty.
[01:15:38]
 Oh, let's see here.
 Account. here account. Login is empty. So it's going to skip this part.
 [BLANK_AUDIO] Oh, did I match?
 Okay, I was looking at the wrong thing.
 I was not saying that at all, that's why.
 Check that one more time. I'm signed in. I'm going to sign out. I'm signed in.
 I'm going to sign out.
[01:16:51]
 I'm going to sign back in.
 Okay.
 It says sign up.
 All right.
 I guess I just got confused.
 And when I thought, I think when it said signed in,
 I thought that when it said signed in,
[01:17:08]
 I thought I was signed in.
 So right now it says sign out,
 because that means I'm signed in.
 And I have the option to sign out.
 So if it expires my login,
 it should say sign in pretty soon.
 Okay, there.
[01:17:29]
 All right, so again, sorry about that.
 It's working properly.
 I just got confused about what that was about.
 Okay, so it's not going to be 30 seconds for expiration.
 That was just for test.
 Now it's going to be a day for expiration.
 I'm going to be unable this night.
[01:17:49]
 Okay, everything's working.
 We have this whole hour to, you guys can practice this,
 or if you guys have any questions or need help on your assignments or your capstone,
 I'm available to ask questions.
 If you want to do your mini evaluation now, we can do that too.
 Or corrections.
 Or if you have any questions about, like your recent assignment, that was graded.
[01:18:31]
 And you're not sure about the comment. I can answer questions about that too. I'll start the breakout room for 36 minutes.
 So you can choose what you want to do.
 If you want to collaborate,
 or just work in silence, or if you want to do mini evaluation.
 In the meantime, I'm going to start converting the sandbox to use Redux. In a chance, all my state variables to use Redux.
 But you can interrupt me any time if you have any questions.
 But I'm going to share my screen and convert everything to Redux for the sandbox.
[01:20:03]
 Okay, so how do you convert everything to Redux?
 I guess we can start with a sign in the area.
 So we have a button right here. These are not redux.
 And we also have a did not out, which is also not really.
 So I think I can convert that easily.
 I'll convert the didn't out.
 And you convert it.
[01:20:40]
 First start with state variables.
 If you're looking at the
 Redux mumps here.
 And you look at the diagram.
 I'm going to start at the top basically. Start at the top.
 The store.
 Well, the state variables are part of the green. Start at the top, the store. Well, the state variables are part of the store.
[01:21:07]
 So, I'm going to start with that state variables. Which one I'm going to add, I'm going
 to add the did mount of the side and side in area. I'm going to make a new case. I'm going to make a new category here.
 Sign in area.
 Did mount.
 It's going to start as false. So that's pretty much it for the state variables file.
 The next one, select here.
 So the selector for that one, I'm going to create one here.
[01:22:35]
 Select Sign in Area, did not. So I need to select that from here.
 Sign in Area, did not.
 I can see it there. Sign in Area, did not. I can see it there. Sign in area did not. That's it for that.
 That's the selector. I just basically copied and pasted one and changed some names around.
 This one's called select sign in area did not because that's because I want to select sign in area new mount.
 Next one is, okay, so I'm going to go down here.
 I'm going to change it now.
[01:23:18]
 I'm going to go to the view component and select that.
 So here it is. This is the sign in area. I'm not going to use did melt anymore.
 And instead I am going to
 select this use the selector to get it
 select
 sign in the mount
 sign in area did not
[01:24:02]
 okay that's pretty much it for that.
 Now TypeScript is telling you where the error is.
 So there's only one right there.
 I need to convert this.
 We're going through this diagram.
 I've selected it.
 I use the selectors to select it in the view.
[01:24:26]
 Now I need to create the action.
 Right here, the action is, I don't need, I'll leave that one there for now. I need to convert this.
 So I need to get an action. And what provides the action, that's the set. That's the set object. I need and
 what do I want to set? I want to set sign in the mouse. Sign in area This one is missing the automatic
 intelligence. We didn't make this object so that's up to Redux.
 There might be a way to get it to pop up, but the way it is right now it's not popping up for us.
 So what we wanted to, we wanted to set the sine and area didn't melt.
[01:25:33]
 True.
 So now we have the action.
 Now we need to dispatch it.
 Now we need to dispatch it, but I need to dispatch it to do that, Now I can comment this out.
 This part right here, I didn't work on this yet, so I need to finish that and we have an error here.
 Because I didn't do this part, this is the set state setters. It takes care of their producers state setters
 I need a set create a state setter for sign in area in the mouth.
[01:26:47]
 Sign in area in the mouth.
 And I just need to update this one.
 Sign in area of the mount. This one, I'm going to update this to is that
 action credential is action boolean. Because the mount is a boolean. Action boolean is a
 data type I made down here that says that the payload is going to be a boolean.
 says that the payload is going to be a Boolean.
 Because it did not start even through our pulse. So this payload is going to be a Boolean.
[01:27:32]
 And that's what's going to get stored in the signing area
 that did not.
 OK, so it worked.
 There's no more error.
 I should be able to-- if everything works right, Okay, so it worked. There's no more error.
 I should be able to, if everything works right,
 I should be able to log in here.
[01:27:49]
 Okay, and I should be able to log out.
 Actually, I should be able to refresh.
 Then we go to persistent login.
 Okay, the did not has been successfully converted.
 I can remove that.
 So it's using Redux now.
 Let's move this up here. Next, the button. This one I need to use a
[01:28:31]
 place holder. Why is it because there's JSX or HTML. Basically we're going to
 store component or HTML or JSX and those are non serializable. If I try to store it
 in Redux, it's going to have a, there's going to be a problem.
 So I guess I'll show you that problem.
 Let's see what happens if I try to store a React component or JSX in a Redux state
 variable.
 So I'm going to start from the top again.
[01:29:24]
 Start from the top again, start from the store, and what takes care
 with which file is involved with the store.
 That's the state variables.
 This is the sign in button or the, what I call it, basically the button in the sign-in area.
 So I'm going to categorize it right here under sign-in area,
 but, if I try to start it with a empty tag,
 I'm going to have to change this into a TSX file.
[01:30:08]
 I don't want to do that, but that's the only way to show you
 the non serializable type. And if you have JSX, you should also import React because and UJ-SX into JavaScript using this React object.
 Next one is the selector.
 Copy this one, make a selector for the button.
 Sign in area button right here.
 Change this one to button. And that's it for that.
 Next go to the component where I'm using comment this out now.
[01:31:47]
 I want to have that button.
 Once the button equals the select there.
 I want to select the sign in the area of button.
 So we have a button now.
 Okay, we're gonna change the setter. place it with an action and this set it to any, and then we'll replace this with set. What am I going to set? I'm going to set the sign in area button to that sign-out mode.
 to that signout model. So if there's an account, I'm creating a work order, it changes the sign, the sign an area button to the signout model. Otherwise, I want to create a different work order for action where I want to set the
 sign in area of button to the sign in mode. And then after that, that's where I want to dispatch the action.
[01:34:21]
 So you see here, action is empty at first. This is what determines what goes into the action or work order that the dispatcher is going to hand off to the reducer.
 This is the dispatcher that's going to hand off the work to the reducer.
 Going to give the work order to the reducer. Your reducer does the actual over. Okay there's another area here that needs to
 update. I'm gonna do the same strategy let's action. I'm just gonna put any so because I'm just going to put any, because I'm not really going to check the properties of it.
 So just put any, you could put the exact data type there, but it's only really necessary
 if you're going to check the, if you're going to do like the documentation and check
 what properties are inside of the object. But since I'm not checking anything in that object,
[01:35:32]
 I'm just going to use it,
 I'm just going to use it and hand it off to the,
 I'm actually I'm just going to use it to store
 an object that
 comes from this method.
 So I'm not really using that notation on that action
 object.
[01:36:04]
 You need to remember it to dispatch that action.
 And that should be it.
 Let's refresh this.
 Okay, oh no. I didn't do the, so I do the dispatch.
 Now I need to fix the reducer.
 That state setters.
 I don't have a setter for it yet.
[01:36:44]
 Sign in area of button.
 This one's not a boolean.
 I'm just going to put action regular action for any.
 Is this one for any?
 Yeah. Yeah, because it's an object.
 And the payload right now it's any because that one's also an object.
 Like a react elements.
[01:37:23]
 JSX. I don't think it's going to be an object.
 I'm just going to put any, so just to make it easier.
 This one should take care of it. Okay, let's show the Okay.
 I'm going to show the,
 I'm going to show this part here.
 We see there's an error.
 Non-sterializable value was detected.
[01:38:19]
 The sign in area button.
 Basically you cannot turn the side in button or that JFX into
 the JSLance string. And if you can put the Redux It's right here.
 It shows that it's storing everything properly, but there's a potential for bugs.
 Because when you make changes to objects, sometimes when you store non-sterilizable objects,
 as a redox state variable, sometimes there'll be situations when redox can't keep track of it.
 That's why redox is recommending to use serializable.
[01:40:05]
 Don't use non serializable.
 Okay, so basically to get rid of that error,
 store a string instead of our store a placeholder.
 Store a placeholder instead of a non serializable item like JFX or react
 components. So placeholder is basically going to be a string. Just going to
 store a string that says sign out model
 I'll replace it right now because I'm pretty much done with I'm going to replace it right here, sign in
[01:41:09]
 modal. That's my placeholder. Same thing over here. Sign out model.
 This one sign in model.
 I'll just string. Okay, so when this tries to render, it's just going to render strings.
 Actually, I think I have a non-zero lines.
 Yeah, this one right here.
 The beginning state.
 This one right here is non-cerealizable. Start it as an empty stream instead, as an empty stream.
[01:42:12]
 There are no more bugs, right? No more error, no more, it doesn't save. It doesn't have the non-sterializable error anymore.
or cannot be JSON-strinified. Redux doesn't like it,
 so we're just gonna put a placeholder
 that Redux can deal with easily.
 You can deal with strings easily.
 We can also deal with strings easily. [no audio] it's just rendering the string instead of an actual button, right? So I need to change that.
 If I put a debugger right there,
[01:43:38]
 then refresh. I will see that the button starts as an empty string right now it's an empty
 string so it's gonna render nothing and now let's see what it is now it says
 sign-in-modal the string so that's why it's gonna say here sign-in-modal the
 string that's not what I want. I want an
 actual button. So I'm just going to replace this. I'm going to put a let
 statement right here so I can change the value of the button for that sign and load.
 I'll put any right here too, because to get rid of that, because it's expecting a string.
[01:45:00]
 And then other one, other cases, if it's a sign-up model, render the sign-up model instead.
 Okay, so now it's refreshed. I'm going to refresh the page. So a button right now is an empty string.
 So it's not going to render anything here. It's not going to render any of these.
 Now, button says the sign in model, the string, it's going to get down here.
 Okay, so button says sign in model, it's going to be replaced by the actual sign in model.
 And then that's what gets rendered down there. And that's what we see.
 Sign in mobile and button.
[01:45:59]
 So recordings are not loading. Let's see.
 That's what I see there is a comment by Yukey saying that recordings are not loading. Let's see if that happens on my side.
 Okay, so this one was from yesterday. Okay, so this one looks like it's working fine.
 Now it was from yesterday.
 I was trying to run for it today. I mean two days ago.
 Now it's fine for me.
 So I've successfully converted the sign in area to use Redux only.
[01:47:45]
 You select or use selector, you select or use dispatch.
 There is no use state anywhere here.
 And notice that there is no condition in the render.
 There's no like an end symbol or anything like that.
 My conditions are outside of the render and
 If I don't want to render anything
 It's it starts off as a empty string as an empty string
[01:48:19]
 So basically if you store an empty string here, it renders nothing. So if there are times when you don't want to render anything, or an empty string,
 do it from outside with a condition that you need to. [BLANK_AUDIO] There's a, there's a, there's a another approach to this called mapping.
 Another question show you guys or just leave it like this for now.
 can show you guys or just leave it like this for now.
 I mean, you know what,
 they'll help you remember
 dynamic properties.
[01:49:44]
 Let's see here. And that will go to work.
 I'm going to try mapping here.
 Since there's no questions, I'm going to try mapping.
 Basically, you start with an object.
 I'm going to put it down here. Let's see.
 All the buttons that I want, they're either going to be sign in area, or it will be either
 sign in model or sign out model, sign in model, or that's going to be something, right?
[01:51:06]
 That's going to be something.
 And the sign out model.
 That's going to be something.
 What do I want those to be?
 I want those to be these right here.
 They're signing mobile. So those are my different buttons.
 Right now it doesn't affect anything.
[01:52:01]
 It's just outside and I'm not using it. So how do I use it?
 I'm going to comment this out.
 I'm going to change that button here.
 I'm going to go that button me.
 It will be, it's going to take that mapping I have of buttons, and it's going to take the string of buttons.
 So, you've seen something like this before, where you have an object object and then you can select a property. You can select the property with a string.
 Bracket notation. Object bracket notation if you remember that.
[01:53:02]
 So let's look at what's gonna happen. Okay so budget right now is
 an empty string. So this one says in this budget's object let's get the property
 which is an empty string. So I don't have an empty string property, all my properties have names.
 You can even think of it like this, like think of these as strings, because properties are basically just strings or
 think of it like a key or like local storage. This is the key and then this is the value.
 Because local storage, you'll have to put it in quotes.
 Pretty much the same thing for objects,
[01:53:48]
 but pretty or we'll take out those
 quotations because it's not necessary,
 but it won't hurt it either.
 So you just think of those as strings.
 And so we're going gonna use the string.
 It's selecting nothing right now.
 We're gonna select members of those properties.
[01:54:10]
 So that's in right now is undefined.
 So let's see what it looks like.
 So it doesn't render anything
 when it's when the value is undefined because there was no
 there was no property that was empty string. But now it's going to look for sign in model.
 So, butchants, this butchants object has a property called sign in model and we're going to
 select that property with a string with this string right here it's going to be sign in
[01:54:55]
 model. As bracket notation you can select properties with a string with bracket notation instead of not notation.
 So what is this one storing? It's storing the actual component that I want. So this button
 here is going to change to the actual component.
 Now it's the React component. It's an object.
 I press play.
 You should see the component here.
 See, if you know mappings, you don't even
[01:55:44]
 have to do conditions like this, because the mapping basically takes care
 of the conditions for you. I can rename it so, uh, watch a map.
 Maybe, maybe I'll make more sense of you guys, watch a map.
 So I'm selecting a button from the button map. [BLANK_AUDIO]
 And this is optional, you don't have to do it like this, but
 it's useful if you want to go on to shorten your code and
 just imagine if you have a lot of buttons to take from.
[01:56:43]
 You're gonna have to do it if statement for all of them
 No, but the mapping is just a wrong minor
 Well, you saw you also have to make this two
 And this was this one's pretty straightforward
 Signing model is that button sign out models this So now, I'll move this way.
 Okay, time after the break. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [ Pause ] Okay, we're back from the break.
 And this is the third hour of class and you can work on the upcoming assignment, Capstone
[02:07:55]
 Finality.
 By adding the artificial intelligence and finishing touches to the capstone project.
 I went over, let's see, persist in login and login expiration.
 The next coming days, I'll do a walkthrough for the sign-up feature
 and the other one for the editable account feature.
 I'm going to start the breakout rooms now.
 And they will be open. 41 minutes. Yeah. [BLANK_AUDIO]
[02:09:10]
 Yeah.
 [BLANK_AUDIO] Okay, break our rooms are open.
 Let me check the
 many evaluation
 week eight.
 Not call names or no week nine. Okay.
 So Chris, I'm going to, you're, looks like you're the first one in the, in the waiting list.
[02:10:21]
 So I'll meet you in the breakout room. [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] I just want to provide an update here. [BLANK_AUDIO] Okay, I'm going to share my screen here.
 I'm going to provide you guys with an update.
 Let me just get to the proper screen. Okay. So here in the announcements.
 Change the due date.
 For the capsule finale is due Thursday the 15th before class.
 So that's due
 next week instead
[02:40:50]
 because i realized that i'm going to
 provide all of the uh assignment corrections this week so it's
 it's going to be pretty tough for you to you know work on the capstone and the corrections at the same time.
 I mean, it's going to just add more stuff because you might have been in the impression
 that your capstone was in good standing.
 But then when you see the corrections, you might feel like it's coming all, it's going to come down on you all like a, like a
 waterfall or an avalanche. So going to relieve you of some of that stress, because the
[02:41:37]
 corrections are going to come in the assignment grades are going to come in this week. So at least if these are going to come in like a
 avalanche or a waterfall or something at least pushing this by one week will soften the blow. If you take a look at it here.
 By making it do next week, it pushes the late credit.
 One week after.
 Okay, so that should soften the blow and give you some relief.
 And hopefully this works out.
 Put you in a good position to manage the workload and to finish level four on the high
[02:42:57]
 note.
 Since there's not much time in the class right now, I'm just going to continue inverting some of the state variables here.
 So I just made an announcement and now I'm going to.
 And the remaining last time.
 Just converting state variables.
 Okay, so this is sign in area all done.
 Let's see, the sign-out modal have any state variables. Nope. About sign-in modal. Oh yeah, it has an error message here. Let's see, do I need that?
[02:44:12]
 Oh, yes, that's going to appear in the TININ model.
 Okay.
 So basically this message is if you try to sign in and it's a wrong password or email,
 you're going to get a error message.
 So that's where that state variable is stored.
 That's what the state variable is storing, that error message.
 So I'm going to look at this as a reference to keep me on track with the store.
[02:44:52]
 What is the store deal with?
 It has to deal with storing the state variables.
 So that's going to be sign sign in modal error message sign in modal error message at an empty string like it is over here.
 Now the selector.
 So I put these in order.
 So I just change the variables. Now I'm going to change the editor selector. error message.
 Sign in the mobile error message. Okay. So that's the selector. Now to go into the component. Make sure it's selected.
[02:46:37]
 So I'm not going to use this anymore. Going to use the selector now.
 Error message.
 That one is going to use the selector.
 And how do I select it?
 Select sign in modal error message.
 OK, so I've got it selected. Now time for the action.
 Right here. So this one's not going to be a one-liner anymore.
[02:47:31]
 I'm going to split it into two lines.
 One for the action and then one for the dispatch. I'm going to dispatch that action. One more thing to do.
 The reducer.
 That's in state centers.
 You can have a question. the
 the
 the
[02:48:58]
 if you're saying something I can't hear it
 if >> Nope, I can't hear you.
 >> How about now?
 >> Yeah.
 >> I hear it.
 >> Oh, I put the question in July cohort.
 It has a picture with it.
[02:49:19]
 >> Okay.
 Let's take a look at it.
 Let me just put a bookmark here.
 So Yuki has a question in July cohort. Let's take a look at it.
 Five minutes until the end of class.
 What does this error mean?
 Get warning in, let me see.
[02:49:57]
 In the working copy of this LFLB replaced by, that has to do with the carriage it's called carriage
 return end of line each like when you press enter and you make a new line, like this is say I'm typing something here, and I press enter, there's a invisible new line character there.
 And there's another invisible new line characters are different for Windows and for Linux.
 So this one is just telling you, because you might have your on a Windows system, so your new line character
 is going to be the Windows new line character.
 It's invisible, you can't see it, but Windows has its own new line character. It's invisible, you can't see it, but Windows has its own new
 line character. This one's telling you that it's going to change to make it fit for
[02:51:21]
 it's going to make it fit for the, uh, maybe for the Linux environment.
 I think CRLF is the Windows one.
 And LF is in the Linux environment.
 I forgot what it stands for, but it has something to do with the new line character.
 But that's okay.
 As long as the code works, it doesn't, we don't really care what they,
 what they use, what the system uses for the new line character.
[02:51:55]
 So, we'll see if we find it. >> Yeah, put the disk folder and ignore, but for some reason,
 the comments still got to watch the commit to happen.
 >> Yeah, so, so main JS, this is the back end and this is in GitHub, right?
 >> Yeah.
 >> Or is it in GitHub?
 >> It's in GitHub. I wanted to do the, the
 remove cache, but it looked like it would just delete my whole disk folder. So I don't want to
[02:52:34]
 do it. So it's not going to delete your whole disk folder. You have to put the cache flag on it.
 And then it won't delete your disk folder. It will still be there. It just won't put it in
 Force control
 Basically, it won't commit it
 Okay, yeah, it came up as in the staged area came up as just a red D on each each one of them
 That what the each one of the files that were in the disk holder.
 So that was deleted.
[02:53:07]
 >> No, that's not going to delete it.
 As long as you put the cached -cache, it should be fine.
 Okay, I'm going to conclude the class here.
 Okay, so the brick out rooms are back.
 And in conclusion, we finished the expiring persistence
 practice.
 And I also started converting the state variables, but you have one minute to mark your
[02:53:35]
 attendance if you haven't done it yet.
 Other than that, class passes dismissed. That's the days lesson on the capstone finale. Remember tomorrow is.
 Student elaboration day.
 I'll stick around for a few minutes just in case there's.
 Any more questions? [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO] [BLANK_AUDIO]

///// FILE: "Level 4/transcripts/May 8, 2025 20-32.txt"

Transcript from May 8, 2025

[00:00:00]
 that user account has in there.
 But that doesn't make sense because I'm just reading it
 and I should only, I should be able to read it
 by only sending the email address.
 I should not have to send all the data to read the account.
 Because your read account has the parameter that's coming in
 is it just emailed or?
[00:00:20]
 Yeah, just targeted.
 So, I can't see that.
 It's right here. Target in the string.
 Pulling in the target email.
 Oh, yeah.
 What's the what's it returning?
 Returning user account.
[00:00:34]
 Oh, look, I think.
 Oh, wait.
 Oh, because you're.
 Is that target email?
 In user account.
 OK, so then. So then what you come back is user accounts should be what's coming back
 because it should be returning the entire account here.
[00:00:53]
 >> Target account.
 >> Target email goes to the email.
 >> That's what you're saying.
 >> Because user account hasn't been arranged.
 That's why you can't find it.
 >> But if it freaks out over target email. because user account hasn't been arranged. That's why you can't find it. You're right.
 You're right.
[00:01:06]
 But if we target email, it freaks out over target email.
 Yeah, but as for your sending to re-user account to run it.
 So the user account looks like it's the output
 for the expect area.
 So it wouldn't be--
 So it would be fixed because it doesn't need to have any of the dynamo DB crap in it, either.
 Because that's being pulled from the return.
[00:01:34]
 Dynamo DB client function.
 There's.
 Okay.
 Do you are all.
 I'm going to comment that out.
 Do you know you are all going to comment that out. And right now, I give you back to the return function because I'm called it nice client instead.
 No, it's supposed to be nice client. Okay.
[00:01:57]
 But you still need to activate nice client.
 You need to run your whatever you're, your. it's not you haven't imported it you have
 an assigned that nice client to and I do that in my crate here it is I did it
 this way I'm just copying it I found it I'm just copying it from the create function. Yeah, so there miss is gonna be new client over here
 There
 That's better. Yes, somewhat
 So it's returning to user accounts
[00:02:42]
 Where's it? What does it say if you just mouse over that user account type script area there on your test.
 Cannot find name user account because it should be get user account instead of get requests.
 Perhaps it should be get request.
 No, I have what user account.
 Yeah, it should be get request. No, I have a link to your account. Yeah, it should be kept request because you see your request object there, up top that you're using. Yeah, yeah, it should
 be request. Yeah.
 And how are your password down there? There's nothing that's in the process.
[00:03:23]
 I don't know why that was there.
 Okay so the function is, oh you know it's your table is your
 table named logins or login.
 Logins.
 Oh I'm sorry I thought it was a set table name.
 I forgot we added those.
 Fine, so there's that.
[00:03:41]
 Okay on the other side I think the since I thought your user >> I'm sorry. >> I'm sorry. >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
[00:03:52]
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
[00:03:59]
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry.
 >> I'm sorry. >> I'm sorry. >> I'm sorry. >> I'm sorry. >> I'm sorry. because it won't, but now it freaks out. - Yeah, no, it's 'cause that target email
 at the top is in the string.
[00:04:06]
 I thought it was an object originally,
 that's why I asked you to do that.
 You just wanna erase that,
 you can do that too, but erase that part.
 And erase that email property.
 - That's better.
 It's not freaking out anymore.
[00:04:36]
 And then
 for the response,
 have property put,
 yeah, put all those, but on the response side, where it says response.email,
 just put response because it's looking
 for that property.
 - We had to talk about that.
[00:04:57]
 - Let's talk that now too.
 Yeah, I wasn't originally looking for the property.
 Originally I was doing a TV.
 I was originally looking for the property originally. I was doing a TV.
 That what what okay so the output is user account on that side.
 Maybe it's user account.
 I don't know why it's right.
[00:05:23]
 What's what's do you know what's coming across in your user account object on the
 function like what what it's returning?
 Maybe put a debugger in there under act under the response, response on that.
 With function. Under your, like, on your, on your re-user account function on the right
 hand side there, where it's like returning the into account. Right here. Yeah, I'm just
 I don't know what it looks like. Remember, the fact this has to come first. So I don't
 know what the function returns. I have no idea. Oh, why is it set to, oh, no, no, no, no.
[00:06:08]
 Give that test.
 Okay, I'll skip all the last later tests.
 I'm only doing the first test.
 I would put a debugger under line 25 on the right side.
 Yeah. And I would put a debugger under line 12 on the left side.
 You're also, you know, you're not passing in a password.
 None of those other tasks.
[00:06:37]
 You have to pass your password to read the code.
 I'll just need to blow you.
 I think the password is inside of the user account, but I don't know if it's,
 I don't know if the password is inside the user account or response on the right side.
 Well, the primary key, the primary key on the table is email. Password should not be required,
 because the authentication is handled by the Dynamo of the BC grantees, so I don't need a password to access the table.
 Well, the, your, your use of password and the test below into
[00:07:14]
 easy.
 Where am I using a password in the chat?
 This test is not active.
 This test has to chip on it.
 Okay, I'm just saying that that password should be the
 password.
 This test is not even ready.
[00:07:26]
 This test has to totally be written. Yeah, I'm doing them one at a time. So something is going on
 here and does not like here. I guess it would just be email, but when I just put email it freaks out too.
 I would run the debugger and then check
 the right side to see what's inside of response and what's inside of user account.
 Yeah. I'm not sure I remember how to do that anymore. I'm not even in the back end. What the hell?
 Um, go to your, I think it's NPX.
 I would go to the package JSON file and put the under.
[00:08:12]
 >> I have to change the task because it's running the create task.
 You're right.
 It's still running the create test.
 >> And I don't think you need to run your server to run the test. >> No, you don't.
 >> But I didn't know that putting in the bug or in would help when running the test.
 I didn't know that was a thing.
 >> Because I was just troubleshooting on.
[00:08:43]
 But the test errors were saying it failed.
 I think it was not JavaScript. JavaScript console, you know, the, not to do that.
 It's called kill this terminal.
 I have never run the test in a debug terminal.
 It only works for me when I run the test in the debug terminal.
 Oh, they always run in the regular terminal for me when I run the test in the debug terminal.
 Oh, they always run in the regular terminal for me.
[00:09:30]
 They stopped.
 That doesn't tell me what the error or what the problem is.
 So it stopped the test.
 It doesn't stop not the debugger.
 Yeah, this is telling me nothing though. This is on the phone. I don't
 understand any of where the test is in this object anonymous thing or in
 probably not in global because global is usually like global variables and stuff.
[00:09:58]
 Maybe you could just try running it how you usually run it but put the I don't know if you use the debugger so the
 Circle's on the side
 Are there a work now check the right side
 What it worked now your debugger I
 Can't see anything
 You don't see that yellow arrow?
 I do, but that doesn't tell me anything.
[00:10:28]
 I'm hovering over and there's just as undefined.
 There's no messages.
 House over the response above it.
 The other one, the response, const response, mouse over that.
 Nothing's happening.
 The const response, can you mount the button?
 Yeah, there it goes. It wasn't happening.
[00:10:53]
 As returning, it's 100.
 Okay, so you want to sense your online 26.
 It says, "Let user account mouse over that.
 The user account. Just hold it for a second
 It give a little data back
 Yeah, for the line 26
 I think you'd want to delete that line 26 or comment it out because
[00:11:19]
 Or actually I don't know because what what it's doing on line 26 is it's only are actually
 no, I think you keep the line 26. I think it's supposed to be working.
 But look, when a hover over here, it does get to have the data down here in the debugger.
 It just doesn't, it just does, now it's got a TypeScript error. Cannot find my user again. Yeah, I think I have to declare it up here.
 Yeah, because that's where it's declaring a zero account.
 Yeah, so it's returning stuff.
 Okay, if I miss, but the test is failing because it says email is not defined.
[00:12:08]
 In the user account is the property actually called email or is it called something else.
 It's called email.
 No, because you know what user account.
 Wait, what?
 I don't know why it's not working. It's close.
 Mind you, it's very close.
 It's just not quite there. I'm not sure.
[00:12:59]
 I did it.
 The way I did it was I had a full account coming in.
 And then I split the account apart in the range.
 And then check properties.
 I had to request a read in the create to validate some stuff.
 So in order to do that, I had the new client send, get command.
 Let me go. [no audio]
[00:13:49]
 Doug gets should work though.
 Yeah, the doc gets should work.
 I mean it is. It's returning it. The task is not getting it. [ Pause ]
 >> Oh, wait.
 No.
 No, that's not it.
 What the heck?
[00:14:35]
 This is my big time now, Jim.
 >> Try putting that part email in, in, in, in, in, in.
 >> In quote. I had it in quote to originally
 have to go to a I don't know why I took the quote to a but I
 go to say the wrong word when I mean quotes I always say
 parentheses. I know I knew what you meant you're good. I always
 confused Mr. Willows I want to I want to say it.
[00:15:02]
 always confuse Mr. World as I want to say it.
 He's not doing it.
 I don't know why he's just about it.
 Stop that. Do it. [no audio]
 Do it.
 [no audio]
 Oh, expected path name received path brackets.
[00:15:35]
 Oh, oh, there's no name in the database for this row, probably.
 [no audio]
 Okay.
 Let me go check that. Close the
 out of it. I close that out of everything because I needed a break.
 Oh, yeah, it shows you the receipt value shows you what's in that.
 The data. Yeah, it's missing. Yeah, it received an
[00:16:02]
 undefined for the for the name, which probably means I don't have a name in that.
 That there's also a property for his active.
 There is a case of thing, but that one usually has true in it because that most of them to true.
 See, I think we'll have the property.
 Those if you're using those. >> I think it's the dynamo DB.
 I think the column is blank for
 name on this email address.
[00:16:38]
 Because that's why you would get.
 >> But are you still looking for it?
 >> It's active.
 >> Yeah, it's coming back. It's true. because that's why you would get. But are you still looking for it? Is active and
 Yeah, it's coming back as true right here.
 It's come back as true.
 I know by intense.
[00:16:51]
 We're not looking for it.
 So I was wondering if you were actually using it or not.
 Yeah, I took out the user ID and the created at date.
 I am trying to use the executive because I don't like to do
 eat people. I like to deactivate them.
 Don't forget the, um,
 let me call it.
[00:17:20]
 Oops.
 I was looking on the other screen.
 Yeah, this one doesn't have a name. That's why it's
 with that.
 With the name with, um,
 um, they have also in the,
 there,
[00:17:36]
 says there's a phone in there as well.
 Yeah, there's a phone. It's come back with the phone. I know I have to angle it.
 I have to go check property for that too.
 No, I had to handle it over here.
 If. [ Pause ]
 Oh man, I'd just check them all for blanks.
 Just sucks.
[00:19:17]
 Okay. So I had to figure out how to write this name. All right, I'm going to use one that has data for this test.
 And then
 I'm going gonna use one.
 I'm gonna make a new test for when something is blank.
 Because, [no audio] Alright, we don't care about this response.
 Anybody want to reduce care about the contents?
 [no audio] Nope, still going.
[00:20:17]
 Why is email on the phone? We know it has an email property, I don't have the test for it. really should not be querying for a password either that's a security flaw.
 Something is not working. [ Pause ]
 The phone is missing